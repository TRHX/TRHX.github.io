<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>极验业务安全，深知 V2 业务风控逆向分析</title>
      <link href="/article/062/"/>
      <url>/article/062/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/captcha_reverse.png" alt="captcha_reverse"></p><blockquote><p><strong>极验全家桶，交流请咨询微信：IT-BOB</strong><br><strong>极验全家桶，交流请咨询微信：IT-BOB</strong><br><strong>极验全家桶，交流请咨询微信：IT-BOB</strong></p></blockquote><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#shen-zhi-jian-jie">深知简介</a></li><li><a href="#zhua-bao-fen-xi">抓包分析</a></li><li><a href="#ni-xiang-fen-xi">逆向分析</a><ul><li><a href="#huo-qu-h-zhi">获取 h 值</a></li><li><a href="#huo-qu-e-zhi">获取 e 值</a></li><li><a href="#huo-qu-l-zhi">获取 l 值</a></li><li><a href="#jin-yi-bu-chu-li-l">进一步处理 l</a></li></ul></li><li><a href="#jie-guo-yan-zheng">结果验证</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><p><img src="https://cdn.itbob.cn/img/article/062/01.gif" alt="01"></p><ul><li>目标：某验深知 V2 业务风控逆向分析</li><li>主页：<code>aHR0cHM6Ly93d3cuZ2VldGVzdC5jb20vZGVtby9kay12Mi5odG1s</code></li></ul><h2><span id="shen-zhi-jian-jie">深知简介</span></h2><p>某验深知通过无感采集客户端数据，对用户的环境、标识、行为操作等进行智能化分析，结合业务场景有效识别有潜在风险的用户。整个识别过程不干扰用户，不打断业务既有流程。完整通讯流程如下：</p><p><img src="https://cdn.itbob.cn/img/article/062/02.jpg" alt="02"></p><h2><span id="zhua-bao-fen-xi">抓包分析</span></h2><p>访问首页，会引入一个 <code>v2.sense.js</code>，后面接了个 <code>id</code>，需要将其提取出来，后续有用到，当然一般情况下，同一个业务这个 <code>id</code> 应该是一样的，直接复制下来写死也行。</p><p><img src="https://cdn.itbob.cn/img/article/062/03.png" alt="03"></p><p>接着有个 <code>gettype</code> 的请求，这里主要返回一些资源路径，其中有个 <code>gct.xxx.js</code>，这个 JS 名称每隔一段时间就会变化，这个 JS 会生成一个键值对，例如 <code>&#123;'xnbw': '1158444372'&#125;</code>，JS 变化，这个键值对也会变化，这个键值对参与了后面加密参数的生成，在某验系列产品中都有这个东西，少量测试将其固定发现也可以通过验证，盲猜大量请求或者某些校验严格的网站可能有影响，建议还是动态去请求这个 JS 来获取最新的键值对，这个后文具体再说。</p><p><img src="https://cdn.itbob.cn/img/article/062/04.png" alt="04"></p><p>然后是 <code>judge</code> 的请求，这个请求页面一加载就完成了，不需要手动点击请求，其中 <code>Query String Parameters</code> 里有个 <code>app_id</code> 就是我们前面提到的 <code>id</code>，<code>Request Payload</code> 就是一串超长的字符串，这个也是我们需要逆向的参数。该请求如果验证成功，会返回一个 <code>session_id</code>。</p><p><img src="https://cdn.itbob.cn/img/article/062/05.png" alt="05"></p><p><img src="https://cdn.itbob.cn/img/article/062/06.png" alt="06"></p><p>然后就是业务接口了，本例中业务接口是 <code>verify-dk-v2</code>，也就是一个登录接口，带上前面 <code>judge</code> 接口返回的 <code>session_id</code> 即可请求成功。</p><p><img src="https://cdn.itbob.cn/img/article/062/07.png" alt="07"></p><p><img src="https://cdn.itbob.cn/img/article/062/08.png" alt="08"></p><h2><span id="ni-xiang-fen-xi">逆向分析</span></h2><p>由于我们逆向的参数 <code>Request Payload</code> 没有键名导致不能直接搜索关键字，所以只能跟栈或者下个 XHR 断点，跟栈可以在 <code>sense.2.3.0.js</code> 第 6144 行找到一个 <code>e + h[AUJ_(1173)]</code>，这个就是正确的 <code>Request Payload</code> 值。</p><p><img src="https://cdn.itbob.cn/img/article/062/09.png" alt="09"></p><p>上图中其实核心代码就四行，后文也是围绕这四行代码来分析的：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> h = o[AUJ_(<span class="hljs-number">1156</span>)]()  , e = CoUE[ymDv(<span class="hljs-number">24</span>)](NFeB)  , l = EbF_[ymDv(<span class="hljs-number">409</span>)](e, h[ymDv(<span class="hljs-number">1194</span>)])  , e = DWYi[ymDv(<span class="hljs-number">1137</span>)](l)</code></pre><h3><span id="huo-qu-h-zhi">获取 h 值</span></h3><p>先来看 h 的值，由一个方法生成一个对象，对象里面分别是 <code>aeskey</code> 和 <code>rsa</code>，每次也都是随机变化的。</p><p><img src="https://cdn.itbob.cn/img/article/062/10.png" alt="10"></p><p>继续跟到这个方法里，重点在于 e 和 t 的值，最后返回的就是 <code>&#123;aeskey: e, rsa: t&#125;</code>。</p><p><img src="https://cdn.itbob.cn/img/article/062/11.png" alt="11"></p><p>先看这个 e 的值，也就是 <code>RwyT()</code> 方法，搞过某验其他产品的就知道这里是 16 位随机值。</p><p><img src="https://cdn.itbob.cn/img/article/062/12.png" alt="12"></p><p>然后 t 的值，和某验其他系列产品一样，用到了 RSA 加密算法，这里图中 <code>BPqG()</code> 就是 RSA 算法，t 的值就是 RSA 加密后的结果，扣的时候注意找到算法开头的地方，将整个 <code>BPqG()</code> 方法扣下来即可。</p><p><img src="https://cdn.itbob.cn/img/article/062/13.png" alt="13"></p><p><img src="https://cdn.itbob.cn/img/article/062/14.png" alt="14"></p><h3><span id="huo-qu-e-zhi">获取 e 值</span></h3><p>接下来是 e 的值，<code>e = CoUE[ymDv(24)](NFeB)</code>，很明显是将 <code>NFeB</code> 的值进行了处理，<code>NFeB</code> 是个对象，里面有一些 <code>data</code>、<code>id</code> 等信息，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/062/15.png" alt="15"></p><p>所以我们得先找一下 <code>NFeB</code> 这个值是怎么来的，直接搜索发现只有四个地方，在第 6109 行就是定义的地方，挨个看，首先有个 s 参数，将 id 传入到一个函数进行处理，函数没啥特别的，直接扣就行，通常经过处理后，s 的值为空，即 <code>s=&quot;&quot;</code>。</p><p><img src="https://cdn.itbob.cn/img/article/062/16.png" alt="16"></p><p>再来看有个 u 值，由一个方法生成了一大串包含很多感叹号的字符串，本案例实际测试中，直接将这个值置空也行，可能其他校验严格或者大批量请求的情况下，说不定也会校验的，所以我们最好也跟进去找一下生成逻辑。</p><p><img src="https://cdn.itbob.cn/img/article/062/17.png" alt="17"></p><p>跟进这个方法，里面是一些浏览器环境的值，比如屏幕高宽、canvas、ua、浏览器插件、时间、时区、语言等等，基本上都能写死，后续会将这些值以 <code>!!</code> 相连接最终生成 u 的值。</p><p><img src="https://cdn.itbob.cn/img/article/062/18.png" alt="18"></p><p>然后继续看，接下来是 c 值，是一个对象，值为 <code>&#123;&quot;key&quot;:0,&quot;value&quot;:[]&#125;</code>，我这里直接写死了。</p><p><img src="https://cdn.itbob.cn/img/article/062/19.png" alt="19"></p><p>再往下就是 <code>NFeB</code> 了：</p><p><img src="https://cdn.itbob.cn/img/article/062/20.png" alt="20"></p><p>Unicode 转换一下，简单解一下混淆，就长下面这样：</p><pre><code class="hljs javascript">NFeB = &#123;    <span class="hljs-string">&quot;id&quot;</span>: a[<span class="hljs-string">&quot;id&quot;</span>],    <span class="hljs-string">&quot;page_id&quot;</span>: a[<span class="hljs-string">&quot;page_id&quot;</span>],    <span class="hljs-string">&quot;lang&quot;</span>: a[<span class="hljs-string">&quot;lang&quot;</span>] || AUJ_(<span class="hljs-number">31</span>),    <span class="hljs-string">&quot;data&quot;</span>: &#123;        <span class="hljs-string">&quot;insights&quot;</span>: u || <span class="hljs-literal">null</span>,        <span class="hljs-string">&quot;track_key&quot;</span>: c[<span class="hljs-string">&quot;value&quot;</span>] ? c[<span class="hljs-string">&quot;key&quot;</span>] : <span class="hljs-literal">null</span>,        <span class="hljs-string">&quot;track&quot;</span>: c[<span class="hljs-string">&quot;value&quot;</span>] || <span class="hljs-literal">null</span>,        <span class="hljs-string">&quot;ep&quot;</span>: o[<span class="hljs-string">&quot;KZrg&quot;</span>](i),        <span class="hljs-string">&quot;eco&quot;</span>: <span class="hljs-built_in">window</span>[<span class="hljs-string">&quot;GEERANDOMTOKEN&quot;</span>] || <span class="hljs-string">&quot;&quot;</span>,        <span class="hljs-string">&quot;ww3&quot;</span>: <span class="hljs-string">&quot;&quot;</span>    &#125;&#125;;</code></pre><p><code>id</code> 不用说，<code>page_id</code> 就是个时间戳，<code>lang</code> 中文就是 <code>zh-cn</code>，<code>insights</code> 是前面得到的 <code>u</code> 值，<code>track_key</code>、<code>track</code> 取 <code>c</code> 的键和值，<code>ep</code> 将 <code>i</code> 传入了一个函数进行处理，<code>i</code> 是固定的字符串 <code>client</code>，这个 <code>KZrg</code> 方法可以跟进去看看，里面其实有很多都是定值，唯一需要注意的是 <code>t[&quot;tm&quot;]</code> 这个值，和某验其他系列一样，是 <code>window.performance.timing</code> 的值，自己获取一下时间戳随机加减伪造一下就行了。</p><p><img src="https://cdn.itbob.cn/img/article/062/21.png" alt="21"></p><p>然后就是 <code>eco</code> 的值，取的 <code>window.GEERANDOMTOKEN</code>，打印一下 window，除了有这个 token 以外，还可以看到 <code>localStore</code>、<code>session</code> 里面也有这个值。</p><p><img src="https://cdn.itbob.cn/img/article/062/22.png" alt="22"></p><p><img src="https://cdn.itbob.cn/img/article/062/23.png" alt="23"></p><p>由于某验的 JS 都是混淆后的，不太好定位这个值生成的地方，所以拿出我们的 Hook 大法，先清除一下缓存，不然的话是 Hook 不到值的，Hook 代码如下：</p><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> token = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-built_in">Object</span>.defineProperty(<span class="hljs-built_in">window</span>, <span class="hljs-string">&#x27;GEERANDOMTOKEN&#x27;</span>, &#123;        <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;GEERANDOMTOKEN-&gt;&#x27;</span>, val);            <span class="hljs-keyword">debugger</span>;            token = val;            <span class="hljs-keyword">return</span> val;        &#125;,        <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;            <span class="hljs-keyword">return</span> token;        &#125;    &#125;);&#125;)();</code></pre><p><img src="https://cdn.itbob.cn/img/article/062/24.png" alt="24"></p><p>断下后往前跟栈，<code>window[o] = t</code>，<code>o</code> 就是 <code>GEERANDOMTOKEN</code>，<code>t</code> 就是我们想要的值。</p><p><img src="https://cdn.itbob.cn/img/article/062/25.png" alt="25"></p><p>往上就可以找到 <code>t</code> 的生成方法，核心就是生成一个 32 位的随机字符串，然后加上时间戳，再进行 MD5 加密得到最终值，生成位置以及实现的代码如下：</p><p><img src="https://cdn.itbob.cn/img/article/062/26.png" alt="26"></p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> MD5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;md5&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getToken</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">var</span> t = MD5(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = [<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;G&quot;</span>,<span class="hljs-string">&quot;H&quot;</span>,<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;J&quot;</span>,<span class="hljs-string">&quot;K&quot;</span>,<span class="hljs-string">&quot;L&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-string">&quot;O&quot;</span>,<span class="hljs-string">&quot;P&quot;</span>,<span class="hljs-string">&quot;Q&quot;</span>,<span class="hljs-string">&quot;R&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>,<span class="hljs-string">&quot;T&quot;</span>,<span class="hljs-string">&quot;U&quot;</span>,<span class="hljs-string">&quot;V&quot;</span>,<span class="hljs-string">&quot;W&quot;</span>,<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;Y&quot;</span>,<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;j&quot;</span>,<span class="hljs-string">&quot;k&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;m&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;o&quot;</span>,<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;q&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,<span class="hljs-string">&quot;s&quot;</span>,<span class="hljs-string">&quot;t&quot;</span>,<span class="hljs-string">&quot;u&quot;</span>,<span class="hljs-string">&quot;v&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;z&quot;</span>], n = <span class="hljs-string">&quot;&quot;</span>, r = <span class="hljs-number">0</span>; r &lt; e; r++)            n += t[<span class="hljs-built_in">parseInt</span>(<span class="hljs-number">61</span> * <span class="hljs-built_in">Math</span>.random(), <span class="hljs-number">10</span>)];        <span class="hljs-keyword">return</span> n;    &#125;(<span class="hljs-number">32</span>) + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime());    <span class="hljs-keyword">return</span> t;&#125;</code></pre><p>当你把以上这些参数都搞完了，你可能认为都齐了，其实不然，后面接着还有一句 <code>Yvwp(NFeB, r)</code>，将 r 的值增加到了 <code>NFeB</code> 里，这个 r 的值类似于 <code>&#123;olbo: &quot;1588069361&quot;&#125;</code>，这个键值对都是每隔一段时间会变的，这个在某验系列其他文章里也提过。</p><p><img src="https://cdn.itbob.cn/img/article/062/27.png" alt="27"></p><p>进一步分析，这个 r 是传进来的，所以往上跟栈，有个 <code>r[psPG(1183)]()</code> 方法就生成了这个对象：</p><p><img src="https://cdn.itbob.cn/img/article/062/28.png" alt="28"></p><p>继续跟到这个方法里去，首先定义了 e 这个对象，然后赋值 <code>e = &#123;ep: &quot;test data&quot;, lang: &quot;zh&quot;&#125;</code>，然后经过 <code>window[tYlM(1126)]()</code> 方法处理后，e 里面就新增了 <code>&#123;olbo: &quot;1588069361&quot;&#125;</code>，后续将 ep 和 lang 两个值删除后返回。</p><p><img src="https://cdn.itbob.cn/img/article/062/29.png" alt="29"></p><p>所以我们继续跟进 <code>window[tYlM(1126)]()</code> 方法，会跳转到 gct.xxxx.js 里，这个 JS 就是我们开头讲过的，他的名称会每隔一段时间变化，内容也会变，所以导致生成的键值对也会变化，继续跟，有个 <code>t[e] = xxx</code> 的语句，其中 e 和等号右边的值，就是我们需要的键值对。</p><p><img src="https://cdn.itbob.cn/img/article/062/30.png" alt="30"></p><p>这个键值对在我们本地也可以动态获取，只需要请求正确的 JS 文件，将要调用的方法全局导出就行了，以下给一个我的处理方法示例（注意里面请求 url 已经脱敏处理，所以不可直接运行，自行抓包补上）：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> execjs<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> loggerheaders = &#123;    <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&quot;</span>,&#125;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_gct</span>():</span>    url = <span class="hljs-string">&quot;https://dkapi.脱敏处理.com/deepknow/v2/gettype&quot;</span>    params = &#123;        <span class="hljs-string">&quot;callback&quot;</span>: <span class="hljs-string">&quot;脱敏处理_&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time.time() * <span class="hljs-number">1000</span>))    &#125;    response = requests.get(url, headers=headers, params=params).text    response = json.loads(re.findall(<span class="hljs-string">r&quot;geetest_\d+\((.*?)\)&quot;</span>, response)[<span class="hljs-number">0</span>])    <span class="hljs-comment"># gettype 接口返回的 gct.xxx.js 的地址</span>    gct_path = <span class="hljs-string">&quot;https://static.脱敏处理.com&quot;</span> + response[<span class="hljs-string">&quot;gct_path&quot;</span>]    logger.info(<span class="hljs-string">&quot;gct_path: %s&quot;</span> % gct_path)    gct_js = requests.get(gct_path, headers=headers).text    <span class="hljs-comment"># 正则匹配需要调用的方法名称</span>    function_name = re.findall(<span class="hljs-string">r&quot;\)\)\&#123;return (.*?)\(&quot;</span>, gct_js)[<span class="hljs-number">0</span>]    <span class="hljs-comment"># 查找需要插入全局导出代码的位置</span>    break_position = gct_js.find(<span class="hljs-string">&quot;return function(t)&#123;&quot;</span>)    <span class="hljs-comment"># window.gct 全局导出方法</span>    gct_js_new = gct_js[:break_position] + <span class="hljs-string">&quot;window.gct=&quot;</span> + function_name + <span class="hljs-string">&quot;;&quot;</span> + gct_js[break_position:]    <span class="hljs-comment"># 添加自定义方法调用 window.gct 获取键值对</span>    gct_js_new = <span class="hljs-string">&quot;window = global;&quot;</span> + gct_js_new + <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    function getGct()&#123;</span><span class="hljs-string">        var e = &#123;&quot;lang&quot;: &quot;zh&quot;, &quot;ep&quot;: &quot;test data&quot;&#125;;</span><span class="hljs-string">        window.gct(e);</span><span class="hljs-string">        delete e[&quot;lang&quot;];</span><span class="hljs-string">        delete e[&quot;ep&quot;];</span><span class="hljs-string">        return e;</span><span class="hljs-string">    &#125;&quot;&quot;&quot;</span>    gct = execjs.<span class="hljs-built_in">compile</span>(gct_js_new).call(<span class="hljs-string">&quot;getGct&quot;</span>)    logger.info(<span class="hljs-string">&quot;gct: %s&quot;</span> % gct)    <span class="hljs-keyword">return</span> gct</code></pre><p>到这里我们 <code>NFeB</code> 就生成完毕了，回到 <code>e</code> 的值，这里其实就是把 <code>NFeB</code> 转成字符串，直接 <code>JSON.stringify()</code> 即可。</p><p><img src="https://cdn.itbob.cn/img/article/062/31.png" alt="31"></p><h3><span id="huo-qu-l-zhi">获取 l 值</span></h3><p>l 的值比较简单，就是将前面生成的 <code>h[&quot;aeskey&quot;]</code> 作为 key，<code>e</code> 作为待加密字符串，经过 AES 加密后即可得到 l 的值。</p><p><img src="https://cdn.itbob.cn/img/article/062/32.png" alt="32"></p><p>本地复现如下（有些变量名称不一样无影响，我是直接复用的某验其他产品的方法）：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;crypto-js&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aesEncrypt</span>(<span class="hljs-params">e, i</span>) </span>&#123;    <span class="hljs-keyword">var</span> key = CryptoJS.enc.Utf8.parse(i),    iv = CryptoJS.enc.Utf8.parse(<span class="hljs-string">&quot;0000000000000000&quot;</span>),    srcs = CryptoJS.enc.Utf8.parse(e),    encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;        <span class="hljs-attr">iv</span>: iv,        <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,        <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7    &#125;);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> r = encrypted, o = r.ciphertext.words, i = r.ciphertext.sigBytes, s = [], a = <span class="hljs-number">0</span>; a &lt; i; a++) &#123;        <span class="hljs-keyword">var</span> c = o[a &gt;&gt;&gt; <span class="hljs-number">2</span>] &gt;&gt;&gt; <span class="hljs-number">24</span> - a % <span class="hljs-number">4</span> * <span class="hljs-number">8</span> &amp; <span class="hljs-number">255</span>;        s.push(c);    &#125;    <span class="hljs-keyword">return</span> s;&#125;</code></pre><h3><span id="jin-yi-bu-chu-li-l">进一步处理 l</span></h3><p>最后一步 <code>e = DWYi[ymDv(1137)](l)</code>，将 l 的值经过了 <code>tc_t</code> 这个方法进行处理，就会得到最终 <code>Request Payload</code> 的一部分。</p><p><img src="https://cdn.itbob.cn/img/article/062/33.png" alt="33"></p><p>跟进这个 <code>tc_t</code> 方法，又是熟悉的 <code>return e[&quot;res&quot;] + e[&quot;end&quot;]</code>，同样和某验其他产品一样的。</p><p><img src="https://cdn.itbob.cn/img/article/062/34.png" alt="34"></p><p>跟到处理 e 的这个方法里，最后返回的是 <code>&#123;&quot;res&quot;: a, &quot;end&quot;: s&#125;</code>，没啥特别的，直接扣即可，这里注意和某验其他产品里的方法有些小区别，里面有些常量的值是不一样的，最开始我直接复用了其他产品的方法，发现结果是错的。</p><p><img src="https://cdn.itbob.cn/img/article/062/35.png" alt="35"></p><p>自此整个流程分析完毕，最终 <code>e + h[AUJ_(1173)]</code> 的值与 <code>Request Payload</code> 的值一致。</p><p><img src="https://cdn.itbob.cn/img/article/062/36.png" alt="36"></p><p><img src="https://cdn.itbob.cn/img/article/062/37.png" alt="37"></p><h2><span id="jie-guo-yan-zheng">结果验证</span></h2><p><img src="https://cdn.itbob.cn/img/article/062/38.png" alt="38"></p>]]></content>
      
      
      <categories>
          
          <category> 验证码逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 验证码逆向实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极验行为验证，四代滑块验证码逆向分析</title>
      <link href="/article/061/"/>
      <url>/article/061/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/captcha_reverse.png" alt="captcha_reverse"></p><blockquote><p><strong>极验全家桶，交流请咨询微信：IT-BOB</strong><br><strong>极验全家桶，交流请咨询微信：IT-BOB</strong><br><strong>极验全家桶，交流请咨询微信：IT-BOB</strong></p></blockquote><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#tong-xun-liu-cheng">通讯流程</a></li><li><a href="#yan-zheng-ma-liu-cheng-fen-xi">验证码流程分析</a></li><li><a href="#ni-xiang-fen-xi">逆向分析</a><ul><li><a href="#captcha-id-can-shu">captcha_id 参数</a></li><li><a href="#challenge-can-shu">challenge 参数</a></li><li><a href="#w-can-shu">w 参数</a></li></ul></li><li><a href="#jie-guo-yan-zheng">结果验证</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>目标：某验四代滑块验证码，w 参数逆向</li><li>主页：<code>aHR0cHM6Ly9ndDQuZ2VldGVzdC5jb20v</code></li><li>加密算法：RSA、AES</li></ul><h2><span id="tong-xun-liu-cheng">通讯流程</span></h2><p><img src="https://cdn.itbob.cn/img/article/061/01.png" alt="01"></p><h2><span id="yan-zheng-ma-liu-cheng-fen-xi">验证码流程分析</span></h2><p>进入网页后，打开开发者人员工具进行抓包，点击滑动拼图验证，此时还未点击按钮开始验证，抓到了一个名为 <code>load?captcha_id=xxx</code> 的包，<code>Query String Parameters</code> 包含了一些参数：</p><p><img src="https://cdn.itbob.cn/img/article/061/02.png" alt="02"></p><ul><li><code>captcha_id</code>：验证码 id，固定值，由 <code>adaptive-captcha-demo.js</code> 文件生成，后文分析；</li><li><code>challenge</code>：动态变化，由 <code>gtc4.js</code> 文件生成，后文分析；</li><li><code>client_type</code>：表示 web 端；</li><li><code>risk_type</code>：验证码类型，例如滑块为 slide，无感为 ai；</li><li><code>lang</code>：语言；</li><li><code>callback</code>：geetest_ + 时间戳，主要作用是防止缓存。</li></ul><p>响应预览中返回的关键内容如下，相较于三代，底图未做混淆：</p><p><img src="https://cdn.itbob.cn/img/article/061/03.png" alt="03"></p><ul><li><code>bg</code>：背景图片地址；</li><li><code>captcha_type</code>：验证码类型；</li><li><code>gct_path</code>：gct4 文件路径；</li><li><code>lot_number</code>：后续生成 pow_msg、w 的关键参数；</li><li><code>payload</code>：后续 verify 请求接口需要的参数；</li><li><code>datetime</code>：ISO 8601扩展格式的日期，后续生成 pow_msg 的关键参数；</li><li><code>process_token</code>：后续 verify 请求接口需要的参数；</li><li><code>slice</code>：滑块图片地址。</li></ul><p>点击按钮开始验证，弹出滑块验证码，滑动滑块，抓包到 <code>verify?captcha_id=xxx</code>，<code>Query String Parameters</code> 同样包含了一些参数：</p><p><img src="https://cdn.itbob.cn/img/article/061/04.png" alt="04"></p><ul><li><code>captcha_id</code>：与 load 接口请求头中的 captcha_id 一致；</li><li><code>client_type</code>：表示 web 端；</li><li><code>lot_number</code>：load 接口返回的；</li><li><code>risk_type</code>：与 load 接口中的一致，表示验证码类型；</li><li><code>payload</code>：load 接口返回的；</li><li><code>process_token</code>：load 接口返回的；</li><li><code>w</code>：加密参数，由轨迹、滑动时间、滑动距离、userresponse、device_id、pow_msg 等参数加密得到；</li><li><code>callback</code>：geetest_ + 时间戳，主要作用是防止缓存。</li></ul><p>响应预览中返回的内容如下，result 值为 fail 即校验失败，success 为校验通过，通过后携带 seccode 下的参数进行后续业务请求：</p><p><img src="https://cdn.itbob.cn/img/article/061/05.png" alt="05"></p><h2><span id="ni-xiang-fen-xi">逆向分析</span></h2><h3><span id="captcha-id-can-shu">captcha_id 参数</span></h3><p>全局搜索 <code>captcha_id</code>，跟进到 gt4.js 文件中：</p><p><img src="https://cdn.itbob.cn/img/article/061/06.png" alt="06"></p><p>进去后在第 307 行打上断点，刷新页面即会断住，此时 <code>captcha_id</code> 参数的值已经生成，同时 challenge 参数定义在下一行：</p><p><img src="https://cdn.itbob.cn/img/article/061/07.png" alt="07"></p><p>向上跟栈到 value，即 <code>adaptive-captcha-demo.js</code> 文件中，会发现其是个固定值，实际上这个值是每个网站不一样，是管理员在极验后台申请得到的：</p><p><img src="https://cdn.itbob.cn/img/article/061/08.png" alt="08"></p><h3><span id="challenge-can-shu">challenge 参数</span></h3><p>前面提到，<code>challenge</code> 参数定义在 <code>captcha_id</code> 参数的下一行，在 gt4.js 文件的第 309 行打下断点：</p><p><img src="https://cdn.itbob.cn/img/article/061/09.png" alt="09"></p><p>可以看到，challenge 参数的值由 <code>uuid</code> 函数生成，扣出即可。</p><h3><span id="w-can-shu">w 参数</span></h3><p>从 <code>verify?captcha_id=xxx</code> 接口的堆栈处跟栈进去：</p><p><img src="https://cdn.itbob.cn/img/article/061/10.png" alt="10"></p><p>打下断点滑动滑块断住后，向上跟栈到 s 处，如果做过某验三代滑块的话，第 6249 行有个很熟悉的东西，<code>&quot;\u0077&quot;: r</code>，<code>&quot;\u0077&quot;</code> 即字母 w 的 Unicode 值，r 即 w 参数的值：</p><p><img src="https://cdn.itbob.cn/img/article/061/11.png" alt="11"></p><p>r 参数定义在第 6237 行，e 也是跟三代类似的参数，r 是将 i 参数和转为字符串的 e 参数加密得到的：</p><p><img src="https://cdn.itbob.cn/img/article/061/12.png" alt="12"></p><p>向上跟栈，找到 e 参数中各部分定义生成的位置，跟到 <code>$_BHIH</code> 中，_ 中先生成了四个键值对：</p><p><img src="https://cdn.itbob.cn/img/article/061/13.png" alt="13"></p><p><code>passtime</code> 和 <code>track</code> 是熟悉的滑动时间和轨迹，<code>setLeft</code> 为识别出来的缺口距离，<code>userresponse</code> 定义在 19593 行， a 为 <code>setLeft</code> 参数的值，<code>t[$_GDFCG(1909)]</code> 为定值 1.0059466666666665：</p><pre><code class="hljs JavaScript">a / t[$_GDFCG(<span class="hljs-number">1909</span>)] + <span class="hljs-number">2</span></code></pre><p>接着跟到 <code>$_BCFj</code> 中，e 定义在第 6201 行，下面几行定义了 e 中的 <code>device_id</code>、<code>lot_number</code>、<code>pow_msg</code>、<code>pow_sign</code>：</p><p><img src="https://cdn.itbob.cn/img/article/061/14.png" alt="14"></p><p><code>device_id</code> 同一个网站是固定值，<code>lot_number</code> 是 load 响应返回的，控制台打印一下 <code>pow_msg</code>、<code>pow_sign</code> 的结果：</p><p><img src="https://cdn.itbob.cn/img/article/061/15.png" alt="15"></p><p><code>pow_msg</code> 很明显是由几部分组成的，<code>pow_sign</code> 经过加密，向上跟栈到 init 中，分别定义在第 5837 行和第 5838 行，为 d 字典的键，根据键名取值：</p><p><img src="https://cdn.itbob.cn/img/article/061/16.png" alt="16"></p><p>d 定义在第 5835 行，这部分还原一下就很明显了：</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> c = t[<span class="hljs-string">&quot;toDataURL&quot;</span>]()[<span class="hljs-string">&quot;replace&quot;</span>](<span class="hljs-string">&quot;data:image/png;base64,&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)    , _ = <span class="hljs-keyword">new</span> w[<span class="hljs-string">&quot;default&quot;</span>][<span class="hljs-string">&quot;MD5&quot;</span>]()[<span class="hljs-string">&quot;hex&quot;</span>](c);a[<span class="hljs-string">&quot;options&quot;</span>][<span class="hljs-string">&quot;deviceId&quot;</span>] = _;<span class="hljs-keyword">var</span> h = a[<span class="hljs-string">&quot;options&quot;</span>]    , l = h[<span class="hljs-string">&quot;powDetail&quot;</span>]    , p = h[<span class="hljs-string">&quot;lotNumber&quot;</span>]    , f = h[<span class="hljs-string">&quot;captchaId&quot;</span>]    , d = v[<span class="hljs-string">&quot;default&quot;</span>](p, f, l[<span class="hljs-string">&quot;hashfunc&quot;</span>], l[<span class="hljs-string">&quot;version&quot;</span>], l[<span class="hljs-string">&quot;bits&quot;</span>], l[<span class="hljs-string">&quot;datetime&quot;</span>], <span class="hljs-string">&quot;&quot;</span>)</code></pre><p>跟进到 <code>v[&quot;default&quot;]</code> 中，函数定义在第 6945 行，于 6978 行打下断点：</p><p><img src="https://cdn.itbob.cn/img/article/061/17.png" alt="17"></p><p><code>pow_msg</code> 由 <code>_ + h</code> 得到，<code>_</code> 定义在第 6960 行：</p><pre><code class="hljs JavaScript">_ = i + <span class="hljs-string">&quot;|&quot;</span> + r + <span class="hljs-string">&quot;|&quot;</span> + n + <span class="hljs-string">&quot;|&quot;</span> + s + <span class="hljs-string">&quot;|&quot;</span> + t + <span class="hljs-string">&quot;|&quot;</span> + e + <span class="hljs-string">&quot;|&quot;</span> + o + <span class="hljs-string">&quot;|&quot;</span>;</code></pre><ul><li>i：<code>l[&quot;version&quot;]</code></li><li>r：<code>l[&quot;bits&quot;]</code></li><li>n：<code>l[&quot;hashfunc&quot;]</code></li><li>s：<code>l[&quot;datetime&quot;]</code></li><li>t：<code>f, h[&quot;captchaId&quot;]</code></li><li>e：<code>p, h[&quot;lotNumber&quot;]</code></li><li>o：<code>&quot;&quot;</code></li></ul><p>h 定义在第 6269 行，跟进去是 16 位随机数字符串，<code>pow_sign</code> 为 p，就是 <code>pow_msg</code> 经过 MD5 加密得到的：</p><p><img src="https://cdn.itbob.cn/img/article/061/18.png" alt="18"></p><p>至此这四个也分析完了，还差以下这部分：</p><p><img src="https://cdn.itbob.cn/img/article/061/19.png" alt="19"></p><p>em 等定值就不分析了，注意 <code>kqg5：&quot;1557244628&quot;</code>，这个参数值和三代滑块中一样，每隔几个小时会改变，向上跟栈到 <code>$_BCFj</code> 中，在第 6207 行打下断点，此时 e 中这个值还未生成：</p><p><img src="https://cdn.itbob.cn/img/article/061/20.png" alt="20"></p><p>下一行打下断点，下步断点，即执行完 <code>n[$_CBHIE(791)](e);</code> 后，这个参数值就生成了，证明是 <code>n[$_CBHIE(791)]</code> 方法生成的，跟进去：</p><p><img src="https://cdn.itbob.cn/img/article/061/21.png" alt="21"></p><p>跳转到第 5766 行，在第 5779 行打下断点，此时的 n 中还未生成此参数：</p><p><img src="https://cdn.itbob.cn/img/article/061/22.png" alt="22"></p><p>执行了 <code>_gct(n)</code> 后即生成：</p><p><img src="https://cdn.itbob.cn/img/article/061/23.png" alt="23"></p><p>可见其生成位置在 <code>_gct</code> 方法中，跟进去后到 gct4.js 文件，和三代大差不差：</p><p><img src="https://cdn.itbob.cn/img/article/061/24.png" alt="24"></p><p>可以将值导出，至此 e 就分析完了，接着回到第 6238 行，跟进到加密函数 <code>d[$_CBHHO(84)]</code> 中，定义在第 11669 行，<code>d[$_DIEHS(177)](c) + u</code> 即 r 参数的值，c 为一个大数组，u 明显也经过加密了，所以 r 参数的值就是数组 c 加密后再加上 u 得到的：</p><p><img src="https://cdn.itbob.cn/img/article/061/25.png" alt="25"></p><p>先跟进到 u，其定义在第 11705 行，解混淆后如下：</p><pre><code class="hljs JavaScript">u = <span class="hljs-keyword">new</span> l[<span class="hljs-string">&quot;default&quot;</span>]()[<span class="hljs-string">&quot;encrypt&quot;</span>](i);</code></pre><p>所以 u 是 i 经过加密后得到的，i 定义在第 11702 行：</p><pre><code class="hljs JavaScript">i = (<span class="hljs-number">0</span>,d[$_DIEIq(<span class="hljs-number">103</span>)])()</code></pre><p>跟进到 <code>d[$_DIEIq(103)]</code> 中，定义在第 852 行，又是熟悉的 16 位随机数：</p><p><img src="https://cdn.itbob.cn/img/article/061/26.png" alt="26"></p><p>i 是随机数，跟进到加密函数 <code>l[($_DIEHS(84))]</code> 中，在第 12725 行，于 12741 行打下断点，可以看到这里就是个 RSA 加密，扣代码或者直接引库即可：</p><p><img src="https://cdn.itbob.cn/img/article/061/27.png" alt="27"></p><p>回到 c 参数，c 参数的值为一个大数组，其定义在第 11705 行，解混淆后内容如下：</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> c = s[a][<span class="hljs-string">&quot;symmetrical&quot;</span>][<span class="hljs-string">&quot;encrypt&quot;</span>](e, i);</code></pre><p>e 之前分析完了，i 为随机数，两个参数已经分析完了，跟进到加密方法中，在第 12174 行，于 12186 行打下断点，控制台打印一下混淆部分内容，很熟悉的东西，这里就是 AES 加密，iv 为初始向量，加密模式为 CBC：</p><p><img src="https://cdn.itbob.cn/img/article/061/28.png" alt="28"></p><p>c 参数最后又被 <code>d[$_DIEHS(177)]</code> 函数加密，跟进后，定义在第 547 行，直接扣下来改改即可：</p><p><img src="https://cdn.itbob.cn/img/article/061/29.png" alt="29"></p><h2><span id="jie-guo-yan-zheng">结果验证</span></h2><p><img src="https://cdn.itbob.cn/img/article/061/30.png" alt="30"></p>]]></content>
      
      
      <categories>
          
          <category> 验证码逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 验证码逆向实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极验行为验证，三代滑块验证码逆向分析</title>
      <link href="/article/060/"/>
      <url>/article/060/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/captcha_reverse.png" alt="captcha_reverse"></p><blockquote><p><strong>极验全家桶，交流请咨询微信：IT-BOB</strong><br><strong>极验全家桶，交流请咨询微信：IT-BOB</strong><br><strong>极验全家桶，交流请咨询微信：IT-BOB</strong></p></blockquote><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#tong-xun-liu-cheng">通讯流程</a></li><li><a href="#zhua-bao-fen-xi">抓包分析</a></li><li><a href="#ni-xiang-fen-xi">逆向分析</a><ul><li><a href="#w-can-shu">w 参数</a><ul><li><a href="#u-can-shu">u 参数</a></li><li><a href="#l-can-shu">l 参数</a></li></ul></li><li><a href="#di-tu-huan-yuan">底图还原</a></li><li><a href="#cuo-wu-jie-guo">错误结果</a></li><li><a href="#jie-guo-yan-zheng">结果验证</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>目标：某验三代滑块验证码，底图还原及 w 参数逆向</li><li>验证码 demo 列表：<code>aHR0cHM6Ly93d3cuZ2VldGVzdC5jb20vZGVtby8=</code></li><li>滑块验证码：<code>aHR0cHM6Ly93d3cuZ2VldGVzdC5jb20vZGVtby9zbGlkZS1mbG9hdC5odG1s</code></li><li>加密算法：RSA、AES、MD5</li></ul><h2><span id="tong-xun-liu-cheng">通讯流程</span></h2><p>接口相关：</p><p><img src="https://cdn.itbob.cn/img/article/060/01.png" alt="01"></p><p>完整流程：</p><p><img src="https://cdn.itbob.cn/img/article/060/02.jpg" alt="02"></p><h2><span id="zhua-bao-fen-xi">抓包分析</span></h2><p>进入网页后，打开开发者人员工具进行抓包</p><p>1.未点击按钮进行验证之前，Network 中抓包到了以下信息：</p><p><img src="https://cdn.itbob.cn/img/article/060/03.png" alt="03"></p><p><code>register-slide?t=xxx</code>：注册滑块请求，响应预览中返回的信息中重要的是 gt 和 challenge，gt 是固定值，不同网页对应不同的 gt 值，类似于特征码，challenge 的值每次刷新页面都会变化，gt 参数会通过 url string 的形式传递给 gettype.php：</p><p><img src="https://cdn.itbob.cn/img/article/060/04.png" alt="04"></p><p><code>gettype.php?gt=xxx&amp;callback=xxx</code>：获取验证码，HTTP 请求中不同的请求方式和设置不同的 Content-Type 时，参数传递的方式会不一样，一般为 Query String Parameters、Form Data、Request Payload，这里是 Query String Parameters，在 GET 请求时，参数会以 url string 的形式进行传递，即 ? 后的字符串则为其请求参数，并以 &amp; 作为分隔符，这里传递了 gt 参数的值以及 callback，callback 为 geetest_ + 时间戳：</p><p><img src="https://cdn.itbob.cn/img/article/060/05.png" alt="05"></p><p>响应预览中返回了一些 js 文件及对应的版本号：</p><p><img src="https://cdn.itbob.cn/img/article/060/06.png" alt="06"></p><p>第一个<code> get.php?xxx</code>，url 中传递了一些参数，关键部分如下：</p><ul><li><code>gt</code>：register-slide 响应返回的 gt 值；</li><li><code>challenge</code>：register-slide 响应返回的 challenge 值；</li><li><code>w</code>：对轨迹、滑动时间等进行加密后的参数，该网站第一个 w 值可以直接置空；</li><li><code>callback</code>：geetest_ + 时间戳。</li></ul><p><img src="https://cdn.itbob.cn/img/article/060/07.png" alt="07"></p><p>响应内容如下，这里没什么需要注意的，feedback 就是某验的帮助中心：</p><p><img src="https://cdn.itbob.cn/img/article/060/08.png" alt="08"></p><p>2.点击按钮进行验证之后，Network 中抓包到了以下信息：</p><p><img src="https://cdn.itbob.cn/img/article/060/09.png" alt="09"></p><p>第一个 <code>ajax.php?xxx</code>，url 中传递了一些参数，关键部分如下：</p><ul><li><code>gt</code>：register-slide 响应返回的 gt 值；</li><li><code>challenge</code>：register-slide 响应返回的 challenge 值；</li><li><code>w</code>：对轨迹、滑动时间等进行加密后的参数，该网站第二个 w 值也可以直接置空；</li><li><code>callback</code>：geetest_ + 时间戳。</li></ul><p><img src="https://cdn.itbob.cn/img/article/060/10.png" alt="10"></p><p>响应返回验证码模式，滑块验证码为 slide，点选验证码为 click：</p><p><img src="https://cdn.itbob.cn/img/article/060/11.png" alt="11"></p><p>第二个 <code>get.php?xxx</code>，url 中传递了一些参数，关键部分如下：</p><ul><li><code>gt</code>：register-slide 响应返回的 gt 值；</li><li><code>challenge</code>：register-slide 响应返回的 challenge 值；</li><li><code>callback</code>：geetest_ + 时间戳。</li></ul><p><img src="https://cdn.itbob.cn/img/article/060/12.png" alt="12"></p><p>这个响应返回了很多关键内容：</p><ul><li><code>bg</code>：被打乱的带缺口背景图，需要还原，<code>372fe236d.webp</code></li></ul><p><img src="https://cdn.itbob.cn/img/article/060/13.png" alt="13"></p><ul><li><code>fullbg</code>：被打乱的完整背景图，需要还原，<code>7bfaaa72b.webp</code></li></ul><p><img src="https://cdn.itbob.cn/img/article/060/14.png" alt="14"></p><ul><li><code>slice</code>：滑块图片，不需要还原，<code>372fe236d.png</code></li></ul><p><img src="https://cdn.itbob.cn/img/article/060/15.png" alt="15"></p><ul><li><code>c</code>：关键参数，与后面 aa 参数的值有关，固定值；</li><li><code>s</code>：关键参数，与后面 aa 参数的值有关。</li></ul><p><img src="https://cdn.itbob.cn/img/article/060/16.png" alt="16"></p><p>第二个 <code>ajax.php?xxx</code>，url 中传递了一些参数，关键部分如下：</p><ul><li><code>gt</code>：register-slide 响应返回的 gt 值；</li><li><code>challenge</code>：register-slide 响应返回的 challenge 值 + 两位字符串，注意多了两位，是第二个 get.php?xxx 返回值中得到的；</li><li><code>w</code>：对轨迹、滑动时间等进行加密后的参数，需要通过逆向得到；</li><li><code>callback</code>：geetest_ + 时间戳。</li></ul><p><img src="https://cdn.itbob.cn/img/article/060/17.png" alt="17"></p><p>滑动滑块验证通过即会返回以下内容：</p><p><img src="https://cdn.itbob.cn/img/article/060/18.png" alt="18"></p><p>失败则会返回：</p><p><img src="https://cdn.itbob.cn/img/article/060/19.png" alt="19"></p><h2><span id="ni-xiang-fen-xi">逆向分析</span></h2><h3><span id="w-can-shu">w 参数</span></h3><p>跟到 w 参数的值方法很多，以下讲两种：</p><p>1.很简便，w 参数在 js 文件中有特征码，点击按钮进行验证之后，ctrl + shift + f 全局搜索 <code>&quot;\u0077&quot;</code>，因为 <code>\u0077</code> 就是 w 的 Unicode 编码，然后点击进入 slide.7.8.9.js 文件中，7.8.9 为当前版本，注意没点击验证的话是不会有这个 js 文件的：</p><p><img src="https://cdn.itbob.cn/img/article/060/20.png" alt="20"></p><p>进入后点击左下角 <code>&#123;&#125;</code> 大括号，格式化文件，再 ctrl + f  局部搜索 <code>&quot;\u0077&quot;</code>，只有一个结果，在第 6086 行，在第 6088 行打下断点，滑动滑块即会断住，h + u 即为 w 参数的值：</p><p><img src="https://cdn.itbob.cn/img/article/060/21.png" alt="21"></p><p>2.通过 Initiator 跟栈，跟进到 <code>$_CId</code> 中：</p><p><img src="https://cdn.itbob.cn/img/article/060/22.png" alt="22"></p><p>进去同样格式化后，会跳转到第 4583 行，在该行打下断点：</p><p><img src="https://cdn.itbob.cn/img/article/060/23.png" alt="23"></p><p>向上跟栈到 <code>$_CCBv</code> 中同样会找到刚刚的位置：</p><p><img src="https://cdn.itbob.cn/img/article/060/24.png" alt="24"></p><p>由以上分析可知，w 参数是 h 和 u 相加得到的，所以找到定义的位置，看看是怎么构造生成的，u 参数定义在第 6077 行，h 参数定义在第 6079 行，内容如下：</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> u = r[$_CAIAt(<span class="hljs-number">754</span>)](), l = V[$_CAIAt(<span class="hljs-number">353</span>)](gt[$_CAIAt(<span class="hljs-number">218</span>)](o), r[$_CAIAt(<span class="hljs-number">756</span>)]()), h = m[$_CAIAt(<span class="hljs-number">782</span>)](l)</code></pre><p>可以看到，h 参数是传入了 l 参数后经过 <code>m[$_CAIAt(782)]</code> 方法处理后得到的，所以依次往下分析，现在看看 u 参数是怎么生成的：</p><h4><span id="u-can-shu">u 参数</span></h4><p>u 参数通过 <code>r[$_CAIAt(754)]</code> 方法生成，选中后跟进到方法定义位置：</p><p><img src="https://cdn.itbob.cn/img/article/060/25.png" alt="25"></p><p>会跳转到第 6218 行，在 6227 行 return 处打下断点，重新拖动滑块，即会断住：</p><p><img src="https://cdn.itbob.cn/img/article/060/26.png" alt="26"></p><p>e 为 u 参数的值，其定义在第 6266 行：</p><pre><code class="hljs JavaScript">e = <span class="hljs-keyword">new</span> U()[$_CBGAZ(<span class="hljs-number">353</span>)](<span class="hljs-built_in">this</span>[$_CBGAZ(<span class="hljs-number">756</span>)](!<span class="hljs-number">0</span>));</code></pre><p>在控制台中打印输出一下各部分内容：</p><p><img src="https://cdn.itbob.cn/img/article/060/27.png" alt="27"></p><pre><code class="hljs JavaScript">e = <span class="hljs-keyword">new</span> U()[<span class="hljs-string">&quot;encrypt&quot;</span>](<span class="hljs-built_in">this</span>[<span class="hljs-string">&quot;$_CCEc&quot;</span>](!<span class="hljs-number">0</span>));</code></pre><p>从打印出来的结果可以看出，e 参数的值可能是将 16 位的随机字符串加密后得到的，跟进到 <code>this[$_CBGAZ(756)]</code> 中验证一下：</p><p><img src="https://cdn.itbob.cn/img/article/060/28.png" alt="28"></p><p>跳转到第 6208 行，在第 6214 行 return 处打下断点：</p><p><img src="https://cdn.itbob.cn/img/article/060/29.png" alt="29"></p><p><code>Ot</code> 即 16 为字符串，<code>Ot = rt()</code>，跟进到 <code>rt</code> 函数中，在第 4213 行，于第 4219 行打下断点后会发现，16 位字符串是由四个 <code>t()</code> 方法的结果相加得到的：</p><p><img src="https://cdn.itbob.cn/img/article/060/30.png" alt="30"></p><p>跟进到 <code>t()</code> 方法的定义位置，在第 4203 行，第 4208 行即为随机字符串算法：</p><p><img src="https://cdn.itbob.cn/img/article/060/31.png" alt="31"></p><p>还原混淆后内容如下，<code>Math.random()</code> 是随机选取大于等于 0.0 且小于 1.0 的伪随机 double 值，<code>toString(16)</code> 为十六进制字符串：</p><pre><code class="hljs javascript">(<span class="hljs-number">65536</span> * (<span class="hljs-number">1</span> + <span class="hljs-built_in">Math</span>[<span class="hljs-string">&quot;random&quot;</span>]()) | <span class="hljs-number">0</span>)[<span class="hljs-string">&quot;toString&quot;</span>](<span class="hljs-number">16</span>)[<span class="hljs-string">&quot;substring&quot;</span>](<span class="hljs-number">1</span>)</code></pre><p>JavaScript 复现：</p><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">random</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> random_str = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">4</span>; index++) &#123;        random_str += (<span class="hljs-number">65536</span> * (<span class="hljs-number">1</span> + <span class="hljs-built_in">Math</span>[<span class="hljs-string">&quot;random&quot;</span>]()) | <span class="hljs-number">0</span>)[<span class="hljs-string">&quot;toString&quot;</span>](<span class="hljs-number">16</span>)[<span class="hljs-string">&quot;substring&quot;</span>](<span class="hljs-number">1</span>);    &#125;    <span class="hljs-keyword">return</span> random_str;&#125;</code></pre><p><code>this[&quot;$_CCEc&quot;]</code> 分析完了，那 <code>new U()[&quot;encrypt&quot;]</code> 是什么呢，选中 <code>new U()</code> 后，从原型链中可以看到 <code>setPublic</code>，根据经验很有可能就是 RSA 加密设置公钥，加解密相关算法可以查看往期文章 <a href="https://www.itbob.cn/article/045/">CTF&amp;爬虫：掌握这些特征，一秒识别密文加密方式</a>：</p><p><img src="https://cdn.itbob.cn/img/article/060/32.png" alt="32"></p><p>跟进去查看一下：</p><p><img src="https://cdn.itbob.cn/img/article/060/33.png" alt="33"></p><p>跳转到第 2908 行，在第 2922 行断住后，<code>$_BACAs(332)</code> 的值为 <code>&quot;Invalid RSA public key&quot;</code>：</p><p><img src="https://cdn.itbob.cn/img/article/060/34.png" alt="34"></p><p>第 2908 行，ut 函数传入了两个值，t 为公钥值，e 为公钥模数，都是固定值：</p><ul><li><code>t</code>：<code>&quot;00C1E3934D1614465B33053E7F48EE4EC87B14B95EF88947713D25EECBFF7E74C7977D02DC1D9451F79DD5D1C10C29ACB6A9B4D6FB7D0A0279B6719E1772565F09AF627715919221AEF91899CAE08C0D686D748B20A3603BE2318CA6BC2B59706592A9219D0BF05C9F65023A21D2330807252AE0066D59CEEFA5F2748EA80BAB81&quot;</code></li><li><code>e</code>：<code>&quot;10001&quot;</code></li></ul><p>这里可以直接引库复现，也可以选择将算法部分扣下来，局部搜索 <code>var U = function</code>，在第 2043 行，将整个自执行函数扣下来，这里随机数后期写成固定值，后面也有随机数，不然会造成传参不匹配：</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> U = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-comment">// 此处过长，省略</span>&#125;();<span class="hljs-comment">// 随机数, 一组四个数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">t</span>(<span class="hljs-params"></span>) </span>&#123;    random_str = (<span class="hljs-number">65536</span> * (<span class="hljs-number">1</span> + <span class="hljs-built_in">Math</span>[<span class="hljs-string">&quot;random&quot;</span>]()) | <span class="hljs-number">0</span>)[<span class="hljs-string">&quot;toString&quot;</span>](<span class="hljs-number">16</span>)[<span class="hljs-string">&quot;substring&quot;</span>](<span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> random_str;&#125;<span class="hljs-comment">// 随机数, 四个数一组, 四组</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomStr</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> t() + t() + t() + t();&#125;<span class="hljs-comment">// u 值</span><span class="hljs-keyword">var</span> u = <span class="hljs-keyword">new</span> U()[<span class="hljs-string">&#x27;encrypt&#x27;</span>](getRandomStr());<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;u 参数的值为:&#x27;</span>, u);</code></pre><p>运行后报错提示，<code>QBLnx is not defined</code>：</p><p><img src="https://cdn.itbob.cn/img/article/060/35.png" alt="35"></p><p>其定义在第 136 行，是个函数对象，补上即可：</p><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">QBLnx</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;</code></pre><p>运行后报错提示，<code>$_IBAe is not a function</code>：</p><p><img src="https://cdn.itbob.cn/img/article/060/36.png" alt="36"></p><p>搜索后可知，其定义在第 128 行：</p><p><img src="https://cdn.itbob.cn/img/article/060/37.png" alt="37"></p><p>跟进过去将该部分扣下来：</p><pre><code class="hljs JavaScript">QBLnx.$_CM = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> QBLnx.$_Ak.$_DBGGT === <span class="hljs-string">&#x27;function&#x27;</span> ? QBLnx.$_Ak.$_DBGGT.apply(QBLnx.$_Ak, <span class="hljs-built_in">arguments</span>) : QBLnx.$_Ak.$_DBGGT;&#125;;</code></pre><p>接着报错提示，<code>Cannot read property '$_DBGGT' of undefined</code>：</p><p><img src="https://cdn.itbob.cn/img/article/060/38.png" alt="38"></p><p>定义在第 7 行，直接将 <code>QBLnx.$_Ak</code> 整个扣下来即可，然后会报错提示，window 和 ht 未定义，ht 为 navigator：</p><p><img src="https://cdn.itbob.cn/img/article/060/39.png" alt="39"></p><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> <span class="hljs-built_in">window</span> = &#123;    <span class="hljs-string">&quot;navigator&quot;</span>: &#123;        <span class="hljs-string">&quot;appName&quot;</span>: <span class="hljs-string">&quot;Netscape&quot;</span>,    &#125;,&#125;ht = <span class="hljs-built_in">window</span>[<span class="hljs-string">&quot;navigator&quot;</span>];</code></pre><p>又报错提示，<code>QBLnx.$_Db is not a function</code>：</p><p><img src="https://cdn.itbob.cn/img/article/060/40.png" alt="40"></p><p>其定义在第 132 行，扣下来补上：</p><pre><code class="hljs JavaScript">QBLnx.$_Db = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> QBLnx.$_BP.$_DBHGJ === <span class="hljs-string">&#x27;function&#x27;</span> ? QBLnx.$_BP.$_DBHGJ.apply(QBLnx.$_BP, <span class="hljs-built_in">arguments</span>) : QBLnx.$_BP.$_DBHGJ;&#125;;</code></pre><p>报错提示，<code>Cannot read property '$_DBHGJ' of undefined</code>：</p><p><img src="https://cdn.itbob.cn/img/article/060/41.png" alt="41"></p><p>通过搜索，其定义在第 68 行，将 <code>QBLnx.$_BP</code> 整个扣下来即可，至此，u 参数成功复现：</p><p><img src="https://cdn.itbob.cn/img/article/060/42.png" alt="42"></p><h4><span id="l-can-shu">l 参数</span></h4><p>u 参数解决后，接着需要分析 l 参数，内容如下：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 混淆</span>l = V[$_CAIAt(<span class="hljs-number">353</span>)](gt[$_CAIAt(<span class="hljs-number">218</span>)](o), r[$_CAIAt(<span class="hljs-number">756</span>)]());<span class="hljs-comment">// 未混淆</span>l = V[<span class="hljs-string">&quot;encrypt&quot;</span>](gt[<span class="hljs-string">&quot;stringify&quot;</span>](o), r[<span class="hljs-string">&quot;$_CCEc&quot;</span>]());</code></pre><p>可以知道，l 参数的结果是将 <code>gt[&quot;stringify&quot;](o)</code> 和 <code>r[&quot;$_CCEc&quot;]()</code> 加密后得到的，先来分析 <code>r[&quot;$_CCEc&quot;]()</code> ，选中后跟进进去，跳转到了熟悉的第 6208 行，就是之前的 16 位随机字符串：</p><p><img src="https://cdn.itbob.cn/img/article/060/43.png" alt="43"></p><p>将这里写成跟之前一样的固定值， <code>gt[&quot;stringify&quot;](o)</code> 返回的是 JSON 格式的数据，由 o 参数生成：</p><p><img src="https://cdn.itbob.cn/img/article/060/44.png" alt="44"></p><p>对比分析以下 o 参数中，哪些是定值，哪些是动态变化的，可以看到箭头所指的值都不一样了：</p><p><img src="https://cdn.itbob.cn/img/article/060/45.png" alt="45"></p><ul><li><code>userresponse</code>：滑动距离 + challenge 的值；</li><li><code>passtime</code>：滑块滑动时间；</li><li><code>imgload</code>：图片加载时间；</li><li><code>aa</code>：轨迹加密；</li><li><code>ep-tm</code>：<code>window[&quot;performance&quot;][&quot;timing&quot;]</code> 相关；</li><li><code>mocq</code>：每天 key、value 会变，后文分析；</li><li><code>rp</code>：gt + 32 位 challenge + passtime，再经过 MD5 加密。</li></ul><p>接下来对关键值进行分析，先来分析下 <code>userresponse</code>，o 定义在第 6012 行：</p><p><img src="https://cdn.itbob.cn/img/article/060/46.png" alt="46"></p><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> o = &#123;    <span class="hljs-string">&quot;lang&quot;</span>: i[$_CAIAt(<span class="hljs-number">116</span>)] || $_CAHJd(<span class="hljs-number">103</span>),    <span class="hljs-string">&quot;userresponse&quot;</span>: H(t, i[$_CAHJd(<span class="hljs-number">182</span>)]),    <span class="hljs-string">&quot;passtime&quot;</span>: n,    <span class="hljs-string">&quot;imgload&quot;</span>: r[$_CAIAt(<span class="hljs-number">750</span>)],    <span class="hljs-string">&quot;aa&quot;</span>: e,    <span class="hljs-string">&quot;ep&quot;</span>: r[$_CAHJd(<span class="hljs-number">714</span>)]()&#125;;</code></pre><p><code>userresponse</code> 定义在第 6014 行，需要分析 <code>H(t, i[$_CAHJd(182)])</code>，控制台打印一下：</p><p><img src="https://cdn.itbob.cn/img/article/060/47.png" alt="47"></p><p>t 为滑动滑块的距离，需要注意的是 <code>i[$_CAHJd(182)]</code> 为第二个 <code>ajax.php?xxx</code> 传递的 <code>challenge</code>，比注册请求时的 <code>challenge</code> 长两位，再将 H 参数扣下来即可，其定义在第 704 行，报错提示，<code>$_CJFA is not defined</code>：</p><p><img src="https://cdn.itbob.cn/img/article/060/48.png" alt="48"></p><p>定义在第 159 行：</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> $_CJEl = QBLnx.$_CM, $_CJDa = [<span class="hljs-string">&#x27;$_CJHo&#x27;</span>].concat($_CJEl), $_CJFA = $_CJDa[<span class="hljs-number">1</span>];</code></pre><p>至此，<code>userresponse</code> 成功复现，接下来看 <code>passtime</code>，<code>n</code> 值此时已经生成了，为 1010，向上跟栈到 <code>$_CGlj</code> 中：</p><p><img src="https://cdn.itbob.cn/img/article/060/49.png" alt="49"></p><p><code>n[$_DAAAV(871)]</code> 为 <code>passtime</code> 值，定义在第 8164 行，为滑动结束时间 - 开始时间：</p><p><img src="https://cdn.itbob.cn/img/article/060/50.png" alt="50"></p><p>接下来分析下 <code>aa</code> 参数，其定义在第 6017 行，值由参数 <code>e</code> 传递，同样向上跟栈到 <code>$_CGlj</code> 中，为第 8168 行的 l 值，l 定义在第 8167 行，三个参数加密后得到：</p><p><img src="https://cdn.itbob.cn/img/article/060/51.png" alt="51"></p><ul><li><code>n[$_DAAAV(913)][$_CJJJb(1066)]()</code> ：轨迹加密后的结果；</li><li><code>n[$_DAAAV(69)][$_CJJJb(1097)]</code> ：c 值，在第二个 <code>get.php?xxx</code> 返回的响应中得到；</li><li><code>n[$_DAAAV(69)][$_CJJJb(319)]</code> ：s 值，在第二个 <code>get.php?xxx</code> 返回的响应中得到。</li></ul><p><img src="https://cdn.itbob.cn/img/article/060/52.png" alt="52"></p><p>接下来跟进到 <code>n[$_DAAAV(913)][$_CJJJb(1066)]</code> 中，分析下轨迹是如何加密的，在第 4065 行，于第 4133 行打下断点，第 4108 行的 <code>this[$_BEHAL(343)]</code> 即为轨迹值，关于轨迹算法后面会专门出一期文章：</p><p><img src="https://cdn.itbob.cn/img/article/060/53.png" alt="53"></p><p>将整个算法部分抠出来，先将轨迹值固定，写成参数传递进去，不然会报错提示，<code>Cannot read property 'length' of undefined</code>，因为轨迹值是别的算法生成的，不传值即为空，运行程序，会报错提示，<code>ct is not defined</code>：</p><p><img src="https://cdn.itbob.cn/img/article/060/54.png" alt="54"></p><p>ct 定义在第 4223 行，扣下来，报错提示，<code>(intermediate value)[$_BEHAL(...)] is not a function</code>：</p><p><img src="https://cdn.itbob.cn/img/article/060/55.png" alt="55"></p><p>定义在第 4326 行，补上以下内容，即可复现：</p><pre><code class="hljs JavaScript">ct[<span class="hljs-string">&quot;prototype&quot;</span>] = &#123;<span class="hljs-string">&quot;\u0024\u005f\u0043\u0041\u0051&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) </span>&#123;        <span class="hljs-keyword">var</span> $_BFFJi = QBLnx.$_CM            , $_BFFIX = [<span class="hljs-string">&#x27;$_BFGCq&#x27;</span>].concat($_BFFJi)            , $_BFGAT = $_BFFIX[<span class="hljs-number">1</span>];        $_BFFIX.shift();        <span class="hljs-keyword">var</span> $_BFGBV = $_BFFIX[<span class="hljs-number">0</span>];        <span class="hljs-keyword">var</span> e = <span class="hljs-built_in">this</span>[$_BFFJi(<span class="hljs-number">461</span>)];        <span class="hljs-keyword">if</span> (e[$_BFGAT(<span class="hljs-number">419</span>)])            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ct(e[$_BFFJi(<span class="hljs-number">419</span>)](t));        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = [], r = <span class="hljs-number">0</span>, i = e[$_BFGAT(<span class="hljs-number">125</span>)]; r &lt; i; r += <span class="hljs-number">1</span>)            n[r] = t(e[r], r, <span class="hljs-built_in">this</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ct(n);    &#125;,&#125;;</code></pre><p>结果对比一致：</p><p><img src="https://cdn.itbob.cn/img/article/060/56.png" alt="56"></p><p>后面三个参数的值都分析完了，回到第 8167 行 l 处，跟进到 <code>n[$_DAAAV(913)][$_DAAAV(1059)]</code> 中，在第 4135 行，扣下来即可：</p><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAA</span>(<span class="hljs-params">t, e, n</span>) </span>&#123;    <span class="hljs-keyword">var</span> $_BEIJl = QBLnx.$_CM      , $_BEIIt = [<span class="hljs-string">&#x27;$_BEJC_&#x27;</span>].concat($_BEIJl)      , $_BEJAy = $_BEIIt[<span class="hljs-number">1</span>];    $_BEIIt.shift();    <span class="hljs-keyword">var</span> $_BEJBr = $_BEIIt[<span class="hljs-number">0</span>];    <span class="hljs-keyword">if</span> (!e || !n)        <span class="hljs-keyword">return</span> t;    <span class="hljs-keyword">var</span> r, i = <span class="hljs-number">0</span>, o = t, s = e[<span class="hljs-number">0</span>], a = e[<span class="hljs-number">2</span>], _ = e[<span class="hljs-number">4</span>];    <span class="hljs-keyword">while</span> (r = n[$_BEIJl(<span class="hljs-number">229</span>)](i, <span class="hljs-number">2</span>)) &#123;        i += <span class="hljs-number">2</span>;        <span class="hljs-keyword">var</span> c = <span class="hljs-built_in">parseInt</span>(r, <span class="hljs-number">16</span>)          , u = <span class="hljs-built_in">String</span>[$_BEJAy(<span class="hljs-number">237</span>)](c)          , l = (s * c * c + a * c + _) % t[$_BEJAy(<span class="hljs-number">125</span>)];        o = o[$_BEJAy(<span class="hljs-number">229</span>)](<span class="hljs-number">0</span>, l) + u + o[$_BEJAy(<span class="hljs-number">229</span>)](l);    &#125;    <span class="hljs-keyword">return</span> o;&#125;;</code></pre><p>将 c 和 s 写为固定值，对比结果一致：</p><p><img src="https://cdn.itbob.cn/img/article/060/57.png" alt="57"></p><p>aa 参数分析完成，接下来分析 rp 参数，定义在第 6076 行：</p><p><img src="https://cdn.itbob.cn/img/article/060/58.png" alt="58"></p><pre><code class="hljs JavaScript"><span class="hljs-comment">// 混淆</span>o[$_CAIAt(<span class="hljs-number">791</span>)] = X(i[$_CAIAt(<span class="hljs-number">104</span>)] + i[$_CAIAt(<span class="hljs-number">182</span>)][$_CAHJd(<span class="hljs-number">139</span>)](<span class="hljs-number">0</span>, <span class="hljs-number">32</span>) + o[$_CAHJd(<span class="hljs-number">704</span>)]);<span class="hljs-comment">// 未混淆</span>o[<span class="hljs-string">&quot;rp&quot;</span>] = X(i[<span class="hljs-string">&quot;gt&quot;</span>] + i[<span class="hljs-string">&quot;challenge&quot;</span>][<span class="hljs-string">&quot;slice&quot;</span>](<span class="hljs-number">0</span>, <span class="hljs-number">32</span>) + o[<span class="hljs-string">&quot;passtime&quot;</span>]);</code></pre><p>后面三个参数都很明显了，跟进到 X 函数中，在第 1876 行，扣下来即可，对比结果一致：</p><p><img src="https://cdn.itbob.cn/img/article/060/59.png" alt="59"></p><p>这里是 MD5 加密，也可以直接通过引库复现：</p><p><img src="https://cdn.itbob.cn/img/article/060/60.png" alt="60"></p><p>ep 定义在第 6018 行，跟进到 <code>r[$_CAHJd(714)]</code> 中，tm 参数定义在第 6239 行：</p><p><img src="https://cdn.itbob.cn/img/article/060/61.png" alt="61"></p><p>跟进 <code>new bt()[$_CBGEC(760)]</code> 中，在第 5268 行打下断点，tm 结果如下：</p><p><img src="https://cdn.itbob.cn/img/article/060/62.png" alt="62"></p><p>o 中这个键值对内容每天都会变化：</p><p><img src="https://cdn.itbob.cn/img/article/060/63.png" alt="63"></p><p>在第 6021 行打下断点，此时的 o 中还没有生成以上键值对：</p><p><img src="https://cdn.itbob.cn/img/article/060/64.png" alt="64"></p><p>接着往下找，第 6026 行 <code>a = window[$_CAHJd(744)](s)</code> 执行之后 s 中生成了以上的键值对，所以跟进到 <code>window[$_CAHJd(744)]</code> 中，会跳转到 <code>gct.xxxxxxxx.js</code> 文件中，这个文件的路径可以从 get.php 接口获取到：</p><p><img src="https://cdn.itbob.cn/img/article/060/65.png" alt="65"></p><p>在该文件的第 1253 行打下断点，可以看到此时的 t 中已经生成了 <code>h9s9: &quot;1803797734&quot;</code> ：</p><p><img src="https://cdn.itbob.cn/img/article/060/66.png" alt="66"></p><p>跟进到 <code>StJC</code> 方法中，其定义在第 1202 行，在第 1208 行打下断点，键值对在此处生成，可以通过全局导出调用：</p><p><img src="https://cdn.itbob.cn/img/article/060/67.png" alt="67"></p><p>至此，参数 o 复现完毕，回到第 6078 行，分析完 <code>V[$_CAIAt(353)]</code> l 即完成，跟进，定义在第 3218 行，在第 3230 行打下断点，这里为 AES 加密，初始向量 iv 值为 <code>&quot;0000000000000000&quot;</code>：</p><p><img src="https://cdn.itbob.cn/img/article/060/68.png" alt="68"></p><p>直接引库复现：</p><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aesV</span>(<span class="hljs-params">o_text, random_str</span>) </span>&#123;    <span class="hljs-keyword">var</span> key = CryptoJS.enc.Utf8.parse(random_str);    <span class="hljs-keyword">var</span> iv = CryptoJS.enc.Utf8.parse(<span class="hljs-string">&quot;0000000000000000&quot;</span>);    <span class="hljs-keyword">var</span> srcs = CryptoJS.enc.Utf8.parse(o_text);    <span class="hljs-keyword">var</span> encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;        <span class="hljs-attr">iv</span>: iv,        <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,        <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7    &#125;);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> r = encrypted, o = r.ciphertext.words, i = r.ciphertext.sigBytes, s = [], a = <span class="hljs-number">0</span>; a &lt; i; a++) &#123;        <span class="hljs-keyword">var</span> c = o[a &gt;&gt;&gt; <span class="hljs-number">2</span>] &gt;&gt;&gt; <span class="hljs-number">24</span> - a % <span class="hljs-number">4</span> * <span class="hljs-number">8</span> &amp; <span class="hljs-number">255</span>;        s.push(c);    &#125;    <span class="hljs-keyword">return</span> s;&#125;;</code></pre><p>对比结果一致：</p><p><img src="https://cdn.itbob.cn/img/article/060/69.png" alt="69"></p><p>l 参数分析完毕，终于只剩下一个 h 了，<code>m[$_CAIAt(782)](l)</code> 即将 l 加密后得到的，跟进 <code>m[$_CAIAt(782)]</code>，定义在第 1568 行，在第 1575 行打下断点，为 e 中两个 value 值相加：</p><p><img src="https://cdn.itbob.cn/img/article/060/70.png" alt="70"></p><p>e 定义在第 1574 行，t 为传入的 l 参数，跟进到 <code>this[$_GFJn(264)]</code> 中，在第 1523 行，复现如下：</p><p><img src="https://cdn.itbob.cn/img/article/060/71.png" alt="71"></p><p>校验结果一致：</p><p><img src="https://cdn.itbob.cn/img/article/060/72.png" alt="72"></p><p>w 参数至此终于全部复现完成！</p><h3><span id="di-tu-huan-yuan">底图还原</span></h3><p>前文说过，拿到的完整背景图以及带缺口背景图都是被打乱了的，这里需要还原才能计算滑动距离以及轨迹等，极验的底图是通过 Canvas 绘制出来的，直接打下事件断点：</p><p><img src="https://cdn.itbob.cn/img/article/060/73.png" alt="73"></p><p>点击按钮进行验证即会断住，格式化后跳转到第 295 行，</p><p><img src="https://cdn.itbob.cn/img/article/060/74.png" alt="74"></p><p>简单解一波混淆，会清晰一些：</p><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$_BEG</span>(<span class="hljs-params">t, e</span>) </span>&#123;    <span class="hljs-keyword">var</span> $_DAHHo = QBLnx.$_Db()[<span class="hljs-number">12</span>][<span class="hljs-number">19</span>];    <span class="hljs-keyword">for</span> (; $_DAHHo !== QBLnx.$_Db()[<span class="hljs-number">15</span>][<span class="hljs-number">16</span>];) &#123;        <span class="hljs-keyword">switch</span> ($_DAHHo) &#123;            <span class="hljs-keyword">case</span> QBLnx.$_Db()[<span class="hljs-number">15</span>][<span class="hljs-number">19</span>]:                t = t[<span class="hljs-string">&quot;$_CGz&quot;</span>],                e = e[<span class="hljs-string">&quot;$_CGz&quot;</span>];                <span class="hljs-keyword">var</span> n = t[<span class="hljs-string">&quot;width&quot;</span>]                    , r = t[<span class="hljs-string">&quot;height&quot;</span>]                    , i = h[<span class="hljs-string">&quot;createElement&quot;</span>](<span class="hljs-string">&quot;canvas&quot;</span>);                i[<span class="hljs-string">&quot;width&quot;</span>] = n,                i[<span class="hljs-string">&quot;height&quot;</span>] = r;                $_DAHHo = QBLnx.$_Db()[<span class="hljs-number">3</span>][<span class="hljs-number">18</span>];                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> QBLnx.$_Db()[<span class="hljs-number">0</span>][<span class="hljs-number">18</span>]:                <span class="hljs-keyword">var</span> o = i[<span class="hljs-string">&quot;getContext&quot;</span>](<span class="hljs-string">&quot;2d&quot;</span>);                o[<span class="hljs-string">&quot;drawImage&quot;</span>](t, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);                <span class="hljs-keyword">var</span> s = e[<span class="hljs-string">&quot;getContext&quot;</span>](<span class="hljs-string">&quot;2d&quot;</span>);                $_DAHHo = QBLnx.$_Db()[<span class="hljs-number">0</span>][<span class="hljs-number">17</span>];                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> QBLnx.$_Db()[<span class="hljs-number">12</span>][<span class="hljs-number">17</span>]:                e[<span class="hljs-string">&quot;height&quot;</span>] = <span class="hljs-number">160</span>,                e[<span class="hljs-string">&quot;width&quot;</span>] = <span class="hljs-number">260</span>;                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = r / <span class="hljs-number">2</span>, _ = <span class="hljs-number">0</span>; _ &lt; <span class="hljs-number">52</span>; _ += <span class="hljs-number">1</span>) &#123;                    <span class="hljs-keyword">var</span> c = Ut[_] % <span class="hljs-number">26</span> * <span class="hljs-number">12</span> + <span class="hljs-number">1</span>                        , u = <span class="hljs-number">25</span> &lt; Ut[_] ? a : <span class="hljs-number">0</span>                        , l = o[<span class="hljs-string">&quot;getImageData&quot;</span>](c, u, <span class="hljs-number">10</span>, a);                    s[<span class="hljs-string">&quot;putImageData&quot;</span>](l, _ % <span class="hljs-number">26</span> * <span class="hljs-number">10</span>, <span class="hljs-number">25</span> &lt; _ ? a : <span class="hljs-number">0</span>);                &#125;                $_DAHHo = QBLnx.$_Db()[<span class="hljs-number">15</span>][<span class="hljs-number">16</span>];                <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;</code></pre><p>控制流平坦化混淆，可以通过 AST 技术解混淆，AST 相关可以看往期文章：<a href="https://www.itbob.cn/article/051/">逆向进阶，利用 AST 技术还原 JavaScript 混淆代码</a>，这里就不对此进行讲解了，这里就是 Canvas 绘图的过程，关键乱序算法部分在 <code>QBLnx.$_Db()[12][17]</code> 中：</p><pre><code class="hljs JavaScript">e[<span class="hljs-string">&quot;height&quot;</span>] = <span class="hljs-number">160</span>,e[<span class="hljs-string">&quot;width&quot;</span>] = <span class="hljs-number">260</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = r / <span class="hljs-number">2</span>, _ = <span class="hljs-number">0</span>; _ &lt; <span class="hljs-number">52</span>; _ += <span class="hljs-number">1</span>) &#123;    <span class="hljs-keyword">var</span> c = Ut[_] % <span class="hljs-number">26</span> * <span class="hljs-number">12</span> + <span class="hljs-number">1</span>        , u = <span class="hljs-number">25</span> &lt; Ut[_] ? a : <span class="hljs-number">0</span>        , l = o[<span class="hljs-string">&quot;getImageData&quot;</span>](c, u, <span class="hljs-number">10</span>, a);    s[<span class="hljs-string">&quot;putImageData&quot;</span>](l, _ % <span class="hljs-number">26</span> * <span class="hljs-number">10</span>, <span class="hljs-number">25</span> &lt; _ ? a : <span class="hljs-number">0</span>);&#125;</code></pre><p>原图比例为 312 x 160，宽为 320，长为 160：</p><p><img src="https://cdn.itbob.cn/img/article/060/75.png" alt="75"></p><p><code>e[&quot;height&quot;] = 160</code>、<code>e[&quot;width&quot;] = 260</code> 指还原后的图片比例为 260 x 160，a 的值为 r / 2 即 80，就是将整张图片分为了上下两等分，再将图片纵向切割为了 26 等份，Ut 数组的长度为 52，<code>Ut[_]</code> 即依次取数组中的元素，<code>Ut</code> 数组即为图片还原的顺序，是固定的，<code>25 &lt; Ut[_] ? a : 0 </code> 判断图片是上半部分还是下半部分，<code>_ % 26 * 10</code> 表示每个小块取 10 px 像素，正确图片的顺序为：</p><p><img src="https://cdn.itbob.cn/img/article/060/76.png" alt="76"></p><pre><code class="hljs JavaScript">[<span class="hljs-number">39</span>,<span class="hljs-number">38</span>,<span class="hljs-number">48</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">40</span>,<span class="hljs-number">46</span>,<span class="hljs-number">47</span>,<span class="hljs-number">35</span>,<span class="hljs-number">34</span>,<span class="hljs-number">50</span>,<span class="hljs-number">51</span>,<span class="hljs-number">33</span>,<span class="hljs-number">32</span>,<span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">27</span>,<span class="hljs-number">26</span>,<span class="hljs-number">36</span>,<span class="hljs-number">37</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">44</span>,<span class="hljs-number">45</span>,<span class="hljs-number">43</span>,<span class="hljs-number">42</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">23</span>,<span class="hljs-number">22</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">21</span>,<span class="hljs-number">20</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">25</span>,<span class="hljs-number">24</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">19</span>,<span class="hljs-number">18</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>]</code></pre><p>示例：</p><p><img src="https://cdn.itbob.cn/img/article/060/77.png" alt="77"></p><p>Python 复现：</p><pre><code class="hljs JavaScript">def restore_picture():    img_list = [<span class="hljs-string">&quot;./乱序缺口背景图.png&quot;</span>, <span class="hljs-string">&quot;./乱序背景图.png&quot;</span>]    <span class="hljs-keyword">for</span> index, img <span class="hljs-keyword">in</span> enumerate(img_list):        image = Image.open(img)        s = Image.new(<span class="hljs-string">&quot;RGBA&quot;</span>, (<span class="hljs-number">260</span>, <span class="hljs-number">160</span>))        ut = [<span class="hljs-number">39</span>, <span class="hljs-number">38</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">41</span>, <span class="hljs-number">40</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">35</span>, <span class="hljs-number">34</span>, <span class="hljs-number">50</span>, <span class="hljs-number">51</span>, <span class="hljs-number">33</span>, <span class="hljs-number">32</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>, <span class="hljs-number">43</span>,<span class="hljs-number">42</span>,<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">23</span>, <span class="hljs-number">22</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>, <span class="hljs-number">20</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">19</span>, <span class="hljs-number">18</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>]        height_half = <span class="hljs-number">80</span>        <span class="hljs-keyword">for</span> inx <span class="hljs-keyword">in</span> range(<span class="hljs-number">52</span>):            c = ut[inx] % <span class="hljs-number">26</span> * <span class="hljs-number">12</span> + <span class="hljs-number">1</span>            u = height_half <span class="hljs-keyword">if</span> ut[inx] &gt; <span class="hljs-number">25</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>            l_ = image.crop(box=(c, u, c + <span class="hljs-number">10</span>, u + <span class="hljs-number">80</span>))            s.paste(l_, box=(inx % <span class="hljs-number">26</span> * <span class="hljs-number">10</span>, <span class="hljs-number">80</span> <span class="hljs-keyword">if</span> inx &gt; <span class="hljs-number">25</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>))        <span class="hljs-keyword">if</span> index == <span class="hljs-number">0</span>:            s.save(<span class="hljs-string">&quot;./缺口背景图片.png&quot;</span>)        <span class="hljs-attr">else</span>:            s.save(<span class="hljs-string">&quot;./背景图片.png&quot;</span>)</code></pre><p>还原后如下：</p><p><img src="https://cdn.itbob.cn/img/article/060/78.png" alt="78"></p><h3><span id="cuo-wu-jie-guo">错误结果</span></h3><pre><code class="hljs JavaScript"><span class="hljs-comment">// challenge 不对</span>geetest_xxxxxxxxxxxxx(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;illegal challenge&quot;</span>, <span class="hljs-string">&quot;user_error&quot;</span>: <span class="hljs-string">&quot;\u7f51\u7edc\u4e0d\u7ed9\u529b&quot;</span>, <span class="hljs-string">&quot;error_code&quot;</span>: <span class="hljs-string">&quot;error_23&quot;</span>&#125;)<span class="hljs-comment">// w 不对</span>geetest_xxxxxxxxxxxxx(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;param decrypt error&quot;</span>, <span class="hljs-string">&quot;user_error&quot;</span>: <span class="hljs-string">&quot;\u7f51\u7edc\u4e0d\u7ed9\u529b&quot;</span>, <span class="hljs-string">&quot;error_code&quot;</span>: <span class="hljs-string">&quot;error_03&quot;</span>&#125;)<span class="hljs-comment">// 无轨迹</span>geetest_xxxxxxxxxxxxx(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;not proof&quot;</span>, <span class="hljs-string">&quot;user_error&quot;</span>: <span class="hljs-string">&quot;\u7f51\u7edc\u4e0d\u7ed9\u529b&quot;</span>, <span class="hljs-string">&quot;error_code&quot;</span>: <span class="hljs-string">&quot;error_21&quot;</span>&#125;)<span class="hljs-comment">// 轨迹、缺口距离、参数问题</span>geetest_xxxxxxxxxxxxx(&#123;<span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;fail&quot;</span>&#125;)geetest_xxxxxxxxxxxxx(&#123;<span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;forbidden&quot;</span>&#125;)</code></pre><h3><span id="jie-guo-yan-zheng">结果验证</span></h3><p>100 次大概 95% 的成功率：</p><p><img src="https://cdn.itbob.cn/img/article/060/79.jpg" alt="79"></p>]]></content>
      
      
      <categories>
          
          <category> 验证码逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 验证码逆向实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极验行为验证，二代滑块验证码逆向分析</title>
      <link href="/article/059/"/>
      <url>/article/059/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/captcha_reverse.png" alt="captcha_reverse"></p><blockquote><p><strong>极验全家桶，交流请咨询微信：IT-BOB</strong><br><strong>极验全家桶，交流请咨询微信：IT-BOB</strong><br><strong>极验全家桶，交流请咨询微信：IT-BOB</strong></p></blockquote><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#zhua-bao-qing-kuang">抓包情况</a></li><li><a href="#ni-xiang-fen-xi">逆向分析</a><ul><li><a href="#huo-qu-h7z-zhi">获取 H7z 值</a></li><li><a href="#huo-qu-r7z-zhi">获取 r7z 值</a><ul><li><a href="#huo-qu-userresponse-zhi">获取 userresponse 值</a></li><li><a href="#huo-qu-passtime-zhi">获取 passtime  值</a></li><li><a href="#huo-qu-imgload-zhi">获取 imgload 值</a></li><li><a href="#huo-qu-aa-zhi">获取 aa 值</a></li><li><a href="#huo-qu-ep-zhi">获取 ep 值</a></li><li><a href="#huo-qu-rp-zhi">获取 rp 值</a></li></ul></li><li><a href="#huo-qu-w-zhi">获取 w 值</a></li></ul></li><li><a href="#jie-guo-yan-zheng">结果验证</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>目标：某验二代滑块验证码逆向分析</li><li>主页：<code>aHR0cDovL3d3dy5qc2dzai5nb3YuY246NTg4ODgvbWluaS9uZXR3ZWIvU01MaWJyYXJ5LmpzcA==</code></li><li>说明：大多数逻辑其实和三四代都一样，相同的就简写了，有疑惑的地方可以看以前的文章</li><li><a href="https://www.itbob.cn/article/060/">某验行为验证，三代滑块验证码逆向分析</a></li><li><a href="https://www.itbob.cn/article/061/">某验行为验证，四代滑块验证码逆向分析</a></li></ul><h2><span id="zhua-bao-qing-kuang">抓包情况</span></h2><p>主页点击搜索就会跳出二代的验证码，<code>netWebServlet.json</code> 的请求，会返回 <code>challenge</code> 和 <code>gt</code>。</p><p><img src="https://cdn.itbob.cn/img/article/059/01.png" alt="01"></p><p>有个 <code>get.php</code> 的请求，返回了一个新的 <code>challenge</code>，这个请求之后的操作，都要用这个新的 <code>challenge</code>，不然是验证不成功的，其他的还有验证码背景图片、乱序图片地址、<code>c</code>、<code>s</code> 等值，之前写过三代的文章，都是类似的，这里就不一一分析了。</p><p><img src="https://cdn.itbob.cn/img/article/059/02.png" alt="02"></p><p>然后是 <code>ajax.php</code> 验证是否通过，通过之后返回一个 <code>validate</code>，请求里同样是需要我们逆向的 <code>w</code> 参数：</p><p><img src="https://cdn.itbob.cn/img/article/059/03.png" alt="03"></p><p><img src="https://cdn.itbob.cn/img/article/059/04.png" alt="04"></p><p>然后同样还是 <code>netWebServlet.json</code> 接口，带上 <code>get.php</code> 请求返回的 <code>challenge</code> 以及 <code>ajax.php</code> 返回的 <code>validate</code>，请求拿到一个 <code>name</code> 的字段。</p><p><img src="https://cdn.itbob.cn/img/article/059/05.png" alt="05"></p><p><img src="https://cdn.itbob.cn/img/article/059/06.png" alt="06"></p><p>后续的搜索数据，带上这个 <code>name</code> 就行了：</p><p><img src="https://cdn.itbob.cn/img/article/059/07.png" alt="07"></p><h2><span id="ni-xiang-fen-xi">逆向分析</span></h2><p>搞过三、四代的都知道我们可以直接搜索 <code>w</code> 的 Unicode 值 <code>\u0077</code> 即可定位，但是二代则不是 Unicode，而是16进制的编码，搜索 <code>\x77</code> 即可定位，当然按照正常流程，跟栈也能很容易找到加密的位置。</p><p><img src="https://cdn.itbob.cn/img/article/059/08.png" alt="08"></p><h3><span id="huo-qu-h7z-zhi">获取 H7z 值</span></h3><p>从上图中可以知道 <code>w</code> 的值为 <code>r7z + H7z</code>，先看 <code>H7z</code>。</p><p><img src="https://cdn.itbob.cn/img/article/059/09.png" alt="09"></p><p>跟进这个方法，来到一大串控制流，这里还是推荐用 AST 还原一下，后续可能有一些循环啥的，硬跟的话容易出错，当然直接全部扣一把梭也是可以的，<code>H7z</code> 的核心其实就是 RSA 加密随机字符串，三代四代都有，这里就不细讲了。</p><p><img src="https://cdn.itbob.cn/img/article/059/10.png" alt="10"></p><h3><span id="huo-qu-r7z-zhi">获取 r7z 值</span></h3><p>然后就是 <code>r7z</code>，主要由以下两句代码生成：</p><p><img src="https://cdn.itbob.cn/img/article/059/11.png" alt="11"></p><pre><code class="hljs javascript">q7z = n0B[M9r.R8z(<span class="hljs-number">699</span>)](h7B[M9r.C8z(<span class="hljs-number">105</span>)](Y7z), V7z[M9r.R8z(<span class="hljs-number">818</span>)]())r7z = p7B[M9r.R8z(<span class="hljs-number">260</span>)](q7z)</code></pre><p>可以看到其中有个变量 <code>Y7z</code> 参与了计算，先来看看他是怎么来的，直接搜索即可定位，可以发现同样是16进制的编码，由五个值组成：<code>userresponse</code>、<code>passtime</code>、<code>imgload</code>、<code>aa</code>、<code>ep</code></p><p><img src="https://cdn.itbob.cn/img/article/059/12.png" alt="12"></p><h4><span id="huo-qu-userresponse-zhi">获取 userresponse 值</span></h4><p>挨个分析，首先是 <code>userresponse</code>，将滑动距离和 <code>challenge</code> 的值传入一个方法，得到一个 9 位字符串：</p><p><img src="https://cdn.itbob.cn/img/article/059/13.png" alt="13"></p><p>上图中 <code>g7z</code> 就是滑动距离，搜索可以看到定义的地方，尺子量一下对比一下，和滑动的距离是一致的：</p><p><img src="https://cdn.itbob.cn/img/article/059/14.png" alt="14"></p><p><img src="https://cdn.itbob.cn/img/article/059/15.png" alt="15"></p><p>然后再来看看那个方法，跟进去之后也是一大串 <code>switch-case</code> 控制流：</p><p><img src="https://cdn.itbob.cn/img/article/059/16.png" alt="16"></p><p>还原一下代码如下：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUserResponse</span>(<span class="hljs-params">L0z, o0z</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j0z = o0z.slice(<span class="hljs-number">32</span>), c0z = [], X0z = <span class="hljs-number">0</span>; X0z &lt; j0z.length; X0z++)&#123;        <span class="hljs-keyword">var</span> K0z = j0z.charCodeAt(X0z);        c0z[X0z] = K0z &gt; <span class="hljs-number">57</span> ? K0z - <span class="hljs-number">87</span> : K0z - <span class="hljs-number">48</span>;    &#125;    j0z = <span class="hljs-number">36</span> * c0z[<span class="hljs-number">0</span>] + c0z[<span class="hljs-number">1</span>];    <span class="hljs-keyword">var</span> k0z = <span class="hljs-built_in">Math</span>.round(L0z) + j0z;    o0z = o0z.slice(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>);    <span class="hljs-keyword">var</span> n0z, f0z = [[], [], [], [], []], Q0z = &#123;&#125;, N0z = <span class="hljs-number">0</span>;    X0z = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i0z = o0z.length; i0z &gt; X0z; X0z++)&#123;        n0z = o0z.charAt(X0z), Q0z[n0z] || (Q0z[n0z] = <span class="hljs-number">1</span>, f0z[N0z].push(n0z), N0z++, N0z = <span class="hljs-number">5</span> == N0z ? <span class="hljs-number">0</span> : N0z);    &#125;    <span class="hljs-keyword">var</span> y0z, v0z = k0z, B0z = <span class="hljs-number">4</span>, x0z = <span class="hljs-string">&quot;&quot;</span>, I0z = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">50</span>];    <span class="hljs-keyword">while</span> ( v0z &gt; <span class="hljs-number">0</span>) &#123;        v0z - I0z[B0z] &gt;= <span class="hljs-number">0</span> ? (y0z = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * f0z[B0z].length, <span class="hljs-number">10</span>),        x0z += f0z[B0z][y0z], v0z -= I0z[B0z]) : (f0z.splice(B0z, <span class="hljs-number">1</span>),        I0z.splice(B0z, <span class="hljs-number">1</span>), B0z -= <span class="hljs-number">1</span>);    &#125;    <span class="hljs-keyword">return</span> x0z;&#125;</code></pre><h4><span id="huo-qu-passtime-zhi">获取 passtime  值</span></h4><p><code>passtime</code>  不用考虑是怎么通过函数获取的，含义就是滑动完成所花费的时间，直接取轨迹的最后一个值即可，这个也和三四代是一样的，获取语句为：<code>var passtime = track[track.length - 1][2]</code>，如下图所示，轨迹的最后一个值时间为 871，<code>passtime</code> 的值同样也为 871。</p><p><img src="https://cdn.itbob.cn/img/article/059/17.png" alt="17"></p><p><img src="https://cdn.itbob.cn/img/article/059/18.png" alt="18"></p><h4><span id="huo-qu-imgload-zhi">获取 imgload 值</span></h4><p><code>imgload</code> 也没啥特别的，从字面意思猜测应该是图片加载耗时，实测直接写死即可，或者整个随机值就行。</p><h4><span id="huo-qu-aa-zhi">获取 aa 值</span></h4><p><code>aa</code> 的值就是 <code>F7z</code>，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/059/19.png" alt="19"></p><p>搜索 <code>F7z</code>，定位到下图所示的地方，向一个方法中传入了一个时间戳：</p><p><img src="https://cdn.itbob.cn/img/article/059/20.png" alt="20"></p><p>跟进去同样是 <code>switch-case</code> 控制流，需要注意的是下图中 <code>c7B[M9r.R8z(781)](M9r.R8z(764), K1z)</code> 的值其实就是轨迹。</p><p><img src="https://cdn.itbob.cn/img/article/059/21.png" alt="21"></p><p>这段控制流还原一下就变成这样了：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getF7z</span>(<span class="hljs-params">track</span>)</span>&#123;    <span class="hljs-keyword">var</span> o5r = <span class="hljs-number">6</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> N1z, X1z = s6z(track), f1z = [], B1z = [], o1z = [], t1z = <span class="hljs-number">0</span>, j1z = X1z.length; t1z &lt; j1z; t1z++)&#123;        <span class="hljs-keyword">if</span> (o5r * (o5r + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span> + <span class="hljs-number">8</span>) &#123;            N1z = u6z(X1z[t1z]),            N1z ? B1z.push(N1z) : (f1z.push(O6z(X1z[t1z][<span class="hljs-number">0</span>])),            B1z.push(O6z(X1z[t1z][<span class="hljs-number">1</span>]))),            o1z.push(O6z(X1z[t1z][<span class="hljs-number">2</span>]));            o5r = o5r &gt;= <span class="hljs-number">17705</span> ? o5r / <span class="hljs-number">3</span> : o5r * <span class="hljs-number">3</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> f1z.join(<span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;!!&quot;</span> + B1z.join(<span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;!!&quot;</span> + o1z.join(<span class="hljs-string">&quot;&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s6z</span>(<span class="hljs-params">F6z</span>)</span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> Y6z, g6z, a6z, E6z = [], D6z = <span class="hljs-number">0</span>, P6z = [], J6z = <span class="hljs-number">0</span>, l6z = F6z.length - <span class="hljs-number">1</span>; J6z &lt; l6z; J6z++) &#123;        Y6z = <span class="hljs-built_in">Math</span>.round(F6z[J6z + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - F6z[J6z][<span class="hljs-number">0</span>]),        g6z = <span class="hljs-built_in">Math</span>.round(F6z[J6z + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - F6z[J6z][<span class="hljs-number">1</span>]),        a6z = <span class="hljs-built_in">Math</span>.round(F6z[J6z + <span class="hljs-number">1</span>][<span class="hljs-number">2</span>] - F6z[J6z][<span class="hljs-number">2</span>]),        P6z.push([Y6z, g6z, a6z]),        <span class="hljs-number">0</span> == Y6z &amp;&amp; <span class="hljs-number">0</span> == g6z &amp;&amp; <span class="hljs-number">0</span> == a6z || (<span class="hljs-number">0</span> == Y6z &amp;&amp; <span class="hljs-number">0</span> == g6z ? D6z += a6z : (E6z.push([Y6z, g6z, a6z + D6z]), D6z = <span class="hljs-number">0</span>));    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> !== D6z &amp;&amp; E6z.push([Y6z, g6z, D6z]), E6z;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">O6z</span>(<span class="hljs-params">r6z</span>)</span>&#123;    <span class="hljs-keyword">var</span> d6z = <span class="hljs-string">&quot;()*,-./0123456789:?@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqr&quot;</span>      , m6z = d6z.length      , Z6z = <span class="hljs-string">&quot;&quot;</span>      , H6z = <span class="hljs-built_in">Math</span>.abs(r6z)      , W6z = <span class="hljs-built_in">parseInt</span>(H6z / m6z);    W6z &gt;= m6z &amp;&amp; (W6z = m6z - <span class="hljs-number">1</span>), W6z &amp;&amp; (Z6z = d6z.charAt(W6z)), H6z %= m6z;    <span class="hljs-keyword">var</span> q6z = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">return</span> r6z &lt; <span class="hljs-number">0</span> &amp;&amp; (q6z += <span class="hljs-string">&quot;!&quot;</span>), Z6z &amp;&amp; (q6z += <span class="hljs-string">&quot;$&quot;</span>), q6z + Z6z + d6z.charAt(H6z);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">u6z</span>(<span class="hljs-params">R6z</span>)</span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> z6z = [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>]], h6z = <span class="hljs-number">0</span>, C6z = z6z.length; h6z &lt; C6z; h6z++)&#123;        <span class="hljs-keyword">if</span> (R6z[<span class="hljs-number">0</span>] == z6z[h6z][<span class="hljs-number">0</span>] &amp;&amp; R6z[<span class="hljs-number">1</span>] == z6z[h6z][<span class="hljs-number">1</span>])&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;stuvwxyz~&quot;</span>[h6z]        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>以上只是 <code>F7z</code> 第一次生成的地方，后面还有二次处理，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/059/22.png" alt="22"></p><p>同样跟进去，三个传入的参数分别是第一次生成的 <code>F7z</code>、<code>get.php</code> 请求返回的 <code>c</code> 和 <code>s</code> 参数。</p><p><img src="https://cdn.itbob.cn/img/article/059/23.png" alt="23"></p><p>同样是一段控制流，还原后如下：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getF7z2</span>(<span class="hljs-params">Q1z, v1z, T1z</span>)</span>&#123;    <span class="hljs-keyword">var</span> i1z, x1z = <span class="hljs-number">0</span>, c1z = Q1z, y1z = v1z[<span class="hljs-number">0</span>], k1z = v1z[<span class="hljs-number">2</span>], L1z = v1z[<span class="hljs-number">4</span>];    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;        <span class="hljs-keyword">if</span> (i1z = T1z.substr(x1z, <span class="hljs-number">2</span>))&#123;            x1z += <span class="hljs-number">2</span>;            <span class="hljs-keyword">var</span> n1z = <span class="hljs-built_in">parseInt</span>(i1z, <span class="hljs-number">16</span>)              , M1z = <span class="hljs-built_in">String</span>.fromCharCode(n1z)              , I1z = (y1z * n1z * n1z + k1z * n1z + L1z) % Q1z.length;            c1z = c1z.substr(<span class="hljs-number">0</span>, I1z) + M1z + c1z.substr(I1z);        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> c1z        &#125;    &#125;    <span class="hljs-keyword">return</span> Q1z&#125;</code></pre><p>至此 <code>aa</code> 参数分析完毕！</p><h4><span id="huo-qu-ep-zhi">获取 ep 值</span></h4><p><code>ep</code> 的值就是一个版本号，此处是 <code>&#123;'v': '6.0.9'&#125;</code>，写死即可。</p><p><img src="https://cdn.itbob.cn/img/article/059/24.png" alt="24"></p><h4><span id="huo-qu-rp-zhi">获取 rp 值</span></h4><p>自此 <code>Y7z</code> 的第一步生成就分析完毕了，注意接下来还有一步，向 <code>Y7z</code> 里新增了一个 <code>rp</code> 参数：</p><p><img src="https://cdn.itbob.cn/img/article/059/25.png" alt="25"></p><p>这个值的组成看起来很长，实际上是将 gt、challenge 前 32 位以及 passtime 相加经过 MD5 加密后得到的。</p><pre><code class="hljs javascript">Y7z[<span class="hljs-string">&quot;rp&quot;</span>] = md5(gt + challenge.slice(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>) + passtime)</code></pre><p><img src="https://cdn.itbob.cn/img/article/059/26.png" alt="26"></p><p>上图中 <code>I0B</code> 就是 MD5 方法，跟进去其实是可以看到很多 MD5 特征的，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/059/27.png" alt="27"></p><p>自此 <code>Y7z</code> 的值就搞定了，然后接着前面的看，也就是 <code>q7z</code> 的值，同样和三四代一样的，<code>encrypt</code> 是 AES 加密，<code>Y7z</code> 经过 <code>JSON.stringify()</code> 处理为字符串作为待加密对象，后面是 16 为随机字符串作为 AES 的 Key，注意这里的随机字符串应该和获取 <code>H7z</code> 值时的随机字符串一致，不然是验证不成功的。</p><p><img src="https://cdn.itbob.cn/img/article/059/28.png" alt="28"></p><p>然后下一步就是获取 <code>r7z</code> 的值，将上一步得到的 <code>q7z</code> 经过一个方法进行处理，跟进方法，又是和三四代一样的，熟悉的 <code>res + end</code>，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/059/29.png" alt="29"></p><p>直接扣代码，或者直接使用三代的代码即可：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$_GJF</span>(<span class="hljs-params">e</span>) </span>&#123;    <span class="hljs-keyword">var</span> t = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789()&quot;</span>;    <span class="hljs-keyword">return</span> e &lt; <span class="hljs-number">0</span> || e &gt;= t[<span class="hljs-string">&quot;length&quot;</span>] ? <span class="hljs-string">&quot;.&quot;</span> : t[<span class="hljs-string">&quot;charAt&quot;</span>](e);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$_HBO</span>(<span class="hljs-params">e, t</span>) </span>&#123;    <span class="hljs-keyword">return</span> e &gt;&gt; t &amp; <span class="hljs-number">1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$_HCX</span>(<span class="hljs-params">e, o</span>) </span>&#123;    <span class="hljs-keyword">var</span> i = <span class="hljs-built_in">this</span>;    o || (o = i);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e, t</span>) </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>, r = <span class="hljs-number">24</span> - <span class="hljs-number">1</span>; <span class="hljs-number">0</span> &lt;= r; r -= <span class="hljs-number">1</span>)            <span class="hljs-number">1</span> === $_HBO(t, r) &amp;&amp; (n = (n &lt;&lt; <span class="hljs-number">1</span>) + $_HBO(e, r));        <span class="hljs-keyword">return</span> n;    &#125;, n = <span class="hljs-string">&quot;&quot;</span>, r = <span class="hljs-string">&quot;&quot;</span>, s = e.length, a = <span class="hljs-number">0</span>; a &lt; s; a += <span class="hljs-number">3</span>) &#123;        <span class="hljs-keyword">var</span> c;        <span class="hljs-keyword">if</span> (a + <span class="hljs-number">2</span> &lt; s)            c = (e[a] &lt;&lt; <span class="hljs-number">16</span>) + (e[a + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">8</span>) + e[a + <span class="hljs-number">2</span>],            n += $_GJF(t(c, <span class="hljs-number">7274496</span>)) + $_GJF(t(c, <span class="hljs-number">9483264</span>)) + $_GJF(t(c, <span class="hljs-number">19220</span>)) + $_GJF(t(c, <span class="hljs-number">235</span>));        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">var</span> _ = s % <span class="hljs-number">3</span>;            <span class="hljs-number">2</span> == _ ? (c = (e[a] &lt;&lt; <span class="hljs-number">16</span>) + (e[a + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">8</span>),            n += $_GJF(t(c, <span class="hljs-number">7274496</span>)) + $_GJF(t(c, <span class="hljs-number">9483264</span>)) + $_GJF(t(c, <span class="hljs-number">19220</span>)),            r = <span class="hljs-string">&quot;.&quot;</span>) : <span class="hljs-number">1</span> == _ &amp;&amp; (c = e[a] &lt;&lt; <span class="hljs-number">16</span>,            n += $_GJF(t(c, <span class="hljs-number">7274496</span>)) + $_GJF(t(c, <span class="hljs-number">9483264</span>)),            r = <span class="hljs-string">&quot;.&quot;</span> + <span class="hljs-string">&quot;.&quot;</span>);        &#125;    &#125;    <span class="hljs-keyword">return</span> &#123;        <span class="hljs-string">&quot;res&quot;</span>: n,        <span class="hljs-string">&quot;end&quot;</span>: r    &#125;;&#125;</code></pre><h3><span id="huo-qu-w-zhi">获取 w 值</span></h3><p>自此 <code>w</code> 的就已经出来了，<code>r7z + H7z</code> 即为 <code>w</code> 的值。</p><p><img src="https://cdn.itbob.cn/img/article/059/30.png" alt="30"></p><h2><span id="jie-guo-yan-zheng">结果验证</span></h2><p>测试过掉验证码抓取数据成功：</p><p><img src="https://cdn.itbob.cn/img/article/059/31.png" alt="31"></p>]]></content>
      
      
      <categories>
          
          <category> 验证码逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 验证码逆向实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云片行为验证，滑动验证码、点选验证码逆向分析</title>
      <link href="/article/058/"/>
      <url>/article/058/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/captcha_reverse.png" alt="captcha_reverse"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#zhua-bao-fen-xi">抓包分析</a></li><li><a href="#ni-xiang-fen-xi">逆向分析</a><ul><li><a href="#tu-pian-jie-kou">图片接口</a></li><li><a href="#yan-zheng-jie-kou">验证接口</a></li></ul></li><li><a href="#jie-guo-yan-zheng">结果验证</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>目标：某片的滑动验证码和点选验证码逆向</li><li>主页：<code>aHR0cHM6Ly93d3cueXVucGlhbi5jb20vcHJvZHVjdC9jYXB0Y2hh</code></li></ul><p><img src="https://cdn.itbob.cn/img/article/058/01.png" alt="01"></p><h2><span id="zhua-bao-fen-xi">抓包分析</span></h2><p>验证码图片获取接口，GET 请求，包含四个参数：<code>cb</code>、<code>i</code>、<code>k</code>、<code>captchaId</code>，有时候可能也会有 <code>token</code> 参数，那是因为不是第一次加载图片，比如刷新图片，会将之前接口的 <code>token</code> 值带上。</p><p><img src="https://cdn.itbob.cn/img/article/058/02.png" alt="02"></p><p>接口返回，如果是滑动验证码，则 <code>bg</code> 是背景图，<code>front</code> 是滑块图，还有个 <code>token</code> 值后续会用到。</p><p><img src="https://cdn.itbob.cn/img/article/058/03.png" alt="03"></p><p>如果是点选验证码，则 <code>captchaImage</code> 是底图，<code>wordsImage</code> 是需要点击的文字，同样的有个 <code>token</code> 值后续会用到。</p><p><img src="https://cdn.itbob.cn/img/article/058/04.png" alt="04"></p><p>验证接口，包含五个参数：<code>cb</code>、<code>i</code>、<code>k</code>、<code>token</code>、<code>captchaId</code>，其中 <code>token</code> 就是获取验证码接口返回的。</p><p><img src="https://cdn.itbob.cn/img/article/058/05.png" alt="05"></p><p><img src="https://cdn.itbob.cn/img/article/058/06.png" alt="06"></p><h2><span id="ni-xiang-fen-xi">逆向分析</span></h2><h3><span id="tu-pian-jie-kou">图片接口</span></h3><p>先来看看获取验证码图片的接口，全局搜索关键字 <code>captchaId</code> 即可定位到 key 为 <code>jsonpRequest</code> 的地方，下图中的 <code>t</code> 就是完整的接口 URL 了：</p><p><img src="https://cdn.itbob.cn/img/article/058/07.png" alt="07"></p><p>往上挨个找，先看看 <code>captchaId</code>，其实就是 <code>this.APP_ID</code>，多次刷新你会发现，对于滑块来讲，是定值 <code>974cd565f11545b6a5006d10dc324281</code>，对于点选来讲，是定值 <code>e1e7be036f9242c7aed023438af66f46</code>，这两个值在一个 JS 里是写死的，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/058/08.png" alt="08"></p><p><img src="https://cdn.itbob.cn/img/article/058/09.png" alt="09"></p><p>再往上看，<code>HOSTS</code> 啥的是定值就不用说了，<code>cb</code> 就是 <code>r</code>，<code>i</code> 就是 <code>a.i</code>，<code>k</code> 就是 <code>a.k</code>，通过 <code>concat()</code> 方法连接起来，所以只需要搞定 <code>r</code> 和 <code>a</code> 的值就行了，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/058/10.png" alt="10"></p><p><code>a</code> 的值是通过 <code>encrypt(e)</code> 得到的，<code>e</code> 里面有 <code>fp</code>、<code>address</code>、<code>yp_riddler_id</code> 等值，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/058/11.png" alt="11"></p><p>先看看这个 <code>encrypt</code> 方法，最终返回的是 <code>i</code> 和 <code>k</code>，瞧瞧这熟悉的 <code>iv</code>、<code>parse</code>，一看就是 AES、DES 之类的，试一下就知道了，或者跟进 <code>lt.a.encrypt()</code> 看看他的源码，对比一下标准算法里的源码，就可以发现是 AES，<code>k</code> 就很明显了，RSA 加密，公钥啥的一搜就有。</p><p><img src="https://cdn.itbob.cn/img/article/058/12.png" alt="12"></p><p>然后往上有个 <code>yp_riddler_id</code>，貌似是从 cookie 中拿的，直接搜索这个关键字，可以找到其设置值的地方，就是一个 UUID，其中有个 <code>window.performance.now()</code> 方法，其作用是返回一个当前页面执行的时间的时间戳，用来精确计算程序执行时间，在 node 实现方法如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> perf = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;perf_hooks&#x27;</span>);performance = perf.performance.now()<span class="hljs-built_in">console</span>.log(performance);</code></pre><p><img src="https://cdn.itbob.cn/img/article/058/13.png" alt="13"></p><p><img src="https://cdn.itbob.cn/img/article/058/14.png" alt="14"></p><p>然后再往上有个 <code>e.fp = this.fingerprint</code>，这里用到的应该是一个指纹库：<a href="https://github.com/fingerprintjs/fingerprintjs">https://github.com/fingerprintjs/fingerprintjs</a> ，感兴趣的可以了解一下，同一个浏览器得到的指纹是一样的，这里固定即可。</p><p><img src="https://cdn.itbob.cn/img/article/058/15.png" alt="15"></p><p>然后就是 <code>r</code> 的值，<code>preAdd</code> 方法，直接扣就行了</p><p><img src="https://cdn.itbob.cn/img/article/058/16.png" alt="16"></p><p><img src="https://cdn.itbob.cn/img/article/058/17.png" alt="17"></p><p>然后这个 <code>e</code> 的值，再传到 <code>jsonpRequest</code> 之前就已经有一些值了，所以我们还得往前跟栈看看：</p><p><img src="https://cdn.itbob.cn/img/article/058/18.png" alt="18"></p><p>来到 <code>getCaptcha</code> 这里，没啥特别的，扣就完事儿了，其中有个 <code>browserInfo</code> 是浏览器的一些东西，copy 下来就行了。</p><p><img src="https://cdn.itbob.cn/img/article/058/19.png" alt="19"></p><h3><span id="yan-zheng-jie-kou">验证接口</span></h3><p>验证接口最后也是走的 <code>jsonpRequest</code>，和前面的获取图片接口类似，不同之处就是传入的 <code>e</code> 里面包含的值不一样，先来看看滑块：</p><p><img src="https://cdn.itbob.cn/img/article/058/20.png" alt="20"></p><p>包含 <code>distanceX</code> 和 <code>points</code>，很明显 <code>points</code> 就是轨迹了，再往前跟看看，如下图所示，我们只需要 <code>i</code> 和 <code>r</code> 参数就行了，参数是一些图片高宽，固定就行，<code>offsetX</code> 是滑动的距离。</p><p><img src="https://cdn.itbob.cn/img/article/058/21.png" alt="21"></p><p>主要看看这个轨迹 <code>i = this.reducePoints()</code>，跟进 <code>reducePoints()</code> 方法里，<code>this.position</code> 是轨迹信息，这个方法对轨迹做了一些处理再返回的，直接把逻辑扣下来即可。</p><p><img src="https://cdn.itbob.cn/img/article/058/22.png" alt="22"></p><p>滑块就到这儿了，再来看看点选验证，同样的还是 <code>jsonpRequest</code>，传入的 <code>e</code> 包含了三个点的坐标。</p><p><img src="https://cdn.itbob.cn/img/article/058/23.png" alt="23"></p><p>同样往上跟栈，这里的 <code>this.position</code> 才是真实坐标，后面每个坐标分别对 x 和 y 与图片的宽和高进行相除，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/058/24.png" alt="24"></p><h2><span id="jie-guo-yan-zheng">结果验证</span></h2><p><img src="https://cdn.itbob.cn/img/article/058/25.png" alt="25"></p>]]></content>
      
      
      <categories>
          
          <category> 验证码逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 验证码逆向实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安某客滑动验证码逆向分析</title>
      <link href="/article/057/"/>
      <url>/article/057/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/captcha_reverse.png" alt="captcha_reverse"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#zhua-bao-fen-xi">抓包分析</a></li><li><a href="#dinfo-sheng-cheng">dInfo 生成</a></li><li><a href="#getinfotp-jie-mi">getInfoTp 解密</a></li><li><a href="#data-sheng-cheng">data 生成</a></li><li><a href="#gui-ji-chu-li">轨迹处理</a></li><li><a href="#jie-guo-yan-zheng">结果验证</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>目标：安某客滑动验证码逆向分析</li><li>主页：<code>aHR0cHM6Ly93d3cuYW5qdWtlLmNvbS9jYXB0Y2hhLXZlcmlmeS8/Y2FsbGJhY2s9c2hpZWxkJmZyb209YW50aXNwYW0=</code></li></ul><p><img src="https://cdn.itbob.cn/img/article/057/01.png" alt="01"></p><h2><span id="zhua-bao-fen-xi">抓包分析</span></h2><p>首页请求，有个初始化函数，其中有个 <code>sessionId</code> 后续会用到。</p><p><img src="https://cdn.itbob.cn/img/article/057/02.png" alt="02"></p><p>然后有个 <code>getInfoTp</code> 的请求，<code>Form Data</code> 里有个 <code>dInfo</code> 是加密参数，返回值里 <code>info</code> 也是加密的，包含了图片信息，返回值 <code>responseId</code> 在后续的请求也会用到。</p><p><img src="https://cdn.itbob.cn/img/article/057/03.png" alt="03"></p><p>滑动之后，有个 <code>checkInfoTp</code> 请求，<code>Form Data</code> 里有个 <code>data</code> 是加密参数，包含了轨迹信息，返回值 <code>message</code> 可以看到是否校验成功。</p><p><img src="https://cdn.itbob.cn/img/article/057/04.png" alt="04"></p><p>整体流程就是：请求首页获取 <code>sessionId</code>，请求 <code>getInfoTp</code> 获取图片信息和 <code>responseId</code>，请求 <code>checkInfoTp</code> 校验是否成功，中间涉及到 <code>dInfo</code> 和 <code>data</code> 两个加密参数，以及 <code>getInfoTp</code> 返回得到的 <code>info</code> 的解密。</p><h2><span id="dinfo-sheng-cheng">dInfo 生成</span></h2><p>先来看 <code>getInfoTp</code> 请求的 <code>dInfo</code> 参数，直接搜索可定位，刷新断下，大致就可以看出是 AES 加密，传入了 <code>sessionId</code> 和一个 <code>_taN()</code> 函数的返回值：</p><p><img src="https://cdn.itbob.cn/img/article/057/05.png" alt="05"></p><p><code>_taN()</code> 函数是一些 URL，UA 之类的信息，可以写死：</p><p><img src="https://cdn.itbob.cn/img/article/057/06.png" alt="06"></p><p>往里跟就可以看到 AES 算法了：</p><p><img src="https://cdn.itbob.cn/img/article/057/07.png" alt="07"></p><p>这里简简单单扣一下，JavaScript 代码如下：</p><pre><code class="hljs javascript"><span class="hljs-comment">/* ==================================</span><span class="hljs-comment"># @Time    : 2021-12-14</span><span class="hljs-comment"># @Author  : ITBOB.CN</span><span class="hljs-comment"># @FileName: ajk.js</span><span class="hljs-comment"># @Software: PyCharm</span><span class="hljs-comment"># ================================== */</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AESEncrypt</span>(<span class="hljs-params">_cRV, _2undefinedp</span>) </span>&#123;    _2undefinedp = _2undefinedp.split(<span class="hljs-string">&quot;&quot;</span>).reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">_PUi, _JrX, _JP9</span>) </span>&#123;        <span class="hljs-keyword">return</span> _JP9 % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? _PUi + <span class="hljs-string">&quot;&quot;</span> : _PUi + _JrX;    &#125;, <span class="hljs-string">&quot;&quot;</span>);    _2undefinedp = CryptoJS.enc.Utf8.parse(_2undefinedp);    _cRV = <span class="hljs-string">&quot;string&quot;</span> == <span class="hljs-keyword">typeof</span> _cRV ? _cRV : <span class="hljs-built_in">JSON</span>.stringify(_cRV);    _cRV = CryptoJS.AES.encrypt(_cRV, _2undefinedp, &#123;        <span class="hljs-attr">iv</span>: _2undefinedp,        <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,        <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7    &#125;);    <span class="hljs-keyword">return</span> <span class="hljs-built_in">encodeURIComponent</span>(_cRV.toString())&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">u</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> &#123;        <span class="hljs-string">&quot;sdkv&quot;</span>: <span class="hljs-string">&quot;3.0.1&quot;</span>,        <span class="hljs-string">&quot;busurl&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com/captcha-verify/?callback=shield&amp;from=antispam&quot;</span>,        <span class="hljs-string">&quot;useragent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;</span>,        <span class="hljs-string">&quot;clienttype&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDInfo</span>(<span class="hljs-params">sessionId</span>)</span>&#123;    <span class="hljs-keyword">return</span> AESEncrypt(u(), sessionId)&#125;<span class="hljs-comment">// 测试样例</span><span class="hljs-keyword">var</span> sessionId = <span class="hljs-string">&quot;a8b339ec0c26459598786fee1cce8dc2&quot;</span><span class="hljs-built_in">console</span>.log(getDInfo(sessionId))</code></pre><p>这段逻辑也可以用 Python 来实现，关键代码如下（脱敏处理，不能直接运行）：</p><pre><code class="hljs python"><span class="hljs-comment"># ==================================</span><span class="hljs-comment"># --*-- coding: utf-8 --*--</span><span class="hljs-comment"># @Time    : 2021-12-14</span><span class="hljs-comment"># @Author  : ITBOB.CN</span><span class="hljs-comment"># @FileName: ajk.py</span><span class="hljs-comment"># @Software: PyCharm</span><span class="hljs-comment"># ==================================</span><span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote_plus<span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AESAlgorithm</span>:</span><span class="hljs-meta">    @staticmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params">aes_key_iv, text</span>):</span>        <span class="hljs-string">&quot;&quot;&quot; 对明文进行加密 &quot;&quot;&quot;</span>        cipher = AES.new(key=<span class="hljs-built_in">bytes</span>(aes_key_iv, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>), mode=AES.MODE_CBC, iv=<span class="hljs-built_in">bytes</span>(aes_key_iv, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))        result = base64.b64encode(cipher.encrypt(pad(text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), <span class="hljs-number">16</span>))).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)        result = quote_plus(result)        <span class="hljs-keyword">return</span> result<span class="hljs-meta">    @staticmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params">aes_key_iv, text</span>):</span>        <span class="hljs-string">&quot;&quot;&quot; 对密文进行解密 &quot;&quot;&quot;</span>        cipher = AES.new(key=<span class="hljs-built_in">bytes</span>(aes_key_iv, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>), mode=AES.MODE_CBC, iv=<span class="hljs-built_in">bytes</span>(aes_key_iv, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))        result = unpad(cipher.decrypt(base64.b64decode(text)), <span class="hljs-number">16</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)        <span class="hljs-keyword">return</span> result<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AJKSlide</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, index_url, user_agent</span>):</span>        self.aes = AESAlgorithm()        self.index_url = index_url        self.user_agent = user_agent        self.headers = &#123;<span class="hljs-string">&quot;user-agent&quot;</span>: self.user_agent&#125;    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_session_id</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot; 获取 sessionId &quot;&quot;&quot;</span>        response = requests.get(url=self.index_url, headers=self.headers).text        session_id = etree.HTML(response).xpath(<span class="hljs-string">&quot;//input[@name=&#x27;sessionId&#x27;]/@value&quot;</span>)[<span class="hljs-number">0</span>]        logger.info(<span class="hljs-string">f&quot;sessionId ==&gt; <span class="hljs-subst">&#123;session_id&#125;</span>&quot;</span>)        <span class="hljs-keyword">return</span> session_id<span class="hljs-meta">    @staticmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_aes_key_iv</span>(<span class="hljs-params">session_id</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;设置 AES key 和 iv&quot;&quot;&quot;</span>        aes_key_iv = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(session_id):            <span class="hljs-keyword">if</span> index % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:                aes_key_iv += value        logger.info(<span class="hljs-string">f&quot;处理 sessionId 获取 aes key iv ==&gt; <span class="hljs-subst">&#123;aes_key_iv&#125;</span>&quot;</span>)        <span class="hljs-keyword">return</span> aes_key_iv    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_d_info</span>(<span class="hljs-params">self, aes_key_iv</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;获取 dInfo&quot;&quot;&quot;</span>        sdk_info = &#123;            <span class="hljs-string">&quot;sdkv&quot;</span>: <span class="hljs-string">&quot;3.0.1&quot;</span>,            <span class="hljs-string">&quot;busurl&quot;</span>: self.index_url,            <span class="hljs-string">&quot;useragent&quot;</span>: self.user_agent,            <span class="hljs-string">&quot;clienttype&quot;</span>: <span class="hljs-number">1</span>        &#125;        d_info = self.aes.encrypt(aes_key_iv, json.dumps(sdk_info))        logger.info(<span class="hljs-string">f&#x27;dInfo ==&gt; <span class="hljs-subst">&#123;d_info&#125;</span>&#x27;</span>)        <span class="hljs-keyword">return</span> d_info    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self, session_id=<span class="hljs-literal">None</span></span>):</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session_id:            session_id = self.get_session_id()        aes_key_iv = self.get_aes_key_iv(session_id)        self.get_d_info(aes_key_iv)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    UA = <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&quot;</span>    index_url_ = <span class="hljs-string">&quot;https://www.脱敏处理.com/captcha-verify/?callback=shield&amp;from=antispam&quot;</span>    ajk_slide = AJKSlide(index_url_, UA)    ajk_slide.run()</code></pre><h2><span id="getinfotp-jie-mi">getInfoTp 解密</span></h2><p><code>getInfoTp</code> 这个接口返回的 <code>info</code> 的值是加密的，前面我们已经知道用到了 AES 加密算法，这里可以直接猜测也是用的的 AES 来解密的，找到 <code>AESDecrypt</code> 这个方法，下个断点，刷新发现断下之后传入了两个参数，第一个正是 <code>info</code> 的内容，第二个则是 <code>sessionId</code>。</p><p><img src="https://cdn.itbob.cn/img/article/057/08.png" alt="08"></p><p><img src="https://cdn.itbob.cn/img/article/057/09.png" alt="09"></p><p>解密结果可以看到滑块的图片地址等信息：</p><p><img src="https://cdn.itbob.cn/img/article/057/10.png" alt="10"></p><h2><span id="data-sheng-cheng">data 生成</span></h2><p>接下来就是 <code>checkInfoTp</code> 提交验证了，要搞清楚提交的 <code>data</code> 是什么东西，同样搜索打断点，如下图所示 <code>_5DD</code> 就是 <code>data</code> 值，传过来的。</p><p><img src="https://cdn.itbob.cn/img/article/057/11.png" alt="11"></p><p>往上跟栈，可以看到 <code>_Ug0</code> 里面有个 <code>track</code> 参数，这明显就是轨迹了，同样最后的结果经过了 AES 加密。</p><p><img src="https://cdn.itbob.cn/img/article/057/12.png" alt="12"></p><p>再往上跟，可以看到 <code>_Ug0</code> 由三个参数组成，<code>x</code> 是水平滑动的距离，<code>track</code> 是轨迹，<code>p</code> 是定值。</p><p><img src="https://cdn.itbob.cn/img/article/057/13.png" alt="13"></p><h2><span id="gui-ji-chu-li">轨迹处理</span></h2><p>轨迹生成前，得先识别缺口得到要滑动的距离，方式有很多，比如 <code>OpenCV</code>、开源的 <code>ddddocr</code>，或者直接打码平台都行，这里唯一要注意的一点就是图片是有缩放的，原始尺寸 <code>480 × 270 px</code> 渲染后的尺寸 <code>280 × 158 px</code>，比例大概是 <code>1:0.5833333333333333</code>，可以先将图片进行缩放后再识别，也可以先识别距离后再将距离进行缩放。</p><p><img src="https://cdn.itbob.cn/img/article/057/14.png" alt="14"></p><p>轨迹的处理，该站点校验并不太严格，所以可以自己写一下，关于滑块的轨迹处理，主要有缩放法、本地轨迹库、根据一些函数来生成轨迹，如缓动函数、贝塞尔曲线等，以后再单独写一篇文章来介绍，本例中可以使用缩放法，先采集一条正常的，手动滑出来的轨迹，然后根据识别出的实际距离和样本轨迹中的距离相比，得到一个比值，然后将样本中的 x 值和时间值都做一个对应的缩放，生成新的轨迹，主要代码如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_track</span>(<span class="hljs-params">distance</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;生成轨迹，样本距离为 126&quot;&quot;&quot;</span>    ratio = distance / <span class="hljs-number">126</span>    new_track = <span class="hljs-string">&quot;&quot;</span>    base_track = <span class="hljs-string">&quot;29,11,0|29,11,11|29,11,26|33,11,56|34,11,66|36,11,67|39,11,76|41,11,83|43,11,86|46,11,92|49,11,98|50,11,102|52,11,106|53,11,111|55,11,116|57,11,118|59,11,123|60,11,126|62,11,132|64,12,134|65,12,138|66,12,142|68,12,148|69,12,151|70,13,155|71,13,158|72,13,164|74,13,166|75,13,170|76,14,174|77,14,180|79,14,182|81,14,186|82,14,196|84,14,198|86,14,207|87,15,212|89,15,219|90,15,223|92,15,230|93,15,234|94,15,239|95,15,243|98,15,246|100,15,250|102,15,260|105,15,262|106,15,266|108,15,270|109,16,276|111,16,278|113,16,283|115,16,286|117,16,291|118,16,294|119,16,298|121,16,302|123,16,309|124,16,311|125,16,315|126,16,319|129,16,324|130,16,327|131,16,331|132,16,334|132,16,388|132,16,522|133,16,566|134,16,574|135,16,575|136,16,594|137,16,620|138,16,625|139,16,652|140,16,657|141,17,676|141,18,680|142,18,684|143,18,688|144,18,716|145,18,724|146,18,796|147,19,828|148,19,860|149,19,888|149,19,890|150,19,916|151,20,932|152,20,936|152,20,1021|153,20,1150|154,20,1152|155,20,1236|155,20,1388|155,20,1522|155,20,1717|&quot;</span>    base_track = base_track.split(<span class="hljs-string">&quot;|&quot;</span>)[:-<span class="hljs-number">1</span>]    <span class="hljs-keyword">for</span> track <span class="hljs-keyword">in</span> base_track:        t = track.split(<span class="hljs-string">&quot;,&quot;</span>)        new_track += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">int</span>(t[<span class="hljs-number">0</span>]) * ratio)) + <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-built_in">str</span>(t[<span class="hljs-number">1</span>]) + <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">int</span>(t[<span class="hljs-number">2</span>]) * ratio)) + <span class="hljs-string">&quot;|&quot;</span>        logger.info(<span class="hljs-string">f&quot;new_track ==&gt; <span class="hljs-subst">&#123;new_track&#125;</span>&quot;</span>)        <span class="hljs-keyword">return</span> new_track</code></pre><h2><span id="jie-guo-yan-zheng">结果验证</span></h2><p>整个过程比较简单，验证成功。</p><p><img src="https://cdn.itbob.cn/img/article/057/15.png" alt="15"></p>]]></content>
      
      
      <categories>
          
          <category> 验证码逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 验证码逆向实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抖音短视频 X-Bogus 逆向分析，JSVMP 纯算法还原</title>
      <link href="/article/056/"/>
      <url>/article/056/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/javascript_reverse.png" alt="javascript_reverse"></p><blockquote><p><strong>X-Bogus 参数，纯算法成品，交流请咨询微信：IT-BOB</strong><br><strong>X-Bogus 参数，纯算法成品，交流请咨询微信：IT-BOB</strong><br><strong>X-Bogus 参数，纯算法成品，交流请咨询微信：IT-BOB</strong></p></blockquote><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#shi-me-shi-jsvmp">什么是 JSVMP？</a></li><li><a href="#jsvmp-you-na-xie-xue-xi-zi-liao">JSVMP 有哪些学习资料？</a></li><li><a href="#jsvmp-ni-xiang-fang-fa-you-na-xie">JSVMP 逆向方法有哪些？</a></li><li><a href="#zhua-bao-qing-kuang">抓包情况</a></li><li><a href="#ni-xiang-fen-xi">逆向分析</a></li><li><a href="#cha-zhuang-fen-xi">插桩分析</a></li><li><a href="#28-ge-zi-fu-sheng-cheng-luo-ji">28个字符生成逻辑</a></li><li><a href="#luan-ma-zi-fu-chuan-sheng-cheng-luo-ji">乱码字符串生成逻辑</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>目标：某音短视频网页端用户信息接口 X-Bogus 参数</li><li>接口：<code>aHR0cHM6Ly93d3cuZG91eWluLmNvbS9hd2VtZS92MS93ZWIvdXNlci9wcm9maWxlL290aGVyLw==</code></li></ul><h2><span id="shi-me-shi-jsvmp">什么是 JSVMP？</span></h2><p>JSVMP 全称 Virtual Machine based code Protection for JavaScript，即 JS 代码虚拟化保护方案。</p><p>JSVMP 的概念最早应该是由西北大学2015级硕士研究生匡开圆，在其2018年的学位论文中提出的，论文标题为：《基于 WebAssembly 的 JavaScript 代码虚拟化保护方法研究与实现》，同年还申请了国家专利，专利名称：《一种基于前端字节码技术的 JavaScript 虚拟化保护方法》，网上可以直接搜到，也可<a href="https://pan.baidu.com/s/1KJWJOgB8JeQx11p6ZJZBUg?pwd=6666">点击此链接</a>（密码6666），免费获取原版高清无水印的论文和专利。本文就简单介绍一下 JSVMP，想要详细了解，当然还是建议去读一下这篇论文。</p><p><img src="https://cdn.itbob.cn/img/article/056/01.png" alt="01"></p><p>JSVMP 的核心是在 JavaScript 代码保护过程中引入代码虚拟化思想，实现源代码的虚拟化过程，将目标代码转换成自定义的字节码，这些字节码只有特殊的解释器才能识别，隐藏目标代码的关键逻辑。在匡开圆的论文中，利用 WebAssembly 技术实现了特殊的虚拟解释器，通过编译隐藏解释器的执行逻辑。JSVMP 的保护流程如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/056/02.png" alt="02"></p><p>一个完整的 JSVMP 保护系统，大致的架构应该是这样子的：服务器端读取 JavaScript 代码 —&gt; 词法分析 —&gt; 语法分析 —&gt; 生成AST语法树 —&gt; 生成私有指令 —&gt; 生成对应私有解释器，将私有指令加密与私有解释器发送给浏览器，然后一边解释，一边执行。</p><p><img src="https://cdn.itbob.cn/img/article/056/03.png" alt="03"></p><h2><span id="jsvmp-you-na-xie-xue-xi-zi-liao">JSVMP 有哪些学习资料？</span></h2><p>除了匡开圆的论文以外，还有以下文章也值得学习：</p><ul><li><a href="https://mp.weixin.qq.com/s/YDx5Dr-HDfAm-sAqeWW0qg">H5应用加固防破解-js虚拟机保护方案浅谈</a></li><li><a href="https://blog.csdn.net/w2sft/article/details/120843310">JS加密？用虚拟机opcode保护JS源码</a></li><li><a href="https://bbs.pediy.com/thread-261414.htm">给&quot;某音&quot;的js虚拟机写一个编译器</a></li></ul><h2><span id="jsvmp-ni-xiang-fang-fa-you-na-xie">JSVMP 逆向方法有哪些？</span></h2><p>就目前来讲，JSVMP 的逆向方法有三种（自动化不算）：RPC 远程调用，补环境，日志断点还原算法，其中日志断点也称为插桩，找到关键位置，输出关键参数的日志信息，从结果往上倒推生成逻辑，以达到算法还原的目的，RPC 技术以前写过文章，补环境的方式以后有时间再写，本文主要介绍如何使用插桩来还原算法。</p><h2><span id="zhua-bao-qing-kuang">抓包情况</span></h2><p>随便来到某个博主主页，抓包后搜索可发现一个接口，返回的是 JSON 数据，里面包含了博主某音号，认证信息、签名，关注、粉丝、获赞等，请求 <code>Query String Parameters</code> 里包含了一个 <code>X-Bogus</code> 参数，每次请求会改变，此外还有 <code>sec_user_id</code> 是博主主页 URL 后面那一串，<code>webid</code> 直接请求主页返回内容里就有，<code>msToken</code> 与 cookie 有关，清除 cookie 访问，就没这个参数了，实测该接口不验证 <code>webid</code> 和 <code>msToken</code>，直接置空即可。</p><p><img src="https://cdn.itbob.cn/img/article/056/04.png" alt="04"></p><p><img src="https://cdn.itbob.cn/img/article/056/05.png" alt="05"></p><h2><span id="ni-xiang-fen-xi">逆向分析</span></h2><p>这条请求是 XHR 请求，所以直接下个 XHR 断点，当 URL 中包含 <code>X-Bogus</code> 参数时就断下：</p><p><img src="https://cdn.itbob.cn/img/article/056/06.png" alt="06"></p><p><img src="https://cdn.itbob.cn/img/article/056/07.png" alt="07"></p><p>往前跟栈，来到一个叫 webmssdk.js 的 JS 文件，这里就是生成参数的主要 JS 逻辑了，也就是 JSVMP，整体上做了一个混淆，这里可以使用 AST 来解混淆，以前同样也写过 AST 的文章，这里还原混淆不是重点，咱们直接使用 V 佬的插件 <a href="https://github.com/cilame/v_jstools">v_jstools</a> 来还原：</p><p><img src="https://cdn.itbob.cn/img/article/056/08.png" alt="08"></p><p>还原后使用浏览器的 Overrides 替换功能将 webmssdk.js 替换掉，往上跟栈，如下图所示，到 W 这里就已经生成了 <code>X-Bogus</code> 了，<code>this.openArgs[1]</code> 就是携带了 <code>X-Bogus</code> 的完整 URL，仔细观察这段代码，有很多三元表达式，当 M 的值为 15 时，就会走到这段逻辑，U 的值生成之后，有一个 <code>S[C] = U</code> 的操作。</p><p><img src="https://cdn.itbob.cn/img/article/056/09.png" alt="09"></p><p>再往上看代码，S 是一个数组，单步调试的话会发现代码会一直走这个 <code>if-else</code> 的逻辑，几乎每一步都有 S 数组的参与，不断往里面增删改查值，for 循环里面的 I 值，决定着后续 if 语句的走向，这里也就是插桩的关键所在，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/056/10.png" alt="10"></p><h2><span id="cha-zhuang-fen-xi">插桩分析</span></h2><p>大的 for 循环和 if-else 逻辑有两个地方，为了保证最后的日志更加详细完整，在这两个地方都下个日志断点（右键 <code>Add logpoint</code>），断点内容为：</p><pre><code class="hljs text">&quot;位置 1&quot;, &quot;索引I&quot;, I, &quot;索引A&quot;, A, &quot;值S: &quot;, JSON.stringify(S, function(key, value) &#123;if (value == window) &#123;return undefined&#125; return value&#125;)&quot;位置 2&quot;, &quot;索引I&quot;, I, &quot;索引A&quot;, A, &quot;值S: &quot;, JSON.stringify(S, function(key, value) &#123;if (value == window) &#123;return undefined&#125; return value&#125;)</code></pre><p><img src="https://cdn.itbob.cn/img/article/056/11.png" alt="11"></p><p>插桩输出 S 的时候为什么要写这么长一串呢？首先 <code>JSON.stringify()</code> 方法的作用是将 JavaScript 值转换为 JSON 字符串，基础语法是 <code>JSON.stringify(value[, replacer [, space]])</code>，如果不将其转换成 JSON，那么 S 的值，输出可能是这样的：<code>[empty, Array(26), 1, Array(0)]</code>，你看不到 Array 数组里面具体的值，该方法有个可选参数 replacer，如果 replacer 为函数，则 <code>JSON.stringify</code> 将调用该函数，并传入每个成员的键和值，在函数中可以对成员进行处理，最后返回处理后的值，如果此函数返回 undefined，则排除该成员，举个例子：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1 = &#123;<span class="hljs-attr">key1</span>: <span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-attr">key2</span>: <span class="hljs-string">&#x27;value2&#x27;</span>&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeValue</span>(<span class="hljs-params">key, value</span>) </span>&#123;    <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&#x27;value2&#x27;</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ITBOB&#x27;</span>    &#125; <span class="hljs-keyword">return</span> value&#125;<span class="hljs-keyword">var</span> obj2 = <span class="hljs-built_in">JSON</span>.stringify(obj1, changeValue)<span class="hljs-built_in">console</span>.log(obj2)<span class="hljs-comment">// 输出：&#123;&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;ITBOB&quot;&#125;</span></code></pre><p>上面的代码中 <code>JSON.stringify</code> 传入了一个函数，当 <code>value</code> 为 <code>value2</code> 的时候就将其替换成字符串 <code>ITBOB</code>，接下来我们演示一下当 <code>value</code> 为 <code>window</code> 时，会发生什么：</p><p><img src="https://cdn.itbob.cn/img/article/056/12.png" alt="12"></p><p>根据报错我们可以看到这里由于循环引用导致异常，要知道在插桩的时候，如果插桩内容有报错，就会导致不能正常输出日志，这样就会缺失一部分日志，这种情况我们就可以加个函数处理一下，让 value 为 window 的时候，JSON 处理的时候函数返回 undefined，排除该成员，其他成员正常输出，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/056/13.png" alt="13"></p><p>以上就是日志断点为什么要这样写的原因，下好日志断点后，注意前面我们下的 XHR 断点不要取消，然后刷新网页，控制台就开始打印日志了，因为有很多 XHR 请求都包含了 X-Bogus，如果你 XHR 断点取消了，日志就会一直打印直到卡死。日志输出完毕后，大约有8千多条，搜索就能看到最后一条日志 X-Bogus 已经生成了：</p><p><img src="https://cdn.itbob.cn/img/article/056/14.png" alt="14"></p><h2><span id="28-ge-zi-fu-sheng-cheng-luo-ji">28个字符生成逻辑</span></h2><p>直接在打印的日志页面右键 <code>save as..</code>，将日志导出到本地进行分析。<code>X-Bogus</code> 由28个字符组成，现在要做的就是看 <code>DFSzswVOAATANH89SMHZqF9WX7n6</code> 这28个字符是怎么来的，在日志里搜索这个字符串，找到第一次出现的地方，观察一下可以发现，他是逐个字符依次生成的，如下图红框所示：</p><p><img src="https://cdn.itbob.cn/img/article/056/15.png" alt="15"></p><p>在上图中，第8511行，X-Bogus 字符串的下一个元素是 null，到了第8512行，就生成数字6了，那么在这两步之间就是数字6的生成逻辑，这个时候我们看第8511行的日志断点是 <code>位置 2 索引I 16 索引A 738</code>，那么我们回到原网页，在位置2，下一个条件断点（右键 <code>Add conditional breakpoint</code>），当 <code>I == 16 &amp;&amp; A == 738 &amp;&amp; S[7] &amp;&amp; S[7] == 21</code> 时就断下。之所以要加 <code>S[7]</code> 是因为 <code>索引I 16 索引A 738</code> 的位置有很多，在日志里搜一下大概有40多个，多加个限制条件就可以缩小范围，当然有可能加了多个条件仍然有多个位置都满足，这就需要你细心观察了，通过断点断下的时候看看控制台前面输出的日志来判断是不是我们想要的位置。这也是一个小细节，一定要找准位置，千万别搞混了。（提示一下，像我这样下断点的话，一般情况下会断下两次，第二次是满足要求的）</p><p>（注意：本文描述的日志的多少行、断点的具体位置、变量的具体值，可能会有所变化，以你的实际情况为准，但思路是一样的）</p><p><img src="https://cdn.itbob.cn/img/article/056/16.png" alt="16"></p><p>刷新网页，断下之后开始单步跟，来到下图所示的地方：</p><p><img src="https://cdn.itbob.cn/img/article/056/17.png" alt="17"></p><p>到这里之后，就不要下一步了，再下一步有可能整个语句就执行完毕了，其中的细节你看不到，所以这里我们在控制台挨个输入看看：</p><p><img src="https://cdn.itbob.cn/img/article/056/18.png" alt="18"></p><p>可以看到实际上的逻辑就是返回指定位置的字符，y 的值就是 <code>S[5]</code>，m 的值就是 <code>S[4]</code>，经过多次调试发现 m 的值是固定的，M 就是 <code>charAt()</code> 方法，我们再看看我们本地的日志，<code>S[5]</code> 的值为 <code>[20]</code>，<code>charAt()</code> 取值出来就是6，逻辑完全正确。</p><p><img src="https://cdn.itbob.cn/img/article/056/19.png" alt="19"></p><p>现在我们还需要知道这个20是怎么来的，继续往上看，找到20第一次出现的地方，在第8510行，那么我们就要使其在上一步断下，也就是第8509行，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/056/20.png" alt="20"></p><p>第8509行的索引信息为 <code>位置 2 索引I 47 索引A 730</code>，同样的下条件断点观察怎么生成的：</p><p><img src="https://cdn.itbob.cn/img/article/056/21.png" alt="21"></p><p><img src="https://cdn.itbob.cn/img/article/056/22.png" alt="22"></p><p>可以看到逻辑是 <code>S[5] &amp; S[6]</code>，再看我们本地 <code>S[5] = 5647508</code>、<code>S[6] = 63 </code>，<code>5647508 &amp; 63 = 20</code>，逻辑正确，20就是这么来的。接下来又开始找 <code>5647508</code> 和 <code>63</code> 是怎么生成的，同样在生成的上一步，也就是8508行下个条件断点，这行的索引为 <code>位置 2 索引I 72 索引A 726</code>。</p><p><img src="https://cdn.itbob.cn/img/article/056/23.png" alt="23"></p><p><img src="https://cdn.itbob.cn/img/article/056/24.png" alt="24"></p><p><img src="https://cdn.itbob.cn/img/article/056/25.png" alt="25"></p><p>可以看到 63 是直接 <code>q[A]</code> 生成的，q 是一个大数组，A 就是索引为 726，q 这个大数组怎么来的先不用管，而 <code>5647508</code> 这个大数字，搜索一下，发现有很多，咱们也先放着，到这里咱们可以总结一下最后一个字符的生成步骤如下：</p><pre><code class="hljs text">short_str = &quot;Dkdpgh4ZKsQB80/Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=&quot;q[726] = 635647508 &amp; 63 = 20short_str.charAt(20) = &#x27;6&#x27;</code></pre><p>然后接日志着往上看，看倒数第二个字母是怎么来的，方法也和前面演示的一样，不断往前下条件断点，这里就不再逐步演示了，当你找完四个数字后，就可以开始看 <code>5647508</code> 这个大数字怎么来的了，搜索这个数字，同样的找到第一次出现的地方，在其前一步下条件断点，步骤捋出来会发现有一个乱码字符串经过 <code>charCodeAt()</code> 操作，再加上一些位运算得到的，乱码字符串类似下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/056/26.png" alt="26"></p><p>至于这个乱码字符串怎么来的，我们后面再讲，到这里先总结一下，首先我们的 <code>X-Bogus = DFSz swVO AATA NH89 SMHZ qF9W X7n6</code>，将其看成每四个为一组，之所以这么分组，是因为你经过分析后会发现，每一组的每一个字符生成流程都是一样的，这里以最后两组为例，流程大致如下：</p><pre><code class="hljs in">short_str = &quot;Dkdpgh4ZKsQB80/Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=&quot;X-Bogus = DFSz swVO AATA NH89 SMHZ qF9W X7n6============== 第6组【qF9W】==============&quot;\u0002ÿ-%.*yê^s6ðýÇýV,&quot;.charCodeAt(15) = 158q[342] = 16158 &lt;&lt; 16 = 10354688&quot;\u0002ÿ-%.*yê^s6ðýÇýV,&quot;.charCodeAt(16) = 253q[408] = 8253 &lt;&lt; 8 = 6476810354688 | 64768 = 10419456&quot;\u0002ÿ-%.*yê^s6ðýÇýV,&quot;.charCodeAt(17) = 156156 | 10419456 = 10419612q[520] = 1651507210419612 &amp; 16515072 = 10223616q[532] = 1810223616 &gt;&gt; 18 = 39short_str.charAt(39) = &#x27;q&#x27;q[590]= 25804810419612 &amp; 258048 = 192512q[602] = 12192512 &gt;&gt; 12 = 47short_str.charAt(47) = &#x27;F&#x27;q[660] = 403210419612 &amp; 4032 = 3456q[668] = 63456 &gt;&gt; 6 = 54short_str.charAt(54) = &#x27;9&#x27;q[726] = 6310419612 &amp; 63 = 28short_str.charAt(28) = &#x27;W&#x27;============== 第7组【X7n6】==============&quot;\u0002ÿ-%.*yê^s6ðýÇýV,&quot;.charCodeAt(18) = 86q[342] = 1686 &lt;&lt; 16 = 5636096&quot;\u0002ÿ-%.*yê^s6ðýÇýV,&quot;.charCodeAt(19) = 44q[408] = 844 &lt;&lt; 8 = 112645636096 | 11264 = 5647360&quot;\u0002ÿ-%.*yê^s6ðýÇýV,&quot;.charCodeAt(20) = 148148 | 5647360 = 5647508q[520] = 165150725647508 &amp; 16515072 = 5505024q[532] = 185505024 &gt;&gt; 18 = 21short_str.charAt(21) = &#x27;X&#x27;q[590] = 2580485647508 &amp; 258048 = 139264q[602] = 12139264 &gt;&gt; 12 = 34short_str.charAt(34) = &#x27;7&#x27;q[660] = 40325647508 &amp; 4032 = 3200q[668] = 63200 &gt;&gt; 6 = 50short_str.charAt(50) = &#x27;n&#x27;q[726] = 635647508 &amp; 63 = 20short_str.charAt(20) = &#x27;6&#x27;</code></pre><p>将流程对比一下就可以发现，每个步骤 q 里面的取值都是一样的，这个可以直接写死，不同之处就在于最开始的 <code>charCodeAt()</code> 操作，也就是返回乱码字符串指定位置字符的 Unicode 编码，第7组依次是 18、19、20，第6组依次是15、16、17，以此类推，第1组刚好是0、1、2，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/056/27.png" alt="27"></p><p>每一组的逻辑都是一样的，我们就可以写个通用方法，依次生成七组字符串，最后拼接成完整的 <code>X-Bogus</code>，代码如下：（乱码字符串的生成后文会讲）</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getXBogus</span>(<span class="hljs-params">originalString</span>)</span>&#123;    <span class="hljs-comment">// 生成乱码字符串</span>    <span class="hljs-keyword">var</span> garbledString = getGarbledString(originalString);    <span class="hljs-keyword">var</span> XBogus = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">// 依次生成七组字符串</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">20</span>; i += <span class="hljs-number">3</span>) &#123;        <span class="hljs-keyword">var</span> charCodeAtNum0 = garbledString.charCodeAt(i);        <span class="hljs-keyword">var</span> charCodeAtNum1 = garbledString.charCodeAt(i + <span class="hljs-number">1</span>);        <span class="hljs-keyword">var</span> charCodeAtNum2 = garbledString.charCodeAt(i + <span class="hljs-number">2</span>);        <span class="hljs-keyword">var</span> baseNum = charCodeAtNum2 | charCodeAtNum1 &lt;&lt; <span class="hljs-number">8</span> | charCodeAtNum0 &lt;&lt; <span class="hljs-number">16</span>;        <span class="hljs-comment">// 依次生成四个字符</span>        <span class="hljs-keyword">var</span> str1 = short_str[(baseNum &amp; <span class="hljs-number">16515072</span>) &gt;&gt; <span class="hljs-number">18</span>];        <span class="hljs-keyword">var</span> str2 = short_str[(baseNum &amp; <span class="hljs-number">258048</span>) &gt;&gt; <span class="hljs-number">12</span>];        <span class="hljs-keyword">var</span> str3 = short_str[(baseNum &amp; <span class="hljs-number">4032</span>) &gt;&gt; <span class="hljs-number">6</span>];        <span class="hljs-keyword">var</span> str4 = short_str[baseNum &amp; <span class="hljs-number">63</span>];        XBogus += str1 + str2 + str3 + str4;    &#125;    <span class="hljs-keyword">return</span> XBogus;&#125;</code></pre><h2><span id="luan-ma-zi-fu-chuan-sheng-cheng-luo-ji">乱码字符串生成逻辑</span></h2><p>在进行下一步之前，我们要注意两点：</p><ul><li><p>文章演示有些变量前后不对应，因为每次插桩的值都是会变的，看流程就行了，流程是正确的；</p></li><li><p>我们日志输出是经过 <code>JSON.stringify</code> 处理了的，有些步骤是向某个函数传入乱码字符串进行处理，你会发现处理后的结果和日志不一致，这是正常的。</p></li></ul><p>乱码字符串的生成相对来说稍微复杂一点，但思路仍然一样，这里就不一一截图展示了，直接用日志描述一下关键步骤，注意以下日志是正向的步骤，就不逆着推了，建议自己先逆着把流程走一走，再来看这个步骤就看得懂了。</p><p><strong>Step1</strong>：首先对 URL 后面的参数，也就是 <code>Query String Parameters</code> 进行两次 MD5、两次转 <code>Uint8Array</code> 处理，最后得到的 <code>Uint8Array</code> 对象在后面的步骤中用得到，步骤如下：</p><pre><code class="hljs text">位置 1 索引I 4  索引A 134：将 URL 后面的参数进行 MD5 加密得到字符串位置 1 索引I 16 索引A 460：将上一步的字符串转换为 Uint8Array 对象位置 1 索引I 4  索引A 134：将上一步的 Uint8Array 对象进行 MD5 加密，得到字符串位置 1 索引I 29 索引A 472：将上一步的字符串转换为 Uint8Array 对象</code></pre><p>上述步骤中，我们将最终得到的结果命名为 <code>uint8Array</code>，关键代码实现如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> md5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;md5&quot;</span>);<span class="hljs-comment">// 字符串转换为 Uint8Array 对象，缺失的变量自行补齐</span>_0x5960a2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> c = a.length &gt;&gt; <span class="hljs-number">1</span>, e = c &lt;&lt; <span class="hljs-number">1</span>, b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(c), d = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; f &lt; e; ) &#123;        b[d++] = _0x511f86[a.charCodeAt(f++)] &lt;&lt; <span class="hljs-number">4</span> | _0x511f86[a.charCodeAt(f++)];    &#125;    <span class="hljs-keyword">return</span> b;&#125;<span class="hljs-comment">// originalString: URL 后面的原始参数</span><span class="hljs-keyword">var</span> uint8Array = _0x5960a2(md5(_0x5960a2(md5(originalString))));</code></pre><p><strong>Step2</strong>：生成两个大数，一个是时间戳，我们称之为 <code>fixedString1</code>，另一个调用某个方法生成，我们称之为 <code>fixedString2</code>。</p><pre><code class="hljs text">fixedString1位置 1 索引I 43 索引A 806：1663385262240 / 1000 = 1663385262.24fixedString2位置 1 索引I 16 索引A 834：M.apply(null, []) = 536919696</code></pre><p>上述步骤中，M 对应以下方法，缺失的方法自行补齐（其中 <code>_0x229792</code> 是创建 <code>canvas</code>）：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_0x2996f8</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">return</span> _0x4b3b53 || (_0xb55f3e.perf ? -<span class="hljs-number">1</span> : (_0x4b3b53 = _0x229792(<span class="hljs-number">3735928559</span>), _0x4b3b53));    &#125; <span class="hljs-keyword">catch</span> (a) &#123;        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;    &#125;&#125;</code></pre><p><strong>Step3</strong>：先后生成两个数组，我们称之为 <code>array1</code>、<code>array2</code>，<code>array2</code> 就是由 <code>array1</code> 的元素位置变换后得来的，严格来讲，<code>array1</code> 不是一个完整的数组，而是一个个数字，这一点可以在日志中体现出来，为了方便我们就直接将其视为一个数组，两个数组都有19个元素，步骤如下：</p><pre><code class="hljs text">array1[0] 至 array1[3] 为定值array1[4]位置 1 索引I 25 索引A 946：uint8Array[14]array1[5]位置 1 索引I 25 索引A 970：uint8Array[15]array1[6] 至 array1[7] 与 post 提交的 form data 有关array1[8] 至 array1[9] 与 ua 有关，与 Step1 类似array1[10]位置 1 索引I 52 索引A 1090：fixedString1 &gt;&gt; 24 = 99位置 1 索引I 47 索引A 1098：99 &amp; 255 = 99array1[11]位置 1 索引I 52 索引A 1122：fixedString1 &gt;&gt; 16 = 25417位置 1 索引I 47 索引A 1130：25417 &amp; 255 = 73array1[12]位置 1 索引I 52 索引A 1154：fixedString1 &gt;&gt; 8 = 6506755位置 1 索引I 47 索引A 1162：6506755 &amp; 255 = 3array1[13]位置 1 索引I 52 索引A 1186：fixedString1 &gt;&gt; 0 = 241位置 1 索引I 47 索引A 1194：241 &amp; 255 = 241array1[14]位置 1 索引I 52 索引A 1218：fixedString2 &gt;&gt; 24 = 32位置 1 索引I 47 索引A 1226：32 &amp; 255 = 32array1[15]位置 1 索引I 52 索引A 1250：fixedString2 &gt;&gt; 16 = 8192位置 1 索引I 47 索引A 1258：8192 &amp; 255 = 0array1[16]位置 1 索引I 52 索引A 1282：fixedString2 &gt;&gt; 8 = 2097342位置 1 索引I 47 索引A 1290：2097342 &amp; 255 = 190array1[17]位置 1 索引I 52 索引A 1314：fixedString2 &gt;&gt; 0 = 536919696位置 1 索引I 47 索引A 1322：536919696 &amp; 255 = 144array1[18]位置 1 索引I 27 索引A 1352：array1.reduce(function(a, b) &#123; return a ^ b; &#125;); = 100array1 完整值如下位置 1 索引I 27 索引A 1538：64,1.00390625,1,8,9,185,69,63,74,125,99,73,3,241,32,0,190,144,100array2 由 array1 元素交换位置而来：array2 = [array1[0], array1[2], array1[4], array1[6], array1[8], array1[10], array1[12], array1[14], array1[16], array1[18], array1[1], array1[3], array1[5], array1[7], array1[9], array1[11], array1[13], array1[15], array1[17]]array2 完整值如下array2 = [64,1,9,69,74,99,3,32,190,100,1.00390625,8,185,63,125,73,241,0,144]</code></pre><p><strong>Step4</strong>：将 Step3 得到的 array2 经过转换得到乱码字符串，步骤如下：</p><pre><code class="hljs text">位置 1 索引I 16 索引A 1706：_0x2f2740.apply(null, array2) = &quot;@\u0000\u0001\u000eíxE?\u0016c%&gt;® \u0000¾ó&quot;位置 1 索引I 16 索引A 1760：_0x46fa4c.apply(null, [&quot;ÿ&quot;, &quot;@\u0000\u0001\u000e\t¹E?J&#125;cI\u0003ñ \u0000¾d&quot;]) = &quot;\u0002ÿ-%.*yê^s6ðýÇýV,&quot;位置 1 索引I 16 索引A 1812：_0x2b6720.apply(null, [2, 255, &quot;\u0002ÿ-%.*yê^s6ðýÇýV,&quot;]) = &quot;\u0002ÿ-%.*yê^s6ðýÇýV,&quot;</code></pre><p>其中用到的函数：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_0x2f2740</span>(<span class="hljs-params">a, c, e, b, d, f, t, n, o, i, r, _, x, u, s, l, v, h, g</span>) </span>&#123;    <span class="hljs-keyword">let</span> w = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(<span class="hljs-number">19</span>);    <span class="hljs-keyword">return</span> w[<span class="hljs-number">0</span>] = a,    w[<span class="hljs-number">1</span>] = r,    w[<span class="hljs-number">2</span>] = c,    w[<span class="hljs-number">3</span>] = _,    w[<span class="hljs-number">4</span>] = e,    w[<span class="hljs-number">5</span>] = x,    w[<span class="hljs-number">6</span>] = b,    w[<span class="hljs-number">7</span>] = u,    w[<span class="hljs-number">8</span>] = d,    w[<span class="hljs-number">9</span>] = s,    w[<span class="hljs-number">10</span>] = f,    w[<span class="hljs-number">11</span>] = l,    w[<span class="hljs-number">12</span>] = t,    w[<span class="hljs-number">13</span>] = v,    w[<span class="hljs-number">14</span>] = n,    w[<span class="hljs-number">15</span>] = h,    w[<span class="hljs-number">16</span>] = o,    w[<span class="hljs-number">17</span>] = g,    w[<span class="hljs-number">18</span>] = i,    <span class="hljs-built_in">String</span>.fromCharCode.apply(<span class="hljs-literal">null</span>, w);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_0x46fa4c</span>(<span class="hljs-params">a, c</span>) </span>&#123;    <span class="hljs-keyword">let</span> e, b = [], d = <span class="hljs-number">0</span>, f = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>; a &lt; <span class="hljs-number">256</span>; a++) &#123;        b[a] = a;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> c = <span class="hljs-number">0</span>; c &lt; <span class="hljs-number">256</span>; c++) &#123;        d = (d + b[c] + a.charCodeAt(c % a.length)) % <span class="hljs-number">256</span>,        e = b[c],        b[c] = b[d],        b[d] = e;    &#125;    <span class="hljs-keyword">let</span> t = <span class="hljs-number">0</span>;    d = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>; a &lt; c.length; a++) &#123;        t = (t + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>,        d = (d + b[t]) % <span class="hljs-number">256</span>,        e = b[t],        b[t] = b[d],        b[d] = e,        f += <span class="hljs-built_in">String</span>.fromCharCode(c.charCodeAt(a) ^ b[(b[t] + b[d]) % <span class="hljs-number">256</span>]);    &#125;    <span class="hljs-keyword">return</span> f;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_0x583250</span>(<span class="hljs-params">a</span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>.fromCharCode(a);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_0x2b6720</span>(<span class="hljs-params">a, c, e</span>) </span>&#123;    <span class="hljs-keyword">return</span> _0x583250(a) + _0x583250(c) + e;&#125;</code></pre><p>自此，整个流程就走完了。可以用 JavaScript 来实现整个算法，用 Python 也可以，完善代码后随便请求一个博主主页，简单解析几个数据，输出正常：</p><p><img src="https://cdn.itbob.cn/img/article/056/28.png" alt="28"></p><p><img src="https://cdn.itbob.cn/img/article/056/29.png" alt="29"></p>]]></content>
      
      
      <categories>
          
          <category> JS 逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS 逆向实战 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APP 逆向，Frida 初体验，root 检测与加密字符串定位</title>
      <link href="/article/055/"/>
      <url>/article/055/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/app_reverse.png" alt="app_reverse"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#an-zhuang-adb">安装 ADB</a></li><li><a href="#an-zhuang-frida">安装 Frida</a></li><li><a href="#ni-xiang-fen-xi">逆向分析</a><ul><li><a href="#jie-he-python-shi-yong">结合 Python 使用</a></li><li><a href="#frida-ming-ling">frida 命令</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>设备：Google Pixel4，Android 10，已 root</li><li>APP：UnCrackable-Level1.apk（来源：<a href="https://github.com/OWASP/owasp-mastg/tree/master/Crackmes">https://github.com/OWASP/owasp-mastg/tree/master/Crackmes</a> ）</li><li>APP 检测了 root，如果手机 root 了，会强制退出 APP，过了 root 检测后，还需要输入一个字符串进行校验。</li></ul><h2><span id="an-zhuang-adb">安装 ADB</span></h2><p>adb（Android Debug Bridge）即安卓调试桥，安装后可以在电脑上与手机进行交互，Android Studio 等工具里面会自带 adb，有时候我们并不想下载这么大的工具，所以这里介绍一下 Android SDK Platform-Tools，它是 Android SDK 的一个组件，它包括与 Android 平台交互的工具，主要是 adb 和 fastboot，官方下载地址：<a href="https://developer.android.com/studio/releases/platform-tools">https://developer.android.com/studio/releases/platform-tools</a> ，下载完成后将该目录添加到环境变量，USB 连接手机，手机上设置允许 USB 调试，使用命令 <code>adb version</code> 可查看版本信息，<code>adb devices</code> 可以查看当前连接的设备，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/055/01.png" alt="01"></p><h2><span id="an-zhuang-frida">安装 Frida</span></h2><p>Frida 是一款基于 Python + JavaScript 的 Hook 与调试框架，首先电脑端使用命令 <code>pip install frida-tools</code> 安装 frida 模块（此命令默认会安装最新版的 frida 和 frida-tools，如），然后下载 frida-server，下载地址：<a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></p><p>frida-server 要根据你电脑端安装的 frida 版本和手机的 CPU 架构来选择对应的，使用命令 <code>frida --version</code> 可以查看 frida 版本，使用命令 <code>adb shell</code> 进入手机，输入 <code>getprop ro.product.cpu.abi</code> 查看 CPU 架构，如下图所示，我这里 frida 是 15.2.2 版本，手机 CPU 为 arm64，所以我下载的是 <code>frida-server-15.2.2-android-arm64.xz</code>。</p><p>某些 Android 低版本使用高版本 frida 可能有问题，遇到问题可尝试降低 frida 版本来解决。</p><p><img src="https://cdn.itbob.cn/img/article/055/02.png" alt="02"></p><p><img src="https://cdn.itbob.cn/img/article/055/03.png" alt="03"></p><p>将下载好的 frida-server 使用 <code>adb push</code> 命令传到手机的 <code>/data/local/tmp/</code> 目录下，并给予 777 读、写、执行的权限，然后直接运行 frida-server，正常不会有任何输出，当然也可以使用 &amp; 等方式让其在后台运行。</p><p><img src="https://cdn.itbob.cn/img/article/055/04.png" alt="04"></p><p>然后另开一个 cmd 使用命令 <code>frida-ps -U </code> 可查看手机进程，有输出则正常。</p><p><img src="https://cdn.itbob.cn/img/article/055/05.png" alt="05"></p><h2><span id="ni-xiang-fen-xi">逆向分析</span></h2><p>使用 <code>adb install</code> 命令安装 UnCrackable-Level1.apk，打开该 APP，会检测到 root，出现 <code>Root detected!</code> 的提示，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/055/06.png" alt="06"></p><p>使用 JEB、JADX、GDA 等工具反编译 apk，直接搜索关键字 <code>Root detected!</code> 即可定位到检测的地方：</p><p><img src="https://cdn.itbob.cn/img/article/055/07.png" alt="07"></p><p>可以看到图中有三个检测方法 <code>c.a()</code>、<code>c.b()</code>、<code>c.c()</code>，其中一个返回为真，则弹出 <code>Root detected!</code>，然后前面还有一个 <code>onClick</code> 方法，如果点击 OK 按钮，则触发 <code>System.exit(0);</code>，即退出 APP，先点进三个检测方法看看：</p><p><code>a()</code> 方法通过检测 Android 系统环境变量中是否有 su 文件来判断是否被 root；</p><p><code>b()</code> 方法通过检测 <code>Build.TAGS</code> 中是否包含字符串 <code>test-keys</code> 来判断是否被 root；</p><p><code>c()</code> 方法通过检测指定路径下是否包含指定的文件来判断是否被 root。</p><p><img src="https://cdn.itbob.cn/img/article/055/08.png" alt="08"></p><p>所以我们这里就有多种过掉检测的方法：</p><p>方法一：Hook 三个检测方法，让它们都返回 false，不再执行后续的 a 方法，就不会退出 APP 了：</p><pre><code class="hljs javascript">Java.perform(    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook begin&quot;</span>)        <span class="hljs-keyword">var</span> vantagePoint = Java.use(<span class="hljs-string">&quot;sg.vantagepoint.a.c&quot;</span>)        vantagePoint.a.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook vantagepoint.a.c.a&quot;</span>)            <span class="hljs-built_in">this</span>.a();            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        vantagePoint.b.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook vantagepoint.a.c.b&quot;</span>)            <span class="hljs-built_in">this</span>.b();            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        vantagePoint.c.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook vantagepoint.a.c.c&quot;</span>)            <span class="hljs-built_in">this</span>.c();            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;)</code></pre><p>方法二：Hook <code>a()</code> 方法，置空，什么都不做，不弹出对话框，也不退出 APP：</p><pre><code class="hljs javascript">Java.perform(    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook begin&quot;</span>)        <span class="hljs-keyword">var</span> mainActivity = Java.use(<span class="hljs-string">&quot;sg.vantagepoint.uncrackable1.MainActivity&quot;</span>);        mainActivity.a.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook mainActivity.a&quot;</span>)        &#125;    &#125;)</code></pre><p>方法三：Hook <code>onClick()</code> 方法，点击 OK 后不让其退出 APP，注意这里是内部类的 Hook 写法：</p><pre><code class="hljs javascript">Java.perform(    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook begin&quot;</span>)        <span class="hljs-keyword">var</span> mainActivity$<span class="hljs-number">1</span> = Java.use(<span class="hljs-string">&quot;sg.vantagepoint.uncrackable1.MainActivity$1&quot;</span>);        mainActivity$<span class="hljs-number">1.</span>onClick.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook mainActivity$1.onClick&quot;</span>)        &#125;    &#125;)</code></pre><p>方法四：Hook <code>System.exit()</code> 方法，点击 OK 后不让其退出 APP：</p><pre><code class="hljs javascript">Java.perform(    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook begin&quot;</span>)        <span class="hljs-keyword">var</span> javaSystem = Java.use(<span class="hljs-string">&quot;java.lang.System&quot;</span>);        javaSystem.exit.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook system.exit&quot;</span>)        &#125;    &#125;)</code></pre><p>root 检测过掉之后，APP 还要输入一个字符串，输入错误会提示 <code>That's not it. Try again.</code>，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/055/09.png" alt="09"></p><p>分析 Java 代码，有一个 <code>if-else</code> 判断，obj 为输入的字符串，<code>a.a(obj)</code> 判断为真，就表示输入正确。</p><p><img src="https://cdn.itbob.cn/img/article/055/10.png" alt="10"></p><p>跟到 <code>a.a()</code> 方法，可以看到 <code>bArr</code> 是内置的字符串，通过 <code>equals()</code> 方法比较输入的 <code>str</code> 是否和 <code>bArr</code> 相等：</p><p><img src="https://cdn.itbob.cn/img/article/055/11.png" alt="11"></p><p><code>bArr</code> 的值，主要经过 <code>sg.vantagepoint.a.a.a()</code> 方法处理后得到，继续跟进去可以发现是 AES 加密算法：</p><p><img src="https://cdn.itbob.cn/img/article/055/12.png" alt="12"></p><p>这里就可以直接 Hook <code>sg.vantagepoint.a.a.a()</code>，直接拿到加密后的值，也就是我们要的正确字符串，由于这里返回的是 ASCII 码，所以我们还需要在 JavaScript 代码中使用 <code>String.fromCharCode()</code> 将其转换成正常字符，Hook 代码如下：</p><pre><code class="hljs javascript">Java.perform(    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">var</span> cryptoAES = Java.use(<span class="hljs-string">&quot;sg.vantagepoint.a.a&quot;</span>);        cryptoAES.a.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">bArr, bArr2</span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook cryptoAES&quot;</span>)            <span class="hljs-keyword">var</span> secret = <span class="hljs-string">&quot;&quot;</span>;            <span class="hljs-keyword">var</span> decryptValue = <span class="hljs-built_in">this</span>.a(bArr, bArr2);            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] DecryptValue:&quot;</span>, decryptValue)            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i &lt; decryptValue.length; i++)&#123;              secret += <span class="hljs-built_in">String</span>.fromCharCode(decryptValue[i]);            &#125;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Secret:&quot;</span>, secret)            <span class="hljs-keyword">return</span> decryptValue;        &#125;    &#125;)</code></pre><p>运行 Hook 脚本有两种方式，一是结合 Python 使用，二是直接通过 frida 命令使用脚本，注入 Hook 代码也有个时机问题，有时候需要在 APP 启动就开始 Hook，有时候可以等 APP 启动加载完毕了再 Hook，本例中，过 root 检测的时候，如果采用第一、二种方法，即 Hook 三个检测方法或者 a 方法，那就需要在 APP 启动的时候就 Hook，如果采用第三、四种方法，即 Hook  <code>onClick()</code> 或者 <code>System.exit()</code> 方法，那么等 APP 启动了再 Hook 也可以。</p><h3><span id="jie-he-python-shi-yong">结合 Python 使用</span></h3><p>首先来看一下结合 Python 怎么使用，JavaScript 代码如下（frida-hook.js）：</p><pre><code class="hljs javascript"><span class="hljs-comment">/* ==================================</span><span class="hljs-comment"># @Time    : 2022-08-29</span><span class="hljs-comment"># @Author  : ITBOB.CN</span><span class="hljs-comment"># @FileName: frida-hook.js</span><span class="hljs-comment"># @Software: PyCharm</span><span class="hljs-comment"># ================================== */</span>Java.perform(    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook begin&quot;</span>)        <span class="hljs-comment">// 方法一：Hook 三个检测方法，让它们都返回 false，不再执行后续的 a 方法，就不会退出 APP 了</span>        <span class="hljs-comment">// var vantagePoint = Java.use(&quot;sg.vantagepoint.a.c&quot;)</span>        <span class="hljs-comment">// vantagePoint.a.implementation = function()&#123;</span>        <span class="hljs-comment">//     console.log(&quot;[*] Hook vantagepoint.a.c.a&quot;)</span>        <span class="hljs-comment">//     this.a();</span>        <span class="hljs-comment">//     return false;</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// vantagePoint.b.implementation = function()&#123;</span>        <span class="hljs-comment">//     console.log(&quot;[*] Hook vantagepoint.a.c.b&quot;)</span>        <span class="hljs-comment">//     this.b();</span>        <span class="hljs-comment">//     return false;</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// vantagePoint.c.implementation = function()&#123;</span>        <span class="hljs-comment">//     console.log(&quot;[*] Hook vantagepoint.a.c.c&quot;)</span>        <span class="hljs-comment">//     this.c();</span>        <span class="hljs-comment">//     return false;</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// 方法二：Hook a() 方法，置空，什么都不做，不弹出对话框，也不退出 APP</span>        <span class="hljs-comment">// var mainActivity = Java.use(&quot;sg.vantagepoint.uncrackable1.MainActivity&quot;);</span>        <span class="hljs-comment">// mainActivity.a.implementation = function()&#123;</span>        <span class="hljs-comment">//    console.log(&quot;[*] Hook mainActivity.a&quot;)</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// 方法三：Hook onClick() 方法，点击 OK 后不让其退出 APP</span>        <span class="hljs-comment">// var mainActivity$1 = Java.use(&quot;sg.vantagepoint.uncrackable1.MainActivity$1&quot;);</span>        <span class="hljs-comment">// mainActivity$1.onClick.implementation = function()&#123;</span>        <span class="hljs-comment">//     console.log(&quot;[*] Hook mainActivity$1.onClick&quot;)</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// 方法四：Hook System.exit 方法，点击 OK 后不让其退出 APP</span>        <span class="hljs-keyword">var</span> javaSystem = Java.use(<span class="hljs-string">&quot;java.lang.System&quot;</span>);        javaSystem.exit.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook system.exit&quot;</span>)        &#125;        <span class="hljs-keyword">var</span> cryptoAES = Java.use(<span class="hljs-string">&quot;sg.vantagepoint.a.a&quot;</span>);        cryptoAES.a.implementation = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">bArr, bArr2</span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Hook cryptoAES&quot;</span>)            <span class="hljs-keyword">var</span> secret = <span class="hljs-string">&quot;&quot;</span>;            <span class="hljs-keyword">var</span> decryptValue = <span class="hljs-built_in">this</span>.a(bArr, bArr2);            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] DecryptValue:&quot;</span>, decryptValue)            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i &lt; decryptValue.length; i++)&#123;              secret += <span class="hljs-built_in">String</span>.fromCharCode(decryptValue[i]);            &#125;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[*] Secret:&quot;</span>, secret)            <span class="hljs-keyword">return</span> decryptValue;        &#125;    &#125;)</code></pre><p>Python 代码如下（<a href="http://frida-hook.py">frida-hook.py</a>）：</p><pre><code class="hljs python"><span class="hljs-comment"># ==================================</span><span class="hljs-comment"># --*-- coding: utf-8 --*--</span><span class="hljs-comment"># @Time    : 2022-08-29</span><span class="hljs-comment"># @Author  : ITBOB.CN</span><span class="hljs-comment"># @FileName: frida-hook.py</span><span class="hljs-comment"># @Software: PyCharm</span><span class="hljs-comment"># ==================================</span><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> frida<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_message</span>(<span class="hljs-params">message, data</span>):</span>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))    <span class="hljs-keyword">else</span>:        <span class="hljs-built_in">print</span>(message)<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./frida-hook.js&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> fp:    hook_string = fp.read()<span class="hljs-comment"># 方式一：attach 模式，已经启动的 APP</span>process = frida.get_usb_device(-<span class="hljs-number">1</span>).attach(<span class="hljs-string">&quot;Uncrackable1&quot;</span>)script = process.create_script(hook_string)script.on(<span class="hljs-string">&quot;message&quot;</span>, on_message)script.load()sys.stdin.read()<span class="hljs-comment"># 方式二，spawn 模式，重启 APP</span><span class="hljs-comment"># device = frida.get_usb_device(-1)</span><span class="hljs-comment"># pid = device.spawn([&quot;owasp.mstg.uncrackable1&quot;])</span><span class="hljs-comment"># process = device.attach(pid)</span><span class="hljs-comment"># script = process.create_script(hook_string)</span><span class="hljs-comment"># script.on(&quot;message&quot;, on_message)</span><span class="hljs-comment"># script.load()</span><span class="hljs-comment"># device.resume(pid)</span><span class="hljs-comment"># sys.stdin.read()</span></code></pre><p>Python 代码中，attach 模式 Hook 已经存在的进程，spawn 模式会重启 APP，启动一个新的进程并挂起，在启动的同时注入 frida 代码，适用于在进程启动前的一些 Hook，attach 模式传入的是 APP 名称，spawn 模式传入的是 APP 包名，查看 APP 名称和包名的方法有很多，这里介绍两个 frida 命令，<code>frida-ps -Uai</code>：列出安装的程序，<code>frida-ps -Ua</code>：列出正在运行中的程序，如下图所示，本例中 <code>Uncrackable1</code> 就是 APP 名称，<code>owasp.mstg.uncrackable1</code> 就是包名：</p><p><img src="https://cdn.itbob.cn/img/article/055/13.png" alt="13"></p><p>运行 Python 代码，注意手机端也要启动 frida-server，过掉 root 检测后，先随便输入字符串，点击 VERIFY 就会 Hook 到正确的字符串为 <code>I want to believe</code>，再次输入正确的字符串，即可验证成功。</p><p><img src="https://cdn.itbob.cn/img/article/055/14.png" alt="14"></p><h3><span id="frida-ming-ling">frida 命令</span></h3><p>不使用 Python，也可以直接使用 frida 命令来实现，和前面 Python  一样也有两种模式，同样的一个是 APP 名一个是包名：</p><p><code>frida -U Uncrackable1 -l .\frida-hook.js</code>：attach 模式，APP 启动后注入 frida 代码；</p><p><code>frida -U -f owasp.mstg.uncrackable1 -l .\frida-hook.js --no-pause</code>：spawn 模式，重启 APP，启动的同时注入 frida 代码。</p><p><img src="https://cdn.itbob.cn/img/article/055/15.png" alt="15"></p><p>至此，我们完美绕过了 root 检测，并成功找到了正确的字符串。</p>]]></content>
      
      
      <categories>
          
          <category> APP 逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> APP 逆向实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内 Web 防护天花板，瑞数 5 代 JS 逆向分析</title>
      <link href="/article/054/"/>
      <url>/article/054/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/javascript_reverse.png" alt="javascript_reverse"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#qian-yan">前言</a></li><li><a href="#cookie-ru-kou-ding-wei">Cookie 入口定位</a></li><li><a href="#vm-dai-ma-yi-ji-ts-bian-liang-huo-qu">VM 代码以及 $_ts 变量获取</a></li><li><a href="#shan-yong-watch-gen-zong-gong-neng">善用 Watch 跟踪功能</a></li><li><a href="#gen-zhan-fen-xi">跟栈分析</a></li><li><a href="#hou-zhui-sheng-cheng">后缀生成</a></li><li><a href="#zhi-wen-sheng-cheng">指纹生成</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="qian-yan">前言</span></h2><p><img src="https://cdn.itbob.cn/img/article/054/01.png" alt="01"></p><p>瑞数动态安全 Botgate（机器人防火墙）以“动态安全”技术为核心，通过动态封装、动态验证、动态混淆、动态令牌等技术对服务器网页底层代码持续动态变换，增加服务器行为的“不可预测性”，实现了从用户端到服务器端的全方位“主动防护”，为各类 Web、HTML5 提供强大的安全保护。</p><p>在往期的文章<a href="https://www.itbob.cn/article/053/">《国内 Web 防护天花板，瑞数 4 代 JS 逆向分析》</a>中，详细介绍了瑞数的特征、如何区分不同版本、瑞数的代码结构以及各自的作用，本文就不再赘述了，不了解的同志可以先去看看之前的文章。</p><h2><span id="cookie-ru-kou-ding-wei">Cookie 入口定位</span></h2><p>本文案例中瑞数 5 代网站为：<code>aHR0cHM6Ly93d3cubm1wYS5nb3YuY24vZGF0YXNlYXJjaC9ob21lLWluZGV4Lmh0bWw=</code></p><p>定位 Cookie，首选 Hook 来的最快，通过 Fiddler 插件、油猴脚本、浏览器插件等方式注入以下 Hook 代码：</p><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-comment">// 严谨模式 检查所有错误</span><span class="hljs-meta">    &#x27;use strict&#x27;</span>;    <span class="hljs-comment">// document 为要hook的对象 这里是hook的cookie</span>    <span class="hljs-keyword">var</span> cookieTemp = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-built_in">Object</span>.defineProperty(<span class="hljs-built_in">document</span>, <span class="hljs-string">&#x27;cookie&#x27;</span>, &#123;        <span class="hljs-comment">// hook set方法也就是赋值的方法 </span>        <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;                <span class="hljs-comment">// 这样就可以快速给下面这个代码行下断点</span>                <span class="hljs-comment">// 从而快速定位设置cookie的代码</span>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hook捕获到cookie设置-&gt;&#x27;</span>, val);                <span class="hljs-keyword">debugger</span>;                cookieTemp = val;                <span class="hljs-keyword">return</span> val;        &#125;,        <span class="hljs-comment">// hook get 方法也就是取值的方法 </span>        <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;            <span class="hljs-keyword">return</span> cookieTemp;        &#125;    &#125;);&#125;)();</code></pre><p>断下之后往上跟栈，可以看到组装 Cookie 后赋值给 <code>document.cookie</code> 的代码，类似如下结构：</p><p><img src="https://cdn.itbob.cn/img/article/054/02.png" alt="02"></p><p>继续往上跟栈，和4代瑞数类似，<code>(772, 1)</code> 的位置是入口，4代有一次生成假 cookie 的过程，5代就没有了，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/054/03.png" alt="03"></p><p>再往前跟栈，来到首页代码，这里就是我们熟悉的 call 位置了，图中 <code>_$ug</code> 实际上是 eval 方法，传入的第一个参数 <code>_$Cs</code> 是 Window 对象，第二个对象 <code>_$Dm</code> 是我们前面看到的 VM 虚拟机中的 IIFE 自执行代码。</p><p><img src="https://cdn.itbob.cn/img/article/054/04.png" alt="04"></p><h2><span id="vm-dai-ma-yi-ji-ts-bian-liang-huo-qu">VM 代码以及 $_ts 变量获取</span></h2><p>获取 VM 代码和 <code>$_ts</code> 变量是第一步，和4代类似，复制外链 JS（例如 <code>fjtvkgf7LVI2.a670748.js</code>）的代码和 412 页面的自执行代码到文件，本地直接运行即可，需要轻度补一下环境，缺啥补啥，大致补一下 window、location、document 就行了，补的具体内容可以直接在浏览器控制台使用 <code>copy()</code> 命令复制过来，然后 VM 代码我们就可以直接 Hook eval 的方式得到，这里 <code>$_ts</code> 变量的获取和4代有点儿区别，4代我们的做法是运行完代码后直接取 <code>window.$_ts</code> 就行了，5代运行完代码后会有一个清空 <code>$_ts</code> 的操作，可以自己跟栈看一下逻辑，要么把清空的逻辑删了，要么定义一个全局变量，然后直接在 call 的地方将 <code>$_ts</code> 的值导出来：</p><p><img src="https://cdn.itbob.cn/img/article/054/05.png" alt="05"></p><p>大致的补环境代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> eval_js = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">var</span> rs_ts = <span class="hljs-string">&quot;&quot;</span><span class="hljs-built_in">window</span> = &#123;    <span class="hljs-attr">$_ts</span>: &#123;&#125;,    <span class="hljs-attr">eval</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;        eval_js = data    &#125;&#125;location = &#123;    <span class="hljs-string">&quot;ancestorOrigins&quot;</span>: &#123;&#125;,    <span class="hljs-string">&quot;href&quot;</span>: <span class="hljs-string">&quot;https://脱敏处理/datasearch/home-index.html&quot;</span>,    <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;https://脱敏处理&quot;</span>,    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;https:&quot;</span>,    <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;www.脱敏处理.cn&quot;</span>,    <span class="hljs-string">&quot;hostname&quot;</span>: <span class="hljs-string">&quot;www.脱敏处理.cn&quot;</span>,    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,    <span class="hljs-string">&quot;pathname&quot;</span>: <span class="hljs-string">&quot;/datasearch/home-index.html&quot;</span>,    <span class="hljs-string">&quot;search&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,    <span class="hljs-string">&quot;hash&quot;</span>: <span class="hljs-string">&quot;&quot;</span>&#125;<span class="hljs-built_in">document</span> = &#123;    <span class="hljs-string">&quot;scripts&quot;</span>: [<span class="hljs-string">&quot;script&quot;</span>, <span class="hljs-string">&quot;script&quot;</span>]&#125;</code></pre><p>获取 VM 代码以及 <code>$_ts</code> 变量：</p><p><img src="https://cdn.itbob.cn/img/article/054/06.png" alt="06"></p><h2><span id="shan-yong-watch-gen-zong-gong-neng">善用 Watch 跟踪功能</span></h2><p>在跟栈分析之前，有必要了解一下浏览器开发者工具的 Watch 功能，它能够持续跟踪某个变量的值，对于瑞数这种控制流很多的情况，设置相应的变量跟踪，能够让你知道你现在处于哪个控制流中，以及生成的数组的变化，不至于跟着跟着不知道到哪一步了。如下图所示，<code>_$S8</code> 表示目前正处于第 279 号大控制流，<code>_$5x</code> 表示大控制流下的哪个分支，<code>_$mz</code> 表示 128 位大数组。</p><p><img src="https://cdn.itbob.cn/img/article/054/07.png" alt="07"></p><h2><span id="gen-zhan-fen-xi">跟栈分析</span></h2><p>老样子，本地替换一套 412 页面的代码，固定下来，然后开始跟栈分析。直接从 <code>(772, 1)</code> 开始跟（文中说的第多少号控制流、第几步均为作者自己的叫法，第多少步并不代表实际上的步骤，仅表示关键步骤）：</p><p><img src="https://cdn.itbob.cn/img/article/054/08.png" alt="08"></p><p>单步进来，<code>_$qh</code> 是传进来的参数 1，即将进入 742 号控制流：</p><p><img src="https://cdn.itbob.cn/img/article/054/09.png" alt="09"></p><p>进入 742 号控制流，第 1 步通过一个方法获取了一个时间戳，进入这个方法内部，对时间戳进行了差值计算，会发现有两个变量 <code>_$tb</code> 和 <code>_$t1</code> 已经生成了值：</p><p><img src="https://cdn.itbob.cn/img/article/054/10.png" alt="10"></p><p><img src="https://cdn.itbob.cn/img/article/054/11.png" alt="11"></p><p>这两个值也是时间戳，怎么来的？直接搜索这两个变量，搜索结果有几个全部打上断点，刷新断下后往前跟栈，会发现是最开始走了一遍 703 号控制流：</p><p><img src="https://cdn.itbob.cn/img/article/054/12.png" alt="12"></p><p>先单步跟一遍 703 号控制流，703 号控制流第 1 步是进入 699 号控制流，返回一个数组，没有特别的，直接扣代码即可：</p><p><img src="https://cdn.itbob.cn/img/article/054/13.png" alt="13"></p><p>703 号控制流第 2、3 步分别取数组的值：</p><p><img src="https://cdn.itbob.cn/img/article/054/14.png" alt="14"></p><p><img src="https://cdn.itbob.cn/img/article/054/15.png" alt="15"></p><p>703 号控制流第 4、5、6 步生成两个时间戳并赋值给前面提到的 <code>_$tb</code>、<code>_$t1</code> 变量，涉及到的方法也没有什么特别的，缺啥搜啥补啥即可：</p><p><img src="https://cdn.itbob.cn/img/article/054/16.png" alt="16"></p><p><img src="https://cdn.itbob.cn/img/article/054/17.png" alt="17"></p><p><img src="https://cdn.itbob.cn/img/article/054/18.png" alt="18"></p><p>703 号控制流第 7 步，这里修改了 <code>$_ts</code> 的某个值（VM 代码中，<code>$_ts</code> 被赋值给了另一个变量，下图中是 <code>_$iw</code>），<code>_$iw._$uq</code> 原本的值是 <code>_$ou</code>，修改后的值是 181，这个值也是后面关键 4 位数组中的其中一个，具体逻辑后面再讲。</p><p><img src="https://cdn.itbob.cn/img/article/054/19.png" alt="19"></p><p>703 号控制流结束，我们继续前面的  742 号控制流，742 号控制流第 2 步，将前面生成的时间戳赋值给另一个变量。</p><p><img src="https://cdn.itbob.cn/img/article/054/20.png" alt="20"></p><p>742 号控制流第 3 步，进入 279 号控制流，279 号控制流是生成 128 位数组的关键。</p><p><img src="https://cdn.itbob.cn/img/article/054/21.png" alt="21"></p><p>进入 279 号控制流，第 1 步定义了一个变量：</p><p><img src="https://cdn.itbob.cn/img/article/054/22.png" alt="22"></p><p>279 号控制流，第 2 步，进入 157 号控制流，157 号控制流主要是做自动化检测</p><p><img src="https://cdn.itbob.cn/img/article/054/23.png" alt="23"></p><p><img src="https://cdn.itbob.cn/img/article/054/24.png" alt="24"></p><p>279 号控制流，第 3、4、5 步，做了一些运算，一些全局变量的值会改变，后续的数组里会用到。</p><p><img src="https://cdn.itbob.cn/img/article/054/25.png" alt="25"></p><p><img src="https://cdn.itbob.cn/img/article/054/26.png" alt="26"></p><p><img src="https://cdn.itbob.cn/img/article/054/27.png" alt="27"></p><p>279 号控制流，第 6 步，初始化了一个 128 位的空数组，后续的操作都是为了往这个数组里面填充值。</p><p><img src="https://cdn.itbob.cn/img/article/054/28.png" alt="28"></p><p>279 号控制流，第 7 步，进入 695 号控制流，生成一个 20 位的数组。</p><p><img src="https://cdn.itbob.cn/img/article/054/29.png" alt="29"></p><p>进入 695 号控制流看一下，第 1 步，取 <code>$_ts</code> 的一个值，生成 16 位数组。</p><p><img src="https://cdn.itbob.cn/img/article/054/30.png" alt="30"></p><p>695 号控制流，第 2 步，取 <code>$_ts</code> 里的四个值，与前面的 16 位数组一起组成 20 位数组。</p><p><img src="https://cdn.itbob.cn/img/article/054/31.png" alt="31"></p><p>这里注意这四个值怎么来的，以第二个值 <code>_$iw._$KI</code> 为例，搜索发现有一条语句 <code>_$iw._$KI = _$iw[_$iw._$KI](_$bl, _$n2);</code>，首先等号右边取 <code>_$iw._$KI</code> 的值为 <code>_$Mo</code>，然后 <code>_$iw[&quot;_$Mo&quot;]</code> 实际上就是 <code>_$iw._$Mo</code>，前面的定义 <code>_$iw._$Mo = _$1D</code>，<code>_$1D</code> 是个方法，所以原语句相当于 <code>_$iw._$KI = _$1D(_$bl, _$n2)</code>，其他三个值的来源也是类似的。</p><p><img src="https://cdn.itbob.cn/img/article/054/32.png" alt="32"></p><p>695 号控制流结束，回到 279 号控制流，第 8 步，将前面的时间戳转换成了一个 8 位数组。</p><p><img src="https://cdn.itbob.cn/img/article/054/33.png" alt="33"></p><p>279 号控制流，第 9 步，往 128 位数组里面添加了一个值。</p><p><img src="https://cdn.itbob.cn/img/article/054/34.png" alt="34"></p><p><code>_$ae</code> 这个值怎么来的？搜索下断点并跟栈，发现是开头走了第 178 号控制流得来的，跟着走一遍即可。</p><p><img src="https://cdn.itbob.cn/img/article/054/35.png" alt="35"></p><p><img src="https://cdn.itbob.cn/img/article/054/36.png" alt="36"></p><p>279 号控制流，第 10 步，又往 128 位数组里面添加了一个值，这个值是开始 279 号控制流传过来的。</p><p><img src="https://cdn.itbob.cn/img/article/054/37.png" alt="37"></p><p><img src="https://cdn.itbob.cn/img/article/054/38.png" alt="38"></p><p>279 号控制流，第 11、12、13、14 步，时间戳相关计算，然后生成两个 2 位数组。注意这里面的两个变量，<code>_$ll</code> 和 <code>_$ed</code>，在刷新 cookie、生成后缀的时候可能是有值的，仅访问主页没有值不影响。</p><p><img src="https://cdn.itbob.cn/img/article/054/39.png" alt="39"></p><p><img src="https://cdn.itbob.cn/img/article/054/40.png" alt="40"></p><p><img src="https://cdn.itbob.cn/img/article/054/41.png" alt="41"></p><p><img src="https://cdn.itbob.cn/img/article/054/42.png" alt="42"></p><p>279 号控制流，第 15 步，往 128 位数组里面添加了一个 4 位数组 <code>_$bl</code>，搜索也可以找到是通过 723 号控制流得来的。</p><p><img src="https://cdn.itbob.cn/img/article/054/43.png" alt="43"></p><p><img src="https://cdn.itbob.cn/img/article/054/44.png" alt="44"></p><p>这里的 723 号控制流，实际上是取了 <code>$_ts</code> 某个值进行运算，生成 16 位数组，然后截取前 4 位数组返回的。</p><p><img src="https://cdn.itbob.cn/img/article/054/45.png" alt="45"></p><p><img src="https://cdn.itbob.cn/img/article/054/46.png" alt="46"></p><p>279 号控制流，第 16 步，往 128 位数组里面添加了一个 8 位数组 <code>_$Yb</code>。</p><p><img src="https://cdn.itbob.cn/img/article/054/47.png" alt="47"></p><p>8 位数组 <code>_$Yb</code> 同样搜索打断点，可以在一个赋值语句断下：</p><p><img src="https://cdn.itbob.cn/img/article/054/48.png" alt="48"></p><p>可以看到 <code>_$EJ</code> 的值就是 <code>_$Yb</code>，往前跟栈，会发现先后经过了 657 号、10 号、777 号控制流，其中 777 号控制流是入口：</p><p><img src="https://cdn.itbob.cn/img/article/054/49.png" alt="49"></p><p><img src="https://cdn.itbob.cn/img/article/054/50.png" alt="50"></p><p><img src="https://cdn.itbob.cn/img/article/054/51.png" alt="51"></p><p>如果单步跟 777 号控制流，你会发现步骤较多，中间有些语句不好处理，且容易跟丢，所以我们这里就直接关注 657 号控制流就行了，777 号控制流直接到 10 号控制流，再到 657 号控制流，中间的一些过程暂时不管，跟到缺什么的时候再说（后续有很多取值赋值等操作都是在 777 号控制流里实现的，可以注意一下），这段逻辑在本地表现的代码如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/054/52.png" alt="52"></p><p>这里直接单步跟一下 657 号控制流，第 1、2 步 new 了一个方法。</p><p><img src="https://cdn.itbob.cn/img/article/054/53.png" alt="53"></p><p><img src="https://cdn.itbob.cn/img/article/054/54.png" alt="54"></p><p>这里就要注意了，容易跟丢，先进入 <code>_$bH</code> 方法打上断点，然后下一个断点就走到里面了，接着在单步调试，会进到另一个小的控制流里面，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/054/55.png" alt="55"></p><p><img src="https://cdn.itbob.cn/img/article/054/56.png" alt="56"></p><p>开始单步跟第 96 号小控制流，第 1 步定义了一个变量。</p><p><img src="https://cdn.itbob.cn/img/article/054/57.png" alt="57"></p><p>96 号小控制流，第 2 步将 <code>_$PI</code> 的值赋值给了 <code>_$fT</code>，而 <code>_$PI</code> 的值其实是 <code>window.localStorage.$_YWTU</code>，<code>window.localStorage</code> 里面有很多值，这个东西我们文章最后再讲，其中一些值与浏览器指纹相关，这里先知道他是取值就行了。</p><p><img src="https://cdn.itbob.cn/img/article/054/58.png" alt="58"></p><p>96 号小控制流，第 3 步，进入第 94 号小控制流，最终生成的是一个 8 位数组，这个其实就是前面我们想要的 <code>_$Yb</code> 的值了。</p><p><img src="https://cdn.itbob.cn/img/article/054/59.png" alt="59"></p><p>后面没有什么特别的，中间几步我就省略了，照着扣代码就行了，然后 96 号小控制流，第 4 步，就将 <code>_$EJ</code> 的值赋值给 <code>_$Yb</code> 了。</p><p><img src="https://cdn.itbob.cn/img/article/054/60.png" alt="60"></p><p>到这里先别急着结束，后面还有关键的几步，96 号小控制流，第 5 步，又遇到了和前面类似的写法。</p><p><img src="https://cdn.itbob.cn/img/article/054/61.png" alt="61"></p><p>同样的，先进 <code>_$pu</code> 打断点，再单步跟。</p><p><img src="https://cdn.itbob.cn/img/article/054/62.png" alt="62"></p><p>来到另一个小控制流，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/054/63.png" alt="63"></p><p>10 号小控制流第 1 步，取 <code>window.localStorage.$_cDro</code> 的值，转为 int 类型，赋值给 <code>_$5s</code>，这个 <code>_$5s</code> 后续也会加到 128 位大数组里面。</p><p><img src="https://cdn.itbob.cn/img/article/054/64.png" alt="64"></p><p>10 号小控制流后续还有几步，没啥用可以省略，最后一步返回 96 号小控制流。</p><p><img src="https://cdn.itbob.cn/img/article/054/65.png" alt="65"></p><p>然后 96 号小控制流后续也没啥了，返回 657 号控制流。</p><p><img src="https://cdn.itbob.cn/img/article/054/66.png" alt="66"></p><p>此时我们已经拿到  <code>_$Yb</code> 了，777 号控制流就先不管了，后续还有些代码先不管不用扣，等用到的时候再说，返回 279 号控制流，接着前面的步骤，来到第 17 步，变量 <code>_$5s</code> 经过 264 号控制流后，生成了一个值并添加到 128 位大数组里面，而 <code>_$5s</code> 的值正是前面我们跟 <code>_$Yb</code> 时，通过 777 号控制流拿到的，实际上也就是取 <code>window.localStorage.$_cDro</code> 的值，转为了 int 类型。</p><p><img src="https://cdn.itbob.cn/img/article/054/67.png" alt="67"></p><p>279 号控制流，第 18、19、20 步，往 128 位数组里面添加了两个定值、一个 8 位数组。</p><p><img src="https://cdn.itbob.cn/img/article/054/68.png" alt="68"></p><p><img src="https://cdn.itbob.cn/img/article/054/69.png" alt="69"></p><p><img src="https://cdn.itbob.cn/img/article/054/70.png" alt="70"></p><p>279 号控制流，第 21 步，往 128 位数组里面添加了一个 <code>undefined</code> 占位，后续会有操作将其填充值。</p><p><img src="https://cdn.itbob.cn/img/article/054/71.png" alt="71"></p><p><img src="https://cdn.itbob.cn/img/article/054/72.png" alt="72"></p><p>279 号控制流，第 22 步，进入 58 号控制流，58 号控制流与 <code>window.localStorage.$_fb</code> 的值有关，如果有这个值，就会生成 20 位数组，如果没有就是 undefined。58 号控制流就只有一步，返回一个变量，本文中是 <code>_$0g</code>。</p><p><img src="https://cdn.itbob.cn/img/article/054/73.png" alt="73"></p><p><img src="https://cdn.itbob.cn/img/article/054/74.png" alt="74"></p><p>这个 <code>_$0g</code> 是咋来的呢？同样的直接搜索，下断点，发现是通过 112 号控制流得来的，往前跟栈，同样是先经过了 777 号控制流，和之前的情况类似，中间的过程就不看了，直接看这个 112 号控制流。</p><p><img src="https://cdn.itbob.cn/img/article/054/75.png" alt="75"></p><p>本文中，112 号控制流传的参是 <code>_$bd[279]</code> 即 <code>$_fb</code>，112 号控制流第 1 步，进入 247 号控制流。</p><p><img src="https://cdn.itbob.cn/img/article/054/76.png" alt="76"></p><p>247 号控制流就 3 步，先将 <code>window.localStorage</code> 赋值给一个变量，然后取其中 <code>$_fb</code> 的值再返回。</p><p><img src="https://cdn.itbob.cn/img/article/054/77.png" alt="77"></p><p><img src="https://cdn.itbob.cn/img/article/054/78.png" alt="78"></p><p><img src="https://cdn.itbob.cn/img/article/054/79.png" alt="79"></p><p>112 号控制流第 2、3 步，一个 <code>try-catch</code> 语句，取 <code>window.localStorage.$_fb</code> 计算得到 25 位数组，然后取前 20 位并返回，这就是前面我们需要的 <code>_$0g</code> 的值了。</p><p><img src="https://cdn.itbob.cn/img/article/054/80.png" alt="80"></p><p><img src="https://cdn.itbob.cn/img/article/054/81.png" alt="81"></p><p>279 号控制流，第 23 步，将前面 <code>window.localStorage.$_fb</code> 计算得到的 20 位数组添加到 128 位大数组里面，注意这一步如果没有 <code>window.localStorage.$_fb</code> 值的话，是不会添加的。</p><p><img src="https://cdn.itbob.cn/img/article/054/82.png" alt="82"></p><p>279 号控制流，第 24 步，对一个变量进行位运算，然后取 <code>window.localStorage.$_f0</code> 进行运算，如果 <code>$_f0</code> 为空的话是不会往 128 位大数组里添加值的。</p><p><img src="https://cdn.itbob.cn/img/article/054/83.png" alt="83"></p><p><img src="https://cdn.itbob.cn/img/article/054/84.png" alt="84"></p><p><img src="https://cdn.itbob.cn/img/article/054/85.png" alt="85"></p><p>279 号控制流，第 25 步，对一个变量进行位运算，然后取 <code>window.localStorage.$_fh0</code> 进行运算，如果 <code>$_fh0</code> 为空的话是不会往 128 位大数组里添加值的。</p><p><img src="https://cdn.itbob.cn/img/article/054/86.png" alt="86"></p><p><img src="https://cdn.itbob.cn/img/article/054/87.png" alt="87"></p><p><img src="https://cdn.itbob.cn/img/article/054/88.png" alt="88"></p><p>279 号控制流，第 26 步，对一个变量进行位运算，然后取 <code>window.localStorage.$_f1</code> 进行运算，如果 <code>$_f1</code> 为空的话是不会往 128 位大数组里添加值的。</p><p><img src="https://cdn.itbob.cn/img/article/054/89.png" alt="89"></p><p><img src="https://cdn.itbob.cn/img/article/054/90.png" alt="90"></p><p><img src="https://cdn.itbob.cn/img/article/054/91.png" alt="91"></p><p>279 号控制流，第 27 步，进入 611 号控制流，611 号控制流主要是检测 <code>window.navigator.connection.type</code>，即 <code>NetworkInformation</code> 网络相关信息，里面判断了 <code>type</code> 是不是 <code>bluetooth</code>、<code>cellular</code>、<code>ethernet</code>、<code>wifi</code>、<code>wimax</code>，正常的话应该返回 0。</p><p><img src="https://cdn.itbob.cn/img/article/054/92.png" alt="92"></p><p><img src="https://cdn.itbob.cn/img/article/054/93.png" alt="93"></p><p><img src="https://cdn.itbob.cn/img/article/054/94.png" alt="94"></p><p>279 号控制流，接下来几步都是类似的，这里就直接统称第 28 步了，首先对一个变量进行位运算，然后分别取 <code>window.localStorage.$_fr</code>、 <code>window.localStorage.$_fpn1</code> 、 <code>window.localStorage.$_vvCI</code>、 <code>window.localStorage.$_JQnh</code> 进行运算，同样如果这些变量为空的话，也是不会往 128 位大数组里添加值的。</p><p><img src="https://cdn.itbob.cn/img/article/054/96.png" alt="96"></p><p><img src="https://cdn.itbob.cn/img/article/054/97.png" alt="97"></p><p><img src="https://cdn.itbob.cn/img/article/054/98.png" alt="98"></p><p><img src="https://cdn.itbob.cn/img/article/054/99.png" alt="99"></p><p>279 号控制流，第 29 步，往 128 位大数组里添加了一个定值 4，本文中该变量名是 <code>_$kW</code>。</p><p><img src="https://cdn.itbob.cn/img/article/054/100.png" alt="100"></p><p><code>_$kW</code> 这个变量是咋来的，和前面的套路类似，直接搜索下断，同样是经过开头的 777 号控制流得来的，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/054/101.png" alt="101"></p><p>继续 279 号控制流，中间有一些变量位运算之类的就省略了，第 30、31 步，取了一个 <code>https:443</code> 的长度进行计算，先后往 128 位大数组里添加了一个定值和一个 9 位数组。</p><p><img src="https://cdn.itbob.cn/img/article/054/102.png" alt="102"></p><p><img src="https://cdn.itbob.cn/img/article/054/103.png" alt="103"></p><p>279 号控制流，接下来几步都是在取值，都差不多，就统称为第 32 步了。</p><p><img src="https://cdn.itbob.cn/img/article/054/104.png" alt="104"></p><p><img src="https://cdn.itbob.cn/img/article/054/105.png" alt="105"></p><p><img src="https://cdn.itbob.cn/img/article/054/106.png" alt="106"></p><p><img src="https://cdn.itbob.cn/img/article/054/107.png" alt="107"></p><p><img src="https://cdn.itbob.cn/img/article/054/108.png" alt="108"></p><p><img src="https://cdn.itbob.cn/img/article/054/109.png" alt="109"></p><p>279 号控制流，第 33 步，之前 128 位大数组第 12 位是个 <code>undefined</code>，这里就将第 12 位填充上了一个 4 位数组，其中有个变量 <code>_$8L</code>，前面我们跟步骤的时候就有一个变量一直在做位运算，此处的 <code>_$8L</code> 就是这么来的。</p><p><img src="https://cdn.itbob.cn/img/article/054/110.png" alt="110"></p><p>279 号控制流，最后两步，原来的 128 位大数组，只取有值的前 21 位，一共有多少位与 <code>window.localStorage</code> 的某些值有关，有值的话就长一些，没有就短一些，然后再将数组的每个元素合并成最终的一个大数组并返回，279 号控制流就结束了。</p><p><img src="https://cdn.itbob.cn/img/article/054/111.png" alt="111"></p><p><img src="https://cdn.itbob.cn/img/article/054/112.png" alt="112"></p><p>返回到文章开头的逻辑，279 号控制流结束，返回到 742 号控制流，第 2 步，定义了一个变量并生成了一个 32 位数组。</p><p><img src="https://cdn.itbob.cn/img/article/054/113.png" alt="113"></p><p><img src="https://cdn.itbob.cn/img/article/054/114.png" alt="114"></p><p>742 号控制流，第 3 步，取 <code>$_ts</code> 里面的某个值并赋值给一个变量。</p><p><img src="https://cdn.itbob.cn/img/article/054/115.png" alt="115"></p><p>742 号控制流，第 4 步，将前面 279 号控制流得到的大数组与上一步 <code>$_ts</code> 里面的某个值进行合并，合并后计算得到一个值。</p><p><img src="https://cdn.itbob.cn/img/article/054/116.png" alt="116"></p><p>742 号控制流，第 4 步，将上一步得到的值进一步计算得到一个 4 位数组，再将其和大数组合并。</p><p><img src="https://cdn.itbob.cn/img/article/054/117.png" alt="117"></p><p>742 号控制流，接下来几步是对时间戳进行各种操作，这里统称为第 5 步。</p><p><img src="https://cdn.itbob.cn/img/article/054/118.png" alt="118"></p><p><img src="https://cdn.itbob.cn/img/article/054/119.png" alt="119"></p><p><img src="https://cdn.itbob.cn/img/article/054/120.png" alt="120"></p><p><img src="https://cdn.itbob.cn/img/article/054/121.png" alt="121"></p><p>742 号控制流，第 6 步，将上一步得到的 4 个时间戳进行计算，得到一个 16 位数组。</p><p><img src="https://cdn.itbob.cn/img/article/054/122.png" alt="122"></p><p>742 号控制流，第 7 步，将上一步得到的 16 位数组进行异或运算。</p><p><img src="https://cdn.itbob.cn/img/article/054/123.png" alt="123"></p><p>742 号控制流，第 8 步，将上一步的 16 位数组进行计算，得到一个字符串。</p><p><img src="https://cdn.itbob.cn/img/article/054/124.png" alt="124"></p><p>742 号控制流，第 9 步，正式生成 cookie 值，其中 <code>_$bd[274]</code> 定值，一般视为版本号，将上一步得到的字符串、之前得到的大数组和一个 32 位数组进行计算、组合，得到最终结果。</p><p><img src="https://cdn.itbob.cn/img/article/054/125.png" alt="125"></p><p>742 号控制流结束，返回 772 号控制流，利用了一个方法，组装 cookie，然后赋值给 <code>document.cookie</code>，整个流程就结束了。</p><p><img src="https://cdn.itbob.cn/img/article/054/126.png" alt="126"></p><p><img src="https://cdn.itbob.cn/img/article/054/127.png" alt="127"></p><p><img src="https://cdn.itbob.cn/img/article/054/128.png" alt="128"></p><p>代码中用到的 <code>$_ts</code> 的值需要我们自己去匹配出来，动态替换，这些步骤和 4 代是类似的，本文就不再重复叙述，可以参考 4 代的那篇逆向文章进行处理即可。</p><p><img src="https://cdn.itbob.cn/img/article/054/129.png" alt="129"></p><h2><span id="hou-zhui-sheng-cheng">后缀生成</span></h2><p>本例中，请求头中有个 sign 参数，Query String Parameters 有两个后缀参数，这两个后缀和 4 代类似，都是瑞数生成的。</p><p><img src="https://cdn.itbob.cn/img/article/054/130.png" alt="130"></p><p><img src="https://cdn.itbob.cn/img/article/054/131.png" alt="131"></p><p>和 4 代的处理方法一样，我们下一个 XHR 断点，先让网页加载完毕，然后打开开发者工具，过掉无限 debugger 后，点击搜索就会断下，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/054/132.png" alt="132"></p><p>往上跟栈到 <code>hasTokenGet</code>，是一个 sojson 旗下的 jsjiami v6 混淆，不值一提，重点是 <code>jsonMD5ToStr</code> 方法，先对传进去的参数做了一些编码处理，最后返回的是 <code>hex_md5</code>，和在线 MD5 加密的结果是一样的，说明是标准的 MD5。</p><p><img src="https://cdn.itbob.cn/img/article/054/133.png" alt="133"></p><p><img src="https://cdn.itbob.cn/img/article/054/134.png" alt="134"></p><p>重点来看瑞数的两个后缀生成方式，和 4 代一样，<code>XMLHttpRequest.send</code> 和 <code>XMLHttpRequest.open</code> 被重写了，如下图所示，在 <code>XMLHttpRequest.open</code> 下个断点，也就是图中的 <code>_$RQ</code> 方法，<code>arguments[1]</code> 就是原始 URL，经过图中的 <code>_$tB</code> 方法处理后就能拿到后缀。</p><p><img src="https://cdn.itbob.cn/img/article/054/135.png" alt="135"></p><p>跟进图中的 <code>_$tB</code> 方法，<code>_$tB</code> 方法里嵌套了一些其他方法，走一遍逻辑，到图中的 <code>_$5j</code> 方法里，前面的一部分都是在对传入的 URL 做处理。</p><p><img src="https://cdn.itbob.cn/img/article/054/136.png" alt="136"></p><p>接下来是生成了一个 16 位数组：</p><p><img src="https://cdn.itbob.cn/img/article/054/137.png" alt="137"></p><p>然后这个 16 位数组经过一个方法后就生成了第一个后缀，如下图所示，本文中这个方法是 <code>_$ZO</code>。</p><p><img src="https://cdn.itbob.cn/img/article/054/138.png" alt="138"></p><p>跟进 <code>_$ZO</code> 方法，主要有以下 5 步：</p><p>第 1 步：生成了一个 32 位数组；</p><p>第 2 步：将之前的 16 位数组以及两个变量拼接生成一个 50 位的数组；</p><p>第 3 步：进入 744 控制流，这里你会发现和之前我们跟 cookie 时的 742 号控制流是一样的，重复走了一遍，所以这里就不再跟了；</p><p>第 4 步：将生成的第一个后缀值进行处理，得到一个两位的字符串，这个字符串在获取第二个后缀的时候会用到；</p><p>第 5 步：将第一个后缀名称和值进行拼接并返回，此时，第一个后缀 <code>hKHnQfLv</code> 就生成了。</p><p><img src="https://cdn.itbob.cn/img/article/054/139.png" alt="139"></p><p>接着前面的 <code>_$5j</code> 方法，图中的 <code>_$5j</code> 这一步，就是获取第二个后缀 <code>8X7Yi61c</code> 的值：</p><p><img src="https://cdn.itbob.cn/img/article/054/140.png" alt="140"></p><p>主要是看一下图中的 <code>_$UM</code> 方法，先将前面生成的两位的字符串与 URL 参数进行拼接，然后会经过一个 <code>_$Nr</code> 方法就能得到第二个后缀的值了。</p><p><img src="https://cdn.itbob.cn/img/article/054/141.png" alt="141"></p><p>再来看一下 <code>_$Nr</code> 方法，先生成一个类似 53924 的值，然后一个 try 语句，注意这里有个方法，图中的 <code>_$Js</code> 方法，里面用到了 <code>$_ts</code> 里面的某个值，后面又生成了一个由数字组成的字符串，再次经过组合、计算后得到最终的值。</p><p><img src="https://cdn.itbob.cn/img/article/054/142.png" alt="142"></p><p><img src="https://cdn.itbob.cn/img/article/054/143.png" alt="143"></p><p>回到前面的 <code>_$UM</code> 方法，前缀 <code>8X7Yi61c</code> 与值组合，自此，两个后缀都拿到了：</p><p><img src="https://cdn.itbob.cn/img/article/054/144.png" alt="144"></p><h2><span id="zhi-wen-sheng-cheng">指纹生成</span></h2><p>我们前面已经分析了，在往 128 位数组里添加值的时候，会有取 <code>window.localStorage</code> 里面的某些值进行计算的步骤，这些值就是取浏览器 canvas 等指纹生成的，指纹随机就能并发，通常访问单独的一个 html 页面是不校验指纹的，生成的短 cookie 就能通过，但是一些查询数据接口会校验指纹，通过触发 load 事件来向 cookie 里添加指纹，使得 cookie 长度变长，怎么查找指纹在哪里生成的，这里推荐直接看视频资料，已经讲得很清楚了，篇幅太长，本文就不再赘述了，资料链接：<a href="https://mp.weixin.qq.com/s/DEUc1K8WaO_Cq1a2r0Ge5g">https://mp.weixin.qq.com/s/DEUc1K8WaO_Cq1a2r0Ge5g</a></p>]]></content>
      
      
      <categories>
          
          <category> JS 逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS 逆向实战 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内 Web 防护天花板，瑞数 4 代 JS 逆向分析</title>
      <link href="/article/053/"/>
      <url>/article/053/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/javascript_reverse.png" alt="javascript_reverse"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#qian-yan">前言</a></li><li><a href="#rui-shu-te-zheng-yi-ji-bu-tong-ban-ben-de-qu-bie">瑞数特征以及不同版本的区别</a></li><li><a href="#cookie-ru-kou-ding-wei">Cookie 入口定位</a></li><li><a href="#wen-jian-jie-gou-yu-luo-ji">文件结构与逻辑</a></li><li><a href="#vm-dai-ma-yi-ji-ts-bian-liang-huo-qu">VM 代码以及 $_ts 变量获取</a></li><li><a href="#kou-dai-ma">扣代码</a><ul><li><a href="#jia-cookie-sheng-cheng-luo-ji">假 Cookie 生成逻辑</a></li><li><a href="#zhen-cookie-sheng-cheng-luo-ji">真 Cookie 生成逻辑</a><ul><li><a href="#qu-jia-cookie">取假 Cookie</a></li><li><a href="#zi-dong-hua-gong-ju-jian-ce">自动化工具检测</a></li><li><a href="#20-wei-he-xin-shu-zu">20 位核心数组</a></li><li><a href="#qi-ta-yong-dao-ts-zhi-de-di-fang">其他用到 $_ts 值的地方</a></li></ul></li><li><a href="#zhu-yi-shi-xiang">注意事项</a></li><li><a href="#hou-zhui-mmewmd-sheng-cheng-luo-ji">后缀 MmEwMD 生成逻辑</a></li></ul></li><li><a href="#shan-yong-watch-gen-zong-gong-neng">善用 Watch 跟踪功能</a></li><li><a href="#jie-guo-yan-zheng">结果验证</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="qian-yan">前言</span></h2><p><img src="https://cdn.itbob.cn/img/article/053/01.png" alt="01"></p><p>瑞数动态安全 Botgate（机器人防火墙）以“动态安全”技术为核心，通过动态封装、动态验证、动态混淆、动态令牌等技术对服务器网页底层代码持续动态变换，增加服务器行为的“不可预测性”，实现了从用户端到服务器端的全方位“主动防护”，为各类 Web、HTML5 提供强大的安全保护。</p><p>瑞数 Botgate 多用于政企、金融、运营商行业，曾一度被视为反爬天花板，随着近年来逆向大佬越来越多，相关的逆向文章也层出不穷，真正到了人均瑞数的时代了，这里也感谢诸如 Nanda、懒神等逆向大佬，揭开了瑞数神秘的面纱，总结的经验让后来人少走了不少弯路。</p><p>过瑞数的方法基本上有以下几种：自动化工具（要隐藏特征值）、RPC 远程调用、JS 逆向（硬扣代码和补环境），本文介绍的是 JS 逆向硬扣代码，尽可能多的介绍各种细节。</p><h2><span id="rui-shu-te-zheng-yi-ji-bu-tong-ban-ben-de-qu-bie">瑞数特征以及不同版本的区别</span></h2><p>对于绝大多数使用了瑞数的网站来说，有以下几点特征（可能有特殊版本不一样，先仅看主流的）：</p><p>1、打开开发者工具（F12）会依次出现两个典型的无限 debugger：</p><p><img src="https://cdn.itbob.cn/img/article/053/02.png" alt="02"></p><p><img src="https://cdn.itbob.cn/img/article/053/03.png" alt="03"></p><p>2、瑞数的 JS 混淆代码中，变量、方法名大多类似于 <code>_$xx</code>，有众多的 <code>if-else</code> 控制流，新版瑞数还可能会有 jsvmp 以及众多三目表达式的情况：</p><p><img src="https://cdn.itbob.cn/img/article/053/04.png" alt="04"></p><p>3、看请求，会有典型的三次请求，首次请求响应码是 202（瑞数3、4代）或者 412（瑞数5代），接着单独请求一个 JS 文件，然后再重新请求页面，后续的其他 XHR 请求中，都带有一个后缀，这个后缀的值是由 JS 生成的，每次都会变化，后缀的值第一个数字为瑞数的版本，比如 <code>MmEwMD=4xxxxx</code> 就是4代瑞数，<code>bX3Xf9nD=5xxxxx</code> 就是5代瑞数：</p><p><img src="https://cdn.itbob.cn/img/article/053/05.png" alt="05"></p><p><img src="https://cdn.itbob.cn/img/article/053/06.png" alt="06"></p><p><img src="https://cdn.itbob.cn/img/article/053/07.png" alt="07"></p><p><img src="https://cdn.itbob.cn/img/article/053/08.png" alt="08"></p><p>4、看 Cookie，瑞数 3、4 代有以 T 和 S 结尾的两个 Cookie，其中以 S 开头的 Cookie 是第一次的 201 那个请求返回的，以 T 开头的 Cookie 是由 JS 生成的，动态变化的，T 和 S 前面一般会跟 80 或 443 的数字，Cookie 值第一个数字为瑞数的版本（为什么可以通过第一个数字来判断版本？难道相同版本第一个数字不会变吗？这些问题我们在分析 JS 的时候可以找到答案），比如：</p><ul><li><code>FSSBBIl1UgzbN7N80T=37Na97B.nWX3....</code>：数字 80 是 http 协议的默认端口号，对应 http 请求，其值第一位为 3，表示 3 代瑞数；</li><li><code>FSSBBIl1UgzbN7N443T=4a.tr1kEXk.....</code>：数字 443 是 https 协议的默认端口号，对应 https 请求，其值第一位为 4，表示 4 代瑞数。</li></ul><p><img src="https://cdn.itbob.cn/img/article/053/09.png" alt="09"></p><p>瑞数 5 代也有以 T 和 S 结尾的两个 Cookie，但有些特殊的 5 代瑞数也有以 O 和 P 结尾的，同样的，以 O 开头的是第一次的 412 那个请求返回的，以 P 开头的是由 JS 生成的，Cookie 值第一个数字同样为瑞数的版本，和 3、4 代不同的是，5 代没有加端口号了，比如：</p><ul><li><code>vsKWUwn3HsfIO=57C6DwDUXS.....</code>：以 O 结尾，其值第一位为 5，表示 5 代瑞数；</li><li><code>WvY7XhIMu0fGT=53.9fybty......</code>：以 T 结尾，其值第一位为 5，表示 5 代瑞数。</li></ul><p><img src="https://cdn.itbob.cn/img/article/053/10.png" alt="10"></p><p><img src="https://cdn.itbob.cn/img/article/053/11.png" alt="11"></p><p>5、看入口，瑞数有个流程是在虚拟机 VM 中加载 1w+ 行的代码，加载此代码的入口，不同版本也不一样（这个入口具体在哪里？怎么定位？在后续逆向分析中再详细介绍），示例如下：</p><ul><li>3 代：<code>_$aW = _$c6[_$l6()](_$wc, _$mo);</code>，<code>_$c6</code> 实际上是 <code>eval</code>，<code>_$l6()</code> 实际上是 <code>call</code>；</li></ul><p><img src="https://cdn.itbob.cn/img/article/053/12.png" alt="12"></p><ul><li>4 代：<code>ret = _$DG.call(_$6a, _$YK);</code>，<code>_$DG</code> 实际上是 <code>eval</code>，有关键字 <code>ret</code>，<code>call</code> 是明文；</li></ul><p><img src="https://cdn.itbob.cn/img/article/053/13.png" alt="13"></p><ul><li>5 代：5 代种类比较多了，最初和 4 代的类似，比如 <code>ret = _$Yg.call(_$kc, _$mH);</code>，有关键字 ret，call 是明文，也有没有 ret 关键字的版本，比如 <code>_$ap = _$j5.call(_$_T, _$gp);</code>，也有像 3 代那样全部混淆了的，比如：<code>_$x8 = _$mP[_$nU[15]](_$z3, _$Ec);</code>，<code>_$mP</code> 实际上是 <code>eval</code>，<code>_$nU[15]</code> 实际上是 <code>call</code>，混淆的 <code>call</code> 与 3 代的区别就是 5 代是在一个数组里取值得到的；</li></ul><p><img src="https://cdn.itbob.cn/img/article/053/14.png" alt="14"></p><p><img src="https://cdn.itbob.cn/img/article/053/15.png" alt="15"></p><p><img src="https://cdn.itbob.cn/img/article/053/16.png" alt="16"></p><p>当然要想精准区分不同版本，得各个条件结合起来看，最主要的还是得看看内部的实现逻辑，以及页面的代码结构，比如 4 代有一个生成假 Cookie 的步骤，而 5 代没有，有的特殊版本虽然看起来是 5 代，但是加了 jsvmp 和三目表达式，和传统的 5 代又有区别，偶尔愚人节啥的突然来个新版本，也会不一样，各版本在分析一遍之后，就很容易区分了。</p><h2><span id="cookie-ru-kou-ding-wei">Cookie 入口定位</span></h2><p>本文案例中瑞数 4 代网站为：<code>aHR0cDovL3d3dy5mYW5nZGkuY29tLmNuL25ld19ob3VzZS9uZXdfaG91c2VfZGV0YWlsLmh0bWw=</code></p><p>首先过掉无限 debugger（过不过其实无所谓，后面的分析其实这个基本上没影响），直接右键 <code>Never pause here</code> 永不在此处断下即可：</p><p><img src="https://cdn.itbob.cn/img/article/053/17.png" alt="17"></p><p>定位 Cookie，首选 Hook 来的最快，通过 Fiddler 等抓包工具、油猴脚本、浏览器插件等方式注入以下 Hook 代码：</p><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-comment">// 严谨模式 检查所有错误</span><span class="hljs-meta">    &#x27;use strict&#x27;</span>;    <span class="hljs-comment">// document 为要hook的对象 这里是hook的cookie</span>    <span class="hljs-keyword">var</span> cookieTemp = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-built_in">Object</span>.defineProperty(<span class="hljs-built_in">document</span>, <span class="hljs-string">&#x27;cookie&#x27;</span>, &#123;        <span class="hljs-comment">// hook set方法也就是赋值的方法 </span>        <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;                <span class="hljs-comment">// 这样就可以快速给下面这个代码行下断点</span>                <span class="hljs-comment">// 从而快速定位设置cookie的代码</span>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hook捕获到cookie设置-&gt;&#x27;</span>, val);                <span class="hljs-keyword">debugger</span>;                cookieTemp = val;                <span class="hljs-keyword">return</span> val;        &#125;,        <span class="hljs-comment">// hook get 方法也就是取值的方法 </span>        <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;            <span class="hljs-keyword">return</span> cookieTemp;        &#125;    &#125;);&#125;)();</code></pre><p>Hook 发现会有生成两次 Cookie 的情况，断下之后往上跟栈，可以看到组装 Cookie 的代码，类似如下结构：</p><p><img src="https://cdn.itbob.cn/img/article/053/18.png" alt="18"></p><p>仔细观察这两次 Cookie 生成的地方，分别往上跟栈，你就会发现两个 Cookie 分别是经过了两个不同方法得到的，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/053/19.png" alt="19"></p><p><img src="https://cdn.itbob.cn/img/article/053/20.png" alt="20"></p><p>这里的代码存在于 VM 虚拟机中，且是 IIFE 自执行代码，我们还得往前跟栈看看这些 VM 代码是从哪里加载出来的，跟栈来到首页（202页面）带有 call 的位置：</p><p><img src="https://cdn.itbob.cn/img/article/053/21.png" alt="21"></p><p>我们在文章开头介绍的这个位置就是这么分析得来的，这个位置通常在分析瑞数的时候作为入口，图中 <code>_$te</code> 实际上是 eval 方法，传入的第一个参数 <code>_$fY</code> 是 Window 对象，第二个对象 <code>_$F8</code> 是我们前面看到的 VM 虚拟机中的 IIFE 自执行代码。</p><p>在知道了瑞数大致的入口之后，我们也可以使用事件监听中的 Script 断点，一直下一个断点（F8）就可以走到 202 页面，然后搜索 call 关键字就能快速定位到入口，Script 断点中的两个选项，第一个表示运行 JS 脚本的第一条语句时断下，第二个表示 JS 因为内容安全政策而被屏蔽时断下，一般选择第一个就可以了，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/053/22.png" alt="22"></p><h2><span id="wen-jian-jie-gou-yu-luo-ji">文件结构与逻辑</span></h2><p>想要后续分析 Cookie 的生成，我们不得不要观察一下 202 页面的代码，meta 标签有个 content 内容，引用了一个类似于 <code>c.FxJzG50F.dfe1675.js</code> 的 JS 文件，接着跟一个自执行的 JS，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/053/23.png" alt="23"></p><p>第1部分 meta 标签的 content 内容，每次都是变化的，第2部分引用的这个外部 JS 在不同页面也有所差别，但是同一个网站同一个页面 JS 里的内容一般是固定不会变的，第3部分自执行代码每次变化的只是变量名，整体逻辑不变，后续我们在扣代码的时候，也会用到这里的部分方法。自执行代码里同样也是有很多 <code>if-else</code> 控制流，开头的那个数组，比如上图中的 <code>_$Dk</code> 就是用来控制后续的控制流的。</p><p>引用的 <code>c.FxJzG50F.dfe1675.js</code> 直接打开看是乱码的，而自执行 JS 的主要作用是将这 JS 乱码还原成 VM 里的 1w+ 行的正常代码，并且定义了一个全局变量 <code>window.$_ts</code> 并赋了许多值，这个变量在后续 VM 中作用非常大，meta 标签的 content 内容同样也会在 VM 里用到。</p><p>由于很多值、变量都是动态变化的，肯定不利于我们的分析，所以我们需要固定一套代码到本地，打断点、跟栈都会更加方便，随便保存一份 202 页面的代码，以及该页面对应的外链 JS 文件，如 <code>c.FxJzG50F.dfe1675.js</code> 到本地，使用浏览器自带的 overrides 重写功能、或者浏览器插件 ReRes、或者抓包工具的响应替换功能（如 Fiddler 的 AutoResponder）进行替换。</p><p><img src="https://cdn.itbob.cn/img/article/053/24.png" alt="24"></p><p>VM 里面的代码是生成 Cookie 的主要代码，包含众多的 <code>if-else</code> 控制流，无疑增加了我们分析代码的成本，这里就可以使用 AST 技术做一下反混淆，比如 Nanda 就将 <code>if-else</code> 控制流转换成了 <code>switch-case</code> 的，同一个控制流下的代码放在了同一个 <code>case</code> 下，然后在 <code>call</code> 入口那个地方，将 VM 代码做一下本地替换，具体可以参考 Nanda 的文章：<a href="https://mp.weixin.qq.com/s/r3FXjvT5Mm9Ikg_bDEadcw">《某数4代逻辑分析》</a>，感兴趣的可以试试，不了解 AST 的可以看看以前的文章<a href="https://mp.weixin.qq.com/s/fIbPuNMs5FRADJE5MOZXgA">《逆向进阶，利用 AST 技术还原 JavaScript 混淆代码》</a>，后续有时间再写写 AST 还原瑞数代码的实战，本文咱们选择硬刚！</p><p><img src="https://cdn.itbob.cn/img/article/053/25.jpg" alt="25"></p><h2><span id="vm-dai-ma-yi-ji-ts-bian-liang-huo-qu">VM 代码以及 $_ts 变量获取</span></h2><p>前面我们了解了 VM 代码和 <code>$_ts</code> 的重要性，所以我们第一步是要想办法拿到他们，至于在什么时候有用到，文章后续再说，复制外链 JS，即  <code>c.FxJzG50F.dfe1675.js</code> 的代码和 202 页面的自执行代码到文件，本地直接运行即可，需要轻度补一下环境，缺啥补啥，大致补一下 window、location、document 就行了，补的具体内容可以直接在浏览器控制台使用 <code>copy()</code> 命令复制过来，然后 VM 代码我们就可以直接 Hook eval 的方式得到，大致的补环境代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> eval_js = <span class="hljs-string">&quot;&quot;</span><span class="hljs-built_in">window</span> = &#123;    <span class="hljs-attr">$_ts</span>:&#123;&#125;,    <span class="hljs-attr">eval</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;        eval_js = data    &#125;&#125;location = &#123;    <span class="hljs-string">&quot;ancestorOrigins&quot;</span>: &#123;&#125;,    <span class="hljs-string">&quot;href&quot;</span>: <span class="hljs-string">&quot;http://www.脱敏处理.com.cn/new_house/new_house_detail.html&quot;</span>,    <span class="hljs-string">&quot;origin&quot;</span>: <span class="hljs-string">&quot;http://www.脱敏处理.com.cn&quot;</span>,    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;http:&quot;</span>,    <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;www.脱敏处理.com.cn&quot;</span>,    <span class="hljs-string">&quot;hostname&quot;</span>: <span class="hljs-string">&quot;www.脱敏处理.com.cn&quot;</span>,    <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,    <span class="hljs-string">&quot;pathname&quot;</span>: <span class="hljs-string">&quot;/new_house/new_house_detail.html&quot;</span>,    <span class="hljs-string">&quot;search&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,    <span class="hljs-string">&quot;hash&quot;</span>: <span class="hljs-string">&quot;&quot;</span>&#125;<span class="hljs-built_in">document</span> = &#123;    <span class="hljs-string">&quot;scripts&quot;</span>: [<span class="hljs-string">&quot;script&quot;</span>, <span class="hljs-string">&quot;script&quot;</span>]&#125;</code></pre><p><img src="https://cdn.itbob.cn/img/article/053/25.png" alt="25"></p><p>观察 <code>$_ts</code> 的 key 和 value，和浏览器中得到的是一样的：</p><p><img src="https://cdn.itbob.cn/img/article/053/26.png" alt="26"></p><p>注意事项：<code>c.FxJzG50F.dfe1675.js</code> 外链 JS 如果你直接下载下来用编辑器打开可能会被自动编码，和原始数据有出入，导致运行报错，这里建议直接在浏览器在线访问这个文件，手动复制过来，或者在抓包软件里将响应内容复制过来，观察以下两种情况，第一种情况就可能会导致运行出错，第二种是正常的：</p><p><img src="https://cdn.itbob.cn/img/article/053/27.png" alt="27"></p><h2><span id="kou-dai-ma">扣代码</span></h2><p>前面说了这么多，现在终于可以进入主题了，那就是扣代码，找个好椅子，准备把屁股坐穿，此时你的键盘只有 F11 有用，不断单步调试，只需要亿点点细节，就完事儿了！</p><p>扣代码步骤太多，不可能每一步都截图写出来，只写一下比较重要的，如有遗漏的地方，那也没办法，首先先在我们替换的 202 页面里，自执行代码开始的地方手动加个 debugger，一进入页面就断下，方便后续的分析：</p><p><img src="https://cdn.itbob.cn/img/article/053/28.png" alt="28"></p><p>通过前面我们的分析，已经知道了入口在 call 的地方，快速搜索并下断点：</p><p><img src="https://cdn.itbob.cn/img/article/053/29.png" alt="29"></p><p>通过前面我们的分析，我们也知道了有两次生成 Cookie 的地方，快速搜索 <code>(5)</code>，搜索结果第二个即为入口：</p><p><img src="https://cdn.itbob.cn/img/article/053/30.png" alt="30"></p><h3><span id="jia-cookie-sheng-cheng-luo-ji">假 Cookie 生成逻辑</span></h3><p>首先单步跟假 Cookie，虽然是假的，但是后续生成真 Cookie 中会用到，在跟的时候你会走到这个逻辑里面：</p><p><img src="https://cdn.itbob.cn/img/article/053/31.png" alt="31"></p><p>有一步会调用 <code>_$8e()</code> 方法，而 <code>_$8e = _$Q9</code>，<code>_$Q9</code> 又嵌套在 <code>_$d0</code> 里的，搜索一下哪里调用了 <code>_$d0</code>，发现是代码开头：</p><p><img src="https://cdn.itbob.cn/img/article/053/32.png" alt="32"></p><p>那么传入的参数 <code>_$Wn</code> 是啥呢？单步跟入，是一个方法，作用就是取 202 页面的 content 内容，那么我们在本地就直接删掉这个 <code>_$Wn</code> 方法，直接传入 content 的值即可，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/053/33.png" alt="33"></p><p>另外，我们发现，代码有非常多的在数组里面按索引取值的情况，比如上图中的 <code>_$PV[68]</code> 的值，实际上就是字符串 content，很显然我们要把这个数组的来源找到，直接搜索 <code>_$PV = </code>，可以找到疑似定义和赋值的地方：</p><p><img src="https://cdn.itbob.cn/img/article/053/34.png" alt="34"></p><p><img src="https://cdn.itbob.cn/img/article/053/35.png" alt="35"></p><p>所以我们得看看这个 <code>_$iL</code> 方法，传入了一个非常长的字符串，打断点进去看看，果然生成了 <code>_$PV</code>，是一个 725 位的数组：</p><p><img src="https://cdn.itbob.cn/img/article/053/36.png" alt="36"></p><p>接下来在扣代码的过程中，你会经常遇到一个变量，在本文中是 <code>_$sX</code>：</p><p><img src="https://cdn.itbob.cn/img/article/053/37.png" alt="37"></p><p>有没有很熟悉？这个值就是我们前面拿到的 <code>$_ts</code> 变量，在开头就可以看到是将 <code>window.$_ts</code> 赋值给了 <code>_$sX</code>：</p><p><img src="https://cdn.itbob.cn/img/article/053/38.png" alt="38"></p><p>继续走，会走到以下逻辑中：</p><p><img src="https://cdn.itbob.cn/img/article/053/39.png" alt="39"></p><p>这里会遇到六个数组，他们都已经有值了，所以我们得找到他们是咋来的，任意搜索其中一个数组名称，会找到定义和赋值的地方：</p><p><img src="https://cdn.itbob.cn/img/article/053/40.png" alt="40"></p><p><img src="https://cdn.itbob.cn/img/article/053/41.png" alt="41"></p><p>赋值明显是调用了 <code>_$rv</code> 方法，再搜 <code>_$rv</code> 方法，发现是开头就调用了：</p><p><img src="https://cdn.itbob.cn/img/article/053/42.png" alt="42"></p><p>后续没有什么特别的，一直单步，最后有个 <code>join('')</code> 操作，就生成了假 Cookie：</p><p><img src="https://cdn.itbob.cn/img/article/053/43.png" alt="43"></p><p>接下来是生成 Cookie 的名字 <code>FSSBBIl1UgzbN7N80T</code>，然后将 Cookie 赋值给 <code>document.cookie</code>，然后又向 <code>localStorage</code> 里面的 <code>$_ck</code> 赋了个值，<code>localStorage</code> 的内容可以直接复制下来，没有太大影响。</p><p><img src="https://cdn.itbob.cn/img/article/053/44.png" alt="44"></p><h3><span id="zhen-cookie-sheng-cheng-luo-ji">真 Cookie 生成逻辑</span></h3><p>单步跟真 Cookie，在本文中也就是 <code>_$ZN(768, 1);</code>，可以看到开始进入了无穷无尽的 <code>if-else</code> 控制流：</p><p><img src="https://cdn.itbob.cn/img/article/053/45.png" alt="45"></p><p>这里本地应该怎样处理呢？我的做法是以 <code>_$Hn</code> 和其值命名函数，<code>function _$Hn768()&#123;&#125;</code> 就表示所有走 768 号控制流的方法，继续跟，生成真 Cookie 的方法基本上在 747 号控制流，后续我们主要以 747 号控制流的各个步骤来看，747 号控制流扣出来的代码大致如下：</p><p><img src="https://cdn.itbob.cn/img/article/053/46.png" alt="46"></p><h4><span id="qu-jia-cookie">取假 Cookie</span></h4><p>单步跟 747 号控制流，会有个进入第 709 号控制流的步骤，会取先前生成的假 Cookie，经过一系列操作之后返回一个数组：</p><p><img src="https://cdn.itbob.cn/img/article/053/47.png" alt="47"></p><p><img src="https://cdn.itbob.cn/img/article/053/48.png" alt="48"></p><p>至此我们在本地同步扣的代码，如果正常的话，返回的数组也应该是一样的（后续的数据就不一样了，有一些时间戳之类的参数参与运算）：</p><p><img src="https://cdn.itbob.cn/img/article/053/49.png" alt="49"></p><h4><span id="zi-dong-hua-gong-ju-jian-ce">自动化工具检测</span></h4><p>继续跟 747 号控制流，会进入 268 号控制流，接着进入 154 号控制流，这里面会针对自动化工具做一些检测，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/053/50.png" alt="50"></p><p><img src="https://cdn.itbob.cn/img/article/053/51.png" alt="51"></p><p>这里定义了一个变量 <code>_$iL</code>，检测不通过就是1，后续又把这个变量赋值给了 <code>_$aW</code>，所以我们本地保持一致，也为 false 即可（其实我们不用自动化工具的话，这一段检测就不用管直接返回 false 就行）：</p><p><img src="https://cdn.itbob.cn/img/article/053/52.png" alt="52"></p><h4><span id="20-wei-he-xin-shu-zu">20 位核心数组</span></h4><p>继续跟 268 号控制流，会进入 668 号控制流，668 号控制流就两个操作，一是生成一个 16 位数组，二是取 <code>$_ts</code> 里面的 4 个变量，加到前面的 16 位后面，组成一个 20 位数组，这 20 位数组的最后 4 位是瑞数核心，其中的映射关系搞错了请求是通不过的，在五代中这部分的处理逻辑会更加复杂。</p><p><img src="https://cdn.itbob.cn/img/article/053/53.png" alt="53"></p><p><img src="https://cdn.itbob.cn/img/article/053/54.png" alt="54"></p><p>这里不是单纯的取 <code>$_ts</code> 里的键值对，你在扣代码的时候，你也许会发现怎么本地到这里取值的时候，取出来的不是数字，而是字符串呢？就像下面这种情况：</p><p><img src="https://cdn.itbob.cn/img/article/053/55.png" alt="55"></p><p>实际上我们最开始得到的 <code>$_ts</code> 值，是经过了二次处理的，我们以第一个 <code>_$sX._$Xb</code> 为例，直接搜索 <code>_$sX._$Xb</code>，可以发现这么一个地方：</p><p><img src="https://cdn.itbob.cn/img/article/053/56.png" alt="56"></p><p>很明显这里给  <code>_$sX._$Xb</code> 重新赋值了一遍，我们可以看到等号右边，先取了一次 <code>_$sX._$Xb</code>，其值为 <code>_$Rm</code>，这和我们初始 <code>$_ts</code> 里面对应的值是一样的，然后我们就得再看看 <code>_$sX[&quot;_$Rm&quot;]</code> 又是何方神圣，直接搜索发现是开头赋值了一个方法，通过调用这个方法来生成新的值：</p><p><img src="https://cdn.itbob.cn/img/article/053/57.png" alt="57"></p><p>另外其他三个值也是同样的套路，赋值的代码分别为：</p><pre><code class="hljs javascript">_$sX._$Xb = _$sX[_$sX._$Xb](_$BH, _$DP);_$sX._$oI = _$sX[_$sX._$oI](_$ZJ, _$DS)_$sX._$EN = _$sX[_$sX._$EN]();_$sX._$D9 = _$sX[_$sX._$D9](_$iL);</code></pre><p>实际上应该是：</p><pre><code class="hljs javascript">_$sX._$Xb = _$sX[<span class="hljs-string">&quot;_$Rm&quot;</span>](_$BH, _$DP);_$sX._$oI = _$sX[<span class="hljs-string">&quot;_$Nw&quot;</span>](_$ZJ, _$DS)_$sX._$EN = _$sX[<span class="hljs-string">&quot;_$Uh&quot;</span>]();_$sX._$D9 = _$sX[<span class="hljs-string">&quot;_$ci&quot;</span>](_$iL);</code></pre><p>进一步来说，实际上是：</p><pre><code class="hljs javascript">_$sX._$Xb = _$1k(_$BH, _$DP);_$sX._$oI = _$jH(_$ZJ, _$DS)_$sX._$EN = _$9M();_$sX._$D9 = _$oL(_$iL);</code></pre><p>静态分析没问题，我们可以先固定下来，但是实际应用当中这些值都是动态的，那我们应该怎么处理呢？先来多看几个对比一下找找规律：</p><p><img src="https://cdn.itbob.cn/img/article/053/58.png" alt="58"></p><p><img src="https://cdn.itbob.cn/img/article/053/59.png" alt="59"></p><p>可以发现每次对应的位次都不一样，但是实际上相同位置的方法点进去都是一样的，也就是说，变的只有方法名和变量名，实现的逻辑是不变的，所以我们只要知道了这四个值分别对应的位置，就能够拿到正确的值，在本地，我们就可以这样做：</p><p>1、先利用正则匹配出这四个值，如：<code>[_$sX._$Xb, _$sX._$oI, _$sX._$EN, _$sX._$D9]</code>；</p><p><img src="https://cdn.itbob.cn/img/article/053/60.png" alt="60"></p><p>2、再匹配出 VM 代码开头的 20 个赋值的语句，如：<code>_$sX._$RH = _$wI; _$sX._$i5 = _$n5;</code> 等；</p><p><img src="https://cdn.itbob.cn/img/article/053/61.png" alt="61"></p><p>3、然后通过 <code>$_ts</code> 取这四个值对应的值，相当于：<code>_$sX._$Xb = _$ts._$Xb = _$Rm</code>；然后再找这四个值所定义的方法在 20 个赋值语句中的位置，相当于：查找 <code>_$sX._$Rm = _$1k; </code> 在 20 个赋值语句中的位置为 7（索引从 0 开始）</p><p><img src="https://cdn.itbob.cn/img/article/053/62.png" alt="62"></p><p>4、我们知道了这四个方法在 20 个赋值语句中的位置，那么我们直接匹配本地对应位置的名称，进行动态替换即可，当然前提是咱们本地已经扣了一套代码出来了：</p><p><img src="https://cdn.itbob.cn/img/article/053/63.png" alt="63"></p><p><img src="https://cdn.itbob.cn/img/article/053/64.png" alt="64"></p><p>经过这样处理后，就能够保证这四个值的准确性了。</p><h4><span id="qi-ta-yong-dao-ts-zhi-de-di-fang">其他用到 $_ts 值的地方</span></h4><p>除了上面说的 20 位数组里用到了 4 个 <code>$_ts</code> 的值以外，还有其他地方有 7 个值也用到了，直接搜索就能定位，这 7 个值相对较简单，每次都是固定取 <code>$_ts</code> 里面的第 2、3、4、15、16、17、19 位的值，同样的，找到对应位置，进行动态替换即可：</p><p><img src="https://cdn.itbob.cn/img/article/053/65.png" alt="65"></p><h3><span id="zhu-yi-shi-xiang">注意事项</span></h3><p>特别注意 VM 代码开头，会直接调用执行一些方法，某些变量的值就是通过这些方法生成的，当你一步一步跟的时候发现某些参数不对，或者没有，那么就得注意开头这些方法了，可能一开始就已经生成了。</p><p><img src="https://cdn.itbob.cn/img/article/053/66.png" alt="66"></p><h3><span id="hou-zhui-mmewmd-sheng-cheng-luo-ji">后缀 MmEwMD 生成逻辑</span></h3><p>后续的其他 XHR 请求中，都带有一个后缀，这个后缀的值同样是由 JS 生成的，每次都会变化，当然不同网站，后缀名不一定都是一样的，本例中是 <code>MmEwMD</code>，先下一个 XHR 断点，当 XHR 请求中包含了 <code>MmEwMD=</code> 时就断下，然后刷新网页：</p><p><img src="https://cdn.itbob.cn/img/article/053/67.png" alt="67"></p><p>可以看到后传入 <code>l.open()</code> 的 URL 还是正常的，断下后到 <code>l.send()</code> 就带有后缀了，再看 <code>l.open()</code> 其实就是 <code>xhr.open()</code>，明显和正常的有区别，同样这个方法也在 VM 代码里，应该是重写了方法，可以和正常的做对比：</p><p><img src="https://cdn.itbob.cn/img/article/053/68.png" alt="68"></p><p>跟到 VM 代码里去看看，经过了 <code>_$sd(arguments[1])</code> 方法就变成了带有后缀的完整链接了：</p><p><img src="https://cdn.itbob.cn/img/article/053/69.png" alt="69"></p><p>跟进 <code>_$sd</code> 方法，前面都是对 url 做一些处理，后面有个进入第 779 号控制流的流程，实际上就是原来我们生成 Cookie 的步骤，跟一下就行了。</p><p><img src="https://cdn.itbob.cn/img/article/053/70.png" alt="70"></p><h2><span id="shan-yong-watch-gen-zong-gong-neng">善用 Watch 跟踪功能</span></h2><p><img src="https://cdn.itbob.cn/img/article/053/71.png" alt="71"></p><p>开发者工具的 Watch 功能能够持续跟踪某个变量的值，对于这种控制流很多的情况，设置相应的变量跟踪，能够让你知道你现在处于哪个控制流中，以及生成的数组的变化，不至于跟着跟着不知道到哪一步了。</p><h2><span id="jie-guo-yan-zheng">结果验证</span></h2><p>如果整个流程没问题，代码也扣得正确，携带正确的 Cookie 和正确的后缀，就能成功访问：</p><p><img src="https://cdn.itbob.cn/img/article/053/72.png" alt="72"></p><p><img src="https://cdn.itbob.cn/img/article/053/73.png" alt="73"></p>]]></content>
      
      
      <categories>
          
          <category> JS 逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS 逆向实战 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AST 脱混淆实战，某 ICP 备案号查询接口 jsjiami v6 分析</title>
      <link href="/article/052/"/>
      <url>/article/052/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/ast.png" alt="ast"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#di-san-fang-gong-ju">第三方工具</a></li><li><a href="#zhua-bao-fen-xi">抓包分析</a></li><li><a href="#jia-mi-ding-wei">加密定位</a></li><li><a href="#ast-tuo-hun-yao">AST 脱混淆</a><ul><li><a href="#wen-jian-jie-gou">文件结构</a></li><li><a href="#jie-mi-han-shu-huan-yuan">解密函数还原</a></li><li><a href="#da-dui-xiang-huan-yuan">大对象还原</a><ul><li><a href="#zi-fu-chuan-huan-yuan">字符串还原</a></li><li><a href="#er-xiang-shi-ji-suan-ti-huan">二项式计算替换</a></li><li><a href="#fang-fa-diao-yong-huan-yuan">方法调用还原</a></li></ul></li><li><a href="#switch-case-fan-kong-zhi-liu-ping-tan-hua">switch-case 反控制流平坦化</a></li><li><a href="#qi-ta-xi-jie-huan-yuan">其他细节还原</a></li></ul></li><li><a href="#wan-zheng-dai-ma">完整代码</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>目标：站 Z 之家网站 ICP 备案号查询</li><li>主页：<code>aHR0cDovL2ljcC5jaGluYXouY29tLw==</code></li><li>接口：<code>aHR0cDovL2ljcC5jaGluYXouY29tL2hvbWUvR2V0UGVyaW1pdEJ5SG9zdA==</code></li><li>逆向参数：<code>hostToken</code>、<code>permitToken</code></li></ul><p>本次主要是 AST 解混淆实战，本例中的 JS 混淆方式是 sojson 旗下的 jsjiami v6 版本，感兴趣的可以去官网体验一下：<a href="https://www.jsjiami.com/">https://www.jsjiami.com/</a> ，如果你还不了解 AST，可以先看看上期的文章（非常详细）：<a href="https://www.itbob.cn/article/051/">《逆向进阶，利用 AST 技术还原 JavaScript 混淆代码》</a>，本文部分 AST 还原代码直接使用了上期文章中的代码，所以细节方面不再赘述，有疑问的地方可以参考参考上期文章。</p><h2><span id="di-san-fang-gong-ju">第三方工具</span></h2><p>逆向领域大佬云集，市面上已经有很多大佬写好的解混淆工具了，除了我们自己手动去写 AST 解析代码以外，有时候直接使用工具会更加方便，当然并没有十全十美的工具，不过大部分情况下都能成功解混淆的，以下工具值得去体验一下：</p><ul><li>蔡老板一键还原 OB 混淆：<a href="https://github.com/Tsaiboss/decodeObfuscator">https://github.com/Tsaiboss/decodeObfuscator</a></li><li>哲哥 AST 混淆还原框架：<a href="https://github.com/sml2h3/ast_tools">https://github.com/sml2h3/ast_tools</a></li><li>V 神 Chrome 插件，内置 AST 混淆还原：<a href="https://github.com/cilame/v_jstools">https://github.com/cilame/v_jstools</a></li><li>jsjiami v6 专用解密工具：<a href="https://github.com/NXY666/JsjiamiV6-Decryptor">https://github.com/NXY666/JsjiamiV6-Decryptor</a></li></ul><h2><span id="zhua-bao-fen-xi">抓包分析</span></h2><p>进入主题，首先抓包看看，来到 ICP 备案查询页面，查询结果中，其他信息都可以直接在相应的 html 源码中找到，只有这个备案号是通过接口传过来的，对应的请求和相关加密参数如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/052/01.png" alt="01"></p><p><img src="https://cdn.itbob.cn/img/article/052/02.png" alt="02"></p><h2><span id="jia-mi-ding-wei">加密定位</span></h2><p>直接搜索关键字 <code>hostToken</code> 或者 <code>permitToken</code> 即可定位：</p><p><img src="https://cdn.itbob.cn/img/article/052/03.png" alt="03"></p><p><img src="https://cdn.itbob.cn/img/article/052/04.png" alt="04"></p><p>关键代码：</p><pre><code class="hljs javascript"><span class="hljs-string">&#x27;data&#x27;</span>: &#123;    <span class="hljs-string">&#x27;kw&#x27;</span>: kw,    <span class="hljs-string">&#x27;hostToken&#x27;</span>: _0x791532[<span class="hljs-string">&#x27;IIPmq&#x27;</span>](generateHostKey, kw),    <span class="hljs-string">&#x27;permitToken&#x27;</span>: _0x791532[_0x404f(<span class="hljs-string">&#x27;‫1df&#x27;</span>, <span class="hljs-string">&#x27;7Gn4&#x27;</span>)](generateWordKey, kw)&#125;</code></pre><p>这里的混淆可以手动跟一下，还原后如下：</p><pre><code class="hljs javascript"><span class="hljs-string">&#x27;data&#x27;</span>: &#123;    <span class="hljs-string">&#x27;kw&#x27;</span>: kw,    <span class="hljs-string">&#x27;hostToken&#x27;</span>: generateHostKey(kw),    <span class="hljs-string">&#x27;permitToken&#x27;</span>: generateWordKey(kw)&#125;</code></pre><p><code>kw</code> 是查询的域名，有用的就是 <code>generateHostKey()</code> 和 <code>generateWordKey()</code> 两个方法了，跟进去看，代码经过了 jsjiami v6 混淆：</p><p><img src="https://cdn.itbob.cn/img/article/052/05.png" alt="05"></p><p><img src="https://cdn.itbob.cn/img/article/052/06.png" alt="06"></p><p><img src="https://cdn.itbob.cn/img/article/052/07.png" alt="07"></p><h2><span id="ast-tuo-hun-yao">AST 脱混淆</span></h2><p>jsjiami 混淆的特征其实和 OB 混淆是类似的：</p><ol><li>一般由一个大数组或者含有大数组的函数、一个数组位移操作的自执行函数、一个解密函数和加密后的函数四部分组成；</li><li>函数名和变量名通常以 _0x 或者 0x 开头，后接 1~6 位数字或字母组合；</li><li>数组位移操作的自执行函数里，有明显的 push、shift 关键字。</li></ol><p>本例中，<code>generateHostKey()</code> 方法在 <code>commo.js</code> 里，<code>generateWordKey()</code> 方法在 <code>generatetoken.js</code> 里，结构如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/052/08.png" alt="08"></p><p>观察 <code>generatetoken.js</code> 文件，可以发现这里面也有 <code>commo.js</code> 里面的 <code>generateHostKey()</code> 和 <code>getRandom()</code> 方法，从方法名来看貌似是重复了，实际上混淆还原后方法是一样的，所以这里我们只需要还原 <code>generatetoken.js</code> 就可以了。</p><h3><span id="wen-jian-jie-gou">文件结构</span></h3><ul><li>混淆 JS 文件：<code>generatetoken.js</code></li><li>AST 还原代码：<code>generatetokenAst.js</code></li><li>还原后的代码：<code>generatetokenNew.js</code></li></ul><h3><span id="jie-mi-han-shu-huan-yuan">解密函数还原</span></h3><p>在原来混淆后的 JS 里，解密函数是 <code>_0x530e</code>，首先观察整个 JS，调用了很多次解密函数，类似于：<code>_0x530e('1', '7XEq')</code>。</p><p>注意这里代码里面有一些特殊字符，类似于 <code>RLE</code>、<code>RLO</code> 之类的，如果在 VSCode 打开是一些 <code>U+202B</code>、<code>U+202E</code> 的字符，实际上这是 RTLO (Right-to-Left Override) 字符，<code>U+202B</code> 和 <code>U+202E</code> 的意思分别是根据内存顺序从左至右和从右至左显示字符，感兴趣的可以网上搜索了解一下。这里并不影响我们进行还原操作。但是如果直接复制过来的话就会导致前后文显示的顺序不对，所以本文中为了方便描述，粘贴的部分代码就手动去掉了这些字符。</p><p><img src="https://cdn.itbob.cn/img/article/052/09.png" alt="09"></p><p><img src="https://cdn.itbob.cn/img/article/052/10.png" alt="10"></p><p>所以第一步我们要还原一下解密函数，把所有 <code>_0x530e</code> 调用的地方直接替换成实际值，首先需要将大数组、自执行函数、加密函数和解密函数分割开，将代码放到 <a href="http://astexplorer.net">astexplorer.net</a> 看一下，也就是将 body 的前四部分和后面剩余部分分割开来，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/052/11.png" alt="11"></p><p>分割代码：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<span class="hljs-keyword">const</span> parse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>).parse;<span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).default<span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).default<span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>)<span class="hljs-comment">// 导入混淆代码并解析为 AST</span><span class="hljs-keyword">const</span> oldCode = fs.readFileSync(<span class="hljs-string">&quot;generatetoken.js&quot;</span>, &#123;<span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;utf-8&quot;</span>&#125;);<span class="hljs-keyword">const</span> astCode = parse(oldCode);<span class="hljs-comment">// 获取整个 AST 节点的长度</span><span class="hljs-keyword">let</span> astCodeLength = astCode.program.body.length<span class="hljs-comment">// 获取解密函数的名字 也就是 _0x530e</span><span class="hljs-keyword">let</span> decryptFunctionName = astCode.program.body[<span class="hljs-number">3</span>].id.name<span class="hljs-comment">// 分割加密函数和解密函数，即 body 的前四部分和后面剩余部分</span><span class="hljs-keyword">let</span> decryptFunction = astCode.program.body.slice(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>)<span class="hljs-keyword">let</span> encryptFunction = astCode.program.body.slice(<span class="hljs-number">4</span>, astCodeLength)<span class="hljs-comment">// 获取加密函数和解密函数的方法多种多样，比如可以挨个取值并转换成 JS 代码</span><span class="hljs-comment">// 这样做就不需要将解密函数赋值给整个 AST 节点了</span><span class="hljs-comment">// let decryptFunction = &quot;&quot;;</span><span class="hljs-comment">// for(let i=0; i&lt;4; i++)&#123;</span><span class="hljs-comment">//     decryptFunction += generate(astCode.program.body[i], &#123;compact: true&#125;).code</span><span class="hljs-comment">// &#125;</span><span class="hljs-comment">// eval(decryptFunction);</span></code></pre><p>在上面的获取加密函数和解密函数的代码中，方法不是唯一的，多种多样，比如直接循环取 body 并转换成 JS 代码，比如直接人工把大数组、自执行函数和解密函数三部分，拿出来放到一个新文件里，然后导出解密方法，后续直接调用也可以。</p><p>在本例中，拿到解密函数后，需要将其赋值给整个 AST 节点，然后再将整个 AST 节点转换成 JavaScript 代码，这里注意有可能会检测代码是否格式化，所以建议转换要加一个 <code>compact</code> 参数，避免格式化，转换完成后 <code>eval</code> 执行一下，让数组位移操作完成，然后我们就可以直接调用解密函数，即 <code>_0x530e()</code>。</p><pre><code class="hljs javascript"><span class="hljs-comment">// 将解密函数赋值给整个 AST 节点</span>astCode.program.body = decryptFunction<span class="hljs-comment">// 将 AST 节点转换成 JS 代码，并 eval 执行一下</span>decryptFunction = generate(astCode, &#123;<span class="hljs-attr">compact</span>: <span class="hljs-literal">true</span>&#125;).code<span class="hljs-built_in">eval</span>(decryptFunction);<span class="hljs-comment">// 测试一下，直接调用 _0x530e 函数可以正确拿到结果</span><span class="hljs-comment">// 输出 split</span><span class="hljs-comment">// console.log(_0x530e(&#x27;‮b&#x27;, &#x27;Zp9G&#x27;))</span></code></pre><p>现在我们能直接调用解密函数 <code>_0x530e()</code> 了，接下来要做的就是怎么把混淆代码中所有调用 <code>_0x530e()</code> 的地方替换成真实值，在此之前，我们要把加密函数（<code>generateKey()</code>、<code>generateHostKey()</code>、<code>generateWordKey()</code> 和 <code>getRandom()</code>）赋值给整个 AST 节点，此时整个节点就没有大数组、自执行函数和解密函数了，解密函数 <code>_0x530e()</code> 已经被写入内存，所以后面不影响我们调用。</p><p>老样子，还是先在 <a href="http://astexplorer.net">astexplorer.net</a> 看一下调用 <code>_0x530e()</code> 的地方，以 <code>_0x530e('b', 'Zp9G')</code> 为例，其真实值应该是 <code>split</code>，对比一下替换前后的结构，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/052/12.png" alt="12"></p><p><img src="https://cdn.itbob.cn/img/article/052/13.png" alt="13"></p><p>可以看到节点由原来的 <code>CallExpression</code> 变成了 <code>StringLiteral</code>，所以我们可以遍历 <code>CallExpression</code>，如果函数名为解密函数名，那就通过 <code>path.toString()</code> 方法获取节点源码，也就类似 <code>_0x530e('b', 'Zp9G')</code> 的源码，然后 <code>eval</code> 执行一下获取其真实值，再使用 <code>types.stringLiteral()</code> 构建 <code>StringLiteral</code> 节点，最后通过 <code>path.replaceInline()</code> 方法替换节点，遍历代码如下：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 将加密函数赋值给整个 AST 节点，此时整个节点就没有大数组、自执行函数和解密函数了</span>astCode.program.body = encryptFunction<span class="hljs-comment">// 调用解密函数，直接计算出类似以下方法的值并替换</span><span class="hljs-comment">// 混淆代码：_0x530e(&#x27;‮b&#x27;, &#x27;Zp9G&#x27;)</span><span class="hljs-comment">// 还原后：split</span><span class="hljs-keyword">const</span> visitor1 = &#123;    <span class="hljs-function"><span class="hljs-title">CallExpression</span>(<span class="hljs-params">path</span>)</span>&#123;        <span class="hljs-keyword">if</span> (path.node.callee.name === decryptFunctionName &amp;&amp; path.node.arguments.length === <span class="hljs-number">2</span>)&#123;            path.replaceInline(types.stringLiteral(<span class="hljs-built_in">eval</span>(path.toString())))        &#125;    &#125;&#125;<span class="hljs-comment">// 遍历节点</span>traverse(astCode, visitor1)<span class="hljs-comment">// 将 AST 节点转换成 JS 代码并写入到新文件里</span><span class="hljs-keyword">const</span> result = generate(astCode, &#123;<span class="hljs-attr">concise</span>:<span class="hljs-literal">true</span>&#125;).codefs.writeFile(<span class="hljs-string">&quot;./generatetokenNew.js&quot;</span>, result, (<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<span class="hljs-built_in">console</span>.log(err)&#125;))</code></pre><p>自此，第一步的解密函数还原就完成了，可以看一下还原前后的对比，如下图所示浅蓝色标记的地方，所有调用 <code>_0x530e()</code> 的地方都被还原了：</p><p><img src="https://cdn.itbob.cn/img/article/052/14.png" alt="14"></p><h3><span id="da-dui-xiang-huan-yuan">大对象还原</span></h3><p>初步还原后我们的代码里就只剩下以下四个方法：</p><ul><li><code>generateKey()</code></li><li><code>generateHostKey()</code></li><li><code>generateWordKey()</code></li><li><code>getRandom()</code></li></ul><p>再观察代码，发现每个方法一开始都有个大的对象，他们分别是：</p><ul><li><code>_0x3b79c6</code></li><li><code>_0x278b2d</code></li><li><code>_0x4115c4</code></li><li><code>_0xd8ec33</code></li></ul><p>后续的代码也在不断调用这个对象的方法，比如 <code>_0x3b79c6[&quot;esdtg&quot;](_0x2e5848[&quot;length&quot;], 0x4)</code> 实际上就是 <code>_0x2e5848[&quot;length&quot;] != 0x4</code>，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/052/15.png" alt="15"></p><p>首先我们将这四个大的对象单独提取出来，还是保持原来的键值对样式，提取完成后删除这两个节点，遍历代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> functionName = &#123;    <span class="hljs-string">&quot;_0x3b79c6&quot;</span>: &#123;&#125;,    <span class="hljs-string">&quot;_0x278b2d&quot;</span>: &#123;&#125;,    <span class="hljs-string">&quot;_0x4115c4&quot;</span>: &#123;&#125;,    <span class="hljs-string">&quot;_0xd8ec33&quot;</span>: &#123;&#125;&#125;<span class="hljs-comment">// 单独提取出四个大对象</span><span class="hljs-keyword">const</span> visitor2 = &#123;    <span class="hljs-function"><span class="hljs-title">VariableDeclarator</span>(<span class="hljs-params">path</span>)</span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> functionName)&#123;            <span class="hljs-keyword">if</span> (path.node &amp;&amp; path.node.id.name == key) &#123;                <span class="hljs-keyword">const</span> properties = path.node.init.properties                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;properties.length; i++)&#123;                    functionName[key][properties[i].key.value] = properties[i].value                &#125;                <span class="hljs-comment">// 写入对象后就可以删除该节点了</span>                path.remove()            &#125;        &#125;    &#125;&#125;</code></pre><p>这里要注意，大的对象里面，有 <code>+</code>、<code>-</code>、<code>==</code> 之类的二项式计算，也有直接为字符串的，还有变成函数调用的，如下所示：</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> _0x3b79c6 = &#123;    <span class="hljs-string">&#x27;MuRlB&#x27;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_0x3ca134, _0x50ee94</span>) </span>&#123;        <span class="hljs-keyword">return</span> _0x3ca134 + _0x50ee94;    &#125;,     <span class="hljs-string">&#x27;Ucwyj&#x27;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_0x32bfa3, _0x3b191b</span>) </span>&#123;        <span class="hljs-keyword">return</span> _0x32bfa3(_0x3b191b);    &#125;,     <span class="hljs-string">&#x27;YrYQW&#x27;</span>: <span class="hljs-string">&#x27;#IpValue&#x27;</span>&#125;</code></pre><p>针对不同的情况有不同的处理方法，同时还要注意传参和 return 返回的参数位置，不要还原后把 <code>a - b</code> 搞成 <code>b - a</code> 了，当然在本例中传入和返回的顺序是一样的，就不需要考虑这个问题。</p><h4><span id="zi-fu-chuan-huan-yuan">字符串还原</span></h4><p>首先来看字符串，有以下几种情况：</p><ul><li>以 <code>_0x3b79c6['YrYQW']</code> 为例，实际上其值为字符串 <code>'#IpValue'</code>，观察其结构，是一个 <code>MemberExpression</code>，在一个列表里；</li><li>以 <code>_0x278b2d['pjbyX']</code> 为例，实际上其值为字符串 <code>'3|2|1|4|5|0|6'</code>，观察其结构，是一个 <code>MemberExpression</code>，在一个字典里；</li><li>以 <code>_0x278b2d['CnTaO']</code> 为例，虽然也是一个 <code>MemberExpression</code>，也在一个字典里。但实际上是二项式计算，所以要排除在外。</li></ul><p><img src="https://cdn.itbob.cn/img/article/052/16.png" alt="16"></p><p><img src="https://cdn.itbob.cn/img/article/052/17.png" alt="17"></p><p><img src="https://cdn.itbob.cn/img/article/052/18.png" alt="18"></p><p>所以我们在写遍历代码时，同时要注意这三种情况，满足条件后直接取原来大对象对应的节点进行替换即可，遍历代码如下所示：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 函数替换，字符串替换：将类似 _0x3b79c6[&#x27;YrYQW&#x27;] 变成 &#x27;#IpValue&#x27;</span><span class="hljs-keyword">const</span> visitor3 = &#123;    <span class="hljs-function"><span class="hljs-title">MemberExpression</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> functionName)&#123;            <span class="hljs-keyword">if</span> (path.node.object &amp;&amp; path.node.object.name == key &amp;&amp; path.inList ) &#123;                path.replaceInline(functionName[key][path.node.property.value])            &#125;            <span class="hljs-keyword">if</span> (path.node.object &amp;&amp; path.node.object.name == key &amp;&amp; path.parent.property &amp;&amp; path.parent.property.value == <span class="hljs-string">&quot;split&quot;</span>) &#123;                path.replaceInline(functionName[key][path.node.property.value])            &#125;        &#125;    &#125;&#125;</code></pre><h4><span id="er-xiang-shi-ji-suan-ti-huan">二项式计算替换</span></h4><p>再来看看二项式计算的情况，以 <code>_0x278b2d['CnTaO'](_0x691267[&quot;length&quot;], 0x1)</code> 为例，实际上是做减法运算，即 <code>_0x691267[&quot;length&quot;] - 0x1</code>，看一下替换前后对比：</p><p><img src="https://cdn.itbob.cn/img/article/052/19.png" alt="19"></p><p><img src="https://cdn.itbob.cn/img/article/052/20.png" alt="20"></p><p>对于这种情况，我们可以直接提取两个参数，然后提取大对象里对应方法的操作符，然后将参数和操作符直接连接起来组成新的节点（<code>binaryExpression</code>）并替换即可，遍历代码如下：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 函数替换，二项式计算：将类似 _0x278b2d[&#x27;CnTaO&#x27;](_0x691267[&quot;length&quot;], 0x1) 变成 _0x691267[&quot;length&quot;] - 0x1</span><span class="hljs-keyword">const</span> visitor4 = &#123;    <span class="hljs-function"><span class="hljs-title">CallExpression</span>(<span class="hljs-params">path</span>)</span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> functionName) &#123;            <span class="hljs-keyword">if</span> (path.node.callee &amp;&amp; path.node.callee.object &amp;&amp; path.node.callee.object.name == key) &#123;                <span class="hljs-keyword">let</span> func = functionName[key][path.node.callee.property.value]                <span class="hljs-keyword">if</span> (func.body.body[<span class="hljs-number">0</span>].argument.type == <span class="hljs-string">&quot;BinaryExpression&quot;</span>) &#123;                    <span class="hljs-keyword">let</span> operator = func.body.body[<span class="hljs-number">0</span>].argument.operator                    <span class="hljs-keyword">let</span> left = path.node.arguments[<span class="hljs-number">0</span>]                    <span class="hljs-keyword">let</span> right = path.node.arguments[<span class="hljs-number">1</span>]                    path.replaceInline(types.binaryExpression(operator, left, right))                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h4><span id="fang-fa-diao-yong-huan-yuan">方法调用还原</span></h4><p>以 <code>_0x4115c4[&quot;PJbSm&quot;](getRandom, 0x64, 0x3e7)</code> 为例，实际上是 <code>getRandom(0x64, 0x3e7)</code>，看一下替换前后对比：</p><p><img src="https://cdn.itbob.cn/img/article/052/21.png" alt="21"></p><p><img src="https://cdn.itbob.cn/img/article/052/22.png" alt="22"></p><p>对于这种情况，传入的第一个参数为方法名称，后面的都是参数，那么可以直接取第一个元素为方法名称，使用 <code>slice(1)</code> 方法取后面所有的参数（因为后面的参数个数是不一定的），然后构造新的节点（<code>callExpression</code>）并替换即可，这部分遍历代码可以和前面二项式的替换相结合，代码如下：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 函数替换，二项式计算：将类似 _0x278b2d[&#x27;CnTaO&#x27;](_0x691267[&quot;length&quot;], 0x1) 变成 _0x691267[&quot;length&quot;] - 0x1</span><span class="hljs-comment">// 函数替换，方法调用：将类似 _0x4115c4[&quot;PJbSm&quot;](getRandom, 0x64, 0x3e7) 变成 getRandom(0x64, 0x3e7)</span><span class="hljs-keyword">const</span> visitor4 = &#123;    <span class="hljs-function"><span class="hljs-title">CallExpression</span>(<span class="hljs-params">path</span>)</span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> functionName) &#123;            <span class="hljs-keyword">if</span> (path.node.callee &amp;&amp; path.node.callee.object &amp;&amp; path.node.callee.object.name == key) &#123;                <span class="hljs-keyword">let</span> func = functionName[key][path.node.callee.property.value]                <span class="hljs-keyword">if</span> (func.body.body[<span class="hljs-number">0</span>].argument.type == <span class="hljs-string">&quot;BinaryExpression&quot;</span>) &#123;                    <span class="hljs-keyword">let</span> operator = func.body.body[<span class="hljs-number">0</span>].argument.operator                    <span class="hljs-keyword">let</span> left = path.node.arguments[<span class="hljs-number">0</span>]                    <span class="hljs-keyword">let</span> right = path.node.arguments[<span class="hljs-number">1</span>]                    path.replaceInline(types.binaryExpression(operator, left, right))                &#125;                <span class="hljs-keyword">if</span> (func.body.body[<span class="hljs-number">0</span>].argument.type == <span class="hljs-string">&quot;CallExpression&quot;</span>) &#123;                    <span class="hljs-keyword">let</span> identifier = path.node.arguments[<span class="hljs-number">0</span>]                    <span class="hljs-keyword">let</span> <span class="hljs-built_in">arguments</span> = path.node.arguments.slice(<span class="hljs-number">1</span>)                    path.replaceInline(types.callExpression(identifier, <span class="hljs-built_in">arguments</span>))                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>自此，第二步的大对象还原就完成了，可以看一下还原前后的对比，如下图所示浅蓝色标记的地方，所有调用四个大对象（<code>_0x3b79c6</code>、<code>_0x278b2d</code>、<code>_0x4115c4</code>、<code>_0xd8ec33</code>）的地方都被还原了：</p><p><img src="https://cdn.itbob.cn/img/article/052/23.png" alt="23"></p><h3><span id="switch-case-fan-kong-zhi-liu-ping-tan-hua">switch-case 反控制流平坦化</span></h3><p>经过前面几步的还原之后，我们发现 <code>generateHostKey()</code>、<code>generateWordKey()</code>、<code>getRandom()</code> 方法里都有一个 <code>switch-case</code> 的控制流，关于反控制流平坦化的讲解在我上期文章有很详细的介绍，不理解的可以看看上期文章，此处也不再赘述了，直接贴代码了：</p><pre><code class="hljs javascript"><span class="hljs-comment">// switch-case 反控制流平坦化</span><span class="hljs-keyword">const</span> visitor5 = &#123;    <span class="hljs-function"><span class="hljs-title">WhileStatement</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-comment">// switch 节点</span>        <span class="hljs-keyword">let</span> switchNode = path.node.body.body[<span class="hljs-number">0</span>];        <span class="hljs-comment">// switch 语句内的控制流数组名，本例中是 _0x28073a、_0x2efb35、_0x187fb8</span>        <span class="hljs-keyword">let</span> arrayName = switchNode.discriminant.object.name;        <span class="hljs-comment">// 获取控制流数组绑定的节点</span>        <span class="hljs-keyword">let</span> bindingArray = path.scope.getBinding(arrayName);        <span class="hljs-comment">// 获取节点整个表达式的参数、分割方法、分隔符</span>        <span class="hljs-keyword">let</span> init = bindingArray.path.node.init;        <span class="hljs-keyword">let</span> object = init.callee.object.value;        <span class="hljs-keyword">let</span> property = init.callee.property.value;        <span class="hljs-keyword">let</span> argument = init.arguments[<span class="hljs-number">0</span>].value;        <span class="hljs-comment">// 模拟执行 &#x27;3|2|1|4|5|0|6&#x27;[&#x27;split&#x27;](&#x27;|&#x27;) 语句</span>        <span class="hljs-keyword">let</span> array = object[property](argument)        <span class="hljs-comment">// 也可以直接取参数进行分割，方法不通用，比如分隔符换成 , 就不行了</span>        <span class="hljs-comment">// let array = init.callee.object.value.split(&#x27;|&#x27;);</span>        <span class="hljs-comment">// switch 语句内的控制流自增变量名，本例中是 _0x38c69e、_0x396880、_0x3b3dc7</span>        <span class="hljs-keyword">let</span> autoIncrementName = switchNode.discriminant.property.argument.name;        <span class="hljs-comment">// 获取控制流自增变量名绑定的节点</span>        <span class="hljs-keyword">let</span> bindingAutoIncrement = path.scope.getBinding(autoIncrementName);        <span class="hljs-comment">// 可选择的操作：删除控制流数组绑定的节点、自增变量名绑定的节点</span>        bindingArray.path.remove();        bindingAutoIncrement.path.remove();        <span class="hljs-comment">// 储存正确顺序的控制流语句</span>        <span class="hljs-keyword">let</span> replace = [];        <span class="hljs-comment">// 遍历控制流数组，按正确顺序取 case 内容</span>        array.forEach(<span class="hljs-function"><span class="hljs-params">index</span> =&gt;</span> &#123;                <span class="hljs-keyword">let</span> consequent = switchNode.cases[index].consequent;                <span class="hljs-comment">// 如果最后一个节点是 continue 语句，则删除 ContinueStatement 节点</span>                <span class="hljs-keyword">if</span> (types.isContinueStatement(consequent[consequent.length - <span class="hljs-number">1</span>])) &#123;                    consequent.pop();                &#125;                <span class="hljs-comment">// concat 方法拼接多个数组，即正确顺序的 case 内容</span>                replace = replace.concat(consequent);            &#125;        );        <span class="hljs-comment">// 替换整个 while 节点，两种方法都可以</span>        path.replaceWithMultiple(replace);        <span class="hljs-comment">// path.replaceInline(replace);</span>    &#125;&#125;</code></pre><h3><span id="qi-ta-xi-jie-huan-yuan">其他细节还原</span></h3><p>到这里其实大部分混淆都已经还原了，已经很容易分析其逻辑了，还剩下一些细节，我们也还原一下，主要有以下细节：</p><ul><li>十六进制、Unicode 编码等，转正常字符；</li><li>对象属性还原，比如 <code>_0x3cbc20['length']</code> 转换成 <code>_0x3cbc20.length</code>；</li><li>表达式还原，比如 <code>!![]</code> 直接计算成 true；</li><li>删除未引用的变量，比如 <code>_0xodD= &quot;jsjiami.com.v6&quot;;</code>；</li><li>删除冗余逻辑代码，只保留 if 为 true 的。</li></ul><p>这些还原代码在我上期文章有详细讲过，结合代码，在 <a href="http://astexplorer.net">astexplorer.net</a> 对照其结构看，也能理解，同样也不赘述了，直接贴代码：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor5 = &#123;    <span class="hljs-comment">// 十六进制、Unicode 编码等，转正常字符</span>    <span class="hljs-string">&quot;StringLiteral|NumericLiteral&quot;</span>(path)&#123;        <span class="hljs-keyword">delete</span> path.node.extra;    &#125;,    <span class="hljs-comment">// _0x3cbc20[&quot;length&quot;] 转换成 _0x3cbc20.length</span>    <span class="hljs-function"><span class="hljs-title">MemberExpression</span>(<span class="hljs-params">path</span>)</span>&#123;        <span class="hljs-keyword">if</span> (path.node.property.type == <span class="hljs-string">&quot;StringLiteral&quot;</span>) &#123;            path.node.computed = <span class="hljs-literal">false</span>            path.node.property = types.identifier(path.node.property.value)        &#125;    &#125;,    <span class="hljs-comment">// 表达式还原，!![] 直接计算成 true</span>    <span class="hljs-string">&quot;BinaryExpression|UnaryExpression&quot;</span>(path) &#123;        <span class="hljs-keyword">let</span> &#123;confident, value&#125; = path.evaluate()        <span class="hljs-keyword">if</span> (confident)&#123;            path.replaceInline(types.valueToNode(value))        &#125;    &#125;,    <span class="hljs-comment">// 删除未引用的变量，比如 _0xodD = &quot;jsjiami.com.v6&quot;;</span>    <span class="hljs-function"><span class="hljs-title">AssignmentExpression</span>(<span class="hljs-params">path</span>)</span>&#123;        <span class="hljs-keyword">let</span> binding = path.scope.getBinding(path.node.left.name);        <span class="hljs-keyword">if</span> (!binding) &#123;            path.remove();        &#125;    &#125;&#125;<span class="hljs-comment">// 删除冗余逻辑代码，只保留 if 为 true 的</span><span class="hljs-keyword">const</span> visitor6 = &#123;    <span class="hljs-function"><span class="hljs-title">IfStatement</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-keyword">if</span>(path.node.test.type == <span class="hljs-string">&quot;BooleanLiteral&quot;</span>) &#123;            <span class="hljs-keyword">if</span>(path.node.test.value) &#123;                path.replaceInline(path.node.consequent.body)            &#125; <span class="hljs-keyword">else</span> &#123;                path.replaceInline(path.node.alternate.body)            &#125;        &#125;    &#125;&#125;</code></pre><p>自此 jajiami v6 混淆就还原完毕了，还原前后对比一下，代码量缩短了很多，逻辑也更加清楚了，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/052/24.png" alt="24"></p><p>最后结合 Python 代码，携带生成的 <code>hostToken</code> 和 <code>permitToken</code>，成功拿到备案号：</p><p><img src="https://cdn.itbob.cn/img/article/052/25.png" alt="25"></p><h2><span id="wan-zheng-dai-ma">完整代码</span></h2><p>原混淆代码 <code>generatetoken.js</code>、AST 脱混淆代码 <code>generatetokenAst.js</code>、还原后的代码 <code>generatetokenNew.js</code>，以及 Python 测试代码均在 GitHub，均有详细注释，欢迎 Star。所有内容仅供学习交流，严禁用于商业用途、非法用途，否则由此产生的一切后果均与作者无关，在仓库中下载的文件学习完毕之后请于 24 小时内删除！</p><p>代码地址：<a href="https://github.com/TRHX/Python3-Spider-Practice">https://github.com/TRHX/Python3-Spider-Practice</a></p>]]></content>
      
      
      <categories>
          
          <category> JS 逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS 逆向实战 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向进阶，利用 AST 技术还原 JavaScript 混淆代码</title>
      <link href="/article/051/"/>
      <url>/article/051/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/ast.png" alt="ast"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#shi-me-shi-ast">什么是 AST</a></li><li><a href="#ast-zai-bian-yi-zhong-de-wei-zhi">AST 在编译中的位置</a><ul><li><a href="#ci-fa-fen-xi">词法分析</a></li><li><a href="#yu-fa-fen-xi">语法分析</a></li><li><a href="#dai-ma-sheng-cheng">代码生成</a></li></ul></li><li><a href="#babel-jian-jie">Babel 简介</a><ul><li><a href="#babel-core">@babel/core</a></li><li><a href="#babel-parser">@babel/parser</a></li><li><a href="#babel-generator">@babel/generator</a></li><li><a href="#babel-traverse">@babel/traverse</a></li><li><a href="#babel-types">@babel/types</a></li></ul></li><li><a href="#chang-jian-hun-yao-huan-yuan">常见混淆还原</a><ul><li><a href="#zi-fu-chuan-huan-yuan">字符串还原</a></li><li><a href="#biao-da-shi-huan-yuan">表达式还原</a></li><li><a href="#shan-chu-wei-shi-yong-bian-liang">删除未使用变量</a></li><li><a href="#shan-chu-rong-yu-luo-ji-dai-ma">删除冗余逻辑代码</a></li><li><a href="#switch-case-fan-kong-zhi-liu-ping-tan-hua">switch-case 反控制流平坦化</a></li></ul></li><li><a href="#can-kao-zi-liao">参考资料</a></li><li><a href="#end">END</a></li></ul><!-- tocstop --><hr><h2><span id="shi-me-shi-ast">什么是 AST</span></h2><p>AST（Abstract Syntax Tree），中文抽象语法树，简称语法树（Syntax Tree），是源代码的抽象语法结构的树状表现形式，树上的每个节点都表示源代码中的一种结构。语法树不是某一种编程语言独有的，JavaScript、Python、Java、Golang 等几乎所有编程语言都有语法树。</p><p>小时候我们得到一个玩具，总喜欢把玩具拆解成一个一个小零件，然后按照我们自己的想法，把零件重新组装起来，一个新玩具就诞生了。而 JavaScript 就像一台精妙运作的机器，通过 AST 解析，我们也可以像童年时拆解玩具一样，深入了解 JavaScript 这台机器的各个零部件，然后重新按照我们自己的意愿来组装。</p><p>AST 的用途很广，IDE 的语法高亮、代码检查、格式化、压缩、转译等，都需要先将代码转化成 AST 再进行后续的操作，ES5 和 ES6 语法差异，为了向后兼容，在实际应用中需要进行语法的转换，也会用到 AST。AST 并不是为了逆向而生，但做逆向学会了 AST，在解混淆时可以如鱼得水。</p><p>AST 有一个在线解析网站：<a href="https://astexplorer.net/">https://astexplorer.net/</a> ，顶部可以选择语言、编译器、是否开启转化等，如下图所示，区域①是源代码，区域②是对应的 AST 语法树，区域③是转换代码，可以对语法树进行各种操作，区域④是转换后生成的新代码。图中原来的 Unicode 字符经过操作之后就变成了正常字符。</p><p>语法树没有单一的格式，选择不同的语言、不同的编译器，得到的结果也是不一样的，在 JavaScript 中，编译器有 Acorn、Espree、Esprima、Recast、Uglify-JS 等，使用最多的是 Babel，后续的学习也是以 Babel 为例。</p><p><img src="https://cdn.itbob.cn/img/article/051/01.png" alt="01"></p><h2><span id="ast-zai-bian-yi-zhong-de-wei-zhi">AST 在编译中的位置</span></h2><p>在编译原理中，编译器转换代码通常要经过三个步骤：词法分析（Lexical Analysis）、语法分析（Syntax Analysis）、代码生成（Code Generation），下图生动展示了这一过程：</p><p><img src="https://cdn.itbob.cn/img/article/051/02.png" alt="02"></p><h3><span id="ci-fa-fen-xi">词法分析</span></h3><p>词法分析阶段是编译过程的第一个阶段，这个阶段的任务是从左到右一个字符一个字符地读入源程序，然后根据构词规则识别单词，生成 token 符号流，比如 <code>isPanda('🐼')</code>，会被拆分成 <code>isPanda</code>，<code>(</code>，<code>'🐼'</code>，<code>)</code> 四部分，每部分都有不同的含义，可以将词法分析过程想象为不同类型标记的列表或数组。</p><p><img src="https://cdn.itbob.cn/img/article/051/03.gif" alt="03"></p><h3><span id="yu-fa-fen-xi">语法分析</span></h3><p>语法分析是编译过程的一个逻辑阶段，语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，比如“程序”，“语句”，“表达式”等，前面的例子中，<code>isPanda('🐼')</code> 就会被分析为一条表达语句 <code>ExpressionStatement</code>，<code>isPanda()</code> 就会被分析成一个函数表达式 <code>CallExpression</code>，<code>🐼</code> 就会被分析成一个变量 <code>Literal</code> 等，众多语法之间的依赖、嵌套关系，就构成了一个树状结构，即 AST 语法树。</p><p><img src="https://cdn.itbob.cn/img/article/051/04.gif" alt="04"></p><h3><span id="dai-ma-sheng-cheng">代码生成</span></h3><p>代码生成是最后一步，将 AST 语法树转换成可执行代码即可，在转换之前，我们可以直接操作语法树，进行增删改查等操作，例如，我们可以确定变量的声明位置、更改变量的值、删除某些节点等，我们将语句 <code>isPanda('🐼')</code> 修改为一个布尔类型的 <code>Literal</code>：<code>true</code>，语法树就有如下变化：</p><p><img src="https://cdn.itbob.cn/img/article/051/05.gif" alt="05"></p><h2><span id="babel-jian-jie">Babel 简介</span></h2><p>Babel 是一个 JavaScript 编译器，也可以说是一个解析库，Babel 中文网：<a href="https://www.babeljs.cn/">https://www.babeljs.cn/</a> ，Babel 英文官网：<a href="https://babeljs.io/">https://babeljs.io/</a> ，Babel 内置了很多分析 JavaScript 代码的方法，我们可以利用 Babel 将 JavaScript 代码转换成 AST 语法树，然后增删改查等操作之后，再转换成 JavaScript 代码。</p><p>Babel 包含的各种功能包、API、各方法可选参数等，都非常多，本文不一一列举，在实际使用过程中，应当多查询官方文档，或者参考文末给出的一些学习资料。Babel 的安装和其他 Node 包一样，需要哪个安装哪个即可，比如 <code>npm install @babel/core @babel/parser @babel/traverse @babel/generator</code></p><p>在做逆向解混淆中，主要用到了 Babel 的以下几个功能包，本文也仅介绍以下几个功能包：</p><ol><li><code>@babel/core</code>：Babel 编译器本身，提供了 babel 的编译 API；</li><li><code>@babel/parser</code>：将 JavaScript 代码解析成 AST 语法树；</li><li><code>@babel/traverse</code>：遍历、修改 AST 语法树的各个节点；</li><li><code>@babel/generator</code>：将 AST 还原成 JavaScript 代码；</li><li><code>@babel/types</code>：判断、验证节点的类型、构建新 AST 节点等。</li></ol><p><img src="https://cdn.itbob.cn/img/article/051/06.png" alt="06"></p><h3><span id="babel-core">@babel/core</span></h3><p>Babel 编译器本身，被拆分成了三个模块：<code>@babel/parser</code>、<code>@babel/traverse</code>、<code>@babel/generator</code>，比如以下方法的导入效果都是一样的：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>).parse;<span class="hljs-keyword">const</span> parse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>).parse;<span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).default<span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>).traverse</code></pre><h3><span id="babel-parser">@babel/parser</span></h3><p><code>@babel/parser</code> 可以将 JavaScript 代码解析成 AST 语法树，其中主要提供了两个方法：</p><ul><li><code>parser.parse(code, [&#123;options&#125;])</code>：解析一段 JavaScript 代码；</li><li><code>parser.parseExpression(code, [&#123;options&#125;])</code>：考虑到了性能问题，解析单个 JavaScript 表达式。</li></ul><p>部分可选参数 <code>options</code>：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>allowImportExportEverywhere</code></td><td>默认 <code>import</code> 和 <code>export</code> 声明语句只能出现在程序的最顶层，设置为 <code>true</code> 则在任何地方都可以声明</td></tr><tr><td><code>allowReturnOutsideFunction</code></td><td>默认如果在顶层中使用 <code>return</code> 语句会引起错误，设置为 <code>true</code> 就不会报错</td></tr><tr><td><code>sourceType</code></td><td>默认为 <code>script</code>，当代码中含有 <code>import</code> 、<code>export</code> 等关键字时会报错，需要指定为 <code>module</code></td></tr><tr><td><code>errorRecovery</code></td><td>默认如果 babel 发现一些不正常的代码就会抛出错误，设置为 <code>true</code> 则会在保存解析错误的同时继续解析代码，错误的记录将被保存在最终生成的 AST 的 errors 属性中，当然如果遇到严重的错误，依然会终止解析</td></tr></tbody></table><p>举个例子看得比较清楚：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<span class="hljs-keyword">const</span> code = <span class="hljs-string">&quot;const a = 1;&quot;</span>;<span class="hljs-keyword">const</span> ast = parser.parse(code, &#123;<span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>&#125;)<span class="hljs-built_in">console</span>.log(ast)</code></pre><p><code>&#123;sourceType: &quot;module&quot;&#125;</code> 演示了如何添加可选参数，输出的就是 AST 语法树，这和在线网站 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 解析出来的语法树是一样的：</p><p><img src="https://cdn.itbob.cn/img/article/051/07.png" alt="07"></p><h3><span id="babel-generator">@babel/generator</span></h3><p><code>@babel/generator</code> 可以将 AST 还原成 JavaScript 代码，提供了一个 <code>generate</code> 方法：<code>generate(ast, [&#123;options&#125;], code)</code>。</p><p>部分可选参数 <code>options</code>：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>auxiliaryCommentBefore</code></td><td>在输出文件内容的头部添加注释块文字</td></tr><tr><td><code>auxiliaryCommentAfter</code></td><td>在输出文件内容的末尾添加注释块文字</td></tr><tr><td><code>comments</code></td><td>输出内容是否包含注释</td></tr><tr><td><code>compact</code></td><td>输出内容是否不添加空格，避免格式化</td></tr><tr><td><code>concise</code></td><td>输出内容是否减少空格使其更紧凑一些</td></tr><tr><td><code>minified</code></td><td>是否压缩输出代码</td></tr><tr><td><code>retainLines</code></td><td>尝试在输出代码中使用与源代码中相同的行号</td></tr></tbody></table><p>接着前面的例子，原代码是 <code>const a = 1;</code>，现在我们把 <code>a</code> 变量修改为 <code>b</code>，值 <code>1</code> 修改为 <code>2</code>，然后将 AST 还原生成新的 JS 代码：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).default<span class="hljs-keyword">const</span> code = <span class="hljs-string">&quot;const a = 1;&quot;</span>;<span class="hljs-keyword">const</span> ast = parser.parse(code, &#123;<span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>&#125;)ast.program.body[<span class="hljs-number">0</span>].declarations[<span class="hljs-number">0</span>].id.name = <span class="hljs-string">&quot;b&quot;</span>ast.program.body[<span class="hljs-number">0</span>].declarations[<span class="hljs-number">0</span>].init.value = <span class="hljs-number">2</span><span class="hljs-keyword">const</span> result = generate(ast, &#123;<span class="hljs-attr">minified</span>: <span class="hljs-literal">true</span>&#125;)<span class="hljs-built_in">console</span>.log(result.code)</code></pre><p>最终输出的是 <code>const b=2;</code>，变量名和值都成功更改了，由于加了压缩处理，等号左右两边的空格也没了。</p><p>代码里 <code>&#123;minified: true&#125;</code> 演示了如何添加可选参数，这里表示压缩输出代码，<code>generate</code> 得到的 <code>result</code> 得到的是一个对象，其中的 <code>code</code> 属性才是最终的 JS 代码。</p><p>代码里 <code>ast.program.body[0].declarations[0].id.name</code> 是 a 在 AST 中的位置，<code>ast.program.body[0].declarations[0].init.value</code> 是 1 在 AST 中的位置，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/051/08.png" alt="08"></p><h3><span id="babel-traverse">@babel/traverse</span></h3><p>当代码多了，我们不可能像前面那样挨个定位并修改，对于相同类型的节点，我们可以直接遍历所有节点来进行修改，这里就用到了 <code>@babel/traverse</code>，它通常和 <code>visitor</code> 一起使用，<code>visitor</code> 是一个对象，这个名字是可以随意取的，<code>visitor</code> 里可以定义一些方法来过滤节点，这里还是用一个例子来演示：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).default<span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).default<span class="hljs-keyword">const</span> code = <span class="hljs-string">`</span><span class="hljs-string">const a = 1500;</span><span class="hljs-string">const b = 60;</span><span class="hljs-string">const c = &quot;hi&quot;;</span><span class="hljs-string">const d = 787;</span><span class="hljs-string">const e = &quot;1244&quot;;</span><span class="hljs-string">`</span><span class="hljs-keyword">const</span> ast = parser.parse(code)<span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">NumericLiteral</span>(<span class="hljs-params">path</span>)</span>&#123;        path.node.value = (path.node.value + <span class="hljs-number">100</span>) * <span class="hljs-number">2</span>    &#125;,    <span class="hljs-function"><span class="hljs-title">StringLiteral</span>(<span class="hljs-params">path</span>)</span>&#123;        path.node.value = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span>    &#125;&#125;traverse(ast, visitor)<span class="hljs-keyword">const</span> result = generate(ast)<span class="hljs-built_in">console</span>.log(result.code)</code></pre><p>这里的原始代码定义了 abcde 五个变量，其值有数字也有字符串，我们在 AST 中可以看到对应的类型为 <code>NumericLiteral</code> 和 <code>StringLiteral</code>：</p><p><img src="https://cdn.itbob.cn/img/article/051/09.png" alt="09"></p><p>然后我们声明了一个 <code>visitor</code> 对象，然后定义对应类型的处理方法，<code>traverse</code> 接收两个参数，第一个是 AST 对象，第二个是 <code>visitor</code>，当 <code>traverse</code> 遍历所有节点，遇到节点类型为 <code>NumericLiteral</code> 和 <code>StringLiteral</code> 时，就会调用 <code>visitor</code> 中对应的处理方法，<code>visitor</code> 中的方法会接收一个当前节点的 <code>path</code> 对象，该对象的类型是 <code>NodePath</code>，该对象有非常多的属性，以下介绍几种最常用的：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>toString()</code></td><td>当前路径的源码</td></tr><tr><td><code>node</code></td><td>当前路径的节点</td></tr><tr><td><code>parent</code></td><td>当前路径的父级节点</td></tr><tr><td><code>parentPath</code></td><td>当前路径的父级路径</td></tr><tr><td><code>type</code></td><td>当前路径的类型</td></tr></tbody></table><p>PS：<code>path</code> 对象除了有很多属性以外，还有很多方法，比如替换节点、删除节点、插入节点、寻找父级节点、获取同级节点、添加注释、判断节点类型等，可在需要时查询相关文档或查看源码，后续介绍 <code>@babel/types</code> 部分将会举部分例子来演示，以后的实战文章中也会有相关实例，篇幅有限本文不再细说。</p><p>因此在上面的代码中，<code>path.node.value</code> 就拿到了变量的值，然后我们就可以进一步对其进行修改了。以上代码运行后，所有数字都会加上100后再乘以2，所有字符串都会被替换成 <code>I Love JavaScript!</code>，结果如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">3200</span>;<span class="hljs-keyword">const</span> b = <span class="hljs-number">320</span>;<span class="hljs-keyword">const</span> c = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span>;<span class="hljs-keyword">const</span> d = <span class="hljs-number">1774</span>;<span class="hljs-keyword">const</span> e = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span>;</code></pre><p>如果多个类型的节点，处理的方式都一样，那么还可以使用 <code>|</code> 将所有节点连接成字符串，将同一个方法应用到所有节点：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-string">&quot;NumericLiteral|StringLiteral&quot;</span>(path) &#123;        path.node.value = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span>    &#125;&#125;</code></pre><p><code>visitor</code> 对象有多种写法，以下几种写法的效果都是一样的：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">NumericLiteral</span>(<span class="hljs-params">path</span>)</span>&#123;        path.node.value = (path.node.value + <span class="hljs-number">100</span>) * <span class="hljs-number">2</span>    &#125;,    <span class="hljs-function"><span class="hljs-title">StringLiteral</span>(<span class="hljs-params">path</span>)</span>&#123;        path.node.value = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span>    &#125;&#125;</code></pre><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-attr">NumericLiteral</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">path</span>)</span>&#123;        path.node.value = (path.node.value + <span class="hljs-number">100</span>) * <span class="hljs-number">2</span>    &#125;,    <span class="hljs-attr">StringLiteral</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">path</span>)</span>&#123;        path.node.value = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span>    &#125;&#125;</code></pre><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-attr">NumericLiteral</span>: &#123;        <span class="hljs-function"><span class="hljs-title">enter</span>(<span class="hljs-params">path</span>)</span> &#123;            path.node.value = (path.node.value + <span class="hljs-number">100</span>) * <span class="hljs-number">2</span>        &#125;    &#125;,    <span class="hljs-attr">StringLiteral</span>: &#123;        <span class="hljs-function"><span class="hljs-title">enter</span>(<span class="hljs-params">path</span>)</span> &#123;            path.node.value = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span>        &#125;    &#125;&#125;</code></pre><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">enter</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-keyword">if</span> (path.node.type === <span class="hljs-string">&quot;NumericLiteral&quot;</span>) &#123;            path.node.value = (path.node.value + <span class="hljs-number">100</span>) * <span class="hljs-number">2</span>        &#125;        <span class="hljs-keyword">if</span> (path.node.type === <span class="hljs-string">&quot;StringLiteral&quot;</span>) &#123;            path.node.value = <span class="hljs-string">&quot;I Love JavaScript!&quot;</span>        &#125;    &#125;&#125;</code></pre><p>以上几种写法中有用到了 <code>enter</code> 方法，在节点的遍历过程中，进入节点（enter）与退出（exit）节点都会访问一次节点，<code>traverse</code> 默认在进入节点时进行节点的处理，如果要在退出节点时处理，那么在 <code>visitor</code> 中就必须声明 <code>exit</code> 方法。</p><h3><span id="babel-types">@babel/types</span></h3><p><code>@babel/types</code> 主要用于构建新的 AST 节点，前面的示例代码为 <code>const a = 1;</code>，如果想要增加内容，比如变成 <code>const a = 1; const b = a * 5 + 1;</code>，就可以通过 <code>@babel/types</code> 来实现。</p><p>首先观察一下 AST 语法树，原语句只有一个 <code>VariableDeclaration</code> 节点，现在增加了一个：</p><p><img src="https://cdn.itbob.cn/img/article/051/10.png" alt="10"></p><p>那么我们的思路就是在遍历节点时，遍历到 <code>VariableDeclaration</code> 节点，就在其后面增加一个 <code>VariableDeclaration</code> 节点，生成  <code>VariableDeclaration</code> 节点，可以使用 <code>types.variableDeclaration()</code> 方法，在 types 中各种方法名称和我们在 AST 中看到的是一样的，只不过首字母是小写的，所以我们不需要知道所有方法的情况下，也能大致推断其方法名，只知道这个方法还不行，还得知道传入的参数是什么，可以查文档，不过这里推荐直接看源码，非常清晰明了，以 Pycharm 为例，按住 Ctrl 键，再点击方法名，就进到源码里了：</p><p><img src="https://cdn.itbob.cn/img/article/051/11.png" alt="11"></p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">variableDeclaration</span>(<span class="hljs-params">kind: <span class="hljs-string">&quot;var&quot;</span> | <span class="hljs-string">&quot;let&quot;</span> | <span class="hljs-string">&quot;const&quot;</span>, declarations: <span class="hljs-built_in">Array</span>&lt;BabelNodeVariableDeclarator&gt;</span>)</span></code></pre><p>可以看到需要 <code>kind</code> 和 <code>declarations</code> 两个参数，其中 <code>declarations</code> 是 <code>VariableDeclarator</code> 类型的节点组成的列表，所以我们可以先写出以下 <code>visitor</code> 部分的代码，其中 <code>path.insertAfter()</code> 是在该节点之后插入新节点的意思：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">VariableDeclaration</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-keyword">let</span> declaration = types.variableDeclaration(<span class="hljs-string">&quot;const&quot;</span>, [declarator])        path.insertAfter(declaration)    &#125;&#125;</code></pre><p>接下来我们还需要进一步定义 <code>declarator</code>，也就是 <code>VariableDeclarator</code> 类型的节点，查询其源码如下：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">variableDeclarator</span>(<span class="hljs-params">id: BabelNodeLVal, init?: BabelNodeExpression</span>)</span></code></pre><p>观察 AST，id 为 <code>Identifier</code> 对象，init 为 <code>BinaryExpression</code> 对象，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/051/12.png" alt="12"></p><p>先来处理 id，可以使用 <code>types.identifier()</code> 方法来生成，其源码为 <code>function identifier(name: string)</code>，name 在这里就是 b 了，此时 <code>visitor</code> 代码就可以这么写：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">VariableDeclaration</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-keyword">let</span> declarator = types.variableDeclarator(types.identifier(<span class="hljs-string">&quot;b&quot;</span>), init)        <span class="hljs-keyword">let</span> declaration = types.variableDeclaration(<span class="hljs-string">&quot;const&quot;</span>, [declarator])        path.insertAfter(declaration)    &#125;&#125;</code></pre><p>然后再来看 init 该如何定义，首先仍然是看 AST 结构：</p><p><img src="https://cdn.itbob.cn/img/article/051/13.png" alt="13"></p><p>init 为 <code>BinaryExpression</code> 对象，left 左边是 <code>BinaryExpression</code>，right 右边是 <code>NumericLiteral</code>，可以用 <code>types.binaryExpression()</code> 方法来生成 init，其源码如下：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binaryExpression</span>(<span class="hljs-params"></span></span><span class="hljs-params"><span class="hljs-function">    operator: <span class="hljs-string">&quot;+&quot;</span> | <span class="hljs-string">&quot;-&quot;</span> | <span class="hljs-string">&quot;/&quot;</span> | <span class="hljs-string">&quot;%&quot;</span> | <span class="hljs-string">&quot;*&quot;</span> | <span class="hljs-string">&quot;**&quot;</span> | <span class="hljs-string">&quot;&amp;&quot;</span> | <span class="hljs-string">&quot;|&quot;</span> | <span class="hljs-string">&quot;&gt;&gt;&quot;</span> | <span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span> | <span class="hljs-string">&quot;&lt;&lt;&quot;</span> | <span class="hljs-string">&quot;^&quot;</span> | <span class="hljs-string">&quot;==&quot;</span> | <span class="hljs-string">&quot;===&quot;</span> | <span class="hljs-string">&quot;!=&quot;</span> | <span class="hljs-string">&quot;!==&quot;</span> | <span class="hljs-string">&quot;in&quot;</span> | <span class="hljs-string">&quot;instanceof&quot;</span> | <span class="hljs-string">&quot;&gt;&quot;</span> | <span class="hljs-string">&quot;&lt;&quot;</span> | <span class="hljs-string">&quot;&gt;=&quot;</span> | <span class="hljs-string">&quot;&lt;=&quot;</span>,</span></span><span class="hljs-params"><span class="hljs-function">    left: BabelNodeExpression | BabelNodePrivateName, </span></span><span class="hljs-params"><span class="hljs-function">    right: BabelNodeExpression</span></span><span class="hljs-params"><span class="hljs-function"></span>)</span></code></pre><p>此时 <code>visitor</code> 代码就可以这么写：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">VariableDeclaration</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-keyword">let</span> init = types.binaryExpression(<span class="hljs-string">&quot;+&quot;</span>, left, right)        <span class="hljs-keyword">let</span> declarator = types.variableDeclarator(types.identifier(<span class="hljs-string">&quot;b&quot;</span>), init)        <span class="hljs-keyword">let</span> declaration = types.variableDeclaration(<span class="hljs-string">&quot;const&quot;</span>, [declarator])        path.insertAfter(declaration)    &#125;&#125;</code></pre><p>然后继续构造 left 和 right，和前面的方法一样，观察 AST 语法树，查询对应方法应该传入的参数，层层嵌套，直到把所有的节点都构造完毕，最终的 <code>visitor</code> 代码应该是这样的：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">VariableDeclaration</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-keyword">let</span> left = types.binaryExpression(<span class="hljs-string">&quot;*&quot;</span>, types.identifier(<span class="hljs-string">&quot;a&quot;</span>), types.numericLiteral(<span class="hljs-number">5</span>))        <span class="hljs-keyword">let</span> right = types.numericLiteral(<span class="hljs-number">1</span>)        <span class="hljs-keyword">let</span> init = types.binaryExpression(<span class="hljs-string">&quot;+&quot;</span>, left, right)        <span class="hljs-keyword">let</span> declarator = types.variableDeclarator(types.identifier(<span class="hljs-string">&quot;b&quot;</span>), init)        <span class="hljs-keyword">let</span> declaration = types.variableDeclaration(<span class="hljs-string">&quot;const&quot;</span>, [declarator])        path.insertAfter(declaration)        path.stop()    &#125;&#125;</code></pre><p>注意：<code>path.insertAfter()</code> 插入节点语句后面加了一句 <code>path.stop()</code>，表示插入完成后立即停止遍历当前节点和后续的子节点，添加的新节点也是 <code>VariableDeclaration</code>，如果不加停止语句的话，就会无限循环插入下去。</p><p>插入新节点后，再转换成 JavaScript 代码，就可以看到多了一行新代码，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/051/14.png" alt="14"></p><h2><span id="chang-jian-hun-yao-huan-yuan">常见混淆还原</span></h2><p>了解了 AST 和 babel 后，就可以对 JavaScript 混淆代码进行还原了，以下是部分样例，带你进一步熟悉 babel 的各种操作。</p><h3><span id="zi-fu-chuan-huan-yuan">字符串还原</span></h3><p>文章开头的图中举了个例子，正常字符被换成了 Unicode 编码：</p><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>[<span class="hljs-string">&#x27;\u006c\u006f\u0067&#x27;</span>](<span class="hljs-string">&#x27;\u0048\u0065\u006c\u006c\u006f\u0020\u0077\u006f\u0072\u006c\u0064\u0021&#x27;</span>)</code></pre><p>观察 AST 结构：</p><p><img src="https://cdn.itbob.cn/img/article/051/15.png" alt="15"></p><p>我们发现 Unicode 编码对应的是 <code>raw</code>，而 <code>rawValue</code> 和 <code>value</code> 都是正常的，所以我们可以将 <code>raw</code> 替换成 <code>rawValue</code> 或 <code>value</code> 即可，需要注意的是引号的问题，本来是 <code>console[&quot;log&quot;]</code>，你还原后变成了 <code>console[log]</code>，自然会报错的，除了替换值以外，这里直接删除 extra 节点，或者删除 raw 值也是可以的，所以以下几种写法都可以还原代码：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).default<span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).default<span class="hljs-keyword">const</span> code = <span class="hljs-string">`console[&#x27;\u006c\u006f\u0067&#x27;](&#x27;\u0048\u0065\u006c\u006c\u006f\u0020\u0077\u006f\u0072\u006c\u0064\u0021&#x27;)`</span><span class="hljs-keyword">const</span> ast = parser.parse(code)<span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">StringLiteral</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-comment">// 以下方法均可</span>        <span class="hljs-comment">// path.node.extra.raw = path.node.rawValue</span>        <span class="hljs-comment">// path.node.extra.raw = &#x27;&quot;&#x27; + path.node.value + &#x27;&quot;&#x27;</span>        <span class="hljs-comment">// delete path.node.extra</span>        <span class="hljs-keyword">delete</span> path.node.extra.raw    &#125;&#125;traverse(ast, visitor)<span class="hljs-keyword">const</span> result = generate(ast)<span class="hljs-built_in">console</span>.log(result.code)</code></pre><p>还原结果：</p><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>[<span class="hljs-string">&quot;log&quot;</span>](<span class="hljs-string">&quot;Hello world!&quot;</span>);</code></pre><h3><span id="biao-da-shi-huan-yuan">表达式还原</span></h3><p>之前写过 <a href="https://itrhx.blog.csdn.net/article/details/122057377">JSFuck 混淆的还原</a>，其中有介绍 <code>![]</code> 可表示 false，<code>!![]</code> 或者 <code>!+[]</code> 可表示 true，在一些混淆代码中，经常有这些操作，把简单的表达式复杂化，往往需要执行一下语句，才能得到真正的结果，示例代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = !![]+!![]+!![];<span class="hljs-keyword">const</span> b = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">12.34</span> * <span class="hljs-number">2.12</span>)<span class="hljs-keyword">const</span> c = <span class="hljs-number">10</span> &gt;&gt; <span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">1</span><span class="hljs-keyword">const</span> d = <span class="hljs-built_in">String</span>(<span class="hljs-number">21.3</span> + <span class="hljs-number">14</span> * <span class="hljs-number">1.32</span>)<span class="hljs-keyword">const</span> e = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;1.893&quot;</span> + <span class="hljs-string">&quot;45.9088&quot;</span>)<span class="hljs-keyword">const</span> f = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;23.2334&quot;</span> + <span class="hljs-string">&quot;21.89112&quot;</span>)<span class="hljs-keyword">const</span> g = <span class="hljs-number">20</span> &lt; <span class="hljs-number">18</span> ? <span class="hljs-string">&#x27;未成年&#x27;</span> : <span class="hljs-string">&#x27;成年&#x27;</span></code></pre><p>想要执行语句，我们需要了解 <code>path.evaluate()</code> 方法，该方法会对 path 对象进行执行操作，自动计算出结果，返回一个对象，其中的 <code>confident</code> 属性表示置信度，<code>value</code> 表示计算结果，使用 <code>types.valueToNode()</code> 方法创建节点，使用 <code>path.replaceInline()</code> 方法将节点替换成计算结果生成的新节点，替换方法有一下几种：</p><ul><li><code>replaceWith</code>：用一个节点替换另一个节点；</li><li><code>replaceWithMultiple</code>：用多个节点替换另一个节点；</li><li><code>replaceWithSourceString</code>：将传入的源码字符串解析成对应 Node 后再替换，性能较差，不建议使用；</li><li><code>replaceInline</code>：用一个或多个节点替换另一个节点，相当于同时有了前两个函数的功能。</li></ul><p>对应的 AST 处理代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).default<span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).default<span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>)<span class="hljs-keyword">const</span> code = <span class="hljs-string">`</span><span class="hljs-string">const a = !![]+!![]+!![];</span><span class="hljs-string">const b = Math.floor(12.34 * 2.12)</span><span class="hljs-string">const c = 10 &gt;&gt; 3 &lt;&lt; 1</span><span class="hljs-string">const d = String(21.3 + 14 * 1.32)</span><span class="hljs-string">const e = parseInt(&quot;1.893&quot; + &quot;45.9088&quot;)</span><span class="hljs-string">const f = parseFloat(&quot;23.2334&quot; + &quot;21.89112&quot;)</span><span class="hljs-string">const g = 20 &lt; 18 ? &#x27;未成年&#x27; : &#x27;成年&#x27;</span><span class="hljs-string">`</span><span class="hljs-keyword">const</span> ast = parser.parse(code)<span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-string">&quot;BinaryExpression|CallExpression|ConditionalExpression&quot;</span>(path) &#123;        <span class="hljs-keyword">const</span> &#123;confident, value&#125; = path.evaluate()        <span class="hljs-keyword">if</span> (confident)&#123;            path.replaceInline(types.valueToNode(value))        &#125;    &#125;&#125;traverse(ast, visitor)<span class="hljs-keyword">const</span> result = generate(ast)<span class="hljs-built_in">console</span>.log(result.code)</code></pre><p>最终结果：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">3</span>;<span class="hljs-keyword">const</span> b = <span class="hljs-number">26</span>;<span class="hljs-keyword">const</span> c = <span class="hljs-number">2</span>;<span class="hljs-keyword">const</span> d = <span class="hljs-string">&quot;39.78&quot;</span>;<span class="hljs-keyword">const</span> e = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;1.89345.9088&quot;</span>);<span class="hljs-keyword">const</span> f = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;23.233421.89112&quot;</span>);<span class="hljs-keyword">const</span> g = <span class="hljs-string">&quot;\u6210\u5E74&quot;</span>;</code></pre><h3><span id="shan-chu-wei-shi-yong-bian-liang">删除未使用变量</span></h3><p>有时候代码里会有一些并没有使用到的多余变量，删除这些多余变量有助于更加高效的分析代码，示例代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<span class="hljs-keyword">const</span> b = a * <span class="hljs-number">2</span>;<span class="hljs-keyword">const</span> c = <span class="hljs-number">2</span>;<span class="hljs-keyword">const</span> d = b + <span class="hljs-number">1</span>;<span class="hljs-keyword">const</span> e = <span class="hljs-number">3</span>;<span class="hljs-built_in">console</span>.log(d)</code></pre><p>删除多余变量，首先要了解 <code>NodePath</code> 中的 <code>scope</code>，<code>scope</code> 的作用主要是查找标识符的作用域、获取并修改标识符的所有引用等，删除未使用变量主要用到了 <code>scope.getBinding()</code> 方法，传入的值是当前节点能够引用到的标识符名称，返回的关键属性有以下几个：</p><ul><li><code>identifier</code>：标识符的 Node 对象；</li><li><code>path</code>：标识符的 NodePath 对象；</li><li><code>constant</code>：标识符是否为常量；</li><li><code>referenced</code>：标识符是否被引用；</li><li><code> references</code>：标识符被引用的次数；</li><li><code>constantViolations</code>：如果标识符被修改，则会存放所有修改该标识符节点的 Path 对象；</li><li><code>referencePaths</code>：如果标识符被引用，则会存放所有引用该标识符节点的 Path 对象。</li></ul><p>所以我们可以通过 <code>constantViolations</code>、<code>referenced</code>、<code>references</code>、<code>referencePaths</code> 多个参数来判断变量是否可以被删除，AST 处理代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).default<span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).default<span class="hljs-keyword">const</span> code = <span class="hljs-string">`</span><span class="hljs-string">const a = 1;</span><span class="hljs-string">const b = a * 2;</span><span class="hljs-string">const c = 2;</span><span class="hljs-string">const d = b + 1;</span><span class="hljs-string">const e = 3;</span><span class="hljs-string">console.log(d)</span><span class="hljs-string">`</span><span class="hljs-keyword">const</span> ast = parser.parse(code)<span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">VariableDeclarator</span>(<span class="hljs-params">path</span>)</span>&#123;        <span class="hljs-keyword">const</span> binding = path.scope.getBinding(path.node.id.name);        <span class="hljs-comment">// 如标识符被修改过，则不能进行删除动作。</span>        <span class="hljs-keyword">if</span> (!binding || binding.constantViolations.length &gt; <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-comment">// 未被引用</span>        <span class="hljs-keyword">if</span> (!binding.referenced) &#123;            path.remove();        &#125;        <span class="hljs-comment">// 被引用次数为0</span>        <span class="hljs-comment">// if (binding.references === 0) &#123;</span>        <span class="hljs-comment">//     path.remove();</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// 长度为0，变量没有被引用过</span>        <span class="hljs-comment">// if (binding.referencePaths.length === 0) &#123;</span>        <span class="hljs-comment">//     path.remove();</span>        <span class="hljs-comment">// &#125;</span>    &#125;&#125;traverse(ast, visitor)<span class="hljs-keyword">const</span> result = generate(ast)<span class="hljs-built_in">console</span>.log(result.code)</code></pre><p>处理后的代码（未使用的 b、c、e 变量已被删除）：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<span class="hljs-keyword">const</span> b = a * <span class="hljs-number">2</span>;<span class="hljs-keyword">const</span> d = b + <span class="hljs-number">1</span>;<span class="hljs-built_in">console</span>.log(d);</code></pre><h3><span id="shan-chu-rong-yu-luo-ji-dai-ma">删除冗余逻辑代码</span></h3><p>有时候为了增加逆向难度，会有很多嵌套的 if-else 语句，大量判断为假的冗余逻辑代码，同样可以利用 AST 将其删除掉，只留下判断为真的，示例代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> example = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">let</span> a;    <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;        a = <span class="hljs-number">1</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span>) &#123;            a = <span class="hljs-number">2</span>;        &#125;        <span class="hljs-keyword">else</span> &#123;            a = <span class="hljs-number">3</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> a;&#125;;</code></pre><p>观察 AST，判断条件对应的是 <code>test</code> 节点，if 对应的是 <code>consequent</code> 节点，else 对应的是 <code>alternate</code> 节点，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/051/16.png" alt="16"></p><p>AST 处理思路以及代码：</p><ol><li>筛选出 <code>BooleanLiteral</code> 和 <code>NumericLiteral</code> 节点，取其对应的值，即 <code>path.node.test.value</code>；</li><li>判断 <code>value</code> 值为真，则将节点替换成 <code>consequent</code> 节点下的内容，即 <code>path.node.consequent.body</code>；</li><li>判断 <code>value</code> 值为假，则替换成 <code>alternate</code> 节点下的内容，即 <code>path.node.alternate.body</code>；</li><li>有的 if 语句可能没有写 else，也就没有 <code>alternate</code>，所以这种情况下判断 <code>value</code> 值为假，则直接移除该节点，即 <code>path.remove()</code></li></ol><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).default<span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).default<span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@babel/types&#x27;</span>);<span class="hljs-keyword">const</span> code = <span class="hljs-string">`</span><span class="hljs-string">const example = function () &#123;</span><span class="hljs-string">    let a;</span><span class="hljs-string">    if (false) &#123;</span><span class="hljs-string">        a = 1;</span><span class="hljs-string">    &#125; else &#123;</span><span class="hljs-string">        if (1) &#123;</span><span class="hljs-string">            a = 2;</span><span class="hljs-string">        &#125;</span><span class="hljs-string">        else &#123;</span><span class="hljs-string">            a = 3;</span><span class="hljs-string">        &#125;</span><span class="hljs-string">    &#125;</span><span class="hljs-string">    return a;</span><span class="hljs-string">&#125;;</span><span class="hljs-string">`</span><span class="hljs-keyword">const</span> ast = parser.parse(code)<span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">enter</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-keyword">if</span> (types.isBooleanLiteral(path.node.test) || types.isNumericLiteral(path.node.test)) &#123;            <span class="hljs-keyword">if</span> (path.node.test.value) &#123;                path.replaceInline(path.node.consequent.body);            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-keyword">if</span> (path.node.alternate) &#123;                    path.replaceInline(path.node.alternate.body);                &#125; <span class="hljs-keyword">else</span> &#123;                    path.remove()                &#125;            &#125;        &#125;    &#125;&#125;traverse(ast, visitor)<span class="hljs-keyword">const</span> result = generate(ast)<span class="hljs-built_in">console</span>.log(result.code)</code></pre><p>处理结果：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> example = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">let</span> a;  a = <span class="hljs-number">2</span>;  <span class="hljs-keyword">return</span> a;&#125;;</code></pre><h3><span id="switch-case-fan-kong-zhi-liu-ping-tan-hua">switch-case 反控制流平坦化</span></h3><p>控制流平坦化是混淆当中最常见的，通过 <code>if-else</code> 或者 <code>while-switch-case</code> 语句分解步骤，示例代码：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> _0x34e16a = <span class="hljs-string">&#x27;3,4,0,5,1,2&#x27;</span>[<span class="hljs-string">&#x27;split&#x27;</span>](<span class="hljs-string">&#x27;,&#x27;</span>);<span class="hljs-keyword">let</span> _0x2eff02 = <span class="hljs-number">0x0</span>;<span class="hljs-keyword">while</span> (!![]) &#123;    <span class="hljs-keyword">switch</span> (_0x34e16a[_0x2eff02++]) &#123;        <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;0&#x27;</span>:            <span class="hljs-keyword">let</span> _0x38cb15 = _0x4588f1 + _0x470e97;            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;1&#x27;</span>:            <span class="hljs-keyword">let</span> _0x1e0e5e = _0x37b9f3[_0x50cee0(<span class="hljs-number">0x2e0</span>, <span class="hljs-number">0x2e8</span>, <span class="hljs-number">0x2e1</span>, <span class="hljs-number">0x2e4</span>)];            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;2&#x27;</span>:            <span class="hljs-keyword">let</span> _0x35d732 = [_0x388d4b(-<span class="hljs-number">0x134</span>, -<span class="hljs-number">0x134</span>, -<span class="hljs-number">0x139</span>, -<span class="hljs-number">0x138</span>)](_0x38cb15 &gt;&gt; _0x4588f1);            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;3&#x27;</span>:            <span class="hljs-keyword">let</span> _0x4588f1 = <span class="hljs-number">0x1</span>;            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;4&#x27;</span>:            <span class="hljs-keyword">let</span> _0x470e97 = <span class="hljs-number">0x2</span>;            <span class="hljs-keyword">continue</span>;        <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;5&#x27;</span>:            <span class="hljs-keyword">let</span> _0x37b9f3 = <span class="hljs-number">0x5</span> || _0x38cb15;            <span class="hljs-keyword">continue</span>;    &#125;    <span class="hljs-keyword">break</span>;&#125;</code></pre><p>AST 还原思路：</p><ol><li>获取控制流原始数组，将 <code>'3,4,0,5,1,2'['split'](',')</code> 之类的语句转化成 <code>['3','4','0','5','1','2']</code> 之类的数组，得到该数组之后，也可以选择把 split 语句对应的节点删除掉，因为最终代码里这条语句就没用了；</li><li>遍历第一步得到的控制流数组，依次取出每个值所对应的 case 节点；</li><li>定义一个数组，储存每个 case 节点 <code>consequent</code> 数组里面的内容，并删除 <code>continue</code> 语句对应的节点；</li><li>遍历完成后，将第三步的数组替换掉整个 while 节点，也就是 <code>WhileStatement</code>。</li></ol><p>不同思路，写法多样，对于如何获取控制流数组，可以有以下思路：</p><ol><li>获取到 <code>While</code> 语句节点，然后使用 <code>path.getAllPrevSiblings()</code> 方法获取其前面的所有兄弟节点，遍历每个兄弟节点，找到与 <code>switch()</code> 里面数组的变量名相同的节点，然后再取节点的值进行后续处理；</li><li>直接取 <code>switch()</code> 里面数组的变量名，然后使用 <code>scope.getBinding()</code> 方法获取到它绑定的节点，然后再取这个节点的值进行后续处理。</li></ol><p>所以 AST 处理代码就有两种写法，方法一：（code.js 即为前面的示例代码，为了方便操作，这里使用 fs 从文件中读取代码）</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).default<span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).default<span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>)<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<span class="hljs-keyword">const</span> code = fs.readFileSync(<span class="hljs-string">&quot;code.js&quot;</span>, &#123;<span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;utf-8&quot;</span>&#125;);<span class="hljs-keyword">const</span> ast = parser.parse(code)<span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">WhileStatement</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-comment">// switch 节点</span>        <span class="hljs-keyword">let</span> switchNode = path.node.body.body[<span class="hljs-number">0</span>];        <span class="hljs-comment">// switch 语句内的控制流数组名，本例中是 _0x34e16a</span>        <span class="hljs-keyword">let</span> arrayName = switchNode.discriminant.object.name;        <span class="hljs-comment">// 获得所有 while 前面的兄弟节点，本例中获取到的是声明两个变量的节点，即 const _0x34e16a 和 let _0x2eff02</span>        <span class="hljs-keyword">let</span> prevSiblings = path.getAllPrevSiblings();        <span class="hljs-comment">// 定义缓存控制流数组</span>        <span class="hljs-keyword">let</span> array = []        <span class="hljs-comment">// forEach 方法遍历所有节点</span>        prevSiblings.forEach(<span class="hljs-function"><span class="hljs-params">pervNode</span> =&gt;</span> &#123;            <span class="hljs-keyword">let</span> &#123;id, init&#125; = pervNode.node.declarations[<span class="hljs-number">0</span>];            <span class="hljs-comment">// 如果节点 id.name 与 switch 语句内的控制流数组名相同</span>            <span class="hljs-keyword">if</span> (arrayName === id.name) &#123;                <span class="hljs-comment">// 获取节点整个表达式的参数、分割方法、分隔符</span>                <span class="hljs-keyword">let</span> object = init.callee.object.value;                <span class="hljs-keyword">let</span> property = init.callee.property.value;                <span class="hljs-keyword">let</span> argument = init.arguments[<span class="hljs-number">0</span>].value;                <span class="hljs-comment">// 模拟执行 &#x27;3,4,0,5,1,2&#x27;[&#x27;split&#x27;](&#x27;,&#x27;) 语句</span>                array = object[property](argument)                <span class="hljs-comment">// 也可以直接取参数进行分割，方法不通用，比如分隔符换成 | 就不行了</span>                <span class="hljs-comment">// array = init.callee.object.value.split(&#x27;,&#x27;);</span>            &#125;            <span class="hljs-comment">// 前面的兄弟节点就可以删除了</span>            pervNode.remove();        &#125;);        <span class="hljs-comment">// 储存正确顺序的控制流语句</span>        <span class="hljs-keyword">let</span> replace = [];        <span class="hljs-comment">// 遍历控制流数组，按正确顺序取 case 内容</span>        array.forEach(<span class="hljs-function"><span class="hljs-params">index</span> =&gt;</span> &#123;                <span class="hljs-keyword">let</span> consequent = switchNode.cases[index].consequent;                <span class="hljs-comment">// 如果最后一个节点是 continue 语句，则删除 ContinueStatement 节点</span>                <span class="hljs-keyword">if</span> (types.isContinueStatement(consequent[consequent.length - <span class="hljs-number">1</span>])) &#123;                    consequent.pop();                &#125;                <span class="hljs-comment">// concat 方法拼接多个数组，即正确顺序的 case 内容</span>                replace = replace.concat(consequent);            &#125;        );        <span class="hljs-comment">// 替换整个 while 节点，两种方法都可以</span>        path.replaceWithMultiple(replace);        <span class="hljs-comment">// path.replaceInline(replace);</span>    &#125;&#125;traverse(ast, visitor)<span class="hljs-keyword">const</span> result = generate(ast)<span class="hljs-built_in">console</span>.log(result.code)</code></pre><p>方法二：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<span class="hljs-keyword">const</span> generate = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>).default<span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>).default<span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>)<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<span class="hljs-keyword">const</span> code = fs.readFileSync(<span class="hljs-string">&quot;code.js&quot;</span>, &#123;<span class="hljs-attr">encoding</span>: <span class="hljs-string">&quot;utf-8&quot;</span>&#125;);<span class="hljs-keyword">const</span> ast = parser.parse(code)<span class="hljs-keyword">const</span> visitor = &#123;    <span class="hljs-function"><span class="hljs-title">WhileStatement</span>(<span class="hljs-params">path</span>)</span> &#123;        <span class="hljs-comment">// switch 节点</span>        <span class="hljs-keyword">let</span> switchNode = path.node.body.body[<span class="hljs-number">0</span>];        <span class="hljs-comment">// switch 语句内的控制流数组名，本例中是 _0x34e16a</span>        <span class="hljs-keyword">let</span> arrayName = switchNode.discriminant.object.name;        <span class="hljs-comment">// 获取控制流数组绑定的节点</span>        <span class="hljs-keyword">let</span> bindingArray = path.scope.getBinding(arrayName);        <span class="hljs-comment">// 获取节点整个表达式的参数、分割方法、分隔符</span>        <span class="hljs-keyword">let</span> init = bindingArray.path.node.init;        <span class="hljs-keyword">let</span> object = init.callee.object.value;        <span class="hljs-keyword">let</span> property = init.callee.property.value;        <span class="hljs-keyword">let</span> argument = init.arguments[<span class="hljs-number">0</span>].value;        <span class="hljs-comment">// 模拟执行 &#x27;3,4,0,5,1,2&#x27;[&#x27;split&#x27;](&#x27;,&#x27;) 语句</span>        <span class="hljs-keyword">let</span> array = object[property](argument)        <span class="hljs-comment">// 也可以直接取参数进行分割，方法不通用，比如分隔符换成 | 就不行了</span>        <span class="hljs-comment">// let array = init.callee.object.value.split(&#x27;,&#x27;);</span>        <span class="hljs-comment">// switch 语句内的控制流自增变量名，本例中是 _0x2eff02</span>        <span class="hljs-keyword">let</span> autoIncrementName = switchNode.discriminant.property.argument.name;        <span class="hljs-comment">// 获取控制流自增变量名绑定的节点</span>        <span class="hljs-keyword">let</span> bindingAutoIncrement = path.scope.getBinding(autoIncrementName);        <span class="hljs-comment">// 可选择的操作：删除控制流数组绑定的节点、自增变量名绑定的节点</span>        bindingArray.path.remove();        bindingAutoIncrement.path.remove();        <span class="hljs-comment">// 储存正确顺序的控制流语句</span>        <span class="hljs-keyword">let</span> replace = [];        <span class="hljs-comment">// 遍历控制流数组，按正确顺序取 case 内容</span>        array.forEach(<span class="hljs-function"><span class="hljs-params">index</span> =&gt;</span> &#123;                <span class="hljs-keyword">let</span> consequent = switchNode.cases[index].consequent;                <span class="hljs-comment">// 如果最后一个节点是 continue 语句，则删除 ContinueStatement 节点</span>                <span class="hljs-keyword">if</span> (types.isContinueStatement(consequent[consequent.length - <span class="hljs-number">1</span>])) &#123;                    consequent.pop();                &#125;                <span class="hljs-comment">// concat 方法拼接多个数组，即正确顺序的 case 内容</span>                replace = replace.concat(consequent);            &#125;        );        <span class="hljs-comment">// 替换整个 while 节点，两种方法都可以</span>        path.replaceWithMultiple(replace);        <span class="hljs-comment">// path.replaceInline(replace);</span>    &#125;&#125;traverse(ast, visitor)<span class="hljs-keyword">const</span> result = generate(ast)<span class="hljs-built_in">console</span>.log(result.code)</code></pre><p>以上代码运行后，原来的 <code>switch-case</code> 控制流就被还原了，变成了按顺序一行一行的代码，更加简洁明了：</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> _0x4588f1 = <span class="hljs-number">0x1</span>;<span class="hljs-keyword">let</span> _0x470e97 = <span class="hljs-number">0x2</span>;<span class="hljs-keyword">let</span> _0x38cb15 = _0x4588f1 + _0x470e97;<span class="hljs-keyword">let</span> _0x37b9f3 = <span class="hljs-number">0x5</span> || _0x38cb15;<span class="hljs-keyword">let</span> _0x1e0e5e = _0x37b9f3[_0x50cee0(<span class="hljs-number">0x2e0</span>, <span class="hljs-number">0x2e8</span>, <span class="hljs-number">0x2e1</span>, <span class="hljs-number">0x2e4</span>)];<span class="hljs-keyword">let</span> _0x35d732 = [_0x388d4b(-<span class="hljs-number">0x134</span>, -<span class="hljs-number">0x134</span>, -<span class="hljs-number">0x139</span>, -<span class="hljs-number">0x138</span>)](_0x38cb15 &gt;&gt; _0x4588f1);</code></pre><h2><span id="can-kao-zi-liao">参考资料</span></h2><p>本文有参考以下资料，也是比较推荐的在线学习资料：</p><ul><li>Youtube 视频，Babel 入门：<a href="https://www.youtube.com/watch?v=UeVq_U5obnE">https://www.youtube.com/watch?v=UeVq_U5obnE</a></li><li>官方手册 Babel Handbook：<a href="https://github.com/jamiebuilds/babel-handbook">https://github.com/jamiebuilds/babel-handbook</a></li><li>非官方 Babel API 中文文档：<a href="https://evilrecluse.top/Babel-traverse-api-doc/">https://evilrecluse.top/Babel-traverse-api-doc/</a></li></ul><h2><span id="end">END</span></h2><p>Babel 编译器国内的资料其实不是很多，多看源码、同时在线对照可视化的 AST 语法树，耐心一点儿一层一层分析即可，本文中的案例也只是最基本操作，实际遇到一些混淆还得视情况进行修改，比如需要加一些类型判断来限制等，后续会用实战来带领大家进一步熟悉解混淆当中的其他操作。</p>]]></content>
      
      
      <categories>
          
          <category> JS 逆向理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> JS 逆向理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网洛者反爬练习平台第七题：JSVMPZL 初体验</title>
      <link href="/article/050/"/>
      <url>/article/050/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/javascript_reverse.png" alt="javascript_reverse"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#ni-xiang-guo-cheng">逆向过程</a><ul><li><a href="#hook-guan-jian-fang-fa">Hook 关键方法</a></li><li><a href="#ri-zhi-duan-dian-cha-zhuang-diao-shi">日志断点 / 插桩调试</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>目标：网洛者反反爬虫练习平台第七题：JSVMPZL 初体验</li><li>链接：<a href="http://spider.wangluozhe.com/challenge/7">http://spider.wangluozhe.com/challenge/7</a></li><li>简介：平台注册需要邀请码，站长在群里，可后台回复交流群加群获取，或者直接加网站底部站长QQ获取。要求采集100页的全部数字，并计算所有数据加和。主要难点在于 vvv 大佬开发的 JS 混淆框架：jsvmpzl</li></ul><p><img src="https://cdn.itbob.cn/img/article/050/01.png" alt="01"></p><h2><span id="ni-xiang-guo-cheng">逆向过程</span></h2><p>直接搜索，或者跟栈，可以轻松找到加密入口，打开 F12 有两个反调试，一是无限 debugger，右键 Never pause here 即可，二是定时器，控制台输入 <code>for (let i = 1; i &lt; 99999; i++) window.clearInterval(i);</code> 过掉即可。</p><p><img src="https://cdn.itbob.cn/img/article/050/02.png" alt="02"></p><p>跟进 <code>y__()</code>，就可以看到 jsvmpzl 混淆的代码了，如果有做过猿人学平台的题，会发现此混淆和猿人学第 18 题（ <a href="https://match.yuanrenxue.com/match/18">https://match.yuanrenxue.com/match/18</a> ）是一样的，在 <code>y__()</code> 第一行下个断点，观察 <code>__v_()</code> 第一个参数 <code>_</code>，<code>_[2][0]</code> 你会发现有关 MD5 算法的一些特征，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/050/03.png" alt="03"></p><p>那么我们直接大胆猜测一下，是不是就是某个数据经过 MD5 之后就是 <code>_signature</code> 了呢？再继续调试一下，注意 <code>arguments</code> 的变化：</p><p><img src="https://cdn.itbob.cn/img/article/050/04.png" alt="04"></p><p>很明显这个 <code>window.byted_acrawler(window.sign())</code> 应该就是生成 <code>_signature</code> 的语句，这个方法和某字节系的 <code>_signature</code> 生成的方法名称是一样的，直接在控制台输出一下可以拿到值，其中 <code>window.sign()</code> 是取的时间戳：</p><p><img src="https://cdn.itbob.cn/img/article/050/05.png" alt="05"></p><p>我们前面猜测是 MD5，直接验证一下，发现并不是的，即便是同一个时间戳，经过 <code>window.byted_acrawler()</code> 后得到的值每次也都不一样：</p><p><img src="https://cdn.itbob.cn/img/article/050/06.png" alt="06"></p><h3><span id="hook-guan-jian-fang-fa">Hook 关键方法</span></h3><p>经过前面的分析，既然标准的 MD5 不行，那有没有可能是魔改的 MD5 呢？首先找个 JavaScript 标准的 MD5 代码看一下，比如：<a href="http://pajhome.org.uk/crypt/md5/md5.html">http://pajhome.org.uk/crypt/md5/md5.html</a></p><p><img src="https://cdn.itbob.cn/img/article/050/07.png" alt="07"></p><p>可以注意到，源码里面有很多 <code>md5_ff</code>、<code>md5_gg</code>、<code>md5_hh</code>、<code>md5_ii</code> 的方法，最后一个值都是固定的，那么有没有可能此题就是在标准 MD5 的基础上修改了一些默认值呢？所以我们可以直接 Hook 这些关键方法，在控制台输出传入的值，来一一对比一下，看看默认值是否是一样的，为了方便观察，我们还可以为输出语句加上颜色，Hook 代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> oldFF = _[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;md5_ff&#x27;</span>];<span class="hljs-keyword">let</span> oldGG = _[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;md5_gg&#x27;</span>];<span class="hljs-keyword">let</span> oldHH = _[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;md5_hh&#x27;</span>];<span class="hljs-keyword">let</span> oldII = _[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;md5_ii&#x27;</span>];<span class="hljs-keyword">let</span> color_white_red = <span class="hljs-string">&quot;color: white; background: red;&quot;</span><span class="hljs-keyword">let</span> color_white_grey = <span class="hljs-string">&quot;color: white; background: grey;&quot;</span><span class="hljs-keyword">let</span> color_white_darkcyan = <span class="hljs-string">&quot;color: white; background: darkcyan;&quot;</span><span class="hljs-keyword">let</span> color_white_green = <span class="hljs-string">&quot;color: white; background: green;&quot;</span><span class="hljs-keyword">let</span> color_white_orange = <span class="hljs-string">&quot;color: white; background: orange;&quot;</span>_[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;md5_ff&#x27;</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d, e, f, g</span>) </span>&#123;    <span class="hljs-keyword">debugger</span>;    <span class="hljs-keyword">let</span> result = oldFF(a, b, c, d, e, f, g);    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;%c Function: %c md5_ff %c Result: %c %s %c Params: %c %s, %s, %s, %s, %s, %s, %s &quot;</span>, color_white_red, color_white_grey, color_white_red, color_white_grey, result, color_white_red, color_white_grey, a, b, c, d, e, f, g)    <span class="hljs-keyword">return</span> result;&#125;;_[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;md5_gg&#x27;</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d, e, f, g</span>) </span>&#123;    <span class="hljs-keyword">debugger</span>;    <span class="hljs-keyword">let</span> result = oldGG(a, b, c, d, e, f, g);    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;%c Function: %c md5_gg %c Result: %c %s %c Params: %c %s, %s, %s, %s, %s, %s, %s &quot;</span>, color_white_red, color_white_darkcyan, color_white_red, color_white_darkcyan, result, color_white_red, color_white_darkcyan, a, b, c, d, e, f, g)    <span class="hljs-keyword">return</span> result;&#125;;_[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;md5_hh&#x27;</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d, e, f, g</span>) </span>&#123;    <span class="hljs-keyword">debugger</span>;    <span class="hljs-keyword">let</span> result = oldHH(a, b, c, d, e, f, g);    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;%c Function: %c md5_hh %c Result: %c %s %c Params: %c %s, %s, %s, %s, %s, %s, %s &quot;</span>, color_white_red, color_white_green, color_white_red, color_white_green, result, color_white_red, color_white_green, a, b, c, d, e, f, g)    <span class="hljs-keyword">return</span> result;&#125;;_[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;md5_ii&#x27;</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c, d, e, f, g</span>) </span>&#123;    <span class="hljs-keyword">debugger</span>;    <span class="hljs-keyword">let</span> result = oldII(a, b, c, d, e, f, g);    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;%c Function: %c md5_ii %c Result: %c %s %c Params: %c %s, %s, %s, %s, %s, %s, %s &quot;</span>, color_white_red, color_white_orange, color_white_red, color_white_orange, result, color_white_red, color_white_orange, a, b, c, d, e, f, g)    <span class="hljs-keyword">return</span> result;&#125;;</code></pre><p>Hook 代码写得比较死板，熟悉 JS 的大佬可自己优化一下，注意注入代码的时机，清除定时器后，断点运行到 <code>y__()</code> 方法后再注入，然后取消断点，一直下一步，就可以在控制台看到输出的参数了，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/050/08.png" alt="08"></p><p><img src="https://cdn.itbob.cn/img/article/050/09.png" alt="09"></p><p>与默认参数进行对比，可以发现 <code>md5_hh()</code> 里有两个默认参数被修改了：</p><p><img src="https://cdn.itbob.cn/img/article/050/10.png" alt="10"></p><p>默认的 <code>-722521979</code> 改成了 <code>-722521939</code>、<code>76029189</code> 改成了 <code>76029185</code>，本地代码修改一下即可：</p><pre><code class="hljs javascript"><span class="hljs-comment">/* ==================================</span><span class="hljs-comment"># @Time    : 2021-12-23</span><span class="hljs-comment"># @Author  : ITBOB.CN</span><span class="hljs-comment"># @FileName: challenge_7.js</span><span class="hljs-comment"># @Software: PyCharm</span><span class="hljs-comment"># ================================== */</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message</span><span class="hljs-comment"> * Digest Algorithm, as defined in RFC 1321.</span><span class="hljs-comment"> * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009</span><span class="hljs-comment"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span><span class="hljs-comment"> * Distributed under the BSD License</span><span class="hljs-comment"> * See http://pajhome.org.uk/crypt/md5 for more info.</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * Configurable variables. You may need to tweak these to be compatible with</span><span class="hljs-comment"> * the server-side, but the defaults work in most cases.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> hexcase = <span class="hljs-number">0</span>;   <span class="hljs-comment">/* hex output format. 0 - lowercase; 1 - uppercase        */</span><span class="hljs-keyword">var</span> b64pad  = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">/* base-64 pad character. &quot;=&quot; for strict RFC compliance   */</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * These are the functions you&#x27;ll usually want to call</span><span class="hljs-comment"> * They take string arguments and return either hex or base-64 encoded strings</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hex_md5</span>(<span class="hljs-params">s</span>)    </span>&#123; <span class="hljs-keyword">return</span> rstr2hex(rstr_md5(str2rstr_utf8(s))); &#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b64_md5</span>(<span class="hljs-params">s</span>)    </span>&#123; <span class="hljs-keyword">return</span> rstr2b64(rstr_md5(str2rstr_utf8(s))); &#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">any_md5</span>(<span class="hljs-params">s, e</span>) </span>&#123; <span class="hljs-keyword">return</span> rstr2any(rstr_md5(str2rstr_utf8(s)), e); &#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hex_hmac_md5</span>(<span class="hljs-params">k, d</span>)</span><span class="hljs-function">  </span>&#123; <span class="hljs-keyword">return</span> rstr2hex(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); &#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b64_hmac_md5</span>(<span class="hljs-params">k, d</span>)</span><span class="hljs-function">  </span>&#123; <span class="hljs-keyword">return</span> rstr2b64(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); &#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">any_hmac_md5</span>(<span class="hljs-params">k, d, e</span>)</span><span class="hljs-function">  </span>&#123; <span class="hljs-keyword">return</span> rstr2any(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)), e); &#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Perform a simple self-test to see if the VM is working</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">md5_vm_test</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">return</span> hex_md5(<span class="hljs-string">&quot;abc&quot;</span>).toLowerCase() == <span class="hljs-string">&quot;900150983cd24fb0d6963f7d28e17f72&quot;</span>;&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Calculate the MD5 of a raw string</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rstr_md5</span>(<span class="hljs-params">s</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">return</span> binl2rstr(binl_md5(rstr2binl(s), s.length * <span class="hljs-number">8</span>));&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Calculate the HMAC-MD5, of a key and some data (raw strings)</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rstr_hmac_md5</span>(<span class="hljs-params">key, data</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">var</span> bkey = rstr2binl(key);  <span class="hljs-keyword">if</span>(bkey.length &gt; <span class="hljs-number">16</span>) bkey = binl_md5(bkey, key.length * <span class="hljs-number">8</span>);  <span class="hljs-keyword">var</span> ipad = <span class="hljs-built_in">Array</span>(<span class="hljs-number">16</span>), opad = <span class="hljs-built_in">Array</span>(<span class="hljs-number">16</span>);  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)  &#123;    ipad[i] = bkey[i] ^ <span class="hljs-number">0x36363636</span>;    opad[i] = bkey[i] ^ <span class="hljs-number">0x5C5C5C5C</span>;  &#125;  <span class="hljs-keyword">var</span> hash = binl_md5(ipad.concat(rstr2binl(data)), <span class="hljs-number">512</span> + data.length * <span class="hljs-number">8</span>);  <span class="hljs-keyword">return</span> binl2rstr(binl_md5(opad.concat(hash), <span class="hljs-number">512</span> + <span class="hljs-number">128</span>));&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Convert a raw string to a hex string</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rstr2hex</span>(<span class="hljs-params">input</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">try</span> &#123; hexcase &#125; <span class="hljs-keyword">catch</span>(e) &#123; hexcase=<span class="hljs-number">0</span>; &#125;  <span class="hljs-keyword">var</span> hex_tab = hexcase ? <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span> : <span class="hljs-string">&quot;0123456789abcdef&quot;</span>;  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">var</span> x;  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; input.length; i++)  &#123;    x = input.charCodeAt(i);    output += hex_tab.charAt((x &gt;&gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>)           +  hex_tab.charAt( x        &amp; <span class="hljs-number">0x0F</span>);  &#125;  <span class="hljs-keyword">return</span> output;&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Convert a raw string to a base-64 string</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rstr2b64</span>(<span class="hljs-params">input</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">try</span> &#123; b64pad &#125; <span class="hljs-keyword">catch</span>(e) &#123; b64pad=<span class="hljs-string">&#x27;&#x27;</span>; &#125;  <span class="hljs-keyword">var</span> tab = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">var</span> len = input.length;  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i += <span class="hljs-number">3</span>)  &#123;    <span class="hljs-keyword">var</span> triplet = (input.charCodeAt(i) &lt;&lt; <span class="hljs-number">16</span>)                | (i + <span class="hljs-number">1</span> &lt; len ? input.charCodeAt(i+<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">8</span> : <span class="hljs-number">0</span>)                | (i + <span class="hljs-number">2</span> &lt; len ? input.charCodeAt(i+<span class="hljs-number">2</span>)      : <span class="hljs-number">0</span>);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)    &#123;      <span class="hljs-keyword">if</span>(i * <span class="hljs-number">8</span> + j * <span class="hljs-number">6</span> &gt; input.length * <span class="hljs-number">8</span>) output += b64pad;      <span class="hljs-keyword">else</span> output += tab.charAt((triplet &gt;&gt;&gt; <span class="hljs-number">6</span>*(<span class="hljs-number">3</span>-j)) &amp; <span class="hljs-number">0x3F</span>);    &#125;  &#125;  <span class="hljs-keyword">return</span> output;&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Convert a raw string to an arbitrary string encoding</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rstr2any</span>(<span class="hljs-params">input, encoding</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">var</span> divisor = encoding.length;  <span class="hljs-keyword">var</span> i, j, q, x, quotient;  <span class="hljs-comment">/* Convert to an array of 16-bit big-endian values, forming the dividend */</span>  <span class="hljs-keyword">var</span> dividend = <span class="hljs-built_in">Array</span>(<span class="hljs-built_in">Math</span>.ceil(input.length / <span class="hljs-number">2</span>));  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; dividend.length; i++)  &#123;    dividend[i] = (input.charCodeAt(i * <span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-number">8</span>) | input.charCodeAt(i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);  &#125;  <span class="hljs-comment">/*</span><span class="hljs-comment">   * Repeatedly perform a long division. The binary array forms the dividend,</span><span class="hljs-comment">   * the length of the encoding is the divisor. Once computed, the quotient</span><span class="hljs-comment">   * forms the dividend for the next step. All remainders are stored for later</span><span class="hljs-comment">   * use.</span><span class="hljs-comment">   */</span>  <span class="hljs-keyword">var</span> full_length = <span class="hljs-built_in">Math</span>.ceil(input.length * <span class="hljs-number">8</span> /                                    (<span class="hljs-built_in">Math</span>.log(encoding.length) / <span class="hljs-built_in">Math</span>.log(<span class="hljs-number">2</span>)));  <span class="hljs-keyword">var</span> remainders = <span class="hljs-built_in">Array</span>(full_length);  <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; full_length; j++)  &#123;    quotient = <span class="hljs-built_in">Array</span>();    x = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; dividend.length; i++)    &#123;      x = (x &lt;&lt; <span class="hljs-number">16</span>) + dividend[i];      q = <span class="hljs-built_in">Math</span>.floor(x / divisor);      x -= q * divisor;      <span class="hljs-keyword">if</span>(quotient.length &gt; <span class="hljs-number">0</span> || q &gt; <span class="hljs-number">0</span>)        quotient[quotient.length] = q;    &#125;    remainders[j] = x;    dividend = quotient;  &#125;  <span class="hljs-comment">/* Convert the remainders to the output string */</span>  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">for</span>(i = remainders.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)    output += encoding.charAt(remainders[i]);  <span class="hljs-keyword">return</span> output;&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Encode a string as utf-8.</span><span class="hljs-comment"> * For efficiency, this assumes the input is valid utf-16.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2rstr_utf8</span>(<span class="hljs-params">input</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">var</span> i = -<span class="hljs-number">1</span>;  <span class="hljs-keyword">var</span> x, y;  <span class="hljs-keyword">while</span>(++i &lt; input.length)  &#123;    <span class="hljs-comment">/* Decode utf-16 surrogate pairs */</span>    x = input.charCodeAt(i);    y = i + <span class="hljs-number">1</span> &lt; input.length ? input.charCodeAt(i + <span class="hljs-number">1</span>) : <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-number">0xD800</span> &lt;= x &amp;&amp; x &lt;= <span class="hljs-number">0xDBFF</span> &amp;&amp; <span class="hljs-number">0xDC00</span> &lt;= y &amp;&amp; y &lt;= <span class="hljs-number">0xDFFF</span>)    &#123;      x = <span class="hljs-number">0x10000</span> + ((x &amp; <span class="hljs-number">0x03FF</span>) &lt;&lt; <span class="hljs-number">10</span>) + (y &amp; <span class="hljs-number">0x03FF</span>);      i++;    &#125;    <span class="hljs-comment">/* Encode output as utf-8 */</span>    <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">0x7F</span>)      output += <span class="hljs-built_in">String</span>.fromCharCode(x);    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">0x7FF</span>)      output += <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">0xC0</span> | ((x &gt;&gt;&gt; <span class="hljs-number">6</span> ) &amp; <span class="hljs-number">0x1F</span>),                                    <span class="hljs-number">0x80</span> | ( x         &amp; <span class="hljs-number">0x3F</span>));    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">0xFFFF</span>)      output += <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">0xE0</span> | ((x &gt;&gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0F</span>),                                    <span class="hljs-number">0x80</span> | ((x &gt;&gt;&gt; <span class="hljs-number">6</span> ) &amp; <span class="hljs-number">0x3F</span>),                                    <span class="hljs-number">0x80</span> | ( x         &amp; <span class="hljs-number">0x3F</span>));    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &lt;= <span class="hljs-number">0x1FFFFF</span>)      output += <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">0xF0</span> | ((x &gt;&gt;&gt; <span class="hljs-number">18</span>) &amp; <span class="hljs-number">0x07</span>),                                    <span class="hljs-number">0x80</span> | ((x &gt;&gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x3F</span>),                                    <span class="hljs-number">0x80</span> | ((x &gt;&gt;&gt; <span class="hljs-number">6</span> ) &amp; <span class="hljs-number">0x3F</span>),                                    <span class="hljs-number">0x80</span> | ( x         &amp; <span class="hljs-number">0x3F</span>));  &#125;  <span class="hljs-keyword">return</span> output;&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Encode a string as utf-16</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2rstr_utf16le</span>(<span class="hljs-params">input</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; input.length; i++)    output += <span class="hljs-built_in">String</span>.fromCharCode( input.charCodeAt(i)        &amp; <span class="hljs-number">0xFF</span>,                                  (input.charCodeAt(i) &gt;&gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>);  <span class="hljs-keyword">return</span> output;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2rstr_utf16be</span>(<span class="hljs-params">input</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; input.length; i++)    output += <span class="hljs-built_in">String</span>.fromCharCode((input.charCodeAt(i) &gt;&gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>,                                   input.charCodeAt(i)        &amp; <span class="hljs-number">0xFF</span>);  <span class="hljs-keyword">return</span> output;&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Convert a raw string to an array of little-endian words</span><span class="hljs-comment"> * Characters &gt;255 have their high-byte silently ignored.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rstr2binl</span>(<span class="hljs-params">input</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">var</span> output = <span class="hljs-built_in">Array</span>(input.length &gt;&gt; <span class="hljs-number">2</span>);  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; output.length; i++)    output[i] = <span class="hljs-number">0</span>;  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; input.length * <span class="hljs-number">8</span>; i += <span class="hljs-number">8</span>)    output[i&gt;&gt;<span class="hljs-number">5</span>] |= (input.charCodeAt(i / <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; (i%<span class="hljs-number">32</span>);  <span class="hljs-keyword">return</span> output;&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Convert an array of little-endian words to a string</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binl2rstr</span>(<span class="hljs-params">input</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; input.length * <span class="hljs-number">32</span>; i += <span class="hljs-number">8</span>)    output += <span class="hljs-built_in">String</span>.fromCharCode((input[i&gt;&gt;<span class="hljs-number">5</span>] &gt;&gt;&gt; (i % <span class="hljs-number">32</span>)) &amp; <span class="hljs-number">0xFF</span>);  <span class="hljs-keyword">return</span> output;&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Calculate the MD5 of an array of little-endian words, and a bit length.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binl_md5</span>(<span class="hljs-params">x, len</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-comment">/* append padding */</span>  x[len &gt;&gt; <span class="hljs-number">5</span>] |= <span class="hljs-number">0x80</span> &lt;&lt; ((len) % <span class="hljs-number">32</span>);  x[(((len + <span class="hljs-number">64</span>) &gt;&gt;&gt; <span class="hljs-number">9</span>) &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">14</span>] = len;  <span class="hljs-keyword">var</span> a =  <span class="hljs-number">1732584193</span>;  <span class="hljs-keyword">var</span> b = -<span class="hljs-number">271733879</span>;  <span class="hljs-keyword">var</span> c = -<span class="hljs-number">1732584194</span>;  <span class="hljs-keyword">var</span> d =  <span class="hljs-number">271733878</span>;  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; x.length; i += <span class="hljs-number">16</span>)  &#123;    <span class="hljs-keyword">var</span> olda = a;    <span class="hljs-keyword">var</span> oldb = b;    <span class="hljs-keyword">var</span> oldc = c;    <span class="hljs-keyword">var</span> oldd = d;    a = md5_ff(a, b, c, d, x[i+ <span class="hljs-number">0</span>], <span class="hljs-number">7</span> , -<span class="hljs-number">680876936</span>);    d = md5_ff(d, a, b, c, x[i+ <span class="hljs-number">1</span>], <span class="hljs-number">12</span>, -<span class="hljs-number">389564586</span>);    c = md5_ff(c, d, a, b, x[i+ <span class="hljs-number">2</span>], <span class="hljs-number">17</span>,  <span class="hljs-number">606105819</span>);    b = md5_ff(b, c, d, a, x[i+ <span class="hljs-number">3</span>], <span class="hljs-number">22</span>, -<span class="hljs-number">1044525330</span>);    a = md5_ff(a, b, c, d, x[i+ <span class="hljs-number">4</span>], <span class="hljs-number">7</span> , -<span class="hljs-number">176418897</span>);    d = md5_ff(d, a, b, c, x[i+ <span class="hljs-number">5</span>], <span class="hljs-number">12</span>,  <span class="hljs-number">1200080426</span>);    c = md5_ff(c, d, a, b, x[i+ <span class="hljs-number">6</span>], <span class="hljs-number">17</span>, -<span class="hljs-number">1473231341</span>);    b = md5_ff(b, c, d, a, x[i+ <span class="hljs-number">7</span>], <span class="hljs-number">22</span>, -<span class="hljs-number">45705983</span>);    a = md5_ff(a, b, c, d, x[i+ <span class="hljs-number">8</span>], <span class="hljs-number">7</span> ,  <span class="hljs-number">1770035416</span>);    d = md5_ff(d, a, b, c, x[i+ <span class="hljs-number">9</span>], <span class="hljs-number">12</span>, -<span class="hljs-number">1958414417</span>);    c = md5_ff(c, d, a, b, x[i+<span class="hljs-number">10</span>], <span class="hljs-number">17</span>, -<span class="hljs-number">42063</span>);    b = md5_ff(b, c, d, a, x[i+<span class="hljs-number">11</span>], <span class="hljs-number">22</span>, -<span class="hljs-number">1990404162</span>);    a = md5_ff(a, b, c, d, x[i+<span class="hljs-number">12</span>], <span class="hljs-number">7</span> ,  <span class="hljs-number">1804603682</span>);    d = md5_ff(d, a, b, c, x[i+<span class="hljs-number">13</span>], <span class="hljs-number">12</span>, -<span class="hljs-number">40341101</span>);    c = md5_ff(c, d, a, b, x[i+<span class="hljs-number">14</span>], <span class="hljs-number">17</span>, -<span class="hljs-number">1502002290</span>);    b = md5_ff(b, c, d, a, x[i+<span class="hljs-number">15</span>], <span class="hljs-number">22</span>,  <span class="hljs-number">1236535329</span>);    a = md5_gg(a, b, c, d, x[i+ <span class="hljs-number">1</span>], <span class="hljs-number">5</span> , -<span class="hljs-number">165796510</span>);    d = md5_gg(d, a, b, c, x[i+ <span class="hljs-number">6</span>], <span class="hljs-number">9</span> , -<span class="hljs-number">1069501632</span>);    c = md5_gg(c, d, a, b, x[i+<span class="hljs-number">11</span>], <span class="hljs-number">14</span>,  <span class="hljs-number">643717713</span>);    b = md5_gg(b, c, d, a, x[i+ <span class="hljs-number">0</span>], <span class="hljs-number">20</span>, -<span class="hljs-number">373897302</span>);    a = md5_gg(a, b, c, d, x[i+ <span class="hljs-number">5</span>], <span class="hljs-number">5</span> , -<span class="hljs-number">701558691</span>);    d = md5_gg(d, a, b, c, x[i+<span class="hljs-number">10</span>], <span class="hljs-number">9</span> ,  <span class="hljs-number">38016083</span>);    c = md5_gg(c, d, a, b, x[i+<span class="hljs-number">15</span>], <span class="hljs-number">14</span>, -<span class="hljs-number">660478335</span>);    b = md5_gg(b, c, d, a, x[i+ <span class="hljs-number">4</span>], <span class="hljs-number">20</span>, -<span class="hljs-number">405537848</span>);    a = md5_gg(a, b, c, d, x[i+ <span class="hljs-number">9</span>], <span class="hljs-number">5</span> ,  <span class="hljs-number">568446438</span>);    d = md5_gg(d, a, b, c, x[i+<span class="hljs-number">14</span>], <span class="hljs-number">9</span> , -<span class="hljs-number">1019803690</span>);    c = md5_gg(c, d, a, b, x[i+ <span class="hljs-number">3</span>], <span class="hljs-number">14</span>, -<span class="hljs-number">187363961</span>);    b = md5_gg(b, c, d, a, x[i+ <span class="hljs-number">8</span>], <span class="hljs-number">20</span>,  <span class="hljs-number">1163531501</span>);    a = md5_gg(a, b, c, d, x[i+<span class="hljs-number">13</span>], <span class="hljs-number">5</span> , -<span class="hljs-number">1444681467</span>);    d = md5_gg(d, a, b, c, x[i+ <span class="hljs-number">2</span>], <span class="hljs-number">9</span> , -<span class="hljs-number">51403784</span>);    c = md5_gg(c, d, a, b, x[i+ <span class="hljs-number">7</span>], <span class="hljs-number">14</span>,  <span class="hljs-number">1735328473</span>);    b = md5_gg(b, c, d, a, x[i+<span class="hljs-number">12</span>], <span class="hljs-number">20</span>, -<span class="hljs-number">1926607734</span>);    a = md5_hh(a, b, c, d, x[i+ <span class="hljs-number">5</span>], <span class="hljs-number">4</span> , -<span class="hljs-number">378558</span>);    d = md5_hh(d, a, b, c, x[i+ <span class="hljs-number">8</span>], <span class="hljs-number">11</span>, -<span class="hljs-number">2022574463</span>);    c = md5_hh(c, d, a, b, x[i+<span class="hljs-number">11</span>], <span class="hljs-number">16</span>,  <span class="hljs-number">1839030562</span>);    b = md5_hh(b, c, d, a, x[i+<span class="hljs-number">14</span>], <span class="hljs-number">23</span>, -<span class="hljs-number">35309556</span>);    a = md5_hh(a, b, c, d, x[i+ <span class="hljs-number">1</span>], <span class="hljs-number">4</span> , -<span class="hljs-number">1530992060</span>);    d = md5_hh(d, a, b, c, x[i+ <span class="hljs-number">4</span>], <span class="hljs-number">11</span>,  <span class="hljs-number">1272893353</span>);    c = md5_hh(c, d, a, b, x[i+ <span class="hljs-number">7</span>], <span class="hljs-number">16</span>, -<span class="hljs-number">155497632</span>);    b = md5_hh(b, c, d, a, x[i+<span class="hljs-number">10</span>], <span class="hljs-number">23</span>, -<span class="hljs-number">1094730640</span>);    a = md5_hh(a, b, c, d, x[i+<span class="hljs-number">13</span>], <span class="hljs-number">4</span> ,  <span class="hljs-number">681279174</span>);    d = md5_hh(d, a, b, c, x[i+ <span class="hljs-number">0</span>], <span class="hljs-number">11</span>, -<span class="hljs-number">358537222</span>);    <span class="hljs-comment">// 注释掉的是默认值</span>    <span class="hljs-comment">// c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);</span>    c = md5_hh(c, d, a, b, x[i+ <span class="hljs-number">3</span>], <span class="hljs-number">16</span>, -<span class="hljs-number">722521939</span>);    <span class="hljs-comment">// b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);</span>    b = md5_hh(b, c, d, a, x[i+ <span class="hljs-number">6</span>], <span class="hljs-number">23</span>,  <span class="hljs-number">76029185</span>);    a = md5_hh(a, b, c, d, x[i+ <span class="hljs-number">9</span>], <span class="hljs-number">4</span> , -<span class="hljs-number">640364487</span>);    d = md5_hh(d, a, b, c, x[i+<span class="hljs-number">12</span>], <span class="hljs-number">11</span>, -<span class="hljs-number">421815835</span>);    c = md5_hh(c, d, a, b, x[i+<span class="hljs-number">15</span>], <span class="hljs-number">16</span>,  <span class="hljs-number">530742520</span>);    b = md5_hh(b, c, d, a, x[i+ <span class="hljs-number">2</span>], <span class="hljs-number">23</span>, -<span class="hljs-number">995338651</span>);    a = md5_ii(a, b, c, d, x[i+ <span class="hljs-number">0</span>], <span class="hljs-number">6</span> , -<span class="hljs-number">198630844</span>);    d = md5_ii(d, a, b, c, x[i+ <span class="hljs-number">7</span>], <span class="hljs-number">10</span>,  <span class="hljs-number">1126891415</span>);    c = md5_ii(c, d, a, b, x[i+<span class="hljs-number">14</span>], <span class="hljs-number">15</span>, -<span class="hljs-number">1416354905</span>);    b = md5_ii(b, c, d, a, x[i+ <span class="hljs-number">5</span>], <span class="hljs-number">21</span>, -<span class="hljs-number">57434055</span>);    a = md5_ii(a, b, c, d, x[i+<span class="hljs-number">12</span>], <span class="hljs-number">6</span> ,  <span class="hljs-number">1700485571</span>);    d = md5_ii(d, a, b, c, x[i+ <span class="hljs-number">3</span>], <span class="hljs-number">10</span>, -<span class="hljs-number">1894986606</span>);    c = md5_ii(c, d, a, b, x[i+<span class="hljs-number">10</span>], <span class="hljs-number">15</span>, -<span class="hljs-number">1051523</span>);    b = md5_ii(b, c, d, a, x[i+ <span class="hljs-number">1</span>], <span class="hljs-number">21</span>, -<span class="hljs-number">2054922799</span>);    a = md5_ii(a, b, c, d, x[i+ <span class="hljs-number">8</span>], <span class="hljs-number">6</span> ,  <span class="hljs-number">1873313359</span>);    d = md5_ii(d, a, b, c, x[i+<span class="hljs-number">15</span>], <span class="hljs-number">10</span>, -<span class="hljs-number">30611744</span>);    c = md5_ii(c, d, a, b, x[i+ <span class="hljs-number">6</span>], <span class="hljs-number">15</span>, -<span class="hljs-number">1560198380</span>);    b = md5_ii(b, c, d, a, x[i+<span class="hljs-number">13</span>], <span class="hljs-number">21</span>,  <span class="hljs-number">1309151649</span>);    a = md5_ii(a, b, c, d, x[i+ <span class="hljs-number">4</span>], <span class="hljs-number">6</span> , -<span class="hljs-number">145523070</span>);    d = md5_ii(d, a, b, c, x[i+<span class="hljs-number">11</span>], <span class="hljs-number">10</span>, -<span class="hljs-number">1120210379</span>);    c = md5_ii(c, d, a, b, x[i+ <span class="hljs-number">2</span>], <span class="hljs-number">15</span>,  <span class="hljs-number">718787259</span>);    b = md5_ii(b, c, d, a, x[i+ <span class="hljs-number">9</span>], <span class="hljs-number">21</span>, -<span class="hljs-number">343485551</span>);    a = safe_add(a, olda);    b = safe_add(b, oldb);    c = safe_add(c, oldc);    d = safe_add(d, oldd);  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>(a, b, c, d);&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * These functions implement the four basic operations the algorithm uses.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">md5_cmn</span>(<span class="hljs-params">q, a, b, x, s, t</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">return</span> safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">md5_ff</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">return</span> md5_cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">md5_gg</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">return</span> md5_cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">md5_hh</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">return</span> md5_cmn(b ^ c ^ d, a, b, x, s, t);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">md5_ii</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">return</span> md5_cmn(c ^ (b | (~d)), a, b, x, s, t);&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span><span class="hljs-comment"> * to work around bugs in some JS interpreters.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe_add</span>(<span class="hljs-params">x, y</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">var</span> lsw = (x &amp; <span class="hljs-number">0xFFFF</span>) + (y &amp; <span class="hljs-number">0xFFFF</span>);  <span class="hljs-keyword">var</span> msw = (x &gt;&gt; <span class="hljs-number">16</span>) + (y &gt;&gt; <span class="hljs-number">16</span>) + (lsw &gt;&gt; <span class="hljs-number">16</span>);  <span class="hljs-keyword">return</span> (msw &lt;&lt; <span class="hljs-number">16</span>) | (lsw &amp; <span class="hljs-number">0xFFFF</span>);&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * Bitwise rotate a 32-bit number to the left.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bit_rol</span>(<span class="hljs-params">num, cnt</span>)</span><span class="hljs-function"></span>&#123;  <span class="hljs-keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="hljs-number">32</span> - cnt));&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSignature</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> hex_md5(<span class="hljs-built_in">Date</span>.parse(<span class="hljs-built_in">Date</span>()).toString())&#125;<span class="hljs-built_in">console</span>.log(getSignature())</code></pre><p>Python 调用代码：</p><pre><code class="hljs python"><span class="hljs-comment"># ==================================</span><span class="hljs-comment"># --*-- coding: utf-8 --*--</span><span class="hljs-comment"># @Time    : 2021-12-23</span><span class="hljs-comment"># @Author  : ITBOB.CN</span><span class="hljs-comment"># @FileName: challenge_7.py</span><span class="hljs-comment"># @Software: PyCharm</span><span class="hljs-comment"># ==================================</span><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> execjs<span class="hljs-keyword">import</span> requestschallenge_api = <span class="hljs-string">&quot;http://spider.wangluozhe.com/challenge/api/7&quot;</span>headers = &#123;    <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;Cookie 替换成你的&quot;</span>,    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;spider.wangluozhe.com&quot;</span>,    <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;http://spider.wangluozhe.com&quot;</span>,    <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;http://spider.wangluozhe.com/challenge/7&quot;</span>,    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&quot;</span>,    <span class="hljs-string">&quot;X-Requested-With&quot;</span>: <span class="hljs-string">&quot;XMLHttpRequest&quot;</span>&#125;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_signature</span>():</span>    now = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time.time())) + <span class="hljs-string">&quot;000&quot;</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;challenge_7.js&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:        wlz_js = execjs.<span class="hljs-built_in">compile</span>(f.read())    <span class="hljs-comment"># signature = wlz_js.call(&quot;getSignature&quot;)</span>    signature = wlz_js.call(<span class="hljs-string">&quot;hex_md5&quot;</span>, now)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;signature: &quot;</span>, signature)    <span class="hljs-keyword">return</span> signature<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>    result = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):        data = &#123;            <span class="hljs-string">&quot;page&quot;</span>: page,            <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">10</span>,            <span class="hljs-string">&quot;_signature&quot;</span>: get_signature()        &#125;        response = requests.post(url=challenge_api, headers=headers, data=data).json()        <span class="hljs-built_in">print</span>(response)        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> response[<span class="hljs-string">&quot;data&quot;</span>]:            result += d[<span class="hljs-string">&quot;value&quot;</span>]    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;结果为: &quot;</span>, result)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre><p>这里还有一点小细节，如果是 Python 生成时间戳传入 JS 的 <code>hex_md5</code> 方法的话，要保证时间戳的最后三位为0，不然校验通不过，通常的写法是 <code>str(int(time.time() * 1000))</code>，这里要改一下：<code>str(int(time.time())) + &quot;000&quot;</code>，不用 Python 的话，也可以在 JS 里写个方法直接返回 <code>hex_md5(Date.parse(Date()).toString())</code> 也行。</p><p><strong>还有一个问题就是如果你找的 MD5 代码不规范，准确来说是和题目使用的 MD5 代码不太一样的话，有可能本地要改的地方就不止这两处了，所以尽量找一个方法名都一样的JS，能省不少事儿。</strong></p><h3><span id="ri-zhi-duan-dian-cha-zhuang-diao-shi">日志断点 / 插桩调试</span></h3><p>除了 Hook 以外，我们还可以通过插桩调试的方式，将整个生成 <code>_signature</code> 的流程、涉及到的参数、生成的值，都通过日志的形式打印出来，逆向分析其逻辑。PS：插桩，即日志断点，鼠标右键选择 <code>Add logpoint</code> 即可添加一个日志断点，相当于 <code>console.log()</code>，此功能是 Chrome 73 版本新增的。</p><p><img src="https://cdn.itbob.cn/img/article/050/11.png" alt="11"></p><ul><li><strong>Add breakpoint</strong>：添加普通断点；</li><li><strong>Add conditional breakpoint</strong>：添加条件断点，满足条件才断下；</li><li><strong>Add logpoint</strong>：添加日志断点；</li><li><strong>Never pause here</strong>：永不在此处断下；</li><li><strong>Add script to ignore list</strong>：网站的部分 JS，比如 <code>jquery.min.js</code> 之类的库文件，我们单步调试的时候并不想进入到该文件中，那么可以将此类文件右键添加忽略掉。</li></ul><p>关键的日志断点有以下三处：</p><ul><li>第 605 行，<code>arguments</code> 为当前传入函数的参数值；</li><li>第 141 行，<code>___.join(vV_)</code> 为当前调用的方法名称，也会输出方法中的参数名称；</li><li>第 591 行，<code>__V(_, ___(u_), 0, 0, _U__).apply(void 0, y__(v___))</code> 为当前方法执行完毕的结果。</li></ul><p>肯定有人会疑惑，如何知道应该在这三个地方下日志断点呢？答案是只能自己单步、多步调试，找规律、仔细观察，就像交流群里的小小白大佬说的一样，屁股坐烂就行了。当然也不是只有这三个地方能输出对应的信息，有可能其他地方也可以，这就要看你自己调试了。</p><p><img src="https://cdn.itbob.cn/img/article/050/12.png" alt="12"></p><p><img src="https://cdn.itbob.cn/img/article/050/13.png" alt="13"></p><p><img src="https://cdn.itbob.cn/img/article/050/14.png" alt="14"></p><p>除了这三个地方的日志断点以外，建议还可以在第 606 行打个断点，这样每次执行一个方法就断下，本地就可以跟着同步调试，挨个对比传入的参数和得到的结果，不至于一下子输出的东西太多，不方便查找。</p><p>第一步，<code>gnature = window.byted_acrawler(window.sign())</code>：</p><p><img src="https://cdn.itbob.cn/img/article/050/15.png" alt="15"></p><p>下一步，sign 方法，取时间戳：</p><p><img src="https://cdn.itbob.cn/img/article/050/16.png" alt="16"></p><p>下一步，调用 <code>hex_md5()</code> 方法：</p><p><img src="https://cdn.itbob.cn/img/article/050/17.png" alt="17"></p><p>从这里就可以开始本地同步调试了，本地 MD5 下断点调试，可以看到得到的值不一样：</p><p><img src="https://cdn.itbob.cn/img/article/050/18.png" alt="18"></p><p>下一步，调用 <code>str2binl()</code> 方法，和本地得到的值是一样的：</p><p><img src="https://cdn.itbob.cn/img/article/050/19.png" alt="19"></p><p><img src="https://cdn.itbob.cn/img/article/050/20.png" alt="20"></p><p>下一步，调用 <code>core_md5()</code> 方法，得到的值和本地就不一样了，这里大致可以确定此方法内部与标准算法有差别了：</p><p><img src="https://cdn.itbob.cn/img/article/050/21.png" alt="21"></p><p><img src="https://cdn.itbob.cn/img/article/050/22.png" alt="22"></p><p>下一步，调用 <code>md5_ff()</code> 方法，得到的值是一样的：</p><p><img src="https://cdn.itbob.cn/img/article/050/23.png" alt="23"></p><p><img src="https://cdn.itbob.cn/img/article/050/24.png" alt="24"></p><p>以此类推，最终会找到两个不一样的地方，即 <code>md5_hh()</code> 两个默认参数被修改了。</p><p><code>-722521979</code> 被改成了 <code>-722521939</code>：</p><p><img src="https://cdn.itbob.cn/img/article/050/25.png" alt="25"></p><p><img src="https://cdn.itbob.cn/img/article/050/26.png" alt="26"></p><p><code>76029189</code> 被改成了 <code>76029185</code>：</p><p><img src="https://cdn.itbob.cn/img/article/050/27.png" alt="27"></p><p><img src="https://cdn.itbob.cn/img/article/050/28.png" alt="28"></p><p>最终提交结果，验证成功：</p><p><img src="https://cdn.itbob.cn/img/article/050/29.png" alt="29"></p>]]></content>
      
      
      <categories>
          
          <category> JS 逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS 逆向实战 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拉勾网 traceparent、__lg_stoken__、X-S-HEADER 等参数逆向分析</title>
      <link href="/article/049/"/>
      <url>/article/049/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/javascript_reverse.png" alt="javascript_reverse"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#zhua-bao-fen-xi">抓包分析</a></li><li><a href="#cookies-can-shu">Cookies 参数</a><ul><li><a href="#user-trace-token">user_trace_token</a></li><li><a href="#x-http-token">X_HTTP_TOKEN</a></li><li><a href="#lg-stoken">__lg_stoken__</a></li></ul></li><li><a href="#qing-qiu-tou-can-shu">请求头参数</a><ul><li><a href="#x-anit-forge-code-x-anit-forge-token">x-anit-forge-code / x-anit-forge-token</a></li><li><a href="#traceparent">traceparent</a></li><li><a href="#x-k-header-x-ss-req-header">X-K-HEADER / X-SS-REQ-HEADER</a></li><li><a href="#x-s-header">X-S-HEADER</a></li></ul></li><li><a href="#qing-qiu-fan-hui-shu-ju-jie-mi">请求/返回数据解密</a></li><li><a href="#ni-xiang-xiao-ji-qiao">逆向小技巧</a></li><li><a href="#wan-zheng-dai-ma">完整代码</a></li><li><a href="#chang-jian-wen-ti">常见问题</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><p>本次的目标是拉勾网职位的爬取，涉及到的一些关键参数如下：</p><ul><li>请求头参数：<code>traceparent</code>、<code>X-K-HEADER</code>、<code>X-S-HEADER</code>、<code>X-SS-REQ-HEADER</code>、<code>x-anit-forge-code</code>、<code>x-anit-forge-token</code></li><li>Cookie 值：<code>user_trace_token</code>、<code>X_HTTP_TOKEN</code>、<code>__lg_stoken__</code></li><li>POST 请求数据加密，返回的加密职位信息解密，AES 算法</li></ul><p>参数比较多，但事实上有些参数固定、或者直接不要，也是可以的，比如 Cookie 的三个值，请求头的 <code>X-K-HEADER</code>、<code>X-SS-REQ-HEADER</code> 等可以固定，<code>x-anit-forge-code</code> 和 <code>x-anit-forge-token</code> 可有可无。尽管如此，本文还是把每个参数的来源都分析了，可根据你实际情况灵活处理。</p><p>另外即便是把所有参数都补齐了，拉勾网对于单个 IP 还有频率限制，抓不了几次就要求登录，可自行搭配代理进行抓取，或者复制账号登录后的 cookies 到代码里，可以解除限制，如果是账号登录后访问，请求头多了两个参数，即 <code>x-anit-forge-code</code> 和 <code>x-anit-forge-token</code>，经过测试这两个参数其实不要也行。</p><h2><span id="zhua-bao-fen-xi">抓包分析</span></h2><p>搜索职位，点击翻页，就可以看到一条名为 positionAjax.json 的 Ajax 请求，不难判断这就是返回的职位信息。重点参数已在图中框出来了。</p><p>未登录，正常 IP，正常请求，Header 以及 Cookies：</p><p><img src="https://cdn.itbob.cn/img/article/049/01.png" alt="01"></p><p><img src="https://cdn.itbob.cn/img/article/049/02.png" alt="02"></p><p>异常 IP，登录账号后再请求，Header 以及 Cookies：</p><p><img src="https://cdn.itbob.cn/img/article/049/03.png" alt="03"></p><p><img src="https://cdn.itbob.cn/img/article/049/04.png" alt="04"></p><p>请求数据和返回数据都经过了加密：</p><p><img src="https://cdn.itbob.cn/img/article/049/05.png" alt="05"></p><h2><span id="cookies-can-shu">Cookies 参数</span></h2><p>先看 cookies 里的关键参数，主要是 <code>user_trace_token</code>、<code>X_HTTP_TOKEN</code> 和 <code>__lg_stoken__</code>。</p><h3><span id="user-trace-token">user_trace_token</span></h3><p>通过接口返回的，直接搜索就可以找到，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/049/06.png" alt="06"></p><p><img src="https://cdn.itbob.cn/img/article/049/07.png" alt="07"></p><p>请求参数，time 是时间戳，a 值随便，没有都可以，不影响，其他值都是定值，获取的关键代码如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_user_trace_token</span>() -&gt; <span class="hljs-built_in">str</span>:</span>    <span class="hljs-comment"># 获取 cookie 中的 user_trace_token</span>    json_url = <span class="hljs-string">&quot;https://a.脱敏处理.com/json&quot;</span>    headers = &#123;        <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;a.脱敏处理.com&quot;</span>,        <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com/&quot;</span>,        <span class="hljs-string">&quot;User-Agent&quot;</span>: UA    &#125;    params = &#123;        <span class="hljs-string">&quot;lt&quot;</span>: <span class="hljs-string">&quot;trackshow&quot;</span>,        <span class="hljs-string">&quot;t&quot;</span>: <span class="hljs-string">&quot;ad&quot;</span>,        <span class="hljs-string">&quot;v&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-string">&quot;dl&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com/&quot;</span>,        <span class="hljs-string">&quot;dr&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com&quot;</span>,        <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time.time() * <span class="hljs-number">1000</span>))    &#125;    response = requests.get(url=json_url, headers=headers, params=params)    user_trace_token = response.cookies.get_dict()[<span class="hljs-string">&quot;user_trace_token&quot;</span>]    <span class="hljs-keyword">return</span> user_trace_token</code></pre><h3><span id="x-http-token">X_HTTP_TOKEN</span></h3><p>直接搜索没有值，直接上 Hook 大法，小白朋友不清楚的话可以看以前的文章，都有详细教程，这里不再细说。</p><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-meta">    &#x27;use strict&#x27;</span>;    <span class="hljs-keyword">var</span> cookieTemp = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-built_in">Object</span>.defineProperty(<span class="hljs-built_in">document</span>, <span class="hljs-string">&#x27;cookie&#x27;</span>, &#123;        <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hook捕获到cookie设置-&gt;&#x27;</span>, val);            <span class="hljs-keyword">if</span> (val.indexOf(<span class="hljs-string">&#x27;X_HTTP_TOKEN&#x27;</span>) != -<span class="hljs-number">1</span>) &#123;                <span class="hljs-keyword">debugger</span>;            &#125;            cookieTemp = val;            <span class="hljs-keyword">return</span> val;        &#125;,        <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-keyword">return</span> cookieTemp;        &#125;    &#125;);&#125;)();</code></pre><p><img src="https://cdn.itbob.cn/img/article/049/08.png" alt="08"></p><p>往上跟栈调试，是一个小小的 OB 混淆，<code>_0x32e0d2</code> 就是最后的 <code>X_HTTP_TOKEN</code> 值了，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/049/09.png" alt="09"></p><p>直接梭哈，才300多行，不必扣了，全部 copy 下来，本地运行，发现会报错 document 未定义，定位到代码位置，下断点调试一下，发现是正则匹配 cookie 中的 <code>user_trace_token</code> 的值，那么我们直接定义一下即可：<code>var document = &#123;&quot;cookie&quot;: cookie&#125;</code>，cookie 值把 <code>user_trace_token</code> 传过来即可。</p><p><img src="https://cdn.itbob.cn/img/article/049/10.png" alt="10"></p><p>补全 document 后，再次运行，又会报错 window 未定义，再次定位到源码，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/049/11.png" alt="11"></p><p>分析一下，取了 window XMLHttpRequest 对象，向 wafcheck.json 这个接口发送了一个 Ajax GET 请求，然后取了 Response Header 的 Date 值赋值给 <code>_0x309ac8</code>，注意这个 Date 值比正常时间晚了8个小时，然而取 Date 值并没有什么用，因为后面又 new 了一个新 Date 标准时间，赋值给了 <code>_0x150c4d</code>，<code>new Date(_0x309ac8[_0x3551('0x2d')](/-/g, '/'))</code> 语句虽然用到了前面的旧 Date，然而实际上是 <code>replace()</code> 替换方法，与旧的 Date 并没有什么关系，然后调用 <code>Date.parse()</code> 方法将新 Date 转换成时间戳赋值给 <code>_0x4e6d5d</code>，所以不需要这么复杂，直接本地把 <code>_0x89ea429</code> 方法修改一下就行了：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 原方法</span><span class="hljs-comment">// function _0x89ea42() &#123;</span><span class="hljs-comment">//     var _0x372cc0 = null;</span><span class="hljs-comment">//     if (window[_0x3551(&#x27;0x26&#x27;)]) &#123;</span><span class="hljs-comment">//         _0x372cc0 = new window[(_0x3551(&#x27;0x26&#x27;))]();</span><span class="hljs-comment">//     &#125; else &#123;</span><span class="hljs-comment">//         _0x372cc0 = new ActiveObject(_0x3551(&#x27;0x27&#x27;));</span><span class="hljs-comment">//     &#125;</span><span class="hljs-comment">//     _0x372cc0[_0x3551(&#x27;0x28&#x27;)](_0x3551(&#x27;0x29&#x27;), _0x3551(&#x27;0x2a&#x27;), ![]);</span><span class="hljs-comment">//     _0x372cc0[_0x3551(&#x27;0x2b&#x27;)](null);</span><span class="hljs-comment">//     var _0x309ac8 = _0x372cc0[_0x3551(&#x27;0x2c&#x27;)](&#x27;Date&#x27;);</span><span class="hljs-comment">//     var _0x150c4d = new Date(_0x309ac8[_0x3551(&#x27;0x2d&#x27;)](/-/g, &#x27;/&#x27;));</span><span class="hljs-comment">//     var _0x4e6d5d = Date[_0x3551(&#x27;0x2e&#x27;)](_0x150c4d);</span><span class="hljs-comment">//     return _0x4e6d5d / 0x3e8;</span><span class="hljs-comment">// &#125;</span><span class="hljs-comment">// 本地改写</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_0x89ea42</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> _0x150c4d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();    <span class="hljs-keyword">var</span> _0x4e6d5d = <span class="hljs-built_in">Date</span>.parse(_0x150c4d);    <span class="hljs-keyword">return</span> _0x4e6d5d / <span class="hljs-number">0x3e8</span>;&#125;</code></pre><p>本地测试 OK：</p><p><img src="https://cdn.itbob.cn/img/article/049/12.png" alt="12"></p><h3><span id="lg-stoken">__lg_stoken__</span></h3><p><code>__lg_stoken__</code> 这个参数是在点击搜索后才开始生成的，直接搜索同样没值，Hook 一下，往上跟栈，很容易找到生成位置：</p><p><img src="https://cdn.itbob.cn/img/article/049/13.png" alt="13"></p><p><img src="https://cdn.itbob.cn/img/article/049/14.png" alt="14"></p><p>可以看到 d 就是 <code>__lg_stoken__</code> 的值，<code>d = (new g()).a()</code>、<code>g = window.gt</code>，<code>window.gt</code> 实际上是调用了 <code>_0x11db59</code></p><p>跟进混淆的 JS 看一下，就会发现末尾的这段代码是关键，这里用到了 prototype 原型对象，我们直接 <code>window.gt.prototype.a()</code> 或者 <code>(new window.gt).a()</code> 就能获取到 <code>__lg_stoken__</code>，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/049/15.png" alt="15"></p><p>到这里也许你想下断点去调试一下，看看能不能扣个逻辑出来，但是你会发现刷新之后断不下，因为这个混淆 JS 文件是一直在变化的，之前的断点就不管用了，然后你就可能会想到直接替换掉这个 JS，让文件名固定下来，就可以断点调试了，如果你这样操作的话，重新刷新会发现一直在加载中，打开控制台会发现报错了，造成这样的原因就在于这个混淆 JS 不仅文件名会改变，他的内容也会改变，当然，内容也不仅仅是改变了变量名那么简单，有些值也是动态变化的，比如：</p><p><img src="https://cdn.itbob.cn/img/article/049/16.png" alt="16"></p><p>这里我们先不管那么多，直接把所有的混淆代码 copy 下来，先在本地调试一下，看看能不能跑通，调试过程中，先后会提示 <code>window is not defined</code>、<code>Cannot read properties of undefined (reading 'hostname')</code>，定位到代码，有个取 <code>window.location.hostname</code> 的操作，本地定义一下就行了：</p><p><img src="https://cdn.itbob.cn/img/article/049/17.png" alt="17"></p><p>再次调试又会报错 <code> Cannot read properties of undefined (reading 'substr')</code>，<code>substr()</code> 方法可在字符串中抽取从指定下标开始的、指定数目的字符，是字符串对象 stringObject 具有的方法，我们定位到代码，发现是 <code>window.location.search</code> 对象调用了 <code>substr()</code> 方法，所以同样的，我们本地也要补齐。</p><p><img src="https://cdn.itbob.cn/img/article/049/18.png" alt="18"></p><p>本地补齐参数后，运行结果与网页一致：</p><p><img src="https://cdn.itbob.cn/img/article/049/19.png" alt="19"></p><p>执行结果没问题了，那么还有一个问题，<code>window.location.search</code> 的值就是待加密参数了，是咋来的呢？我们直接搜索，就可以看到是一个接口302跳转的地址，用的时候直接取就行了，这个接口是你搜索内容组成的，搜索不同参数，这个跳转地址也是不一样的：</p><p><img src="https://cdn.itbob.cn/img/article/049/20.png" alt="20"></p><p>调试成功后，我们随便换一个搜索关键词，将得到的302跳转地址拿到这个 JS 中，加密一下，发现会报错，这说明混淆 JS 传入的参数和 JS 内容应该是相对应的，这里的做法是直接请求拿到这个 JS 文件内容，然后把要补的 window 和获取 <code>__lg_stoken__</code> 的方法加进去，然后直接执行就行了。</p><p>获取 <code>__lg_stoken__</code>  的关键代码如下（<code>original_data</code> 为原始搜索数据）：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_lg_stoken</span>(<span class="hljs-params">original_data: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-built_in">str</span>:</span>    <span class="hljs-comment"># 获取 cookie 中的 __lg_stoken__</span>    token_url = <span class="hljs-string">&quot;https://www.脱敏处理.com/wn/jobs&quot;</span>    token_headers = &#123;        <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;www.脱敏处理.com&quot;</span>,        <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com/&quot;</span>,        <span class="hljs-string">&quot;User-Agent&quot;</span>: UA    &#125;    params = &#123;        <span class="hljs-string">&quot;kd&quot;</span>: original_data[<span class="hljs-string">&quot;kd&quot;</span>],        <span class="hljs-string">&quot;city&quot;</span>: original_data[<span class="hljs-string">&quot;city&quot;</span>]    &#125;    token_response = requests.get(url=token_url, params=params, headers=token_headers, cookies=global_cookies, allow_redirects=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">if</span> token_response.status_code != <span class="hljs-number">302</span>:        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;获取跳转链接异常！检查 global_cookies 是否已包含 __lg_stoken__！&quot;</span>)    <span class="hljs-comment"># 获取 302 跳转的地址</span>    security_check_url = token_response.headers[<span class="hljs-string">&quot;Location&quot;</span>]    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;login&quot;</span> <span class="hljs-keyword">in</span> security_check_url:        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;IP 被关进小黑屋啦！需要登录！请补全登录后的 Cookie，或者自行添加代理！&quot;</span>)    parse_result = parse.urlparse(security_check_url)    <span class="hljs-comment"># url 的参数为待加密对象</span>    security_check_params = parse_result.query    <span class="hljs-comment"># 取 name 参数，为混淆 js 的文件名</span>    security_check_js_name = parse.parse_qs(security_check_params)[<span class="hljs-string">&quot;name&quot;</span>][<span class="hljs-number">0</span>]    <span class="hljs-comment"># 发送请求，获取混淆的 js</span>    js_url = <span class="hljs-string">&quot;https://www.脱敏处理.com/common-sec/dist/&quot;</span> + security_check_js_name + <span class="hljs-string">&quot;.js&quot;</span>    js_headers = &#123;        <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;www.脱敏处理.com&quot;</span>,        <span class="hljs-string">&quot;Referer&quot;</span>: security_check_url,        <span class="hljs-string">&quot;User-Agent&quot;</span>: UA    &#125;    js_response = requests.get(url=js_url, headers=js_headers, cookies=global_cookies).text    <span class="hljs-comment"># 补全 js，添加 window 参数和一个方法，用于获取 __lg_stoken__ 的值</span>    lg_js = <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    window = &#123;</span><span class="hljs-string">        &quot;location&quot;: &#123;</span><span class="hljs-string">            &quot;hostname&quot;: &quot;www.脱敏处理.com&quot;,</span><span class="hljs-string">            &quot;search&quot;: &#x27;?%s&#x27;</span><span class="hljs-string">        &#125;</span><span class="hljs-string">    &#125;</span><span class="hljs-string">    function getLgStoken()&#123;</span><span class="hljs-string">        return window.gt.prototype.a()</span><span class="hljs-string">    &#125;</span><span class="hljs-string">    &quot;&quot;&quot;</span> % security_check_params + js_response    lg_stoken = execjs.<span class="hljs-built_in">compile</span>(lg_js).call(<span class="hljs-string">&quot;getLgStoken&quot;</span>)    <span class="hljs-keyword">return</span> lg_stoken</code></pre><h2><span id="qing-qiu-tou-can-shu">请求头参数</span></h2><p>请求头参数比较多，有 <code>traceparent</code>、<code>X-K-HEADER</code>、<code>X-S-HEADER</code>、<code>X-SS-REQ-HEADER</code>、<code>x-anit-forge-code</code>、<code>x-anit-forge-token</code>，其中最后两个 <code>x-anit</code> 开头的参数是登录后才有的，实际测试中，即便是登录了，不加这两个好像也行。不过还是分析一下吧。</p><h3><span id="x-anit-forge-code-x-anit-forge-token">x-anit-forge-code / x-anit-forge-token</span></h3><p>这两个值是首次点击搜索生成的，第一次访问搜索接口，返回的 HTML 里面夹杂了一个 JSON 文件，里面的 <code>submitCode</code> 和 <code>submitToken</code> 就是 <code>x-anit-forge-code</code> 和 <code>x-anit-forge-token</code> 的值，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/049/21.png" alt="21"></p><p>请求这个接口要注意带上登录后的 cookies，有用的只有四个值，正确的 cookies 类似于：</p><pre><code class="hljs python">cookies = &#123;    <span class="hljs-string">&quot;login&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,    <span class="hljs-string">&quot;gate_login_token&quot;</span>: <span class="hljs-string">&quot;54a31e93aa904a6bb9731bxxxxxxxxxxxxxx&quot;</span>,    <span class="hljs-string">&quot;_putrc&quot;</span>: <span class="hljs-string">&quot;9550E53D830BE8xxxxxxxxxxxxxx&quot;</span>,    <span class="hljs-string">&quot;JSESSIONID&quot;</span>: <span class="hljs-string">&quot;ABAAAECABIEACCA79BFxxxxxxxxxxxxxx&quot;</span>&#125;</code></pre><p>注意，JSESSIONID 即便不登录也会有，但是登录时应该会携带这个值，进行一个激活操作，如果你请求获取到的 submitCode、submitToken 为空，那么就有可能 JSESSIONID 是无效的，以上所有值都必须登录后复制过来！</p><p>获取 <code> x-anit-forge-code</code>、<code>x-anit-forge-token</code>  的关键代码如下（<code>original_data</code> 为原始搜索数据）：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_x_anit</span>(<span class="hljs-params">original_data: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-literal">None</span>:</span>    <span class="hljs-comment"># 更新 x-anit-forge-code 和 x-anit-forge-token</span>    url = <span class="hljs-string">&quot;https://www.脱敏处理.com/wn/jobs&quot;</span>    headers = &#123;        <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;www.脱敏处理.com&quot;</span>,        <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com/&quot;</span>,        <span class="hljs-string">&quot;User-Agent&quot;</span>: UA    &#125;    params = &#123;        <span class="hljs-string">&quot;kd&quot;</span>: original_data[<span class="hljs-string">&quot;kd&quot;</span>],        <span class="hljs-string">&quot;city&quot;</span>: original_data[<span class="hljs-string">&quot;city&quot;</span>]    &#125;    response = requests.get(url=url, params=params, headers=headers, cookies=global_cookies)    tree = etree.HTML(response.text)    next_data_json = json.loads(tree.xpath(<span class="hljs-string">&quot;//script[@id=&#x27;__NEXT_DATA__&#x27;]/text()&quot;</span>)[<span class="hljs-number">0</span>])    submit_code = next_data_json[<span class="hljs-string">&quot;props&quot;</span>][<span class="hljs-string">&quot;tokenData&quot;</span>][<span class="hljs-string">&quot;submitCode&quot;</span>]    submit_token = next_data_json[<span class="hljs-string">&quot;props&quot;</span>][<span class="hljs-string">&quot;tokenData&quot;</span>][<span class="hljs-string">&quot;submitToken&quot;</span>]    <span class="hljs-comment"># 注意 JSESSIONID 必须是登录验证后的！</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> submit_code <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> submit_token:        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;submitCode &amp; submitToken 为空，请检查 JSESSIONID 是否正确！&quot;</span>)    <span class="hljs-keyword">global</span> x_anit    x_anit[<span class="hljs-string">&quot;x-anit-forge-code&quot;</span>] = submit_code    x_anit[<span class="hljs-string">&quot;x-anit-forge-token&quot;</span>] = submit_token</code></pre><h3><span id="traceparent">traceparent</span></h3><p>同样的 Hook 大法，跟栈：</p><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> org = <span class="hljs-built_in">window</span>.XMLHttpRequest.prototype.setRequestHeader;    <span class="hljs-built_in">window</span>.XMLHttpRequest.prototype.setRequestHeader = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hook 捕获到 %s 设置 -&gt; %s&#x27;</span>, key, value);        <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;traceparent&#x27;</span>) &#123;            <span class="hljs-keyword">debugger</span>;        &#125;        <span class="hljs-keyword">return</span> org.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>);    &#125;;&#125;)();</code></pre><p><img src="https://cdn.itbob.cn/img/article/049/22.png" alt="22"></p><p><img src="https://cdn.itbob.cn/img/article/049/23.png" alt="23"></p><p>观察上面的代码，三元表达式，<code>t.sampled</code> 为 <code>true</code>，所以 <code>e</code> 值为 <code>01</code>，<code>n</code> 值为 <code>t.id</code>，重点在于 <code>t.traceId</code> 和 <code>t.id</code> 了，跟栈发现很难调，直接搜索关键字，可找到生成的位置：</p><p><img src="https://cdn.itbob.cn/img/article/049/24.png" alt="24"></p><p><img src="https://cdn.itbob.cn/img/article/049/25.png" alt="25"></p><p>把 <code>E()</code> 方法扣出来就行了，改写一下即可：</p><pre><code class="hljs javascript">getRandomValues = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;get-random-values&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">E</span>(<span class="hljs-params">t</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> b = [], w = <span class="hljs-number">0</span>; w &lt; <span class="hljs-number">256</span>; ++w)            b[w] = (w + <span class="hljs-number">256</span>).toString(<span class="hljs-number">16</span>).substr(<span class="hljs-number">1</span>);    <span class="hljs-keyword">var</span> T = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(<span class="hljs-number">16</span>);    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = [], n = <span class="hljs-number">0</span>; n &lt; t.length; n++)            e.push(b[t[n]]);        <span class="hljs-keyword">return</span> e.join(<span class="hljs-string">&quot;&quot;</span>)    &#125;(getRandomValues(T)).substr(<span class="hljs-number">0</span>, t)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTraceparent</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;00-&quot;</span> + E() + <span class="hljs-string">&quot;-&quot;</span> + E(<span class="hljs-number">16</span>) + <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-string">&quot;01&quot;</span>&#125;<span class="hljs-comment">// 测试输出</span><span class="hljs-comment">// console.log(getTraceparent())</span></code></pre><h3><span id="x-k-header-x-ss-req-header">X-K-HEADER / X-SS-REQ-HEADER</span></h3><p><code>X-K-HEADER</code> 和 <code>X-SS-REQ-HEADER</code> 数据是一样的，只不过后者是键值对形式，先直接全局搜索关键字，发现都是从本地拿这两个值，清除 cookie 就为空了，那么直接搜索值，发现是 agreement 这个接口返回的，<code>secretKeyValue</code> 值就是我们要的，有可能浏览器抓包直接搜索的话搜索不到，使用抓包工具，比如 Fiddler 就能搜到了，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/049/26.png" alt="26"></p><p>这个接口是 post 请求，请求带了一个 json 数据，<code>secretKeyDecode</code>，直接搜索关键字，就一个值，定位跟栈：</p><p><img src="https://cdn.itbob.cn/img/article/049/27.png" alt="27"></p><p><code>zt()</code> 是从本地缓存中取，<code>At()</code> 是重新生成：</p><p><img src="https://cdn.itbob.cn/img/article/049/28.png" alt="28"></p><p>这里就非常明显了，t 是32位随机字符串，赋值为 <code>aesKey</code>，后面紧接着一个 RSA 加密了 <code>aesKey</code>，赋值为 <code>rsaEncryptData</code>，而 <code>rsaEncryptData</code> 就是前面 agreement 接口请求的 <code>secretKeyValue</code> 值。</p><p>这里先说一下，最终搜索职位请求的 data 和返回数据都是 AES 加密解密，会用到这个 <code>aesKey</code>，请求头的另一个参数 <code>X-S-HEADER</code> 也会用到，如果这个 key 没有经过 RSA 加密并通过 agreement 接口验证的话，是无效的，可以理解为 agreement 接口既是为了获取 <code>X-K-HEADER</code> 和 <code>X-SS-REQ-HEADER</code>，也是为了激活这个 <code>aesKey</code>。</p><p>这部分的 JS 代码和 Python 代码大致如下：</p><pre><code class="hljs javascript">JSEncrypt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jsencrypt&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAesKeyAndRsaEncryptData</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> aesKey = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">t</span>) </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>, r = <span class="hljs-string">&quot;&quot;</span>, n = <span class="hljs-number">0</span>; n &lt; t; n++) &#123;            <span class="hljs-keyword">var</span> i = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * e.length);            r += e.substring(i, i + <span class="hljs-number">1</span>)        &#125;        <span class="hljs-keyword">return</span> r    &#125;(<span class="hljs-number">32</span>);    <span class="hljs-keyword">var</span> e = <span class="hljs-keyword">new</span> JSEncrypt();    e.setPublicKey(<span class="hljs-string">&quot;-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnbJqzIXk6qGotX5nD521Vk/24APi2qx6C+2allfix8iAfUGqx0MK3GufsQcAt/o7NO8W+qw4HPE+RBR6m7+3JVlKAF5LwYkiUJN1dh4sTj03XQ0jsnd3BYVqL/gi8iC4YXJ3aU5VUsB6skROancZJAeq95p7ehXXAJfCbLwcK+yFFeRKLvhrjZOMDvh1TsMB4exfg+h2kNUI94zu8MK3UA7v1ANjfgopaE+cpvoulg446oKOkmigmc35lv8hh34upbMmehUqB51kqk9J7p8VMI3jTDBcMC21xq5XF7oM8gmqjNsYxrT9EVK7cezYPq7trqLX1fyWgtBtJZG7WMftKwIDAQAB-----END PUBLIC KEY-----&quot;</span>);    <span class="hljs-keyword">var</span> rsaEncryptData = e.encrypt(aesKey);    <span class="hljs-keyword">return</span> &#123;        <span class="hljs-string">&quot;aesKey&quot;</span>: aesKey,        <span class="hljs-string">&quot;rsaEncryptData&quot;</span>: rsaEncryptData    &#125;&#125;<span class="hljs-comment">// 测试输出</span><span class="hljs-comment">// console.log(getAesKeyAndRsaEncryptData())</span></code></pre><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_aes_key</span>() -&gt; <span class="hljs-literal">None</span>:</span>    <span class="hljs-comment"># 通过JS获取 AES Key，并通过接口激活，接口激活后会返回一个 secretKeyValue，后续请求头会用到</span>    <span class="hljs-keyword">global</span> aes_key, secret_key_value    url = <span class="hljs-string">&quot;https://gate.脱敏处理.com/system/agreement&quot;</span>    headers = &#123;        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,        <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;gate.脱敏处理.com&quot;</span>,        <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com&quot;</span>,        <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com/&quot;</span>,        <span class="hljs-string">&quot;User-Agent&quot;</span>: UA    &#125;    encrypt_data = lagou_js.call(<span class="hljs-string">&quot;getAesKeyAndRsaEncryptData&quot;</span>)    aes_key = encrypt_data[<span class="hljs-string">&quot;aesKey&quot;</span>]    rsa_encrypt_data = encrypt_data[<span class="hljs-string">&quot;rsaEncryptData&quot;</span>]    data = &#123;<span class="hljs-string">&quot;secretKeyDecode&quot;</span>: rsa_encrypt_data&#125;    response = requests.post(url=url, headers=headers, json=data).json()    secret_key_value = response[<span class="hljs-string">&quot;content&quot;</span>][<span class="hljs-string">&quot;secretKeyValue&quot;</span>]</code></pre><h3><span id="x-s-header">X-S-HEADER</span></h3><p><code>X-S-HEADER</code> 你每次翻页都会改变，直接搜索关键字可定位：</p><p><img src="https://cdn.itbob.cn/img/article/049/29.png" alt="29"></p><p><img src="https://cdn.itbob.cn/img/article/049/30.png" alt="30"></p><p>中间有一个 SHA256 加密，最后返回的 <code>Rt(JSON.stringify(&#123;originHeader: JSON.stringify(e), code: t&#125;))</code> 就是 <code>X-S-HEADER</code> 的值了，<code>Rt()</code> 是一个 AES 加密，比较关键的，<code>Vt(r)</code> 是一个 URL，比如你搜索职位就是 positionAjax.json，搜索公司就是 companyAjax.json，可根据实际情况定制，然后 <code>Lt(t)</code> 就是搜索信息，字符串形式，包含了城市、页码、关键词等。</p><p>获取 <code>X-S-HEADER</code> 的 JS 代码大致如下：</p><pre><code class="hljs javascript">CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)jt = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">aesKey, originalData, u</span>) </span>&#123;    <span class="hljs-keyword">var</span> e = &#123;<span class="hljs-attr">deviceType</span>: <span class="hljs-number">1</span>&#125;      , t = <span class="hljs-string">&quot;&quot;</span>.concat(<span class="hljs-built_in">JSON</span>.stringify(e)).concat(u).concat(<span class="hljs-built_in">JSON</span>.stringify(originalData))      , t = (t = t, <span class="hljs-literal">null</span> === (t = CryptoJS.SHA256(t).toString()) || <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> === t ? <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> : t.toUpperCase());    <span class="hljs-keyword">return</span> Rt(<span class="hljs-built_in">JSON</span>.stringify(&#123;        <span class="hljs-attr">originHeader</span>: <span class="hljs-built_in">JSON</span>.stringify(e),        <span class="hljs-attr">code</span>: t    &#125;), aesKey)&#125;Rt = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">t, aesKey</span>) </span>&#123;    <span class="hljs-keyword">var</span> Ot = CryptoJS.enc.Utf8.parse(<span class="hljs-string">&quot;c558Gq0YQK2QUlMc&quot;</span>),        Dt = CryptoJS.enc.Utf8.parse(aesKey),        t = CryptoJS.enc.Utf8.parse(t);    t = CryptoJS.AES.encrypt(t, Dt, &#123;        <span class="hljs-attr">iv</span>: Ot,        <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,        <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7    &#125;);    <span class="hljs-keyword">return</span> t.toString()&#125;;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getXSHeader</span>(<span class="hljs-params">aesKey, originalData, u</span>)</span>&#123;    <span class="hljs-keyword">return</span> jt(aesKey, originalData, u)&#125;<span class="hljs-comment">// 测试样例</span><span class="hljs-comment">// var url = &quot;https://www.脱敏处理.com/jobs/v2/positionAjax.json&quot;</span><span class="hljs-comment">// var aesKey = &quot;dgHY1qVeo/Z0yDaF5WV/EEXxYiwbr5Jt&quot;</span><span class="hljs-comment">// var originalData = &#123;&quot;first&quot;: &quot;true&quot;, &quot;needAddtionalResult&quot;: &quot;false&quot;, &quot;city&quot;: &quot;全国&quot;, &quot;pn&quot;: &quot;2&quot;, &quot;kd&quot;: &quot;Java&quot;&#125;</span><span class="hljs-comment">// console.log(getXSHeader(aesKey, originalData, url))</span></code></pre><h2><span id="qing-qiu-fan-hui-shu-ju-jie-mi">请求/返回数据解密</span></h2><p>前面抓包我们已经发现 positionAjax.json 是 POST 请求，Form Data 中的数据是加密的，返回的 data 也是加密的，我们分析请求头参数的时候，就涉及到 AES 加密解密，所以我们直接搜索 <code>AES.encrypt</code>、<code>AES.decrypt</code>，下断点调试：</p><p><img src="https://cdn.itbob.cn/img/article/049/31.png" alt="31"></p><p><img src="https://cdn.itbob.cn/img/article/049/32.png" alt="32"></p><p>非常明显了，这部分的 JS 代码大致如下：</p><pre><code class="hljs javascript">CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequestData</span>(<span class="hljs-params">aesKey, originalData</span>)</span>&#123;    <span class="hljs-keyword">return</span> Rt(<span class="hljs-built_in">JSON</span>.stringify(originalData), aesKey)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getResponseData</span>(<span class="hljs-params">encryptData, aesKey</span>)</span>&#123;    <span class="hljs-keyword">return</span> It(encryptData, aesKey)&#125;Rt = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">t, aesKey</span>) </span>&#123;    <span class="hljs-keyword">var</span> Ot = CryptoJS.enc.Utf8.parse(<span class="hljs-string">&quot;c558Gq0YQK2QUlMc&quot;</span>),        Dt = CryptoJS.enc.Utf8.parse(aesKey),        t = CryptoJS.enc.Utf8.parse(t);    t = CryptoJS.AES.encrypt(t, Dt, &#123;        <span class="hljs-attr">iv</span>: Ot,        <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,        <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7    &#125;);    <span class="hljs-keyword">return</span> t.toString()&#125;;It = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t, aesKey</span>) </span>&#123;    <span class="hljs-keyword">var</span> Ot = CryptoJS.enc.Utf8.parse(<span class="hljs-string">&quot;c558Gq0YQK2QUlMc&quot;</span>),    Dt = CryptoJS.enc.Utf8.parse(aesKey);    t = CryptoJS.AES.decrypt(t, Dt, &#123;        <span class="hljs-attr">iv</span>: Ot,        <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,        <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7    &#125;).toString(CryptoJS.enc.Utf8);    <span class="hljs-keyword">try</span> &#123;        t = <span class="hljs-built_in">JSON</span>.parse(t)    &#125; <span class="hljs-keyword">catch</span> (t) &#123;&#125;    <span class="hljs-keyword">return</span> t&#125;<span class="hljs-comment">// 测试样例，注意，encryptedData 数据太多，省略了，直接运行解密是会报错的</span><span class="hljs-comment">// var aesKey = &quot;dgHY1qVeo/Z0yDaF5WV/EEXxYiwbr5Jt&quot;</span><span class="hljs-comment">// var encryptedData = &quot;r4MqbduYxu3Z9sFL75xDhelMTCYPHLluKaurYgzEXlEQ1Rg......&quot;</span><span class="hljs-comment">// var originalData = &#123;&quot;first&quot;: &quot;true&quot;, &quot;needAddtionalResult&quot;: &quot;false&quot;, &quot;city&quot;: &quot;全国&quot;, &quot;pn&quot;: &quot;2&quot;, &quot;kd&quot;: &quot;Java&quot;&#125;</span><span class="hljs-comment">// console.log(getRequestData(aesKey, originalData))</span><span class="hljs-comment">// console.log(getResponseData(encryptedData, aesKey))</span></code></pre><p>大致的 Python 代码如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_header_params</span>(<span class="hljs-params">original_data: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-built_in">dict</span>:</span>    <span class="hljs-comment"># 后续请求数据所需的请求头参数</span>    <span class="hljs-comment"># 职位搜索 URL，如果是搜索公司，那就是 https://www.脱敏处理.com/jobs/companyAjax.json，根据实际情况更改</span>    u = <span class="hljs-string">&quot;https://www.脱敏处理.com/jobs/v2/positionAjax.json&quot;</span>    <span class="hljs-keyword">return</span> &#123;        <span class="hljs-string">&quot;traceparent&quot;</span>: lagou_js.call(<span class="hljs-string">&quot;getTraceparent&quot;</span>),        <span class="hljs-string">&quot;X-K-HEADER&quot;</span>: secret_key_value,        <span class="hljs-string">&quot;X-S-HEADER&quot;</span>: lagou_js.call(<span class="hljs-string">&quot;getXSHeader&quot;</span>, aes_key, original_data, u),        <span class="hljs-string">&quot;X-SS-REQ-HEADER&quot;</span>: json.dumps(&#123;<span class="hljs-string">&quot;secret&quot;</span>: secret_key_value&#125;)    &#125;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_encrypted_data</span>(<span class="hljs-params">original_data: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-built_in">str</span>:</span>    <span class="hljs-comment"># AES 加密原始数据</span>    encrypted_data = lagou_js.call(<span class="hljs-string">&quot;getRequestData&quot;</span>, aes_key, original_data)    <span class="hljs-keyword">return</span> encrypted_data<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">original_data: <span class="hljs-built_in">dict</span>, encrypted_data: <span class="hljs-built_in">str</span>, header_params: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-built_in">dict</span>:</span>    <span class="hljs-comment"># 携带加密后的请求数据和完整请求头，拿到密文，AES 解密得到明文职位信息</span>    url = <span class="hljs-string">&quot;https://www.脱敏处理.com/jobs/v2/positionAjax.json&quot;</span>    referer = parse.urljoin(<span class="hljs-string">&quot;https://www.脱敏处理.com/wn/jobs?&quot;</span>, parse.urlencode(original_data))    headers = &#123;        <span class="hljs-comment"># &quot;content-type&quot;: &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;,</span>        <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;www.脱敏处理.com&quot;</span>,        <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com&quot;</span>,        <span class="hljs-string">&quot;Referer&quot;</span>: referer,        <span class="hljs-string">&quot;traceparent&quot;</span>: header_params[<span class="hljs-string">&quot;traceparent&quot;</span>],        <span class="hljs-string">&quot;User-Agent&quot;</span>: UA,        <span class="hljs-string">&quot;X-K-HEADER&quot;</span>: header_params[<span class="hljs-string">&quot;X-K-HEADER&quot;</span>],        <span class="hljs-string">&quot;X-S-HEADER&quot;</span>: header_params[<span class="hljs-string">&quot;X-S-HEADER&quot;</span>],        <span class="hljs-string">&quot;X-SS-REQ-HEADER&quot;</span>: header_params[<span class="hljs-string">&quot;X-SS-REQ-HEADER&quot;</span>],    &#125;    <span class="hljs-comment"># 添加 x-anit-forge-code 和 x-anit-forge-token</span>    headers.update(x_anit)    data = &#123;<span class="hljs-string">&quot;data&quot;</span>: encrypted_data&#125;    response = requests.post(url=url, headers=headers, cookies=global_cookies, data=data).json()    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;status&quot;</span> <span class="hljs-keyword">in</span> response:        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> response[<span class="hljs-string">&quot;status&quot;</span>] <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;操作太频繁&quot;</span> <span class="hljs-keyword">in</span> response[<span class="hljs-string">&quot;msg&quot;</span>]:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;获取数据失败！msg：%s！可以尝试补全登录后的 Cookies，或者添加代理！&quot;</span> % response[<span class="hljs-string">&quot;msg&quot;</span>])        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;获取数据异常！请检查数据是否完整！&quot;</span>)    <span class="hljs-keyword">else</span>:        response_data = response[<span class="hljs-string">&quot;data&quot;</span>]        decrypted_data = lagou_js.call(<span class="hljs-string">&quot;getResponseData&quot;</span>, response_data, aes_key)        <span class="hljs-keyword">return</span> decrypted_data</code></pre><p>最终整合所有代码，成功拿到数据：</p><p><img src="https://cdn.itbob.cn/img/article/049/33.png" alt="33"></p><h2><span id="ni-xiang-xiao-ji-qiao">逆向小技巧</span></h2><p>浏览器开发者工具 Application - Storage 选项，可以一键清除所有 Cookies，也可以自定义存储配额：</p><p><img src="https://cdn.itbob.cn/img/article/049/34.png" alt="34"></p><p>Storage - Cookies 可以查看每个站点的所有 Cookies，HttpOnly 打勾的表示是服务器返回的，选中一条 Cookie，右键可以直接定位到哪个请求带了这个 Cookie，也可以直接编辑值，还可以删除单个 Cookie，当你登录了账号，但又需要清除某个 Cookie，且不想重新登录时，这个功能或许有用。</p><p><img src="https://cdn.itbob.cn/img/article/049/35.png" alt="35"></p><h2><span id="wan-zheng-dai-ma">完整代码</span></h2><p>文中给出了部分关键代码，不能直接运行，部分细节可能没提及到，完整代码已放 GitHub，均有详细注释，欢迎 Star。所有内容仅供学习交流，严禁用于商业用途、非法用途，否则由此产生的一切后果均与作者无关，在仓库中下载的文件学习完毕之后请于 24 小时内删除！</p><p>仓库地址：<a href="https://github.com/TRHX/Python3-Spider-Practice">https://github.com/TRHX/Python3-Spider-Practice</a></p><h2><span id="chang-jian-wen-ti">常见问题</span></h2><ul><li><p>JS 代码里引用了三个库，npm install 安装一下即可，如果安装了还提示找不到库，那就是路径问题，推荐在当前目录下执行命令安装，或者在 Python 代码里指定完整路径，具体方法可自行百度。</p></li><li><p>jsencrypt 这个库，本地运行可能会报错 <code>window is not defined</code>，在 <code>\node_modules\jsencrypt\bin\jsencrypt.js</code> 源码中加入 <code>var window = global;</code> 即可，这是实现 RSA 加密的库，当然还有很多其他实现方法或者库，都可以。</p></li><li><p>execjs 执行 JS 的时候，可能会报编码错误 <code>&quot;gbk&quot; can't decode byte...</code>，有两种解决方法，一是找到官方源码 <a href="http://subprocess.py">subprocess.py</a>，搜索 <code>encoding=None</code> 改成 <code>encoding='utf-8'</code>，二是直接在 Python 代码里面加入以下代码即可：</p></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partialsubprocess.Popen = partial(subprocess.Popen, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS 逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS 逆向实战 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 中如何解决 asyncio 文件描述符最大数量限制问题</title>
      <link href="/article/048/"/>
      <url>/article/048/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#wen-ti-fu-xian">问题复现</a></li><li><a href="#wen-ti-fen-xi">问题分析</a><ul><li><a href="#shi-jian-xun-huan-eventloop">事件循环 EventLoop</a></li><li><a href="#i-o-duo-lu-fu-yong">I/O 多路复用</a></li><li><a href="#select-de-que-dian">select 的缺点</a></li></ul></li><li><a href="#jie-jue-fang-fa">解决方法</a><ul><li><a href="#1-geng-huan-shi-jian-xun-huan-xuan-ze-qi">1.更换事件循环选择器</a></li><li><a href="#2-xian-zhi-bing-fa-liang">2.限制并发量</a></li><li><a href="#3-xiu-gai-zui-da-wen-jian-miao-shu-fu-xian-zhi">3.修改最大文件描述符限制</a><ul><li><a href="#windows">Windows</a></li><li><a href="#linux">Linux</a></li></ul></li></ul></li><li><a href="#zong-jie">总结</a><ul><li><a href="#windows-1">Windows</a></li><li><a href="#linux-1">Linux</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="wen-ti-fu-xian">问题复现</span></h2><p>Windows 平台下，Python 版本 3.5，使用异步框架 asyncio，有时候会出现 <code>ValueError: too many file descriptors in select()</code> 的报错信息，今天我们就来聊一下为什么会出现这种问题，以及问题的一些解决方法。</p><p>写一个小 dome 复现这个问题（环境：Windows 64 位、Python 3.7）：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> aiohttp<span class="hljs-keyword">import</span> asyncionum = <span class="hljs-number">0</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">url</span>):</span>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url) <span class="hljs-keyword">as</span> response:            <span class="hljs-keyword">global</span> num            num += <span class="hljs-number">1</span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s ——&gt; %s&#x27;</span> % (<span class="hljs-built_in">str</span>(num), response.status))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tasks</span>():</span>    url = <span class="hljs-string">&#x27;https://www.baidu.com/s?ie=UTF-8&amp;wd=%s&#x27;</span>    task = [main(url % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>)]    <span class="hljs-keyword">return</span> taskloop = asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(tasks()))</code></pre><p>在打印 500 次左右后就会出现以下报错：</p><p><img src="https://cdn.itbob.cn/img/article/048/01.png" alt="01.png"></p><h2><span id="wen-ti-fen-xi">问题分析</span></h2><p>好像这个报错和 select 有关，那什么是 select 呢？要怎么解决呢？别急，我们首先来了解一下 asyncio 中的事件循环，即 EventLoop。</p><h3><span id="shi-jian-xun-huan-eventloop">事件循环 EventLoop</span></h3><p>事件循环是 asyncio 的核心，异步任务的运行、任务完成之后的回调、网络 I/O 操作、子进程的运行，都是通过事件循环完成的，通俗来讲，事件循环所做的就是等待事件发生，然后再将每个事件与我们已明确与所述事件类型匹配的函数进行匹配。下图很好的展示了协程、事件循环之间的相互作用：</p><p><img src="https://cdn.itbob.cn/img/article/048/02.png" alt="02.png"></p><p>在 asyncio 中，主要提供了两种不同事件循环的实现方法：</p><ul><li><p><strong>SelectorEventLoop</strong>：基于 selectors 模块的事件循环，selectors 又是建立在底层的 I/O 复用模块 select 之上的，selectors 提供了高度封装和高效的 I/O 复用，也就是说 SelectorEventLoop 在底层就是使用了 select I/O 多路复用的机制。</p></li><li><p><strong>ProactorEventLoop</strong>：使用 IOCP 专为 Windows 构建的事件循环，IOCP 全称 I/O Completion Port，即 I/O 完成端口。它是支持多个同时发生的异步 I/O 操作的应用程序编程接口，它充分利用内核对象的调度，只使用少量的几个线程来处理和客户端的所有通信，消除了无谓的线程上下文切换，是 Windows 下性能最好的 I/O 模型，有关 IOCP 的详细介绍可参考<a href="https://docs.microsoft.com/en-ca/windows/win32/fileio/i-o-completion-ports">微软文档</a>。</p></li></ul><p>那么这两种方法有什么区别呢？在 asyncio 中什么时候用什么方法呢？</p><p>我们不妨看一下 asyncio 的源码，在 Python 3.7 中，无论在 Windows 还是 Linux 中都可以看到其默认的设置是 SelectorEventLoop：</p><p><img src="https://cdn.itbob.cn/img/article/048/03.png" alt="03.png"></p><p>我们也可以分别在 Windows 平台和 Linux 平台打印一下 EventLoop 对象（Python 3.7），可以看到默认都是 SelectorEventLoop：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncioloop = asyncio.get_event_loop()<span class="hljs-built_in">print</span>(loop)</code></pre><p>Windows：</p><p><img src="https://cdn.itbob.cn/img/article/048/04.png" alt="04.png"></p><p>Linux：</p><p><img src="https://cdn.itbob.cn/img/article/048/05.png" alt="05.png"></p><p>事实上，在 Python 3.7 以及之前的版本中，   所有平台默认使用的都是 SelectorEventLoop，在 Python 3.8 以及以后的版本中，Unix 平台默认使用的是 SelectorEventLoop，Windows 平台默认使用的是 ProactorEventLoop，这个差异可以在官方文档中看到。</p><ul><li>Python 3.7 文档：<a href="https://docs.python.org/3.7/library/asyncio-eventloop.html#event-loop-implementations">https://docs.python.org/3.7/library/asyncio-eventloop.html#event-loop-implementations</a></li><li>Python 3.8 文档：<a href="https://docs.python.org/3.8/library/asyncio-eventloop.html#event-loop-implementations">https://docs.python.org/3.8/library/asyncio-eventloop.html#event-loop-implementations</a></li></ul><p><img src="https://cdn.itbob.cn/img/article/048/06.png" alt="06.png"></p><p>说了这么多，这和 <code>ValueError: too many file descriptors in select()</code> 的报错问题有什么关系呢？select 到底是什么东西呢？</p><h3><span id="i-o-duo-lu-fu-yong">I/O 多路复用</span></h3><p>要了解 select，我们还要了解一下什么是 I/O 多路复用（I/O multiplexing），服务器端编程经常需要构造高性能的 I/O 模型，常见的 I/O 模型有同步阻塞 I/O、同步非阻塞 I/O、I/O 多路复用等；当需要同时处理多个客户端接入请求时，可以利用多线程或者 I/O 多路复用技术进行处理，I/O 多路复用技术就是为了解决进程或线程阻塞到某个 I/O 系统调用而出现的技术，使进程不阻塞于某个特定的 I/O 系统调用。</p><p><strong>select，poll，epoll 等都是 I/O 多路复用的一种机制</strong>，其中后两个在 Linux 中可用，Windows 仅支持 select，I/O 多路复用通过这种机制，可以监视多个描述符，一旦某个描述符就绪，一般是读就绪或者写就绪，就是在这个文件描述符进行读写操作之前，能够通知程序进行相应的读写操作。</p><h3><span id="select-de-que-dian">select 的缺点</span></h3><p>I/O 多路复用这个概念被提出来以后， select 是第一个实现这个概念的，select 被实现以后，很快就暴露出了很多问题，其中一个缺点就是 <strong>select 在 Windows 中限制了文件描述符数量为 512 个，在 Linux 中限制为 1024 个</strong>，那么在前面的 dome 中，使用的是 Python 3.5，这个版本的 asyncio 默认使用了 SelectorEventLoop，底层调用的是 select，受 select 缺点的影响，并发量过高，就出现了 <code>ValueError: too many file descriptors in select()</code> 的报错信息。</p><h2><span id="jie-jue-fang-fa">解决方法</span></h2><h3><span id="1-geng-huan-shi-jian-xun-huan-xuan-ze-qi">1.更换事件循环选择器</span></h3><p>如果你使用的是 Python 3.7 及以下的版本，那么在 Windows 平台，可以使用 ProactorEventLoop。在 Linux 平台可以使用 PollSelector。</p><p><strong>注意</strong>：如果你使用了 ProactorEventLoop，那么你将无法使用代理！这是 asyncio 的 bug，早在 2020 年 1 月就有人提过 <a href="https://github.com/aio-libs/aiohttp/issues/4536">issue</a>，目前仍然可以看到类似的 issue，官方貌似也还没办法解决，所以，如果您必须要使用代理，则可以参考后面的解决办法。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> selectors<span class="hljs-keyword">import</span> asyncio<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">if</span> sys.platform == <span class="hljs-string">&#x27;win32&#x27;</span>:    loop = asyncio.ProactorEventLoop()    asyncio.set_event_loop(loop)<span class="hljs-keyword">else</span>:    selector = selectors.PollSelector()    loop = asyncio.SelectorEventLoop(selector)    asyncio.set_event_loop(loop)</code></pre><h3><span id="2-xian-zhi-bing-fa-liang">2.限制并发量</span></h3><p>可以使用方法 <code>asyncio.Semaphore()</code> 来限制并发量，Semaphore 就是信号量的意思，Semaphore 管理一个内部计数器，该计数器在每次调用 <code>acquire()</code> 方法时递减，每次调用 <code>release()</code> 方法时递增，计数器永远不会低于零，当方法 <code>acquire()</code> 发现它为零时，它会阻塞，等待其他线程调用 <code>release()</code> 方法。通过限制并发量的方法来解决报错问题是个不错的选择。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> aiohttp<span class="hljs-keyword">import</span> asyncionum = <span class="hljs-number">0</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">url, semaphore</span>):</span>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> semaphore:        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:            <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url) <span class="hljs-keyword">as</span> response:                <span class="hljs-keyword">global</span> num                num += <span class="hljs-number">1</span>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s ——&gt; %s&#x27;</span> % (<span class="hljs-built_in">str</span>(num), response.status))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tasks</span>():</span>    semaphore = asyncio.Semaphore(<span class="hljs-number">300</span>)                         <span class="hljs-comment"># 限制并发量为 300</span>    url = <span class="hljs-string">&#x27;https://www.baidu.com/s?ie=UTF-8&amp;wd=%s&#x27;</span>    task = [main(url % i, semaphore) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>)]    <span class="hljs-comment"># #总共 10000 任务</span>    <span class="hljs-keyword">return</span> taskloop = asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(tasks()))</code></pre><h3><span id="3-xiu-gai-zui-da-wen-jian-miao-shu-fu-xian-zhi">3.修改最大文件描述符限制</span></h3><h4><span id="windows">Windows</span></h4><p>在 Windows 中，最大文件描述符限制在 C 语言的头文件 Winsock2.h 中使用变量 <code>FD_SETSIZE</code> 进行定义，如果要修改它，可以通过在包含 Winsock2.h 之前将 <code>FD_SETSIZE</code> 定义为另一个值来修改，如果我们使用的编程语言是 Python 的话，是不太好对这个值进行修改的，可以参考微软官方文档：<a href="https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-select">https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-select</a></p><h4><span id="linux">Linux</span></h4><p>在 Linux 平台，可以使用 <code>ulimit</code> 命令来修改最大文件描述符限制：</p><ul><li><p>查看当前会话最大文件描述符限制（默认1024）：<code>ulimit -n</code></p></li><li><p>临时修改限制，只对当前的会话有效：<code>ulimit -SHn 65536</code></p></li><li><p>永久修改限制，在 <code>/etc/security/limits.conf</code> 文件里新增以下内容：</p>  <pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>hard nofile 65536<span class="hljs-bullet">* </span>soft nofile 65536</code></pre></li></ul><p><code>ulimit</code> 命令参考：</p><pre><code class="hljs diff"><span class="hljs-deletion">-S使用软 (soft) 资源限制</span><span class="hljs-deletion">-H使用硬 (hard) 资源限制</span><span class="hljs-deletion">-a所有当前限制都被报告</span><span class="hljs-deletion">-b套接字缓存尺寸</span><span class="hljs-deletion">-c创建的核文件的最大尺寸</span><span class="hljs-deletion">-d一个进程的数据区的最大尺寸</span><span class="hljs-deletion">-e最高的调度优先级 (nice)</span><span class="hljs-deletion">-f有 shell 及其子进程可以写的最大文件尺寸</span><span class="hljs-deletion">-i最多的可以挂起的信号数</span><span class="hljs-deletion">-k分配给此进程的最大 kqueue 数量</span><span class="hljs-deletion">-l一个进程可以锁定的最大内存尺寸</span><span class="hljs-deletion">-m最大的内存进驻尺寸</span><span class="hljs-deletion">-n最多的打开的文件描述符个数</span><span class="hljs-deletion">-p管道缓冲区尺寸</span><span class="hljs-deletion">-qPOSIX 信息队列的最大字节数</span><span class="hljs-deletion">-r实时调度的最大优先级</span><span class="hljs-deletion">-s最大栈尺寸</span><span class="hljs-deletion">-t最大的CPU时间，以秒为单位</span><span class="hljs-deletion">-u最大用户进程数</span><span class="hljs-deletion">-v虚拟内存尺寸</span><span class="hljs-deletion">-x最大的文件锁数量</span><span class="hljs-deletion">-P最大伪终端数量</span><span class="hljs-deletion">-T最大线程数量</span></code></pre><h2><span id="zong-jie">总结</span></h2><p>asyncio 事件循环选择器，在 Python 3.7 以及之前的版本中，所有平台默认使用的都是 SelectorEventLoop，在 Python 3.8 以及以后的版本中，Unix 平台默认使用的是 SelectorEventLoop，Windows 平台默认使用的是 ProactorEventLoop。</p><p>select 在 Windows 中限制了文件描述符最大数量为 512 个，在 Linux 中限制为 1024 个。</p><p>要解决 <code>ValueError: too many file descriptors in select()</code> 的报错问题，根据您的平台和业务要求选择合理的解决方法：</p><h3><span id="windows">Windows</span></h3><ol><li><p>通过 <code>asyncio.Semaphore()</code> 方法来限制并发量，通常设置在 300-500 比较合理，这是最优的做法；</p></li><li><p>更换 asyncio 的事件循环选择器为 ProactorEventLoop，<strong>注意：这将导致无法使用代理！</strong></p></li></ol><h3><span id="linux">Linux</span></h3><ol><li><p>通过 <code>asyncio.Semaphore()</code> 方法来限制并发量，通常设置在 800-1000 比较合理；</p></li><li><p>通过 <code>ulimit</code> 命令来修改最大文件描述符限制；</p></li><li><p>更换 asyncio 的事件循环选择器为 PollSelector。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC 技术及其框架 Sekiro 在爬虫逆向中的应用，加密数据一把梭</title>
      <link href="/article/047/"/>
      <url>/article/047/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/rpc.png" alt="rpc"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#shi-me-shi-rpc">什么是 RPC</a></li><li><a href="#jsrpc">JSRPC</a></li><li><a href="#sekiro">Sekiro</a></li><li><a href="#you-que-dian">优缺点</a></li></ul><!-- tocstop --><hr><h2><span id="shi-me-shi-rpc">什么是 RPC</span></h2><p><s>RPC，英文 RangPaCong，中文让爬虫，旨在为爬虫开路，秒杀一切，让爬虫畅通无阻！</s></p><p>开个玩笑，实际上 RPC 为远程过程调用，全称 Remote Procedure Call，是一种技术思想而非一种规范或协议。RPC 的诞生事实上离不开分布式的发展，RPC 主要解决了两个问题：</p><ol><li>解决了分布式系统中，服务之间的互相调用问题；</li><li>RPC 使得在远程调用时，像本地调用一样方便，让调用者感知不到远程调用的逻辑。</li></ol><p>RPC 的存在让构建分布式系统更加容易，相比于 HTTP 协议，RPC 采用二进制字节码传输，因此也更加高效、安全。在一个典型 RPC 的使用场景中，包含了服务发现、负载、容错、网络传输、序列化等组件，完整 RPC 架构图如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/047/01.jpg" alt="01"></p><h2><span id="jsrpc">JSRPC</span></h2><p>RPC 技术是非常复杂的，对于我们搞爬虫、逆向的来说，不需要完全了解，只需要知道这项技术如何在逆向中应用就行了。</p><p>RPC 在逆向中，简单来说就是将本地和浏览器，看做是服务端和客户端，二者之间通过 WebSocket 协议进行 RPC 通信，在浏览器中将加密函数暴露出来，在本地直接调用浏览器中对应的加密函数，从而得到加密结果，不必去在意函数具体的执行逻辑，也省去了扣代码、补环境等操作，可以省去大量的逆向调试时间。我们以某团网页端的登录为例来演示 RPC 在逆向中的具体使用方法。（假设你已经有一定逆向基础，了解 WebSocket 协议，纯小白可以先看看以前的文章）</p><ul><li>主页（base64）：<code>aHR0cHM6Ly9wYXNzcG9ydC5tZWl0dWFuLmNvbS9hY2NvdW50L3VuaXRpdmVsb2dpbg==</code></li><li>参数：h5Fingerprint</li></ul><p>首先抓一下包，登录接口有一个超级长的参数 h5Fingerprint，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/047/02.png" alt="02"></p><p>直接搜一下就能找到加密函数：</p><p><img src="https://cdn.itbob.cn/img/article/047/03.png" alt="03"></p><p>其中 <code>utility.getH5fingerprint()</code> 传入的参数 <code>window.location.origin + url</code> 格式化后，参数如下：</p><pre><code class="hljs makefile">url = <span class="hljs-string">&quot;https://passport.脱敏处理.com/account/unitivelogin&quot;</span>params = &#123;    <span class="hljs-string">&quot;risk_partner&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,    <span class="hljs-string">&quot;risk_platform&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,    <span class="hljs-string">&quot;risk_app&quot;</span>: <span class="hljs-string">&quot;-1&quot;</span>,    <span class="hljs-string">&quot;uuid&quot;</span>: <span class="hljs-string">&quot;96309b5f00ba4143b920.1644805104.1.0.0&quot;</span>,    <span class="hljs-string">&quot;token_id&quot;</span>: <span class="hljs-string">&quot;DNCmLoBpSbBD6leXFdqIxA&quot;</span>,    <span class="hljs-string">&quot;service&quot;</span>: <span class="hljs-string">&quot;www&quot;</span>,    <span class="hljs-string">&quot;continue&quot;</span>: <span class="hljs-string">&quot;https://www.脱敏处理.com/account/settoken?continue=https%3A%2F%2Fwww.脱敏处理.com%2F&quot;</span>&#125;</code></pre><p>uuid 和 token_id 都可以直接搜到，不是本次研究重点，这里不再细说，接下来我们使用 RPC 技术，直接调用浏览器里的 <code>utility.getH5fingerprint()</code> 方法，首先在本地编写服务端代码，使其能够一直输入待加密字符串，接收并打印加密后的字符串：</p><pre><code class="hljs python"><span class="hljs-comment"># ==================================</span><span class="hljs-comment"># --*-- coding: utf-8 --*--</span><span class="hljs-comment"># @Time    : 2022-02-14</span><span class="hljs-comment"># @Author  : ITBOB.CN</span><span class="hljs-comment"># @FileName: ws_server.py</span><span class="hljs-comment"># @Software: PyCharm</span><span class="hljs-comment"># ==================================</span><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> asyncio<span class="hljs-keyword">import</span> websockets<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">receive_massage</span>(<span class="hljs-params">websocket</span>):</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        send_text = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要加密的字符串: &quot;</span>)        <span class="hljs-keyword">if</span> send_text == <span class="hljs-string">&quot;exit&quot;</span>:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Exit, goodbye!&quot;</span>)            <span class="hljs-keyword">await</span> websocket.send(send_text)            <span class="hljs-keyword">await</span> websocket.close()            sys.exit()        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">await</span> websocket.send(send_text)            response_text = <span class="hljs-keyword">await</span> websocket.recv()            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n加密结果：&quot;</span>, response_text)start_server = websockets.serve(receive_massage, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">5678</span>)  <span class="hljs-comment"># 自定义端口</span>asyncio.get_event_loop().run_until_complete(start_server)asyncio.get_event_loop().run_forever()</code></pre><p>编写浏览器客户端 JS 代码，收到消息就直接 <code>utility.getH5fingerprint()</code> 得到加密参数并发送给服务端：</p><pre><code class="hljs javascript"><span class="hljs-comment">/* ==================================</span><span class="hljs-comment"># @Time    : 2022-02-14</span><span class="hljs-comment"># @Author  : ITBOB.CN</span><span class="hljs-comment"># @FileName: ws_client.js</span><span class="hljs-comment"># @Software: PyCharm</span><span class="hljs-comment"># ================================== */</span><span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&quot;ws://127.0.0.1:5678&quot;</span>);  <span class="hljs-comment">// 自定义端口</span>ws.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Received Message: &quot;</span> + evt.data);    <span class="hljs-keyword">if</span> (evt.data == <span class="hljs-string">&quot;exit&quot;</span>) &#123;        ws.close();    &#125; <span class="hljs-keyword">else</span> &#123;        ws.send(utility.getH5fingerprint(evt.data))    &#125;&#125;;</code></pre><p>然后我们需要把客户端代码注入到网页中，这里方法有很多，比如抓包软件 Fiddler 替换响应、浏览器插件 ReRes 替换 JS、浏览器开发者工具 Overrides 重写功能等，也可以通过插件、油猴等注入 Hook 的方式插入，反正方法很多，对这些方法不太了解的朋友可以去看看以前的文章，都有介绍。</p><p>这里我们使用浏览器开发者工具 Overrides 重写功能，将 WebSocket 客户端代码加到加密的这个 JS 文件里并 Ctrl+S 保存，这里将其写成了 IIFE 自执行方式，这样做的原因是防止污染全局变量，不用自执行方式当然也是可以的。</p><p><img src="https://cdn.itbob.cn/img/article/047/04.png" alt="04"></p><p>然后先运行本地服务端代码，网页上先登录一遍，网页上先登录一遍，网页上先登录一遍，重要的步骤说三遍！然后就可以在本地传入待加密字符串，获取 <code>utility.getH5fingerprint()</code> 加密后的结果了：</p><p><img src="https://cdn.itbob.cn/img/article/047/05.png" alt="05"></p><h2><span id="sekiro">Sekiro</span></h2><p>通过前面的示例，可以发现自己写服务端太麻烦了，不易扩展，那这方面有没有现成的轮子呢？答案是有的，这里介绍两个项目：</p><ul><li>JsRPC-hliang：<a href="https://github.com/jxhczhl/JsRpc">https://github.com/jxhczhl/JsRpc</a></li><li>Sekiro：<a href="https://github.com/virjar/sekiro">https://github.com/virjar/sekiro</a></li></ul><p>JsRPC-hliang 是用 go 语言写的，是专门为 JS 逆向做的项目，而 Sekiro 功能更加强大，Sekiro 是由邓维佳大佬，俗称渣总，写的一个基于长链接和代码注入的 Android Private API 暴露框架，可以用在 APP 逆向、APP 数据抓取、Android 群控等场景，同时 Sekiro 也是目前公开方案唯一稳定的 JSRPC 框架，两者在 JS 逆向方面的使用方法其实都差不多，本文主要介绍一下 Sekiro 在 Web JS 逆向中的应用。</p><p>参考 Sekiro 文档，首先在本地编译项目：</p><ul><li><p>Linux &amp; Mac：执行脚本 <code>build_demo_server.sh</code>，之后得到产出发布压缩包：<code>sekiro-service-demo/target/sekiro-release-demo.zip</code></p></li><li><p>Windows：可以直接下载：<a href="https://oss.virjar.com/sekiro/sekiro-demo">https://oss.virjar.com/sekiro/sekiro-demo</a></p></li></ul><p>然后在本地运行（需要有 Java 环境，自行配置）：</p><ul><li>Linux &amp; Mac：<code>bin/sekiro.sh</code></li><li>Windows：<code>bin/sekiro.bat</code></li></ul><p>以 Windows 为例，启动后如下：</p><p><img src="https://cdn.itbob.cn/img/article/047/06.png" alt="06"></p><p>接下来就需要在浏览器里注入代码了，需要将作者提供的 sekiro_web_client.js（下载地址：<a href="https://sekiro.virjar.com/sekiro-doc/assets/sekiro_web_client.js%EF%BC%89">https://sekiro.virjar.com/sekiro-doc/assets/sekiro_web_client.js）</a> 注入到浏览器环境，然后通过 SekiroClient 和 Sekiro 服务器通信，即可直接 RPC 调用浏览器内部方法，官方提供的 SekiroClient 代码样例如下：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">guid</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">S4</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">return</span> (((<span class="hljs-number">1</span>+<span class="hljs-built_in">Math</span>.random())*<span class="hljs-number">0x10000</span>)|<span class="hljs-number">0</span>).toString(<span class="hljs-number">16</span>).substring(<span class="hljs-number">1</span>);    &#125;    <span class="hljs-keyword">return</span> (S4()+S4()+<span class="hljs-string">&quot;-&quot;</span>+S4()+<span class="hljs-string">&quot;-&quot;</span>+S4()+<span class="hljs-string">&quot;-&quot;</span>+S4()+<span class="hljs-string">&quot;-&quot;</span>+S4()+S4()+S4());&#125;<span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> SekiroClient(<span class="hljs-string">&quot;wss://sekiro.virjar.com/business/register?group=ws-group&amp;clientId=&quot;</span>+guid());client.registerAction(<span class="hljs-string">&quot;clientTime&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request, resolve, reject</span>)</span>&#123;    resolve(<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());&#125;)</code></pre><p>wss 链接里，如果是免费版，要将 business 改成 business-demo，解释一下涉及到的名词：</p><ul><li><strong>group</strong>：业务类型（接口组），每个业务一个 group，group 下面可以注册多个终端（SekiroClient），同时 group 可以挂载多个 Action；</li><li><strong>clientId</strong>：指代设备，多个设备使用多个机器提供 API 服务，提供群控能力和负载均衡能力；</li><li><strong>SekiroClient</strong>：服务提供者客户端，主要场景为手机/浏览器等。最终的 Sekiro 调用会转发到 SekiroClient。每个 client 需要有一个惟一的 clientId；</li><li><strong>registerAction</strong>：接口，同一个 group 下面可以有多个接口，分别做不同的功能；</li><li><strong>resolve</strong>：将内容传回给客户端的方法；</li><li><strong>request</strong>：客户端传过来的请求，如果请求里有多个参数，可以以键值对的方式从里面提取参数然后再做处理。</li></ul><p>说了这么多可能也不好理解，直接实战，还是以某团网页端登录为例，我们将 sekiro_web_client.js 与 SekiroClient 通信代码写在一起，然后根据需求，改写一下通信部分代码：</p><ol><li>ws 链接改为：<code>ws://127.0.0.1:5620/business-demo/register?group=rpc-test&amp;clientId=</code>，自定义 <code>group</code> 为 <code>rpc-test</code>；</li><li>注册一个事件 <code>registerAction</code> 为 <code>getH5fingerprint</code>；</li><li><code>resolve</code> 返回的结果为 <code>utility.getH5fingerprint(request[&quot;url&quot;])</code>，即加密并返回客户端传过来的 url 参数。</li></ol><p>完整代码如下（留意末尾 SekiroClient 通信代码部分的写法）：</p><pre><code class="hljs javascript"><span class="hljs-comment">/* ==================================</span><span class="hljs-comment"># @Time    : 2022-02-14</span><span class="hljs-comment"># @Author  : ITBOB.CN</span><span class="hljs-comment"># @FileName: sekiro.js</span><span class="hljs-comment"># @Software: PyCharm</span><span class="hljs-comment"># ================================== */</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-meta">    &#x27;use strict&#x27;</span>;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SekiroClient</span>(<span class="hljs-params">wsURL</span>) </span>&#123;        <span class="hljs-built_in">this</span>.wsURL = wsURL;        <span class="hljs-built_in">this</span>.handlers = &#123;&#125;;        <span class="hljs-built_in">this</span>.socket = &#123;&#125;;        <span class="hljs-comment">// check</span>        <span class="hljs-keyword">if</span> (!wsURL) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;wsURL can not be empty!!&#x27;</span>)        &#125;        <span class="hljs-built_in">this</span>.webSocketFactory = <span class="hljs-built_in">this</span>.resolveWebSocketFactory();        <span class="hljs-built_in">this</span>.connect()    &#125;    SekiroClient.prototype.resolveWebSocketFactory = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span> === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;            <span class="hljs-keyword">var</span> theWebSocket = <span class="hljs-built_in">window</span>.WebSocket ? <span class="hljs-built_in">window</span>.WebSocket : <span class="hljs-built_in">window</span>.MozWebSocket;            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">wsURL</span>) </span>&#123;                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">WindowWebSocketWrapper</span>(<span class="hljs-params">wsURL</span>) </span>&#123;                    <span class="hljs-built_in">this</span>.mSocket = <span class="hljs-keyword">new</span> theWebSocket(wsURL);                &#125;                WindowWebSocketWrapper.prototype.close = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                    <span class="hljs-built_in">this</span>.mSocket.close();                &#125;;                WindowWebSocketWrapper.prototype.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onMessageFunction</span>) </span>&#123;                    <span class="hljs-built_in">this</span>.mSocket.onmessage = onMessageFunction;                &#125;;                WindowWebSocketWrapper.prototype.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onOpenFunction</span>) </span>&#123;                    <span class="hljs-built_in">this</span>.mSocket.onopen = onOpenFunction;                &#125;;                WindowWebSocketWrapper.prototype.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">onCloseFunction</span>) </span>&#123;                    <span class="hljs-built_in">this</span>.mSocket.onclose = onCloseFunction;                &#125;;                WindowWebSocketWrapper.prototype.send = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) </span>&#123;                    <span class="hljs-built_in">this</span>.mSocket.send(message);                &#125;;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WindowWebSocketWrapper(wsURL);            &#125;        &#125;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> weex === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;            <span class="hljs-comment">// this is weex env : https://weex.apache.org/zh/docs/modules/websockets.html</span>            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;test webSocket for weex&quot;</span>);                <span class="hljs-keyword">var</span> ws = weex.requireModule(<span class="hljs-string">&#x27;webSocket&#x27;</span>);                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;find webSocket for weex:&quot;</span> + ws);                <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">wsURL</span>) </span>&#123;                    <span class="hljs-keyword">try</span> &#123;                        ws.close();                    &#125; <span class="hljs-keyword">catch</span> (e) &#123;                    &#125;                    ws.WebSocket(wsURL, <span class="hljs-string">&#x27;&#x27;</span>);                    <span class="hljs-keyword">return</span> ws;                &#125;            &#125; <span class="hljs-keyword">catch</span> (e) &#123;                <span class="hljs-built_in">console</span>.log(e);                <span class="hljs-comment">//ignore</span>            &#125;        &#125;        <span class="hljs-comment">//TODO support ReactNative</span>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> WebSocket === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">wsURL</span>) </span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> theWebSocket(wsURL);            &#125;        &#125;        <span class="hljs-comment">// weex 和 PC环境的websocket API不完全一致，所以做了抽象兼容</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;the js environment do not support websocket&quot;</span>);    &#125;;    SekiroClient.prototype.connect = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sekiro: begin of connect to wsURL: &#x27;</span> + <span class="hljs-built_in">this</span>.wsURL);        <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;        <span class="hljs-comment">// 不check close，让</span>        <span class="hljs-comment">// if (this.socket &amp;&amp; this.socket.readyState === 1) &#123;</span>        <span class="hljs-comment">//     this.socket.close();</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-built_in">this</span>.socket = <span class="hljs-built_in">this</span>.webSocketFactory(<span class="hljs-built_in">this</span>.wsURL);        &#125; <span class="hljs-keyword">catch</span> (e) &#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;sekiro: create connection failed,reconnect after 2s&quot;</span>);            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                _this.connect()            &#125;, <span class="hljs-number">2000</span>)        &#125;        <span class="hljs-built_in">this</span>.socket.onmessage(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;            _this.handleSekiroRequest(event.data)        &#125;);        <span class="hljs-built_in">this</span>.socket.onopen(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sekiro: open a sekiro client connection&#x27;</span>)        &#125;);        <span class="hljs-built_in">this</span>.socket.onclose(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sekiro: disconnected ,reconnection after 2s&#x27;</span>);            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                _this.connect()            &#125;, <span class="hljs-number">2000</span>)        &#125;);    &#125;;    SekiroClient.prototype.handleSekiroRequest = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">requestJson</span>) </span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;receive sekiro request: &quot;</span> + requestJson);        <span class="hljs-keyword">var</span> request = <span class="hljs-built_in">JSON</span>.parse(requestJson);        <span class="hljs-keyword">var</span> seq = request[<span class="hljs-string">&#x27;__sekiro_seq__&#x27;</span>];        <span class="hljs-keyword">if</span> (!request[<span class="hljs-string">&#x27;action&#x27;</span>]) &#123;            <span class="hljs-built_in">this</span>.sendFailed(seq, <span class="hljs-string">&#x27;need request param &#123;action&#125;&#x27;</span>);            <span class="hljs-keyword">return</span>        &#125;        <span class="hljs-keyword">var</span> action = request[<span class="hljs-string">&#x27;action&#x27;</span>];        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.handlers[action]) &#123;            <span class="hljs-built_in">this</span>.sendFailed(seq, <span class="hljs-string">&#x27;no action handler: &#x27;</span> + action + <span class="hljs-string">&#x27; defined&#x27;</span>);            <span class="hljs-keyword">return</span>        &#125;        <span class="hljs-keyword">var</span> theHandler = <span class="hljs-built_in">this</span>.handlers[action];        <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;        <span class="hljs-keyword">try</span> &#123;            theHandler(request, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;                <span class="hljs-keyword">try</span> &#123;                    _this.sendSuccess(seq, response)                &#125; <span class="hljs-keyword">catch</span> (e) &#123;                    _this.sendFailed(seq, <span class="hljs-string">&quot;e:&quot;</span> + e);                &#125;            &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">errorMessage</span>) </span>&#123;                _this.sendFailed(seq, errorMessage)            &#125;)        &#125; <span class="hljs-keyword">catch</span> (e) &#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;error: &quot;</span> + e);            _this.sendFailed(seq, <span class="hljs-string">&quot;:&quot;</span> + e);        &#125;    &#125;;    SekiroClient.prototype.sendSuccess = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">seq, response</span>) </span>&#123;        <span class="hljs-keyword">var</span> responseJson;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> response == <span class="hljs-string">&#x27;string&#x27;</span>) &#123;            <span class="hljs-keyword">try</span> &#123;                responseJson = <span class="hljs-built_in">JSON</span>.parse(response);            &#125; <span class="hljs-keyword">catch</span> (e) &#123;                responseJson = &#123;&#125;;                responseJson[<span class="hljs-string">&#x27;data&#x27;</span>] = response;            &#125;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> response == <span class="hljs-string">&#x27;object&#x27;</span>) &#123;            responseJson = response;        &#125; <span class="hljs-keyword">else</span> &#123;            responseJson = &#123;&#125;;            responseJson[<span class="hljs-string">&#x27;data&#x27;</span>] = response;        &#125;        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(responseJson)) &#123;            responseJson = &#123;                <span class="hljs-attr">data</span>: responseJson,                <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>            &#125;        &#125;        <span class="hljs-keyword">if</span> (responseJson[<span class="hljs-string">&#x27;code&#x27;</span>]) &#123;            responseJson[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">0</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (responseJson[<span class="hljs-string">&#x27;status&#x27;</span>]) &#123;            responseJson[<span class="hljs-string">&#x27;status&#x27;</span>] = <span class="hljs-number">0</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            responseJson[<span class="hljs-string">&#x27;status&#x27;</span>] = <span class="hljs-number">0</span>;        &#125;        responseJson[<span class="hljs-string">&#x27;__sekiro_seq__&#x27;</span>] = seq;        <span class="hljs-keyword">var</span> responseText = <span class="hljs-built_in">JSON</span>.stringify(responseJson);        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;response :&quot;</span> + responseText);        <span class="hljs-built_in">this</span>.socket.send(responseText);    &#125;;    SekiroClient.prototype.sendFailed = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">seq, errorMessage</span>) </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> errorMessage != <span class="hljs-string">&#x27;string&#x27;</span>) &#123;            errorMessage = <span class="hljs-built_in">JSON</span>.stringify(errorMessage);        &#125;        <span class="hljs-keyword">var</span> responseJson = &#123;&#125;;        responseJson[<span class="hljs-string">&#x27;message&#x27;</span>] = errorMessage;        responseJson[<span class="hljs-string">&#x27;status&#x27;</span>] = -<span class="hljs-number">1</span>;        responseJson[<span class="hljs-string">&#x27;__sekiro_seq__&#x27;</span>] = seq;        <span class="hljs-keyword">var</span> responseText = <span class="hljs-built_in">JSON</span>.stringify(responseJson);        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;sekiro: response :&quot;</span> + responseText);        <span class="hljs-built_in">this</span>.socket.send(responseText)    &#125;;    SekiroClient.prototype.registerAction = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">action, handler</span>) </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> action !== <span class="hljs-string">&#x27;string&#x27;</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;an action must be string&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> handler !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;a handler must be function&quot;</span>);        &#125;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;sekiro: register action: &quot;</span> + action);        <span class="hljs-built_in">this</span>.handlers[action] = handler;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;    &#125;;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">guid</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">S4</span>(<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-keyword">return</span> (((<span class="hljs-number">1</span> + <span class="hljs-built_in">Math</span>.random()) * <span class="hljs-number">0x10000</span>) | <span class="hljs-number">0</span>).toString(<span class="hljs-number">16</span>).substring(<span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">return</span> (S4() + S4() + <span class="hljs-string">&quot;-&quot;</span> + S4() + <span class="hljs-string">&quot;-&quot;</span> + S4() + <span class="hljs-string">&quot;-&quot;</span> + S4() + <span class="hljs-string">&quot;-&quot;</span> + S4() + S4() + S4());    &#125;    <span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> SekiroClient(<span class="hljs-string">&quot;ws://127.0.0.1:5620/business-demo/register?group=rpc-test&amp;clientId=&quot;</span> + guid());    client.registerAction(<span class="hljs-string">&quot;getH5fingerprint&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">request, resolve, reject</span>) </span>&#123;        resolve(utility.getH5fingerprint(request[<span class="hljs-string">&quot;url&quot;</span>]));    &#125;)&#125;)();</code></pre><p>与前面的方法一样，使用浏览器开发者工具 Overrides 重写功能，将上面的代码注入到网页 JS 里：</p><p><img src="https://cdn.itbob.cn/img/article/047/07.png" alt="07"></p><p>然后 Sekiro 为我们提供了一些 API：</p><ul><li>查看分组列表：<a href="http://127.0.0.1:5620/business-demo/groupList">http://127.0.0.1:5620/business-demo/groupList</a></li><li>查看队列状态：<a href="http://127.0.0.1:5620/business-demo/clientQueue?group=test">http://127.0.0.1:5620/business-demo/clientQueue?group=test</a></li><li>调用转发：<a href="http://127.0.0.1:5620/business-demo/invoke?group=test&amp;action=test&amp;param=testparm">http://127.0.0.1:5620/business-demo/invoke?group=test&amp;action=test&amp;param=testparm</a></li></ul><p>比如我们现在要调用 <code>utility.getH5fingerprint()</code> 加密方法该怎么办呢？很简单，代码注入到浏览器里后，首先还是要手动登录一遍，手动登录一遍，手动登录一遍，重要的事情说三遍！然后参考上面的调用转发 API 进行改写：</p><ul><li>我们自定义的分组 <code>group</code> 是 <code>rpc-test</code>；</li><li>事件 <code>action</code> 是 <code>getH5fingerprint</code>；</li><li>待加密参数名称为 <code>url</code>， 其值例如为：<code>https://www.baidu.com/</code></li></ul><p>那么我们的调用链接就应该是：<code>http://127.0.0.1:5620/business-demo/invoke?group=rpc-test&amp;action=getH5fingerprint&amp;url=https://www.baidu.com/</code>，直接浏览器打开，返回的字典，data 里面就是加密结果：</p><p><img src="https://cdn.itbob.cn/img/article/047/08.png" alt="08"></p><p>同样的，在本地用 Python 的话，直接 requests 就完事儿了：</p><p><img src="https://cdn.itbob.cn/img/article/047/09.png" alt="09"></p><p>我们前面是把 sekiro_web_client.js 复制下来和通信代码一起注入到浏览器的，这里我们还可以有更加优雅的方法，直接给 document 新创建一个 script，通过链接的形式插入 sekiro_web_client.js，这里需要注意一下几点问题：</p><ol><li>第一个是时机的问题，需要等待 document 这些元素加载完成才能建立 SekiroClient 通信，不然调用 SekiroClient 是会报错的，这里可以用 setTimeout 方法，该方法用于在指定的毫秒数后调用函数或计算表达式，将 SekiroClient 通信代码单独封装成一个函数，比如 <code>function startSekiro()</code>，然后等待 1-2 秒后再执行 SekiroClient 通信代码；</li><li>由于 SekiroClient 通信代码被封装成了函数，此时直接调用 <code>utility.getH5fingerprint</code> 是会提示未定义的，所以我们要先将其导为全局变量，比如 <code>window.getH5fingerprint = utility.getH5fingerprint</code>，后续直接调用 <code>window.getH5fingerprint</code> 即可。</li></ol><p>完整代码如下所示：</p><pre><code class="hljs javascript"><span class="hljs-comment">/* ==================================</span><span class="hljs-comment"># @Time    : 2022-02-14</span><span class="hljs-comment"># @Author  : ITBOB.CN</span><span class="hljs-comment"># @FileName: sekiro.js</span><span class="hljs-comment"># @Software: PyCharm</span><span class="hljs-comment"># ================================== */</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> newElement = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;script&quot;</span>);    newElement.setAttribute(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;text/javascript&quot;</span>);    newElement.setAttribute(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;https://sekiro.virjar.com/sekiro-doc/assets/sekiro_web_client.js&quot;</span>);    <span class="hljs-built_in">document</span>.body.appendChild(newElement);    <span class="hljs-built_in">window</span>.getH5fingerprint = utility.getH5fingerprint    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">guid</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">S4</span>(<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-keyword">return</span> (((<span class="hljs-number">1</span> + <span class="hljs-built_in">Math</span>.random()) * <span class="hljs-number">0x10000</span>) | <span class="hljs-number">0</span>).toString(<span class="hljs-number">16</span>).substring(<span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">return</span> (S4() + S4() + <span class="hljs-string">&quot;-&quot;</span> + S4() + <span class="hljs-string">&quot;-&quot;</span> + S4() + <span class="hljs-string">&quot;-&quot;</span> + S4() + <span class="hljs-string">&quot;-&quot;</span> + S4() + S4() + S4());    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startSekiro</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> client = <span class="hljs-keyword">new</span> SekiroClient(<span class="hljs-string">&quot;ws://127.0.0.1:5620/business-demo/register?group=rpc-test&amp;clientId=&quot;</span> + guid());        client.registerAction(<span class="hljs-string">&quot;getH5fingerprint&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">request, resolve, reject</span>) </span>&#123;            resolve(<span class="hljs-built_in">window</span>.getH5fingerprint(request[<span class="hljs-string">&quot;url&quot;</span>]));        &#125;)    &#125;    <span class="hljs-built_in">setTimeout</span>(startSekiro, <span class="hljs-number">2000</span>)&#125;)();</code></pre><p><img src="https://cdn.itbob.cn/img/article/047/10.png" alt="10"></p><h2><span id="you-que-dian">优缺点</span></h2><p>目前如果不去逆向 JS 来实现加密参数的话，用得最多的就是自动化工具了，比如 Selenium、Puppeteer 等，很显然这些自动化工具配置繁琐、运行效率极低，而 RPC 技术不需要加载多余的资源，稳定性和效率明显都更高，RPC 不需要考虑浏览器指纹、各种环境，如果风控不严的话，高并发也是能够轻松实现的，相反，由于 RPC 是一直挂载在同一个浏览器上的，所以针对风控较严格的站点，比如检测 UA、IP 与加密参数绑定之类的，那么 PRC 调用太频繁就不太行了，当然也可以研究研究浏览器群控技术，操纵多个不同浏览器可以一定程度上缓解这个问题。总之 RPC 技术还是非常牛的，除了 JS 逆向，可以说是目前比较万能、高效的方法了，一定程度上做到了加密参数一把梭！</p>]]></content>
      
      
      <categories>
          
          <category> JS 逆向理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> JS 逆向理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吾爱破解2022春节解题领红包之番外篇 Web 中级题解</title>
      <link href="/article/046/"/>
      <url>/article/046/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#hls-liu-mei-ti-chuan-shu-xie-yi">HLS 流媒体传输协议</a></li><li><a href="#saz-fen-xi">SAZ 分析</a></li><li><a href="#js-ni-xiang">JS 逆向</a></li><li><a href="#ts-jie-mi-he-bing-zhuan-huan">TS 解密合并转换</a></li></ul><!-- tocstop --><hr><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><p>本次逆向的目标来源于吾爱破解 2022 春节解题领红包之番外篇 Web 中级题，吾爱破解每年都会有派送红包活动（送吾爱币），需要大家使出看家逆向本领来分析内容获得口令红包，今年一共有五个题，一个送分题，两个 Windows 题、一个 Android 题和一个 Web 题，本文分析的正是  Web 题，<strong>吾爱有规定活动结束前不要外泄口令、讨论分享分析过程，所以本文在活动结束后才发出来。</strong></p><p>此 Web 题题目是：小 D 最爱看的视频网站最近关站了，关站前他用 Fiddler 和 Web Archive 保存了一位主播的视频，但他发现存下来的文件无法播放。你能帮小 D 找回他的回忆吗？（.saz 与 .wacz 任选其一即可解题）</p><ul><li><p>活动地址：<a href="https://www.52pojie.cn/thread-1582582-1-1.html">https://www.52pojie.cn/thread-1582582-1-1.html</a></p></li><li><p>Web 题地址：<a href="https://www.52pojie.cn/home.php?mod=task&amp;do=view&amp;id=17">https://www.52pojie.cn/home.php?mod=task&amp;do=view&amp;id=17</a></p></li></ul><h2><span id="hls-liu-mei-ti-chuan-shu-xie-yi">HLS 流媒体传输协议</span></h2><p>本题涉及到 HLS 流媒体传输协议，先简单介绍一下，了解的同志可直接跳过。</p><p>HLS 全称 HTTP Live Streaming，即基于 HTTP 的自适应码率流媒体传输协议，是苹果研发的动态码率自适应技术，它包括一个 M3U(8) 的索引文件，若干 TS 视频流文件，如果视频流文件是加密的，那就还会存在一个 key 加密串文件。</p><p>M3U8 文件是 M3U 的一种，只不过文件中存储的文本使用 UTF-8 字符编码，在极少数情况下，M3U8 文件可能会以 M3UP 扩展名保存。M3U8 文件是各种音频和视频播放程序使用的播放列表文件，它包含了媒体文件或媒体文件夹的路径或 URL，以及有关播放列表的相关信息。</p><p>TS 全称为 MPEG2-TS，TS 即 Transport Stream 传输流，又称 MPEG-TS、MTS、TP，这种格式的特点就是从视频流的任一片段开始都是可以独立解码的。</p><p>针对 TS 格式的文件，如果是未加密的，一般的播放器就能够直接播放，也可以使用 FFmpeg 等工具转换为其他格式，FFmpeg 也可以直接处理 M3U8 文件，自动解密合并转换 TS 文件，当然也有其他大佬写好的小工具，拖入 M3U8 文件就直接给你处理好了。</p><p><img src="https://cdn.itbob.cn/img/article/046/01.png" alt="01.png"></p><p>M3U8 文件内容的大致格式示例如下：</p><pre><code class="hljs awk"><span class="hljs-comment">#EXTM3U</span><span class="hljs-comment">#EXT-X-VERSION:3</span><span class="hljs-comment">#EXT-X-MEDIA-SEQUENCE:0</span><span class="hljs-comment">#EXT-X-ALLOW-CACHE:YES</span><span class="hljs-comment">#EXT-X-KEY:METHOD=AES-128,URI=&quot;https://www.example.com/m3u8.key&quot;</span><span class="hljs-comment">#EXT-X-TARGETDURATION:5</span><span class="hljs-comment">#EXTINF:4.200000,</span>https:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/hls/</span>live_00000.ts<span class="hljs-comment">#EXTINF:4.166667,</span>https:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/hls/</span>live_00001.ts<span class="hljs-comment">#EXTINF:3.600000,</span>https:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/hls/</span>live_00002.ts<span class="hljs-comment">#EXTINF:2.516667,</span>https:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/hls/</span>live_00003.ts<span class="hljs-comment">#EXTINF:4.166667,</span>https:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/hls/</span>live_00004.ts<span class="hljs-comment">#EXTINF:4.166667,</span>https:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/hls/</span>live_00005.ts<span class="hljs-comment">#EXTINF:4.166667,</span>https:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/hls/</span>live_00006.ts<span class="hljs-comment">#EXTINF:1.716667,</span>https:<span class="hljs-regexp">//</span>www.example.com<span class="hljs-regexp">/hls/</span>live_00007.ts<span class="hljs-comment">#EXT-X-ENDLIST</span></code></pre><p>各标签含义如下：</p><ul><li><code>#EXTM3U</code>：m3u文件头，必须放在第一行，起标示作用；</li><li><code>#EXT-X-VERSION</code>：播放列表文件的兼容版本。若不存在此标记，则默认为协议的第一个版本；</li><li><code>#EXT-X-MEDIA-SEQUENCE</code>： 播放列表中的每个媒体 URI 都有一个唯一的整数序列号。URI 的序列号等于它之前的 URI 的序列号加一；</li><li><code>#EXT-X-ALLOW-CACHE</code>：指示客户端是否可以缓存下载的媒体片段以供以后重播；</li><li><code>#EXT-X-KEY</code>：TS 片段可以被加密，该标签指定加密方式（METHOD）、密钥的 URI 以及偏移量 IV 等信息，没有此标签表示未加密；</li><li><code>#EXT-X-TARGETDURATION</code>：每一份 TS 媒体文件的最大持续时间，以秒为单位；</li><li><code>#EXTINF</code>：每一份媒体文件的详细信息，包括媒体持续时间、媒体 URL 地址等；</li><li><code>#EXT-X-ENDLIST</code>：表示不再将媒体片段添加到播放列表文件中，一般位于文件结尾。</li></ul><p>完整格式、标准标签可参考 HLS 标准协议中，对 Playlist file 的介绍：<a href="https://datatracker.ietf.org/doc/html/draft-pantos-http-live-streaming-08">https://datatracker.ietf.org/doc/html/draft-pantos-http-live-streaming-08</a></p><h2><span id="saz-fen-xi">SAZ 分析</span></h2><p>在 Fiddler 软件中，使用 SAZ 格式用来保存和读取 HTTP/HTTPS 请求信息，打开该文件可以注意到一些重要的请求：script.bundle.js、live.m3u8、drm 以及八个 ts 视频流文件。</p><p>先来看看 m3u8 文件，可以看到是 AES-128 加密，加密的 key 文件地址为 <code>key://live</code>，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/046/02.png" alt="02.png"></p><p>一般情况下，要想解密 ts，必然会去请求 key 的地址，拿到 key 后再解密 ts，很显然此题的 key 地址不是一个合法的 URL 地址，当然此题的抓包记录可能是出题人伪造的，因为这个 Host 是 52tube.mmxxii，也不是一个合法的域名，最主要的是，抓包记录里没有 <code>key://live</code> 这条请求，那么很大概率真实的地址隐藏在 JS 里，从另一个方面来思考，如果这是完整的抓包记录，不管真实的 key 地址是啥，必然会在记录里出现！</p><p>有经验的朋友应该一眼就能看出来 drm 这条请求最有可能是拿 key 的操作了，第一是 drm 这个关键词在 ts 解密里经常会出现，搞得多的朋友应该见过不少，第二 ping 请求返回的 success，通过其名称和返回值来看也不像 key，剩下就只有 drm 了，查看返回值是乱码的，查看 Hex 值，32 位 16 进制数据，而正常的 key 应该是 16 位 16 进制数据，所以你如果直接拿这个数据当作 key 去解密，肯定也是失败的。</p><p>到这里我们应该有如下猜想：drm 返回的数据，经过了 script.bundle.js 二次处理就能得到正确的 key。</p><p><img src="https://cdn.itbob.cn/img/article/046/03.png" alt="03.png"></p><h2><span id="js-ni-xiang">JS 逆向</span></h2><p>我们把抓包记录的 script.bundle.js，右键，save - response - response body，保存到本地。</p><p>格式化之后有 15000+ 行代码，又不能动态调试，从哪里找加密入口呢？可以大胆尝试一下：</p><ul><li>JS 里可能会检测到 m3u8 里存在 key 的 URI 之后，发送 /api/drm/ 这个请求，可以直接搜索 <code>/api/drm/</code> 或者 <code>key://live</code> 定位；</li><li>drm 是一个 post 请求，带有 h 和 id 两个参数，可以直接搜索 <code>post</code>、<code>id</code>、<code>h</code> 定位到大致位置。</li></ul><p><img src="https://cdn.itbob.cn/img/article/046/04.png" alt="04.png"></p><p>通过搜索可以发现如下可疑代码片段：</p><p><img src="https://cdn.itbob.cn/img/article/046/05.png" alt="05.png"></p><p>将关键代码提炼一下：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params">t</span>) </span>&#123;    <span class="hljs-keyword">return</span> [...new <span class="hljs-built_in">Uint8Array</span>(t)].map((<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> t.toString(<span class="hljs-number">16</span>).padStart(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>))).join(<span class="hljs-string">&quot;&quot;</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s</span>(<span class="hljs-params">t, e</span>) </span>&#123;    <span class="hljs-keyword">let</span> r = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(t.length);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; t.length; i++) r[i] = t[i] ^ e[i];    <span class="hljs-keyword">return</span> r&#125;<span class="hljs-keyword">let</span> e = <span class="hljs-string">&quot;/api/ping/&quot;</span>,    i = <span class="hljs-string">&quot;/api/drm/&quot;</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">t</span>.<span class="hljs-title">DefaultConfig</span>.<span class="hljs-title">loader</span> </span>&#123;    <span class="hljs-keyword">let</span> e = <span class="hljs-keyword">await</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">let</span> t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(<span class="hljs-number">16</span>);        crypto.getRandomValues(t);        <span class="hljs-keyword">let</span> e = n(t.buffer) + <span class="hljs-built_in">Date</span>.now() + <span class="hljs-built_in">Math</span>.random();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>((<span class="hljs-keyword">await</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>) </span>&#123;            <span class="hljs-keyword">const</span> e = (<span class="hljs-keyword">new</span> TextEncoder).encode(t);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> crypto.subtle.digest(<span class="hljs-string">&quot;SHA-256&quot;</span>, e)        &#125; (e)).slice(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>))    &#125;();    <span class="hljs-keyword">var</span> r = <span class="hljs-keyword">new</span> URLSearchParams;    r.append(<span class="hljs-string">&quot;h&quot;</span>, n(e.buffer)),        r.append(<span class="hljs-string">&quot;id&quot;</span>, t);    <span class="hljs-keyword">var</span> a = &#123;        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,        <span class="hljs-attr">headers</span>: &#123;            <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>        &#125;,        <span class="hljs-attr">body</span>: r    &#125;;    <span class="hljs-keyword">let</span> o = <span class="hljs-keyword">await</span> fetch(i, a),        l = <span class="hljs-keyword">await</span> o.arrayBuffer();    <span class="hljs-keyword">if</span> (<span class="hljs-number">32</span> !== l.byteLength) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Invalid response&quot;</span>);    <span class="hljs-keyword">let</span> u = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(l.slice(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)),        c = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(l.slice(<span class="hljs-number">16</span>, <span class="hljs-number">32</span>));    <span class="hljs-keyword">return</span> s(s(u, e), c)&#125;</code></pre><p>可以看到事实上在发送 <code>/api/drm/</code> 请求拿到结果后，先后取前后 16 位数据，然后经过了 s 方法的处理，最后返回的 <code>s(s(u, e), c)</code> 应该才是正确的 key，这里的重点在于 e 的值，上面有个方法，取了当前时间+随机值，经过 SHA-256 加密，再取前 16 位。</p><p>这里可以思考一下，这个 e 的值是不固定的，那么最后的 key 应该也是不固定的，同一个 TS 对应有无数个 key，我反正是没见过，不信的话尝试就用那个方法生成 e，你会发现最终的 key 是错误的。</p><p>仔细看一下，发送 post 请求对 h 值赋值的地方：<code>r.append(&quot;h&quot;, n(e.buffer))</code>，n 方法是转 16 进制，那么我们直接将 h 值倒推，从16进制转为10进制，这才是正确的 e 的值！然后 l 的值是 <code>/api/drm/</code> 请求返回的 32 位 16 进制数据转为 10 进制，剩下的就好说了，直接改写一下 JS 代码拿到正确的 key：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s</span>(<span class="hljs-params">t, e</span>) </span>&#123;    <span class="hljs-keyword">let</span> r = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(t.length);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; t.length; i++)        r[i] = t[i] ^ e[i];    <span class="hljs-keyword">return</span> r&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getKey</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-comment">// /api/drm/ 请求表单的 h 值，16进制数据</span>    <span class="hljs-keyword">const</span> h = [<span class="hljs-string">&quot;7b&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;31&quot;</span>, <span class="hljs-string">&quot;1e&quot;</span>, <span class="hljs-string">&quot;6e&quot;</span>, <span class="hljs-string">&quot;31&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>, <span class="hljs-string">&quot;f0&quot;</span>, <span class="hljs-string">&quot;68&quot;</span>, <span class="hljs-string">&quot;d9&quot;</span>, <span class="hljs-string">&quot;ed&quot;</span>, <span class="hljs-string">&quot;e1&quot;</span>, <span class="hljs-string">&quot;04&quot;</span>, <span class="hljs-string">&quot;75&quot;</span>, <span class="hljs-string">&quot;a8&quot;</span>];    <span class="hljs-comment">// /api/drm/ 请求返回的32位16进制数据</span>    <span class="hljs-keyword">const</span> drm = [<span class="hljs-string">&quot;08&quot;</span>, <span class="hljs-string">&quot;A5&quot;</span>, <span class="hljs-string">&quot;E6&quot;</span>, <span class="hljs-string">&quot;C2&quot;</span>, <span class="hljs-string">&quot;C2&quot;</span>, <span class="hljs-string">&quot;61&quot;</span>, <span class="hljs-string">&quot;A8&quot;</span>, <span class="hljs-string">&quot;AC&quot;</span>, <span class="hljs-string">&quot;B4&quot;</span>, <span class="hljs-string">&quot;D7&quot;</span>, <span class="hljs-string">&quot;9C&quot;</span>, <span class="hljs-string">&quot;49&quot;</span>, <span class="hljs-string">&quot;AF&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>, <span class="hljs-string">&quot;0A&quot;</span>, <span class="hljs-string">&quot;3A&quot;</span>, <span class="hljs-string">&quot;DA&quot;</span>, <span class="hljs-string">&quot;4E&quot;</span>, <span class="hljs-string">&quot;5C&quot;</span>, <span class="hljs-string">&quot;EA&quot;</span>, <span class="hljs-string">&quot;E1&quot;</span>, <span class="hljs-string">&quot;6F&quot;</span>, <span class="hljs-string">&quot;ED&quot;</span>, <span class="hljs-string">&quot;46&quot;</span>, <span class="hljs-string">&quot;EB&quot;</span>, <span class="hljs-string">&quot;6F&quot;</span>, <span class="hljs-string">&quot;49&quot;</span>, <span class="hljs-string">&quot;8C&quot;</span>, <span class="hljs-string">&quot;9B&quot;</span>, <span class="hljs-string">&quot;63&quot;</span>, <span class="hljs-string">&quot;D5&quot;</span>, <span class="hljs-string">&quot;3B&quot;</span>]    <span class="hljs-comment">// 转换为10进制数据，为 e 和 l 赋值</span>    <span class="hljs-keyword">const</span> e = [];    <span class="hljs-keyword">const</span> l = [];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;h.length; i++)    &#123;        e.push(<span class="hljs-built_in">parseInt</span>(h[i],<span class="hljs-number">16</span>))    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;drm.length; i++)    &#123;        l.push(<span class="hljs-built_in">parseInt</span>(drm[i],<span class="hljs-number">16</span>))    &#125;    <span class="hljs-keyword">const</span> u = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(l.slice(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>));    <span class="hljs-keyword">const</span> c = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(l.slice(<span class="hljs-number">16</span>, <span class="hljs-number">32</span>));    <span class="hljs-keyword">const</span> keyArray = s(s(u, e), c);    <span class="hljs-keyword">const</span> keyHex = <span class="hljs-keyword">new</span> Buffer.from(keyArray).toString(<span class="hljs-string">&#x27;hex&#x27;</span>);    <span class="hljs-keyword">const</span> keyBase64 = <span class="hljs-keyword">new</span> Buffer.from(keyArray).toString(<span class="hljs-string">&#x27;base64&#x27;</span>);    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;keyArray: &quot;</span>, keyArray)    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;keyHex: &quot;</span>, keyHex)    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;keyBase64: &quot;</span>, keyBase64)&#125;getKey()<span class="hljs-comment">// 输出</span><span class="hljs-comment">// keyArray:  Uint8Array(16) [</span><span class="hljs-comment">//   169, 251, 139,  54,  77,</span><span class="hljs-comment">//    63,  74, 231, 175, 208,</span><span class="hljs-comment">//    12,  40, 213, 113, 170,</span><span class="hljs-comment">//   169</span><span class="hljs-comment">// ]</span><span class="hljs-comment">// keyHex:  a9fb8b364d3f4ae7afd00c28d571aaa9</span><span class="hljs-comment">// keyBase64:  qfuLNk0/Suev0Awo1XGqqQ==</span></code></pre><h2><span id="ts-jie-mi-he-bing-zhuan-huan">TS 解密合并转换</span></h2><p>通过 JS 逆向我们拿到了 16进制和 base64 形式的  key，不管什么形式都可以拿来解密，这里介绍两种对 TS 媒体流解密、合并、转换的方法。</p><p>第一种方法是使用 FFmpeg 工具，FFmpeg 是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。官网地址：<a href="https://ffmpeg.org/">https://ffmpeg.org/</a> ，下载编译好的程序，将 bin 目录添加到环境变量即可。</p><p>首先我们要把 m3u8 文件和 ts 媒体流保存到同一个文件夹，由于是虚假的 Host，所以不能直接浏览器访问保存，可以直接在 Fiddler 里，右键，save - response - response body，保存到本地，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/046/06.png" alt="06.png"></p><p>然后就是保存密钥文件，这里要求密钥文件必须是16进制的数据，如果你直接将 key 以字符串形式保存的话，解密也是失败的，编辑 16 进制文件有专门的工具，比如 HxD、010 editor、winhex 等，以 HxD 为例，新建文件，写入我们前面通过 JS 逆向得到的 key 的 16 进制数据，存为 .key 文件，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/046/07.png" alt="07.png"></p><p>然后修改 m3u8 文件里 key 的地址、名称，建议将 key、m3u8、ts 文件都放同一个文件夹，这样 m3u8 文件里就不用添加资源路径了，不容易出错。</p><p><img src="https://cdn.itbob.cn/img/article/046/08.png" alt="08.png"></p><p>然后在当前文件夹，打开命令行输入命令：<code>ffmpeg -allowed_extensions ALL -i live.m3u8 -c copy live.mp4</code>，即可自动解密 ts，并合并转换为 .mp4 格式：</p><p><img src="https://cdn.itbob.cn/img/article/046/09.png" alt="09.png"></p><p><img src="https://cdn.itbob.cn/img/article/046/10.png" alt="10.png"></p><p>第二种方法就是使用大佬写的第三方小工具，这里推荐吾爱大佬逍遥一仙写的 M3U8 批量下载器，下载地址、使用方法见原贴：<a href="https://www.52pojie.cn/thread-1374045-1-1.html">https://www.52pojie.cn/thread-1374045-1-1.html</a></p><p>我们可以直接拖入处理好的 M3U8 文件，自动处理：</p><p><img src="https://cdn.itbob.cn/img/article/046/11.png" alt="11.png"></p><p>也可以选择其他 - 工具 - 合并助手，添加所有 TS 文件，输入 key 后自动处理：</p><p><img src="https://cdn.itbob.cn/img/article/046/12.png" alt="12.png"></p><p>处理完毕后的 mp4 文件默认在软件目录的 output 文件夹里面，解密后是一段动画，往后看会找到 flag：<code>flag&#123;like_sub_52tube&#125;</code> 为正确答案。</p><p><img src="https://cdn.itbob.cn/img/article/046/13.png" alt="13.png"></p><p><img src="https://cdn.itbob.cn/img/article/046/14.png" alt="14.png"></p><p><img src="https://cdn.itbob.cn/img/article/046/15.png" alt="15.png"></p>]]></content>
      
      
      <categories>
          
          <category> JS 逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS 逆向实战 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF&amp;爬虫：掌握这些特征，一秒识别密文加密方式</title>
      <link href="/article/045/"/>
      <url>/article/045/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/encryption_algorithm.png" alt="encryption_algorithm"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#qian-yan">前言</a></li><li><a href="#bian-ma-xi-lie">编码系列</a><ul><li><a href="#base-xi-lie-bian-ma">Base 系列编码</a></li><li><a href="#unicode-bian-ma">Unicode 编码</a></li><li><a href="#escape-bian-ma">Escape 编码</a></li><li><a href="#url-hex-bian-ma">URL / Hex 编码</a></li></ul></li><li><a href="#jia-mi-suan-fa">加密算法</a><ul><li><a href="#md5">MD5</a></li><li><a href="#sha-xi-lie">SHA 系列</a></li><li><a href="#hmac-xi-lie">HMAC 系列</a></li><li><a href="#rsa">RSA</a></li><li><a href="#aes-des-3des-rc4-rabbit-deng">AES、DES、3DES、RC4、Rabbit 等</a></li><li><a href="#sm-xi-lie">SM 系列</a></li></ul></li><li><a href="#hun-yao-xi-lie">混淆系列</a><ul><li><a href="#obfuscator">Obfuscator</a></li><li><a href="#jjencode">JJEncode</a></li><li><a href="#aaencode">AAEncode</a></li><li><a href="#jsfuck">JSFuck</a></li><li><a href="#jother">Jother</a></li><li><a href="#brainfuck">Brainfuck</a></li><li><a href="#ook">Ook!</a></li><li><a href="#trivial-brainfuck-substitution">Trivial brainfuck substitution</a></li></ul></li><li><a href="#qi-ta">其他</a><ul><li><a href="#kai-sa-mi-ma">恺撒密码</a></li><li><a href="#zha-lan-mi-ma">栅栏密码</a></li><li><a href="#zhu-quan-mi-ma">猪圈密码</a></li><li><a href="#mo-si-mi-ma">摩斯密码</a></li><li><a href="#pei-gen-mi-ma">培根密码</a></li><li><a href="#wei-ji-ni-ya-mi-ma">维吉尼亚密码</a></li><li><a href="#yu-fo-lun-shan">与佛论禅</a></li><li><a href="#dang-pu-mi-ma">当铺密码</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="qian-yan">前言</span></h2><p>爬虫工程师在做加密参数逆向的时候，经常会遇到各种各样的加密算法、编码、混淆，每个算法都有其对应的特征，对于一些较小的网站，往往直接引用这些官方算法，没有进行魔改等其他操作，这种情况下，如果我们能熟悉常见算法的特征，通过密文就能猜测出使用的哪种算法、编码、混淆，将会大大提高工作效率！在 CTF 中通常也会有密码类的题目，掌握一些常见密文特征也是 CTFer 们必备的技能！</p><p>本文将介绍以下编码和加密算法的特征：</p><ul><li>编码：Base 系列、Unicode、Escape、URL、Hex；</li><li>算法：MD5、SHA 系列、HMAC 系列、RSA、AES、DES、3DES、RC4、Rabbit、SM 系列；</li><li>混淆：Obfuscator、JJEncode、AAEncode、JSFuck、Jother、Brainfuck、Ook!、Trivial brainfuck substitution；</li><li>其他：恺撒密码、栅栏密码、猪圈密码、摩斯密码、培根密码、维吉尼亚密码、与佛论禅、当铺密码。</li></ul><p>PS：常见加密算法原理以及在 Python 和 JavaScript 中的实现方法可参见以前的文章：<a href="https://www.itbob.cn/article/039/">爬虫常见加密解密算法总结</a></p><h2><span id="bian-ma-xi-lie">编码系列</span></h2><h3><span id="base-xi-lie-bian-ma">Base 系列编码</span></h3><p>Base64 是我们最常见的编码，除此之外，其实还有 Base16、Base32、Base58、Base85、Base100 等，他们之间最明显的区别就是使用了不同数量的可打印字符对任意字节数据进行编码，比如 Base64 使用了64个可打印字符（A-Z、a-z、0-9、+、/），Base16 使用了16个可打印字符（A-F、0-9），这里主要讲怎么快速识别，其具体原理可自行百度，Base 系列主要特征如下：</p><ul><li>Base16：结尾没有等号，数字要多于字母；</li><li>Base32：字母要多于数字，明文数量超过10个，结尾可能会有很多等号；</li><li>Base58：结尾没有等号，字母要多于数字；</li><li>Base64：一般情况下结尾都会有1个或者2个等号，明文很少的时候可能没有；</li><li>Base85：等号一般出现在字符串中间，含有一些奇怪的字符；</li><li>Base100：密文由 Emoji 表情组成。</li></ul><p>示例：</p><table><thead><tr><th style="text-align:left">编码类型</th><th style="text-align:left">示例一</th><th>示例二</th></tr></thead><tbody><tr><td style="text-align:left">明文</td><td style="text-align:left">01234567890</td><td>administrators</td></tr><tr><td style="text-align:left">Base16</td><td style="text-align:left"><code>3031323334353637383930</code></td><td><code>61646D696E6973747261746F7273</code></td></tr><tr><td style="text-align:left">Base32</td><td style="text-align:left"><code>GAYTEMZUGU3DOOBZGA======</code></td><td><code>MFSG22LONFZXI4TBORXXE4Y=</code></td></tr><tr><td style="text-align:left">Base58</td><td style="text-align:left"><code>cX8j8pvGzppMKVb</code></td><td><code>BNF5dFLUTN5XwM1yLoF</code></td></tr><tr><td style="text-align:left">Base64</td><td style="text-align:left"><code>MDEyMzQ1Njc4OTA=</code></td><td><code>YWRtaW5pc3RyYXRvcnM=</code></td></tr><tr><td style="text-align:left">Base85</td><td style="text-align:left"><code>0JP==1c70M3&amp;rY</code></td><td><code>@:X4hDJ=06Eaa'.EcV</code></td></tr><tr><td style="text-align:left">Base100</td><td style="text-align:left"><code>🐧🐨🐩🐪🐫🐬🐭🐮🐯🐰🐧</code></td><td><code>👘👛👤👠👥👠👪👫👩👘👫👦👩👪</code></td></tr></tbody></table><h3><span id="unicode-bian-ma">Unicode 编码</span></h3><p>Unicode 又称为统一码、万国码、单一码，是一种在计算机上使用的字符编码。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。其主要特征如下：</p><ul><li>以 <code>\u</code>、<code>&amp;#</code> 或 <code>&amp;#x</code> 开头，后面是数字加字母组合</li></ul><p>PS：<code>\u</code> 开头和 <code>&amp;#x</code> 开头是一样的，都是16进制 Unicode 字符的不同写法，<code>&amp;#</code> 则是 Unicode 字符10进制的写法，此外，<code>&amp;#</code> 和 <code>&amp;#x</code> 开头的，也称为 HTML 字符实体转换，字符实体是用一个编号写入 HTML 代码中来代替一个字符，在 HTML 中，某些字符是预留的，如果希望正确地显示预留字符，就必须在 HTML 源代码中使用字符实体。</p><table><thead><tr><th>编码类型</th><th>示例一</th><th>示例二</th></tr></thead><tbody><tr><td>明文</td><td>12345</td><td>admin</td></tr><tr><td>Unicode</td><td><code>\u0031\u0032\u0033\u0034\u0035</code></td><td><code>\u0061\u0064\u006d\u0069\u006e</code></td></tr></tbody></table><h3><span id="escape-bian-ma">Escape 编码</span></h3><p>Escape 编码又叫 %u 编码，Escape 编码就是字符对应 UTF-16BE 表示方式前面加 %u，Escape 不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： <code>* @ - _ + . / </code>，其他所有的字符都会被转义序列替换。其主要特征如下：</p><ul><li>以 <code>%u</code> 开头，后面是数字加字母组合</li></ul><table><thead><tr><th>编码类型</th><th>示例一</th><th>示例二</th></tr></thead><tbody><tr><td>明文</td><td>爬虫</td><td>我爱Python</td></tr><tr><td>Escape</td><td><code>%u722C%u866B</code></td><td><code>%u6211%u7231Python</code></td></tr></tbody></table><h3><span id="url-hex-bian-ma">URL / Hex 编码</span></h3><p>URL 和 Hex 编码的结果是一样的，不同的是当你用 URL 编码网址时是不会把 <code>http</code>、<code>https</code> 关键字和 <code>/</code>、<code>?</code>、<code>&amp;</code>、<code>=</code> 等连接符进行编码的，而 Hex 编码则全部转化了，其主要特征如下：</p><ul><li>以 <code>%</code> 开头，后面是数字加字母组合</li></ul><table><thead><tr><th>编码类型</th><th>示例</th></tr></thead><tbody><tr><td>明文</td><td><a href="https://www.kuaidaili.com/">https://www.kuaidaili.com/</a></td></tr><tr><td>Unicode</td><td><code>https://%77%77%77%2E%6B%75%61%69%64%61%69%6C%69%2E%63%6F%6D/</code></td></tr><tr><td>Hex</td><td><code>%68%74%74%70%73%3a%2f%2f%77%77%77%2e%6b%75%61%69%64%61%69%6c%69%2e%63%6f%6d%2f</code></td></tr></tbody></table><h2><span id="jia-mi-suan-fa">加密算法</span></h2><h3><span id="md5">MD5</span></h3><p>MD5 实质是一种消息摘要算法，一个数据的 MD5 值是唯一的，同一个数据不可能计算出多个不同的 MD5 值，但是，不同数据计算出来的 MD5 值是有可能一样的，知道一个 MD5 值，理论上是无法还原出它的原始数据的，MD5 是最容易辨别的，主要特征如下：</p><ul><li>密文一般为 16 位或者 32 位，其中 16 位是取的 32 位第 9~25 位的值；</li><li>组成方式为字母（a-f）和数字（0-9）混合，字母可以全部是大写或者小写。</li></ul><p>除了通过密文特征来判断以外，我们还可以搜索源代码，标准 MD5 的源码里是包含了一些特定的值的，没有这些特定值，就无法实现 MD5：</p><ul><li><code>0123456789ABCDEF</code>、<code>0123456789abcdef</code></li><li><code>1732584193</code>、<code>-271733879</code>、<code>-1732584194</code>、<code>271733878</code></li></ul><p>PS：某些特殊情况下，密文的长度也有可能不止 16 位或者 32 位，有可能是在官方算法上有一些魔改，通常也是在 16 位的基础上，左右填充了一些随机字符串。</p><p>示例：</p><table><thead><tr><th>编码类型</th><th>示例一</th><th>示例二</th></tr></thead><tbody><tr><td>明文</td><td>123456</td><td>admin</td></tr><tr><td>MD5（16位小写）</td><td><code>49ba59abbe56e057</code></td><td><code>7a57a5a743894a0e</code></td></tr><tr><td>MD5（16位大写）</td><td><code>49BA59ABBE56E057</code></td><td><code>7A57A5A743894A0E</code></td></tr><tr><td>MD5（32位小写）</td><td><code>e10adc3949ba59abbe56e057f20f883e</code></td><td><code>21232f297a57a5a743894a0e4a801fc3</code></td></tr><tr><td>MD5（32位大写）</td><td><code>E10ADC3949BA59ABBE56E057F20F883E</code></td><td><code>21232F297A57A5A743894A0E4A801FC3</code></td></tr></tbody></table><h3><span id="sha-xi-lie">SHA 系列</span></h3><p>SHA 是比 MD5 更安全一点的摘要算法，SHA 通常指 SHA 家族算法，分别是 SHA-1、SHA-2、SHA-3，其中 SHA-2 是 SHA-224、SHA-256、SHA-384、SHA-512 的并称，SHA-3 是 SHA3-224、SHA3-256、SHA3-384、SHA3-512、SHAKE128、SHAKE256 的并称，其名字的后缀的数字就代表了结果的大小（bit），注意，SHAKE 算法结果的大小并不是固定的，其他算法特征如下：</p><ul><li>SHA-1：字母（a-f）和数字（0-9）混合，固定位数 40 位；</li><li>SHA-224/SHA3-224：字母（a-f）和数字（0-9）混合，固定位数 56 位；</li><li>SHA-256/SHA3-256：字母（a-f）和数字（0-9）混合，固定位数 64 位；</li><li>SHA-384/SHA3-384：字母（a-f）和数字（0-9）混合，固定位数 96 位；</li><li>SHA-512/SHA3-512：字母（a-f）和数字（0-9）混合，固定位数 128 位。</li></ul><p>示例：</p><table><thead><tr><th>编码类型</th><th>示例</th></tr></thead><tbody><tr><td>明文</td><td>123456</td></tr><tr><td>SHA-1</td><td><code>7c4a8d09ca3762af61e59520943dc26494f8941b</code></td></tr><tr><td>SHA-256</td><td><code>8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</code></td></tr><tr><td>SHA3-256</td><td><code>c888c9ce9e098d5864d3ded6ebcc140a12142263bace3a23a36f9905f12bd64a</code></td></tr></tbody></table><h3><span id="hmac-xi-lie">HMAC 系列</span></h3><p>HMAC 这种算法就是在 MD5、SHA 两种加密的基础上引入了秘钥，其密文也和 MD5、SHA 类似，密文的长度和使用的 MD5、SHA 算法对应密文的长度是一样的。特征如下：</p><ul><li>HMAC-MD5：字母（a-f）和数字（0-9）混合，位数一般为 32 位；</li><li>HMAC-SHA-1：字母（a-f）和数字（0-9）混合，固定位数 40 位；</li><li>HMAC-SHA-224 / HMAC-SHA3-224：字母（a-f）和数字（0-9）混合，固定位数 56 位；</li><li>HMAC-SHA-256 / HMAC-SHA3-256：字母（a-f）和数字（0-9）混合，固定位数 64 位；</li><li>HMAC-SHA-384 / HMAC-SHA3-384：字母（a-f）和数字（0-9）混合，固定位数 96 位；</li><li>HMAC-SHA-512 / HMAC-SHA3-512：字母（a-f）和数字（0-9）混合，固定位数 128 位。</li></ul><p>HMAC 和 SHA、MD5 的密文都很像，当无法确定是否为 HMAC 时，可以通过其名称搜索到加密方法，如果传入了密钥 key，说明就是 HMAC，当然你也可以直接当做是 SHA 或 MD5 来解，解密失败时就得考虑是否有密钥，是否为 HMAC 了，在 JS 中，通常一个 HMAC 加密方法是这样写的：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HmacSHA1Encrypt</span>(<span class="hljs-params">word, key</span>) </span>&#123;    <span class="hljs-keyword">return</span> CryptoJS.HmacSHA1(word, key).toString();&#125;</code></pre><p>示例（密钥 123456abcde）：</p><table><thead><tr><th>编码类型</th><th>示例</th></tr></thead><tbody><tr><td>明文</td><td>123456</td></tr><tr><td>HMAC-MD5</td><td><code>432bb95bb00005ddce4a1c757488ed95</code></td></tr><tr><td>HMAC-SHA-1</td><td><code>37a04076b7736c44460d330ee0d00014428b175e</code></td></tr><tr><td>HMAC-SHA-256</td><td><code>50cb1345366df11140fb91b43caaf69627e3f5529705ddf6b0d0cae67986e585</code></td></tr><tr><td>HMAC-SHA3-256</td><td><code>b808ed9f66436e89fba527a01d1d6044318fea8599d9f39bfb6bec4843964bf3</code></td></tr></tbody></table><h3><span id="rsa">RSA</span></h3><p>RSA 加密算法是一种非对称加密算法，通过公钥加密结果，必须私钥解密。 同样私钥加密结果，公钥可以解密，应用非常广泛，在网站中通常使用 JSEncrypt 库来实现，其最大的特征就是有一个设置公钥的过程，我们可以通过以下方法来快速初步判断是否为 RSA 算法：</p><ul><li><p>搜索关键词 <code>new JSEncrypt()</code>，<code>JSEncrypt</code> 等，一般会使用 JSEncrypt 库，会有 new 一个实例对象的操作；</p></li><li><p>搜索关键词 <code>setPublicKey</code>、<code>setKey</code>、<code>setPrivateKey</code>、<code>getPublicKey</code> 等，一般实现的代码里都含有设置密钥的过程；</p></li><li><p>RSA 的私钥、公钥、明文、密文长度也有一定对应关系，也可以从这方面初步判断：</p><table><thead><tr><th style="text-align:left">私钥长度（Base64）</th><th style="text-align:left">公钥长度（Base64）</th><th style="text-align:left">明文长度</th><th style="text-align:left">密文长度</th></tr></thead><tbody><tr><td style="text-align:left">428</td><td style="text-align:left">128</td><td style="text-align:left">1~53</td><td style="text-align:left">88</td></tr><tr><td style="text-align:left">812</td><td style="text-align:left">216</td><td style="text-align:left">1~117</td><td style="text-align:left">172</td></tr><tr><td style="text-align:left">1588</td><td style="text-align:left">392</td><td style="text-align:left">1~245</td><td style="text-align:left">344</td></tr></tbody></table></li></ul><h3><span id="aes-des-3des-rc4-rabbit-deng">AES、DES、3DES、RC4、Rabbit 等</span></h3><p>AES、DES、3DES、RC4、Rabbit 等加密算法的密文通常没有固定的长度，他们通常使用 crypto-js 来实现，比如 AES 加解密示例如下：</p><pre><code class="hljs javascript">CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;crypto-js&quot;</span>)<span class="hljs-keyword">var</span> key = CryptoJS.enc.Utf8.parse(<span class="hljs-string">&quot;0123456789abcdef&quot;</span>);<span class="hljs-keyword">var</span> iv = CryptoJS.enc.Utf8.parse(<span class="hljs-string">&quot;0123456789abcdef&quot;</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AESEncrypt</span>(<span class="hljs-params">word</span>) </span>&#123;    <span class="hljs-keyword">var</span> srcs = CryptoJS.enc.Utf8.parse(word);    <span class="hljs-keyword">var</span> encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;        <span class="hljs-attr">iv</span>: iv,        <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,        <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7    &#125;);    <span class="hljs-keyword">return</span> encrypted.toString();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AESDecrypt</span>(<span class="hljs-params">word</span>) </span>&#123;    <span class="hljs-keyword">var</span> srcs = word;    <span class="hljs-keyword">var</span> decrypt = CryptoJS.AES.decrypt(srcs, key, &#123;        <span class="hljs-attr">iv</span>: iv,        <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,        <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7    &#125;);    <span class="hljs-keyword">return</span> decrypt.toString(CryptoJS.enc.Utf8);&#125;<span class="hljs-built_in">console</span>.log(AESEncrypt(<span class="hljs-string">&quot;ITBOB&quot;</span>))<span class="hljs-built_in">console</span>.log(AESDecrypt(<span class="hljs-string">&quot;r78lMXzImDRcDx9ADakCmg==&quot;</span>))</code></pre><p>在 crypto-js 中，也有一些特定的关键字，我们可以通过搜索这些关键字来快速定位到 crypto-js：</p><ul><li><p><code>CryptoJS</code>、<code>crypto-js</code>、<code>iv</code>、<code>mode</code>、<code>padding</code>、<code>createEncryptor</code>、<code>createDecryptor</code></p></li><li><p><code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</code>、<code>0xffffffff</code>、<code>0xffff</code></p></li></ul><p>定位到 CryptoJS 后，观察加密方法，比如 AES 就是 <code>CryptoJS.AES.encrypt</code>，DES 就是 <code>CryptoJS.DES.encrypt</code>，3DES 就是 <code>CryptoJS.TripleDES.encrypt</code>，注意他的 iv、mode、padding，拿下来就可以本地复现了。</p><h3><span id="sm-xi-lie">SM 系列</span></h3><p>SM 代表商密，即商业密码，是我国发布的一系列国产加密算法，SM 系列包括：SM1、SM2、SM3 、SM4、SM7、SM9，其中 SM1 和 SM7 的算法不公开，SM 系列算法在我国一些 gov 网站上有应用，有关国产加密算法前期文章有介绍：<a href="https://www.itbob.cn/article/041/">《认识 SM1/SM2/SM3/SM4/SM7/SM9/ZUC 国密算法》</a>，本文不再赘述。</p><p>在 SM 的 JavaScript 代码中一般会存在以下关键字，可以通过搜索关键字定位：</p><ul><li><code>SM2</code>、<code>SM3</code>、<code>SM4</code></li><li><code>FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF</code></li><li><code>FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC</code></li><li><code>28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93</code></li><li><code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</code></li><li><code>getPublicKeyFromPrivateKey</code>、<code>doEncrypt</code>、<code>doDecrypt</code>、<code>doSignature</code></li></ul><h2><span id="hun-yao-xi-lie">混淆系列</span></h2><h3><span id="obfuscator">Obfuscator</span></h3><p>Obfuscator 就是混淆的意思，简称 OB 混淆，实战可参考以前的文章：<a href="https://itrhx.blog.csdn.net/article/details/121719631">【JS 逆向百例】W店UA，OB反混淆，抓包替换CORS跨域错误分析</a>，OB 混淆具有以下特征：</p><ul><li>一般由一个大数组或者含有大数组的函数、一个自执行函数、解密函数和加密后的函数四部分组成；</li><li>函数名和变量名通常以 <code>_0x</code> 或者 <code>0x</code> 开头，后接 1~6 位数字或字母组合；</li><li>自执行函数，进行移位操作，有明显的 push、shift 关键字；</li></ul><p>一段正常的代码如下：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hi</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello World!&quot;</span>);&#125;hi();</code></pre><p>经过 OB 混淆后的结果：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_0x3f26</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> _0x2dad75 = [<span class="hljs-string">&#x27;5881925kTCKCP&#x27;</span>, <span class="hljs-string">&#x27;Hello\x20World!&#x27;</span>, <span class="hljs-string">&#x27;600mDvfGa&#x27;</span>, <span class="hljs-string">&#x27;699564jYNxbu&#x27;</span>, <span class="hljs-string">&#x27;1083271cEvuvT&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;18sKjcFY&#x27;</span>, <span class="hljs-string">&#x27;214857eMgFSU&#x27;</span>, <span class="hljs-string">&#x27;77856FUKcuE&#x27;</span>, <span class="hljs-string">&#x27;736425OzpdFI&#x27;</span>, <span class="hljs-string">&#x27;737172JqcGMg&#x27;</span>];    _0x3f26 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">return</span> _0x2dad75;    &#125;;    <span class="hljs-keyword">return</span> _0x3f26();&#125;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_0x307c88, _0x4f8223</span>) </span>&#123;    <span class="hljs-keyword">var</span> _0x32807d = _0x1fe9, _0x330c58 = _0x307c88();    <span class="hljs-keyword">while</span> (!![]) &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">var</span> _0x5d6354 = <span class="hljs-built_in">parseInt</span>(_0x32807d(<span class="hljs-number">0x6f</span>)) / <span class="hljs-number">0x1</span> + <span class="hljs-built_in">parseInt</span>(_0x32807d(<span class="hljs-number">0x6e</span>)) / <span class="hljs-number">0x2</span> + <span class="hljs-built_in">parseInt</span>(_0x32807d(<span class="hljs-number">0x70</span>)) / <span class="hljs-number">0x3</span> + -<span class="hljs-built_in">parseInt</span>(_0x32807d(<span class="hljs-number">0x69</span>)) / <span class="hljs-number">0x4</span> + <span class="hljs-built_in">parseInt</span>(_0x32807d(<span class="hljs-number">0x71</span>)) / <span class="hljs-number">0x5</span> + <span class="hljs-built_in">parseInt</span>(_0x32807d(<span class="hljs-number">0x6c</span>)) / <span class="hljs-number">0x6</span> * (<span class="hljs-built_in">parseInt</span>(_0x32807d(<span class="hljs-number">0x6a</span>)) / <span class="hljs-number">0x7</span>) + -<span class="hljs-built_in">parseInt</span>(_0x32807d(<span class="hljs-number">0x73</span>)) / <span class="hljs-number">0x8</span> * (<span class="hljs-built_in">parseInt</span>(_0x32807d(<span class="hljs-number">0x6d</span>)) / <span class="hljs-number">0x9</span>);            <span class="hljs-keyword">if</span> (_0x5d6354 === _0x4f8223) <span class="hljs-keyword">break</span>; <span class="hljs-keyword">else</span> _0x330c58[<span class="hljs-string">&#x27;push&#x27;</span>](_0x330c58[<span class="hljs-string">&#x27;shift&#x27;</span>]());        &#125; <span class="hljs-keyword">catch</span> (_0x3f18e4) &#123;            _0x330c58[<span class="hljs-string">&#x27;push&#x27;</span>](_0x330c58[<span class="hljs-string">&#x27;shift&#x27;</span>]());        &#125;    &#125;&#125;(_0x3f26, <span class="hljs-number">0xaa023</span>));<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_0x1fe9</span>(<span class="hljs-params">_0xa907e7, _0x410a46</span>) </span>&#123;    <span class="hljs-keyword">var</span> _0x3f261f = _0x3f26();    <span class="hljs-keyword">return</span> _0x1fe9 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_0x1fe950, _0x5a08da</span>) </span>&#123;        _0x1fe950 = _0x1fe950 - <span class="hljs-number">0x69</span>;        <span class="hljs-keyword">var</span> _0x82a06 = _0x3f261f[_0x1fe950];        <span class="hljs-keyword">return</span> _0x82a06;    &#125;, _0x1fe9(_0xa907e7, _0x410a46);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hi</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> _0x12a222 = _0x1fe9;    <span class="hljs-built_in">console</span>[_0x12a222(<span class="hljs-number">0x6b</span>)](_0x12a222(<span class="hljs-number">0x72</span>));&#125;hi();</code></pre><h3><span id="jjencode">JJEncode</span></h3><p>JJEncode、AAEncode、JSFuck 都是同一个作者，实战可参考以前的文章：<a href="https://itrhx.blog.csdn.net/article/details/121920783">【JS 逆向百例】网洛者反爬练习平台第二题：JJEncode 加密</a>，JJEncode 具有以下特征：</p><ul><li>大量 <code>$</code>、<code>_</code> 符号，大量重复的自定义变量；</li><li>仅由 18 个符号组成：<code>[]()!+,\&quot;$.:;_&#123;&#125;~=</code></li></ul><p>正常的一段 JS 代码：</p><pre><code class="hljs javascript">alert(<span class="hljs-string">&quot;Hello, JavaScript&quot;</span> )</code></pre><p>经过 JJEncode 混淆（自定义变量名为 $）之后的代码：</p><pre><code class="hljs javascript">$=~[];$=&#123;<span class="hljs-attr">___</span>:++$,<span class="hljs-attr">$$$$</span>:(![]+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">__$</span>:++$,<span class="hljs-attr">$_$_</span>:(![]+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">_$_</span>:++$,<span class="hljs-attr">$_$$</span>:(&#123;&#125;+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">$$_$</span>:($[$]+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">_$$</span>:++$,<span class="hljs-attr">$$$_</span>:(!<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">$__</span>:++$,<span class="hljs-attr">$_$</span>:++$,<span class="hljs-attr">$$__</span>:(&#123;&#125;+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">$$_</span>:++$,<span class="hljs-attr">$$$</span>:++$,<span class="hljs-attr">$___</span>:++$,<span class="hljs-attr">$__$</span>:++$&#125;;$.$_=($.$_=$+<span class="hljs-string">&quot;&quot;</span>)[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+<span class="hljs-string">&quot;&quot;</span>)[$.__$])+((!$)+<span class="hljs-string">&quot;&quot;</span>)[$._$$]+($.__=$.$_[$.$$_])+($.$=(!<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;&quot;</span>)[$.__$])+($._=(!<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;&quot;</span>)[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;&quot;</span>)[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+<span class="hljs-string">&quot;\&quot;&quot;</span>+$.$_$_+(![]+<span class="hljs-string">&quot;&quot;</span>)[$._$_]+$.$$$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$$_+$._$_+$.__+<span class="hljs-string">&quot;(\\\&quot;\\&quot;</span>+$.__$+$.__$+$.___+$.$$$_+(![]+<span class="hljs-string">&quot;&quot;</span>)[$._$_]+(![]+<span class="hljs-string">&quot;&quot;</span>)[$._$_]+$._$+<span class="hljs-string">&quot;,\\&quot;</span>+$.$__+$.___+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.__$+$._$_+$.$_$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$$_+$.$$_+$.$_$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$._$_+$._$$+$.$$__+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$$_+$._$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$_$+$.__$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$$_+$.___+$.__+<span class="hljs-string">&quot;\\\&quot;\\&quot;</span>+$.$__+$.___+<span class="hljs-string">&quot;)&quot;</span>+<span class="hljs-string">&quot;\&quot;&quot;</span>)())();</code></pre><h3><span id="aaencode">AAEncode</span></h3><p>JJEncode、AAEncode、JSFuck 都是同一个作者，实战可参考以前的文章：<a href="https://itrhx.blog.csdn.net/article/details/121920864">【JS 逆向百例】网洛者反爬练习平台第三题：AAEncode 加密</a>，AAEncode 具有以下特征：</p><ul><li>仅由日式表情符号组成</li></ul><p>正常的一段 JS 代码：</p><pre><code class="hljs javascript">alert(<span class="hljs-string">&quot;Hello, JavaScript&quot;</span>)</code></pre><p>经过 AAEncode 混淆之后的代码：</p><pre><code class="hljs javascript">ﾟωﾟﾉ= <span class="hljs-regexp">/｀ｍ´）ﾉ ~┻━┻   /</span><span class="hljs-regexp">/*´∇｀*/</span> [<span class="hljs-string">&#x27;_&#x27;</span>]; o=(ﾟｰﾟ)  =_=<span class="hljs-number">3</span>; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: <span class="hljs-string">&#x27;_&#x27;</span> ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==<span class="hljs-number">3</span>) +<span class="hljs-string">&#x27;_&#x27;</span>) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ <span class="hljs-string">&#x27;_&#x27;</span>)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==<span class="hljs-number">3</span>) +<span class="hljs-string">&#x27;_&#x27;</span>)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==<span class="hljs-number">3</span>) +<span class="hljs-string">&#x27;_&#x27;</span>) [c^_^o];(ﾟДﾟ) [<span class="hljs-string">&#x27;c&#x27;</span>] = ((ﾟДﾟ)+<span class="hljs-string">&#x27;_&#x27;</span>) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [<span class="hljs-string">&#x27;o&#x27;</span>] = ((ﾟДﾟ)+<span class="hljs-string">&#x27;_&#x27;</span>) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [<span class="hljs-string">&#x27;c&#x27;</span>]+(ﾟДﾟ) [<span class="hljs-string">&#x27;o&#x27;</span>]+(ﾟωﾟﾉ +<span class="hljs-string">&#x27;_&#x27;</span>)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==<span class="hljs-number">3</span>) +<span class="hljs-string">&#x27;_&#x27;</span>) [ﾟｰﾟ] + ((ﾟДﾟ) +<span class="hljs-string">&#x27;_&#x27;</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==<span class="hljs-number">3</span>) +<span class="hljs-string">&#x27;_&#x27;</span>) [ﾟΘﾟ]+((ﾟｰﾟ==<span class="hljs-number">3</span>) +<span class="hljs-string">&#x27;_&#x27;</span>) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [<span class="hljs-string">&#x27;c&#x27;</span>]+((ﾟДﾟ)+<span class="hljs-string">&#x27;_&#x27;</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [<span class="hljs-string">&#x27;o&#x27;</span>]+((ﾟｰﾟ==<span class="hljs-number">3</span>) +<span class="hljs-string">&#x27;_&#x27;</span>) [ﾟΘﾟ];(ﾟДﾟ) [<span class="hljs-string">&#x27;_&#x27;</span>] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==<span class="hljs-number">3</span>) +<span class="hljs-string">&#x27;_&#x27;</span>) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+<span class="hljs-string">&#x27;_&#x27;</span>) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==<span class="hljs-number">3</span>) +<span class="hljs-string">&#x27;_&#x27;</span>) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==<span class="hljs-number">3</span>) +<span class="hljs-string">&#x27;_&#x27;</span>) [ﾟΘﾟ]+ (ﾟωﾟﾉ +<span class="hljs-string">&#x27;_&#x27;</span>) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=<span class="hljs-string">&#x27;\\&#x27;</span>; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +<span class="hljs-string">&#x27;_&#x27;</span>)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=<span class="hljs-string">&#x27;\&quot;&#x27;</span>;(ﾟДﾟ) [<span class="hljs-string">&#x27;_&#x27;</span>] ( (ﾟДﾟ) [<span class="hljs-string">&#x27;_&#x27;</span>] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟΘﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (<span class="hljs-string">&#x27;_&#x27;</span>);</code></pre><h3><span id="jsfuck">JSFuck</span></h3><p>JJEncode、AAEncode、JSFuck 都是同一个作者，实战可参考以前的文章：<a href="https://itrhx.blog.csdn.net/article/details/122057377">【JS 逆向百例】网洛者反爬练习平台第四题：JSFuck 加密</a>，JSFuck 具有以下特征：</p><ul><li>仅由 6 个符号组成：<code>[]()!+</code></li></ul><p>正常的一段 JS 代码：</p><pre><code class="hljs javascript">alert(<span class="hljs-number">1</span>)</code></pre><p>经过 JSFuck 混淆之后的代码类似于：</p><pre><code class="hljs javascript">[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]][([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(+(!+[]+!+[]+!+[]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]])[+!+[]+[+[]]]+([]+[])[([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]][([][[]]+[])[+!+[]]+(![]+[])[+!+[]]+((+[])[([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]])+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]])()((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]+[])[+!+[]+[!+[]+!+[]+!+[]]]+[+!+[]]+([+[]]+![]+[][(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]])[!+[]+!+[]+[+[]]])</code></pre><h3><span id="jother">Jother</span></h3><p>Jother 混淆和 JSFuck 有点儿类似，唯一的区别就是密文比 JSFuck 多了 <code>&#123;&#125;</code>，其解密方式和 JSFuck 是一样的，Jother 混淆现在不太常见了，也很难找到在线混淆之类的工具了，原作者有个在线页面也关闭了，不过仍然可以了解一下，Jother 混淆具有以下特征：</p><ul><li>仅由 8 个符号组成：<code>[]()!+&#123;&#125;</code></li></ul><p>正常的一段代码：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">anonymous</span>(<span class="hljs-params"></span></span><span class="hljs-params"><span class="hljs-function"></span>) </span>&#123;<span class="hljs-keyword">return</span> location&#125;</code></pre><p>经过 Jother 混淆之后的代码类似于：</p><pre><code class="hljs javascript">[][(![]+[])[!![]+!![]+!![]]+(&#123;&#125;+[])[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][(&#123;&#125;+[])[!![]+!![]+!![]+!![]+!![]]+(&#123;&#125;+[])[+!![]]+(&#123;&#125;[[]]+[])[+!![]]+(![]+[])[!![]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+(&#123;&#125;[[]]+[])[+[]]+(&#123;&#125;+[])[!![]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+(&#123;&#125;+[])[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+[]]+(&#123;&#125;[[]]+[])[+[]]+(!![]+[])[+!![]]+(&#123;&#125;[[]]+[])[+!![]]+(&#123;&#125;+[])[!![]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!![]+!![]]+(&#123;&#125;+[])[+!![]]+(&#123;&#125;+[])[!![]+!![]+!![]+!![]+!![]]+(![]+[])[+!![]]+(!![]+[])[+[]]+(&#123;&#125;[[]]+[])[!![]+!![]+!![]+!![]+!![]]+(&#123;&#125;+[])[+!![]]+(&#123;&#125;[[]]+[])[+!![]])()</code></pre><h3><span id="brainfuck">Brainfuck</span></h3><p>Brainfuck 实际上是一种极小化的计算机语言，又称为 BF 语言，该语言以其极简主义着称，仅包含八个简单的命令、一个数据指针和一个指令指针，这种语言在爬虫领域也可以是一种反爬手段，可以视为一种混淆方式，虽然不常见🤔，这里给一个在线体验的网址：<a href="https://copy.sh/brainfuck/text.html">https://copy.sh/brainfuck/text.html</a> ，感兴趣的同志可以深入研究一下，Brainfuck 具有以下特征：</p><ul><li>仅由 <code>&lt;&gt;+-.[]</code> 组成；</li><li>大量的 <code>+-</code> 符号。</li></ul><p>正常的一段代码：</p><pre><code class="hljs javascript">alert(<span class="hljs-string">&quot;Hello, Brainfuck&quot;</span>)</code></pre><p>经过 Brainfuck 混淆之后的代码类似于：</p><pre><code class="hljs javascript">--[-----&gt;+&lt;]&gt;-----.+++++++++++.-------.+++++++++++++.++.+[---&gt;+&lt;]&gt;+.------.++[-&gt;++&lt;]&gt;.-[-&gt;+++++&lt;]&gt;++.+++++++..+++.[-&gt;+++++&lt;]&gt;+.------------.+[-&gt;++&lt;]&gt;.---[-----&gt;+&lt;]&gt;-.+++[-&gt;+++&lt;]&gt;++.++++++++.+++++.--------.-[---&gt;+&lt;]&gt;--.+[-&gt;+++&lt;]&gt;+.++++++++.+[++&gt;---&lt;]&gt;.+++++++.</code></pre><h3><span id="ook">Ook!</span></h3><p>Ook! 和 Brainfuck 的原理都是类似的，只不过符号有差异，同样的，这种语言在爬虫领域也可以是一种反爬手段，可以视为一种混淆方式，虽然不常见🤔，在线体验的网址：<a href="https://www.splitbrain.org/services/ook">https://www.splitbrain.org/services/ook</a> ，Ook! 具有以下特征：</p><ul><li>完整 Ook!：仅由 3 种符号组成 <code>Ook.</code>、<code>Ook?</code>、<code>Ook!</code></li><li>Short Ook!：仅由 3 种符号组成 <code>.!?</code></li></ul><p>正常的一段代码：</p><pre><code class="hljs javascript">alert(<span class="hljs-string">&quot;Hello, Ook!&quot;</span>)</code></pre><p>经过 Ook! 混淆之后的代码类似于：</p><pre><code class="hljs javascript">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.</code></pre><h3><span id="trivial-brainfuck-substitution">Trivial brainfuck substitution</span></h3><p>Trivial brainfuck substitution 不是一种单一的编程语言，而是一大类编程语言，成员超过 20 个，前面提到的 Brainfuck、Ook! 都是其中的一员，在爬虫领域中，说实话这种稀奇古怪的混淆其实并不常见，但是在一些 CTF 中有可能会出现，作为爬虫工程师也可以了解了解😎，具体可以参考：<a href="https://esolangs.org/wiki/Trivial_brainfuck_substitution">https://esolangs.org/wiki/Trivial_brainfuck_substitution</a></p><h2><span id="qi-ta">其他</span></h2><h3><span id="kai-sa-mi-ma">恺撒密码</span></h3><p>恺撒密码（Caesar cipher）又称为恺撒加密、恺撒变换、变换加密，它是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是 3 的时候，所有的字母 A 将被替换成 D，B 变成 E，以此类推。这个加密方法是以罗马共和时期恺撒的名字命名的，当年恺撒曾用此方法与其将军们进行联系。</p><p>根据偏移量的不同，还存在若干特定的恺撒密码名称：偏移量为10：Avocat（A→K）；偏移量为13：ROT13；偏移量为-5：Cassis (K 6)；偏移量为-6：Cassette (K 7)</p><p>示例（偏移量 3）：</p><ul><li><p>明文字母表：ABCDEFGHIJKLMNOPQRSTUVWXYZ</p></li><li><p>密文字母表：DEFGHIJKLMNOPQRSTUVWXYZABC</p></li></ul><h3><span id="zha-lan-mi-ma">栅栏密码</span></h3><p>栅栏密码就是把要加密的明文分成 N 个一组，然后把每组的第 1 个字连起来，形成一段无规律的话。栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多，一般不超过 30 个。</p><p>示例：明文为 THE LONGEST DAY MUST HAVE AN END。加密时，把将要传递的信息中的字母交替排成上下两行：</p><p>T E O G S D Y U T A E N N</p><p>H L N E T A M S H V A E D</p><p>将下面一行字母排在上面一行的后边组合成密文：</p><p>TEOGSDYUTAENN HLNETAMSHVAED</p><p>栅栏密码还有一种变种，称为栅栏密码 W 型，它会先把明文类似 W 形状进行排列，然后再按栏目顺序 1-N，取每一栏的所有字符值，组成加密后密文，比如字符串 123456789，采用栏目数为 3 时，明文将采用如下排列：<br>1—5—9<br>-2-4-6-8-<br>–3—7–<br>取每一栏所有字符串，组成加密后密文：159246837</p><h3><span id="zhu-quan-mi-ma">猪圈密码</span></h3><p>猪圈密码也称为朱高密码、共济会暗号、共济会密码或共济会员密码，是一种以格子为基础的简单替代式密码。只能对字母加解密并且符号无法复制，粘贴后会直接显示明文，即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。曾经是美国内战时盟军使用的密码，目前仅在密码教学、各种竞赛中使用。</p><p><img src="https://cdn.itbob.cn/img/article/045/01.gif" alt="01.gif"></p><h3><span id="mo-si-mi-ma">摩斯密码</span></h3><p>摩斯密码（Morse code），又称为摩尔斯电码、摩斯电码，是一种时通时断的信号代码，这种信号代码通过不同的排列顺序来表达不同的英文字母、数字和标点符号等。</p><p>26个字母的摩斯密码表</p><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">摩斯码</th><th style="text-align:left">字符</th><th style="text-align:left">摩斯码</th><th>字符</th><th>摩斯码</th><th>字符</th><th>摩斯码</th></tr></thead><tbody><tr><td style="text-align:left">A</td><td style="text-align:left"><code>．━</code></td><td style="text-align:left">B</td><td style="text-align:left"><code>━ ．．．</code></td><td>C</td><td><code>━ ．━ ．</code></td><td>D</td><td><code>━ ．．</code></td></tr><tr><td style="text-align:left">E</td><td style="text-align:left"><code>．</code></td><td style="text-align:left">F</td><td style="text-align:left"><code>．．━ ．</code></td><td>G</td><td><code>━ ━ ．</code></td><td>H</td><td><code>．．．．</code></td></tr><tr><td style="text-align:left">I</td><td style="text-align:left"><code>．．</code></td><td style="text-align:left">J</td><td style="text-align:left"><code>．━ ━ ━</code></td><td>K</td><td><code>━ ．━</code></td><td>L</td><td><code>．━ ．．</code></td></tr><tr><td style="text-align:left">M</td><td style="text-align:left"><code>━ ━</code></td><td style="text-align:left">N</td><td style="text-align:left"><code>━ ．</code></td><td>O</td><td><code>━ ━ ━</code></td><td>P</td><td><code>．━ ━ ．</code></td></tr><tr><td style="text-align:left">Q</td><td style="text-align:left"><code>━ ━ ．━</code></td><td style="text-align:left">R</td><td style="text-align:left"><code>．━ ．</code></td><td>S</td><td><code>．．．</code></td><td>T</td><td><code>━</code></td></tr><tr><td style="text-align:left">U</td><td style="text-align:left"><code>．．━</code></td><td style="text-align:left">V</td><td style="text-align:left"><code>．．．━</code></td><td>W</td><td><code>．━ ━</code></td><td>X</td><td><code>━ ．．━</code></td></tr><tr><td style="text-align:left">Y</td><td style="text-align:left"><code>━ ．━ ━</code></td><td style="text-align:left">Z</td><td style="text-align:left"><code>━ ━ ．．</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>10个数字的摩斯密码表</p><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">摩斯码</th><th style="text-align:left">字符</th><th style="text-align:left">摩斯码</th><th>字符</th><th>摩斯码</th><th>字符</th><th>摩斯码</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left"><code>━ ━ ━ ━ ━</code></td><td style="text-align:left">1</td><td style="text-align:left"><code>．━ ━ ━ ━</code></td><td>2</td><td><code>．．━ ━ ━</code></td><td>3</td><td><code>．．．━ ━</code></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>．．．．━</code></td><td style="text-align:left">5</td><td style="text-align:left"><code>．．．．．</code></td><td>6</td><td><code>━ ．．．．</code></td><td>7</td><td><code>━ ━ ．．．</code></td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>━ ━ ━ ．．</code></td><td style="text-align:left">9</td><td style="text-align:left"><code>━ ━ ━ ━ ．</code></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>标点符号的摩斯密码表</p><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">摩斯码</th><th style="text-align:left">字符</th><th style="text-align:left">摩斯码</th><th>字符</th><th>摩斯码</th><th>字符</th><th>摩斯码</th></tr></thead><tbody><tr><td style="text-align:left">.</td><td style="text-align:left"><code>．━ ．━ ．━</code></td><td style="text-align:left">:</td><td style="text-align:left"><code>━ ━ ━ ．．．</code></td><td>,</td><td><code>━ ━ ．．━ ━</code></td><td>;</td><td><code>━ ．━ ．━ ．</code></td></tr><tr><td style="text-align:left">?</td><td style="text-align:left"><code>．．━ ━ ．．</code></td><td style="text-align:left">=</td><td style="text-align:left"><code>━ ．．．━</code></td><td>’</td><td><code>．━ ━ ━ ━ ．</code></td><td>/</td><td><code>━ ．．━ ．</code></td></tr><tr><td style="text-align:left">!</td><td style="text-align:left"><code>━ ．━ ．━ ━</code></td><td style="text-align:left">━</td><td style="text-align:left"><code>━ ．．．．━</code></td><td>_</td><td><code>．．━ ━ ．━</code></td><td>&quot;</td><td><code>．━ ．．━ ．</code></td></tr><tr><td style="text-align:left">(</td><td style="text-align:left"><code>━ ．━ ━ ．</code></td><td style="text-align:left">)</td><td style="text-align:left"><code>━ ．━ ━ ．━</code></td><td>$</td><td><code>．．．━ ．．━</code></td><td>&amp;</td><td><code>． ．．．</code></td></tr><tr><td style="text-align:left">@</td><td style="text-align:left"><code>．━ ━ ．━ ．</code></td><td style="text-align:left"></td><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3><span id="pei-gen-mi-ma">培根密码</span></h3><p>培根密码，又名倍康尼密码（Bacon’s cipher）是由法兰西斯·培根发明的一种隐写术，它是一种本质上用二进制数设计的，没有用通常的0和1来表示，而是采用a和b，看到一串的a和b，并且五个一组，那么就是培根加密了。</p><p>第一种方式：</p><table><thead><tr><th>字符</th><th>培根密码</th><th>字符</th><th>培根密码</th><th>字符</th><th>培根密码</th><th>字符</th><th>培根密码</th></tr></thead><tbody><tr><td>A</td><td>aaaaa</td><td>H</td><td>aabbb</td><td>O</td><td>abbba</td><td>V</td><td>babab</td></tr><tr><td>B</td><td>aaaab</td><td>I</td><td>abaaa</td><td>P</td><td>abbbb</td><td>W</td><td>babba</td></tr><tr><td>C</td><td>aaaba</td><td>J</td><td>abaab</td><td>Q</td><td>baaaa</td><td>X</td><td>babbb</td></tr><tr><td>D</td><td>aaabb</td><td>K</td><td>ababa</td><td>R</td><td>baaab</td><td>Y</td><td>bbaaa</td></tr><tr><td>E</td><td>aabaa</td><td>L</td><td>ababb</td><td>S</td><td>baaba</td><td>Z</td><td>bbaab</td></tr><tr><td>F</td><td>aabab</td><td>M</td><td>abbaa</td><td>T</td><td>baabb</td><td></td><td></td></tr><tr><td>G</td><td>aabba</td><td>N</td><td>abbab</td><td>U</td><td>babaa</td><td></td><td></td></tr></tbody></table><p>第二种方式：</p><table><thead><tr><th>字符</th><th>培根密码</th><th>字符</th><th>培根密码</th><th>字符</th><th>培根密码</th><th>字符</th><th>培根密码</th></tr></thead><tbody><tr><td>a</td><td>AAAAA</td><td>h</td><td>AABBB</td><td>p</td><td>ABBBA</td><td>x</td><td>BABAB</td></tr><tr><td>b</td><td>AAAAB</td><td>i-j</td><td>ABAAA</td><td>q</td><td>ABBBB</td><td>y</td><td>BABBA</td></tr><tr><td>c</td><td>AAABA</td><td>k</td><td>ABAAB</td><td>r</td><td>BAAAA</td><td>z</td><td>BABBB</td></tr><tr><td>d</td><td>AAABB</td><td>l</td><td>ABABA</td><td>s</td><td>BAAAB</td><td></td><td></td></tr><tr><td>e</td><td>AABAA</td><td>m</td><td>ABABB</td><td>t</td><td>BAABA</td><td></td><td></td></tr><tr><td>f</td><td>AABAB</td><td>n</td><td>ABBAA</td><td>u-v</td><td>BAABB</td><td></td><td></td></tr><tr><td>g</td><td>AABBA</td><td>o</td><td>ABBAB</td><td>w</td><td>BABAA</td><td></td><td></td></tr></tbody></table><p>示例：</p><ul><li>明文：kuaidaili</li><li>密文：ABABABABAAAAAAAABAAAAAABBAAAAAABAAAABABBABAAA</li></ul><h3><span id="wei-ji-ni-ya-mi-ma">维吉尼亚密码</span></h3><p>维吉尼亚密码是在凯撒密码基础上产生的一种加密方法，它将凯撒密码的全部25种位移排序为一张表，与原字母序列共同组成26行及26列的字母表。另外，维吉尼亚密码必须有一个密钥，这个密钥由字母组成，最少一个，最多可与明文字母数量相等。维吉尼亚密码表如下：</p><p><img src="https://cdn.itbob.cn/img/article/045/02.png" alt="02.png"></p><p>示例：</p><ul><li>明文：I’ve got it.</li><li>密钥：ok</li><li>密文：W’fs qcd wd.</li></ul><p>首先，密钥长度需要与明文长度相同，如果少于明文长度，则重复拼接直到相同。示例的明文长度为8个字母（非字母均被忽略），密钥会被程序补全为 <code>okokokok</code>，然后根据维吉尼亚密码表进行加密：明文第一个字母是 <code>I</code>，密钥第一个字母是 <code>o</code>，在表格中找到 <code>I</code> 列与 <code>o</code> 行相交点，字母 <code>W</code> 就是密文第一个字母，同理，<code>v</code> 列与 <code>k</code> 行交点字母是 <code>F</code>，<code>e</code> 列与 <code>o</code> 行交点字母是 <code>S</code>，以此类推。注意：维吉尼亚密码只对字母进行加密，不区分大小写，若文本中出现非字母字符会原样保留，如果输入多行文本，每行是单独加密的。</p><h3><span id="yu-fo-lun-shan">与佛论禅</span></h3><p>字符串转换后，是一些佛语，在线体验：<a href="https://keyfc.net/bbs/tools/tudoucode.aspx">https://keyfc.net/bbs/tools/tudoucode.aspx</a></p><p>示例：</p><ul><li>明文：爬虫</li><li>密文：佛曰：俱曳栗羅。諳故大多罰顛冥有諳姪帝罰知俱薩心俱智伊</li></ul><h3><span id="dang-pu-mi-ma">当铺密码</span></h3><p>当铺密码在 CTF 比赛题目中出现过。该加密算法是根据当前汉字有多少笔画出头，对应的明文就是数字几。</p><p>示例：</p><ul><li>明文：王夫 井工 夫口 由中人 井中 夫夫 由中大</li><li>密文：67 84 70 123 82 77 125</li></ul>]]></content>
      
      
      <categories>
          
          <category> JS 逆向理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> JS 逆向理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某空气质量监测平台无限 debugger 以及数据动态加密分析</title>
      <link href="/article/044/"/>
      <url>/article/044/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/javascript_reverse.png" alt="javascript_reverse"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#xie-zai-qian-mian">写在前面</a></li><li><a href="#rao-guo-wu-xian-debugger">绕过无限 debugger</a><ul><li><a href="#fang-fa-yi">方法一</a></li><li><a href="#fang-fa-er">方法二</a></li><li><a href="#fang-fa-san">方法三</a></li></ul></li><li><a href="#zhua-bao-fen-xi">抓包分析</a></li><li><a href="#jia-mi-ru-kou">加密入口</a></li><li><a href="#dong-tai-js">动态 JS</a></li><li><a href="#ben-di-gai-xie">本地改写</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>目标：某空气质量监测平台无限 debugger 以及请求数据、返回数据动态加密、解密</li><li>主页：<code>aHR0cHM6Ly93d3cuYXFpc3R1ZHkuY24v</code></li><li>接口：<code>aHR0cHM6Ly93d3cuYXFpc3R1ZHkuY24vYXBpbmV3L2FxaXN0dWR5YXBpLnBocA==</code></li></ul><h2><span id="xie-zai-qian-mian">写在前面</span></h2><p>这个站点更新频率很高，在我之前也已经有很多博主写了该站点的分析文章，近期有读者问请求数据的加密和返回数据的解密，发现其加解密 JS 变成了动态的，以前的那些文章提到的解决思路不太行了，但整体上来说也不是很难，只不过处理起来比较麻烦一点，还有一些小细节需要注意。</p><p>在网站的“关于系统”里可以看到，这个站貌似是个人开发者在维护，最早在2013年就有了，在友情赞助列表里，可以看到大多数都是一些环境、测绘、公共卫生相关的大学专业、研究院人员，可以猜测到这些数据对于他们的研究是非常有帮助的，再加上反爬更新频繁，可以看出站长饱受爬虫之苦，咱们也不想给站长添加负担，毕竟这种站点咱们应该支持，让他长久维护下去，<strong>所以本期只分析逻辑和少部分代码，就不放完整代码了，如果有相关专业人士确实需要抓取数据做研究的，可以通过邮件联系我。</strong></p><h2><span id="rao-guo-wu-xian-debugger">绕过无限 debugger</span></h2><p>右键 F12，会提示右键被禁用，不要紧，使用快捷键 <code>Ctrl+Shift+i</code> 或者浏览器右上角，更多工具，开发者工具，照样能打开。</p><p><img src="https://cdn.itbob.cn/img/article/044/01.png" alt="01.png"></p><h3><span id="fang-fa-yi">方法一</span></h3><p>打开控制台后会进入第一个无限 debugger，往上跟一个栈，可以看到一个 try-catch 语句，你下断点会发现他会一直走 catch，调用 <code>setTimeout()</code> 方法，该方法用于在指定的毫秒数后调用函数或计算表达式，注意上面，是将 debugger 传递给了构造方法 constructor，所以这里我们有两种方法过掉 debugger，Hook 掉 constructor 或 setTimeout 都可以。</p><p><img src="https://cdn.itbob.cn/img/article/044/02.png" alt="02.png"></p><pre><code class="hljs javascript"><span class="hljs-comment">// 两种 Hook 任选一中</span><span class="hljs-comment">// Hook 构造方法</span><span class="hljs-built_in">Function</span>.prototype.constructor_ = <span class="hljs-built_in">Function</span>.prototype.constructor;<span class="hljs-built_in">Function</span>.prototype.constructor = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) </span>&#123;    <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&quot;debugger&quot;</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;&#125;;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Function</span>.prototype.constructor_(a);&#125;;<span class="hljs-comment">// Hook setTimeout</span><span class="hljs-keyword">var</span> setTimeout_ = <span class="hljs-built_in">setTimeout</span><span class="hljs-keyword">var</span> <span class="hljs-built_in">setTimeout</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func, time</span>)</span>&#123;    <span class="hljs-keyword">if</span> (func == txsdefwsw)&#123;        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;    &#125;    <span class="hljs-keyword">return</span> setTimeout_(func, time)&#125;</code></pre><p>然后就来到了第二个无限 debugger，同样跟栈，发现有个 setInterval 定时器和构造方法 constructor，类似的，我们 Hook 掉 constructor 或 setInterval 都可以。注意：定时器这里还检测了窗口高宽，即便是你过了 constructor 或 setInterval，如果不把开发者工具单独拿出来也是不行的，会不断输出“检测到非法调试”。</p><p><img src="https://cdn.itbob.cn/img/article/044/03.png" alt="03.png"></p><pre><code class="hljs javascript"><span class="hljs-comment">// Hook setInterval</span><span class="hljs-keyword">var</span> setInterval_ = <span class="hljs-built_in">setInterval</span><span class="hljs-built_in">setInterval</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func, time</span>)</span>&#123;    <span class="hljs-keyword">if</span> (time == <span class="hljs-number">2000</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;    &#125;    <span class="hljs-keyword">return</span> setInterval_(func, time)&#125;</code></pre><p>我们观察到，其实这两个无限 debugger 都可以 Hook 构造方法来过掉，所以直接 Fiddler 注入该 Hook 构造方法的代码即可：</p><p><img src="https://cdn.itbob.cn/img/article/044/04.png" alt="04.png"></p><h3><span id="fang-fa-er">方法二</span></h3><p>在我们遇到第二个无限 debugger 的时候，还可以直接跟栈到一个 city_realtime.php 的页面，里面有两个 eval 语句，执行第一个 eval 里面的语句你就会发现正是前面我们在 VM 虚拟机里面看到的 debugger 代码，所以这里理论上可以直接替换掉这个页面，去掉 eval 语句，就不会有无限 debugger 了，但是先告诉你，现在不行了，因为里面有加载了某个 JS，这个 JS 在后面加密解密中会用到，但是这个 JS 是动态的，每10分钟就会改变，我们后面还要通过此页面来获取动态的 JS，所以是不能替换的！这里只是提一下这个思路！</p><p><img src="https://cdn.itbob.cn/img/article/044/05.png" alt="05.png"></p><p><img src="https://cdn.itbob.cn/img/article/044/06.png" alt="06.png"></p><h3><span id="fang-fa-san">方法三</span></h3><p>当然，这里还有一种最简单的方法，直接右键选择 Never pause here，永不在此处断下即可，同样还需要把开发者工具窗口单独拿出来，不然会一直输出“检测到非法调试”。</p><p><img src="https://cdn.itbob.cn/img/article/044/07.png" alt="07.png"></p><h2><span id="zhua-bao-fen-xi">抓包分析</span></h2><p>我们在实时监控页面，顺便点击查询一个城市，可以看到请求的 Form Data 和返回的数据都是加密的，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/044/08.png" alt="08.png"></p><h2><span id="jia-mi-ru-kou">加密入口</span></h2><p>由于是 XHR，所以我们直接跟栈，很容易找到加密的位置：</p><p><img src="https://cdn.itbob.cn/img/article/044/09.png" alt="09.png"></p><p><img src="https://cdn.itbob.cn/img/article/044/10.png" alt="10.png"></p><p>可以看到传递的 data 键值对：<code>&#123;hXM8NDFHN: p7crXYR&#125;</code>，键在这个 JS 里是写死的，值是通过一个方法 <code>pU14VhqrofroULds()</code> 得到的，这个方法需要传递两个参数，第一个是定值 GETDATA，第二个就是城市名称，我们再跟进看看这个方法是啥：</p><p><img src="https://cdn.itbob.cn/img/article/044/11.png" alt="11.png"></p><p>一些 appId、时间戳、城市等参数，做了一些 MD5、base64 的操作，返回的 param 就是我们要的值了。看起来不难，我们再找找返回的加密数据是如何解密的，我们注意到 ajax 请求有个 success 关键字，我们即便是不懂 JS 逻辑，也可以猜到应该是请求成功后的处理操作吧，如下图所示：传进来的 dzJMI 就是返回的加密的数据，经过 <code>db0HpCYIy97HkHS7RkhUn()</code> 方法后，就解密成功了：</p><p><img src="https://cdn.itbob.cn/img/article/044/12.png" alt="12.png"></p><p>跟进 <code>db0HpCYIy97HkHS7RkhUn()</code> 方法，可以看到是 AES+DES+BASE64 解密，传入的密钥 key 和偏移量 iv 都在头部有定义：</p><p><img src="https://cdn.itbob.cn/img/article/044/13.png" alt="13.png"></p><p><img src="https://cdn.itbob.cn/img/article/044/14.png" alt="14.png"></p><h2><span id="dong-tai-js">动态 JS</span></h2><p>经过以上分析后，我们加密解密的逻辑都搞定了，但是你多调试一下就会发现，这一个加密解密的 JS 是动态变化的，定义的密钥 key 和偏移量 iv 都是隔段时间就会改变的，如果你在这段代码里下断点，停留时间过长，突然发现断点失效无法断下了，那就是 JS 变了，当前代码已经失效了。</p><p>我们随便薅两个不同的 JS 下来（提示：JS 每隔10分钟会变化，后文有详细分析），利用 PyCharm 的文件对比功能（依次选择 View - Compare With）可以总结出以下几个变化的地方（变量名的变化不算）：</p><ol><li>开头的8个参数的值：两个 aes key 和 iv，两个 des key 和 iv；</li></ol><p><img src="https://cdn.itbob.cn/img/article/044/15.png" alt="15.png"></p><ol start="2"><li>生成加密的 param 时，appId 是变化的，最后的加密分为 AES、DES 和没有加密，三种情况（这里是最容易忽略的地方，这里没有注意到，请求可能会提示 appId 无效的情况）：</li></ol><p><img src="https://cdn.itbob.cn/img/article/044/16.png" alt="16.png"></p><ol start="3"><li>最后发送请求时，data 键值对，其中的键也是变化的：</li></ol><p><img src="https://cdn.itbob.cn/img/article/044/17.png" alt="17.png"></p><p>变化的地方我们找到了，那我们怎么获取这个 JS 呢？因为这个 JS 的在 VM 虚拟机里，所以我们还要找到它的源头，是从哪里来的，我们抓包可以看到一个比较特殊的 JS，类似于 encrypt_xxxxxx.js，看这取名就知道不简单，返回的是一段 eval 包裹的代码：</p><p><img src="https://cdn.itbob.cn/img/article/044/18.png" alt="18.png"></p><p>对于 eval 我们已经很熟悉了，直接去掉 eval，让他执行一下，就可以看到正是我们需要的那段 JS：</p><p><img src="https://cdn.itbob.cn/img/article/044/19.png" alt="19.png"></p><p>这里有个小细节，如果你使用控制台，会发现它一直在打印 img 标签，影响我们的输入，这里可以直接跟进去下断点暂时阻止他运行就行了，不需要做其他操作浪费时间：</p><p><img src="https://cdn.itbob.cn/img/article/044/20.png" alt="20.png"></p><p>你以为到这里就差不多搞定了？错了，同样的这个 encrypt_xxxxxx.js 也藏有玄机：</p><ol><li>encrypt_xxxxxx.js 的名称是动态的，后面的 v 值是秒级时间戳，隔600秒，也就是十分钟就会改变，这个 JS 可以在 city_realtime.php 页面找到，还记得我们前面说过的绕过无限 debugger 不能替换此页面吗？我们要通过此页面来获取动态的 JS，所以是不能替换的！</li></ol><p><img src="https://cdn.itbob.cn/img/article/044/21.png" alt="21.png"></p><p><img src="https://cdn.itbob.cn/img/article/044/22.png" alt="22.png"></p><ol start="2"><li>encrypt_xxxxxx.js 返回的 JS，并不是所有的执行一遍 eval 就能得到明文代码了，它是 eval 和 base64 相结合的，第一遍都是 eval，但是后面就说不定了，有可能直接出结果，有可能需要 base64，有可能 base64 两遍，有可能两遍 base64 之后还要再 eval，总之，除了第一遍是 eval 以外，后面是否需要 base64 和 eval，以及需要的次数和先后顺序，都是不确定的！举几个例子：</li></ol><p><img src="https://cdn.itbob.cn/img/article/044/23.png" alt="23.png"></p><p><img src="https://cdn.itbob.cn/img/article/044/24.png" alt="24.png"></p><p><img src="https://cdn.itbob.cn/img/article/044/25.png" alt="25.png"></p><p>这里可能有人会问，你怎么看出来那是 base64 呢？很简单，直接在网站页面的控制台里输入 <code>dswejwehxt</code>，点击去看这个函数，就是 base64：</p><p><img src="https://cdn.itbob.cn/img/article/044/26.png" alt="26.png"></p><p>那么针对 encrypt_xxxxxx.js 内容不确定的情况，我们可以写一个方法，获取到 encrypt_xxxxxx.js 后，需要执行 eval 就执行 eval，需要执行 base64 就执行 base64，直到没有 eval 和 base64 即可，可以分别用字符串 <code>eval(function</code> 和 <code>dswejwehxt(</code> 来判断是否需要 eval 和 base64（当然也有其他方式，比如 <code>()</code> 的个数等），示例代码如下所示：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_decrypted_js</span>(<span class="hljs-params">encrypted_js_url</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    :param encrypted_js_url: encrypt_xxxxxx.js 的地址</span><span class="hljs-string">    :return: 解密后的 JS</span><span class="hljs-string">    &quot;&quot;&quot;</span>    decrypted_js = requests.get(url=encrypted_js_url, headers=headers).text    flag = <span class="hljs-literal">True</span>    <span class="hljs-keyword">while</span> flag:        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;eval(function&quot;</span> <span class="hljs-keyword">in</span> decrypted_js:            <span class="hljs-comment"># 需要执行 eval</span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;需要执行 eval！&quot;</span>)            replace_js = decrypted_js.replace(<span class="hljs-string">&quot;eval(function&quot;</span>, <span class="hljs-string">&quot;(function&quot;</span>)            decrypted_js = execjs.<span class="hljs-built_in">eval</span>(replace_js)        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;dswejwehxt(&quot;</span> <span class="hljs-keyword">in</span> decrypted_js:            <span class="hljs-comment"># 需要 base64 解码</span>            base64_num = decrypted_js.count(<span class="hljs-string">&quot;dswejwehxt(&quot;</span>)            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;需要 %s 次 base64 解码！&quot;</span> % base64_num)            decrypted_js = re.findall(<span class="hljs-string">r&quot;\(&#x27;(.*?)&#x27;\)&quot;</span>, decrypted_js)[<span class="hljs-number">0</span>]            num = <span class="hljs-number">0</span>            <span class="hljs-keyword">while</span> base64_num &gt; num:                decrypted_js = base64.b64decode(decrypted_js).decode()                num += <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-comment"># 得到明文</span>            flag = <span class="hljs-literal">False</span>    <span class="hljs-comment"># print(decrypted_js)</span>    <span class="hljs-keyword">return</span> decrypted_js</code></pre><h2><span id="ben-di-gai-xie">本地改写</span></h2><p>通过以上函数我们就拿到了动态的 JS 了，那么我们可以直接执行拿回来的 JS 吗？当然是不可以的，你可以自己本地执行一下，可以发现里面的 CryptoJS、Base64、hex_md5 都需要补齐才行，所以到这里我们就有两种做法：</p><ol><li>拿到解密后的动态 JS 后，动态 JS 和我们自己写的 Base64、hex_md5 等方法组成新的 JS 代码，执行新的 JS 代码拿到参数，这里还需要注意因为里面的其他方法名都是动态的，所以你还得想办法匹配到正确的方法名来调用才行，所以这种方法个人感觉还是稍微有点儿麻烦的；</li><li>我们本地自己写一个 JS，拿到解密后的动态 JS 后，把里面的 key、iv、appId、data 键名、param 是否需要 AES 或 DES 加密，这些信息都匹配出来，然后传给我们自己写的 JS，调用我们自己的方法拿到加密结果。</li></ol><p>虽然两种方法都很麻烦，但暂时也想不到更好的解决方法了，有比较好的想法的朋友可以留言说一说。</p><p>以第二种方法为例，我们本地的 JS 示例（main.js）：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;crypto-js&quot;</span>);<span class="hljs-keyword">var</span> BASE64 = &#123;    <span class="hljs-attr">encrypt</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) </span>&#123;        <span class="hljs-keyword">return</span> CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(text))    &#125;,    <span class="hljs-attr">decrypt</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) </span>&#123;        <span class="hljs-keyword">return</span> CryptoJS.enc.Base64.parse(text).toString(CryptoJS.enc.Utf8)    &#125;&#125;;<span class="hljs-keyword">var</span> DES = &#123;    <span class="hljs-attr">encrypt</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">text, key, iv</span>) </span>&#123;        <span class="hljs-keyword">var</span> secretkey = (CryptoJS.MD5(key).toString()).substr(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>);        <span class="hljs-keyword">var</span> secretiv = (CryptoJS.MD5(iv).toString()).substr(<span class="hljs-number">24</span>, <span class="hljs-number">8</span>);        secretkey = CryptoJS.enc.Utf8.parse(secretkey);        secretiv = CryptoJS.enc.Utf8.parse(secretiv);        <span class="hljs-keyword">var</span> result = CryptoJS.DES.encrypt(text, secretkey, &#123;            <span class="hljs-attr">iv</span>: secretiv,            <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,            <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7        &#125;);        <span class="hljs-keyword">return</span> result.toString();    &#125;,    <span class="hljs-attr">decrypt</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">text, key, iv</span>) </span>&#123;        <span class="hljs-keyword">var</span> secretkey = (CryptoJS.MD5(key).toString()).substr(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>);        <span class="hljs-keyword">var</span> secretiv = (CryptoJS.MD5(iv).toString()).substr(<span class="hljs-number">24</span>, <span class="hljs-number">8</span>);        secretkey = CryptoJS.enc.Utf8.parse(secretkey);        secretiv = CryptoJS.enc.Utf8.parse(secretiv);        <span class="hljs-keyword">var</span> result = CryptoJS.DES.decrypt(text, secretkey, &#123;            <span class="hljs-attr">iv</span>: secretiv,            <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,            <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7        &#125;);        <span class="hljs-keyword">return</span> result.toString(CryptoJS.enc.Utf8);    &#125;&#125;;<span class="hljs-keyword">var</span> AES = &#123;    <span class="hljs-attr">encrypt</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">text, key, iv</span>) </span>&#123;        <span class="hljs-keyword">var</span> secretkey = (CryptoJS.MD5(key).toString()).substr(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>);        <span class="hljs-keyword">var</span> secretiv = (CryptoJS.MD5(iv).toString()).substr(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>);        secretkey = CryptoJS.enc.Utf8.parse(secretkey);        secretiv = CryptoJS.enc.Utf8.parse(secretiv);        <span class="hljs-keyword">var</span> result = CryptoJS.AES.encrypt(text, secretkey, &#123;            <span class="hljs-attr">iv</span>: secretiv,            <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,            <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7        &#125;);        <span class="hljs-keyword">return</span> result.toString();    &#125;,    <span class="hljs-attr">decrypt</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">text, key, iv</span>) </span>&#123;        <span class="hljs-keyword">var</span> secretkey = (CryptoJS.MD5(key).toString()).substr(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>);        <span class="hljs-keyword">var</span> secretiv = (CryptoJS.MD5(iv).toString()).substr(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>);        secretkey = CryptoJS.enc.Utf8.parse(secretkey);        secretiv = CryptoJS.enc.Utf8.parse(secretiv);        <span class="hljs-keyword">var</span> result = CryptoJS.AES.decrypt(text, secretkey, &#123;            <span class="hljs-attr">iv</span>: secretiv,            <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,            <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7        &#125;);        <span class="hljs-keyword">return</span> result.toString(CryptoJS.enc.Utf8);    &#125;&#125;;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDecryptedData</span>(<span class="hljs-params">data, AES_KEY_1, AES_IV_1, DES_KEY_1, DES_IV_1</span>) </span>&#123;    data = AES.decrypt(data, AES_KEY_1, AES_IV_1);    data = DES.decrypt(data, DES_KEY_1, DES_IV_1);    data = BASE64.decrypt(data);    <span class="hljs-keyword">return</span> data;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ObjectSort</span>(<span class="hljs-params">obj</span>) </span>&#123;    <span class="hljs-keyword">var</span> newObject = &#123;&#125;;    <span class="hljs-built_in">Object</span>.keys(obj).sort().map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;        newObject[key] = obj[key];    &#125;);    <span class="hljs-keyword">return</span> newObject;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequestParam</span>(<span class="hljs-params">method, obj, appId</span>) </span>&#123;    <span class="hljs-keyword">var</span> clienttype = <span class="hljs-string">&#x27;WEB&#x27;</span>;    <span class="hljs-keyword">var</span> timestamp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()    <span class="hljs-keyword">var</span> param = &#123;        <span class="hljs-attr">appId</span>: appId,        <span class="hljs-attr">method</span>: method,        <span class="hljs-attr">timestamp</span>: timestamp,        <span class="hljs-attr">clienttype</span>: clienttype,        <span class="hljs-attr">object</span>: obj,        <span class="hljs-attr">secret</span>: CryptoJS.MD5(appId + method + timestamp + clienttype + <span class="hljs-built_in">JSON</span>.stringify(ObjectSort(obj))).toString()    &#125;;    param = BASE64.encrypt(<span class="hljs-built_in">JSON</span>.stringify(param));    <span class="hljs-keyword">return</span> param;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequestAESParam</span>(<span class="hljs-params">requestMethod, requestCity, appId, AES_KEY_2, AES_IV_2</span>)</span>&#123;    <span class="hljs-keyword">var</span> param = getRequestParam(requestMethod, requestCity, appId);    <span class="hljs-keyword">return</span> AES.encrypt(param, AES_KEY_2, AES_IV_2);&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRequestDESParam</span>(<span class="hljs-params">requestMethod, requestCity, appId, DES_KEY_2, DES_IV_2</span>)</span>&#123;    <span class="hljs-keyword">var</span> param = getRequestParam(requestMethod, requestCity, appId);    <span class="hljs-keyword">return</span> DES.encrypt(param, DES_KEY_2, DES_IV_2);&#125;</code></pre><p>我们匹配 JS 里面的各项参数的 Python 代码示例（匹配8个 key、iv 值、appId 和 param 的加密方式）：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_key_iv_appid</span>(<span class="hljs-params">decrypted_js</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    :param decrypted_js: 解密后的 encrypt_xxxxxx.js</span><span class="hljs-string">    :return: 请求必须的一些参数</span><span class="hljs-string">    &quot;&quot;&quot;</span>    key_iv = re.findall(<span class="hljs-string">r&#x27;const.*?&quot;(.*?)&quot;;&#x27;</span>, decrypted_js)    app_id = re.findall(<span class="hljs-string">r&quot;var appId.*?&#x27;(.*?)&#x27;;&quot;</span>, decrypted_js)    request_data_name = re.findall(<span class="hljs-string">r&quot;aqistudyapi.php.*?data.*?&#123;(.*?):&quot;</span>, decrypted_js, re.DOTALL)    <span class="hljs-comment"># 判断 param 是 AES 加密还是 DES 加密还是没有加密</span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;AES.encrypt(param&quot;</span> <span class="hljs-keyword">in</span> decrypted_js:        request_param_encrypt = <span class="hljs-string">&quot;AES&quot;</span>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;DES.encrypt(param&quot;</span> <span class="hljs-keyword">in</span> decrypted_js:        request_param_encrypt = <span class="hljs-string">&quot;DES&quot;</span>    <span class="hljs-keyword">else</span>:        request_param_encrypt = <span class="hljs-string">&quot;NO&quot;</span>    key_iv_appid = &#123;        <span class="hljs-comment"># key 和 iv 的位置和原来 js 里的是一样的</span>        <span class="hljs-string">&quot;aes_key_1&quot;</span>: key_iv[<span class="hljs-number">0</span>],        <span class="hljs-string">&quot;aes_iv_1&quot;</span>: key_iv[<span class="hljs-number">1</span>],        <span class="hljs-string">&quot;aes_key_2&quot;</span>: key_iv[<span class="hljs-number">2</span>],        <span class="hljs-string">&quot;aes_iv_2&quot;</span>: key_iv[<span class="hljs-number">3</span>],        <span class="hljs-string">&quot;des_key_1&quot;</span>: key_iv[<span class="hljs-number">4</span>],        <span class="hljs-string">&quot;des_iv_1&quot;</span>: key_iv[<span class="hljs-number">5</span>],        <span class="hljs-string">&quot;des_key_2&quot;</span>: key_iv[<span class="hljs-number">6</span>],        <span class="hljs-string">&quot;des_iv_2&quot;</span>: key_iv[<span class="hljs-number">7</span>],        <span class="hljs-string">&quot;app_id&quot;</span>: app_id[<span class="hljs-number">0</span>],        <span class="hljs-comment"># 发送请求的 data 的键名</span>        <span class="hljs-string">&quot;request_data_name&quot;</span>: request_data_name[<span class="hljs-number">0</span>].strip(),        <span class="hljs-comment"># 发送请求的 data 值需要哪种加密</span>        <span class="hljs-string">&quot;request_param_encrypt&quot;</span>: request_param_encrypt    &#125;    <span class="hljs-comment"># print(key_iv_appid)</span>    <span class="hljs-keyword">return</span> key_iv_appid</code></pre><p>我们发送请求以及解密返回值的 Python 代码示例（以北京为例）：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">key_iv_appid</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    :param key_iv_appid: get_key_iv_appid() 方法返回的值</span><span class="hljs-string">    &quot;&quot;&quot;</span>    request_method = <span class="hljs-string">&quot;GETDATA&quot;</span>    request_city = &#123;<span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;北京&quot;</span>&#125;    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;main.js&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:        execjs_ = execjs.<span class="hljs-built_in">compile</span>(f.read())    <span class="hljs-comment"># 根据不同加密方式调用不同方法获取请求加密的 param 参数</span>    request_param_encrypt = key_iv_appid[<span class="hljs-string">&quot;request_param_encrypt&quot;</span>]    <span class="hljs-keyword">if</span> request_param_encrypt == <span class="hljs-string">&quot;AES&quot;</span>:        param = execjs_.call(            <span class="hljs-string">&#x27;getRequestAESParam&#x27;</span>, request_method, request_city,            key_iv_appid[<span class="hljs-string">&quot;app_id&quot;</span>], key_iv_appid[<span class="hljs-string">&quot;aes_key_2&quot;</span>], key_iv_appid[<span class="hljs-string">&quot;aes_iv_2&quot;</span>]        )    <span class="hljs-keyword">elif</span> request_param_encrypt == <span class="hljs-string">&quot;DES&quot;</span>:        param = execjs_.call(            <span class="hljs-string">&#x27;getRequestDESParam&#x27;</span>, request_method, request_city,            key_iv_appid[<span class="hljs-string">&quot;app_id&quot;</span>], key_iv_appid[<span class="hljs-string">&quot;des_key_2&quot;</span>], key_iv_appid[<span class="hljs-string">&quot;des_iv_2&quot;</span>]        )    <span class="hljs-keyword">else</span>:        param = execjs_.call(<span class="hljs-string">&#x27;getRequestParam&#x27;</span>, request_method, request_city, key_iv_appid[<span class="hljs-string">&quot;app_id&quot;</span>])    data = &#123;        key_iv_appid[<span class="hljs-string">&quot;request_data_name&quot;</span>]: param    &#125;    response = requests.post(url=aqistudy_api, headers=headers, data=data).text    <span class="hljs-comment"># print(response)</span>    <span class="hljs-comment"># 对获取的加密数据解密</span>    decrypted_data = execjs_.call(        <span class="hljs-string">&#x27;getDecryptedData&#x27;</span>, response,        key_iv_appid[<span class="hljs-string">&quot;aes_key_1&quot;</span>], key_iv_appid[<span class="hljs-string">&quot;aes_iv_1&quot;</span>],        key_iv_appid[<span class="hljs-string">&quot;des_key_1&quot;</span>], key_iv_appid[<span class="hljs-string">&quot;des_iv_1&quot;</span>]    )    <span class="hljs-built_in">print</span>(json.loads(decrypted_data))</code></pre><p>运行结果，成功请求并解密返回值：</p><p><img src="https://cdn.itbob.cn/img/article/044/27.png" alt="27.png"></p>]]></content>
      
      
      <categories>
          
          <category> JS 逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS 逆向实战 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket 协议爬虫，智慧树扫码登录案例分析</title>
      <link href="/article/043/"/>
      <url>/article/043/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/javascript_reverse.png" alt="javascript_reverse"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#sheng-ming">声明</a></li><li><a href="#ni-xiang-mu-biao">逆向目标</a></li><li><a href="#websocket-jian-jie">WebSocket 简介</a></li><li><a href="#zhua-bao-fen-xi">抓包分析</a></li><li><a href="#can-shu-huo-qu">参数获取</a></li><li><a href="#python-shi-xian-websocket-qing-qiu">Python 实现 WebSocket 请求</a></li><li><a href="#shi-xian-sao-ma-deng-lu">实现扫码登录</a></li><li><a href="#wan-zheng-dai-ma">完整代码</a></li></ul><!-- tocstop --><hr><h2><span id="sheng-ming">声明</span></h2><p><strong><font color="red">本文章中所有内容仅供学习交流使用，不用于其他任何目的，不提供完整代码，抓包内容、敏感网址、数据接口等均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关！</font></strong></p><p><strong><font color="red">本文章未经许可禁止转载，禁止任何修改后二次传播，擅自使用本文讲解的技术而导致的任何意外，作者均不负责，若有侵权，请通过邮件 <a href="mailto:admin@itbob.cn">admin@itbob.cn</a> 联系我立即删除！</font></strong></p><h2><span id="ni-xiang-mu-biao">逆向目标</span></h2><ul><li>目标：智慧树扫码登录，接口使用了 WebSocket 通信协议</li><li>主页：<code>aHR0cHM6Ly9wYXNzcG9ydC56aGlodWlzaHUuY29tL2xvZ2luI3FyQ29kZUxvZ2lu</code></li></ul><h2><span id="websocket-jian-jie">WebSocket 简介</span></h2><p>WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议，WebSocket 使得客户端和服务器之间的数据交换变得更加简单。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>WebSocket 协议简称为 WS 或者 WSS（WebSocket Secure），其发送请求的 URL 以 <code>ws://</code> 或者 <code>wss://</code> 开头，WSS 是 WS 的加密版本，类似于 HTTP 与 HTTPS。</p><p>WebSocket 协议的最大特点就是：服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。与 HTTP 的对比如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/043/01.png" alt="01.png"></p><h2><span id="zhua-bao-fen-xi">抓包分析</span></h2><p>来到智慧树的扫码登录页面，抓包选中 WS，用来筛选 WebSocket 请求，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/043/02.png" alt="02.png"></p><p>其中有一些比较特别的参数，是 HTTP/ HTTPS 请求中没有的：</p><ul><li><code>Upgrade: websocket</code>：表明这是 WebSocket 类型请求；</li><li><code>Sec-WebSocket-Version</code>：告诉服务器所使用的 Websocket Draft（协议版本），必须是 13；</li><li><code>Sec-WebSocket-Extensions</code>：协议扩展，某类协议可能支持多个扩展，通过它可以实现协议增强；</li><li><code>Sec-WebSocket-Key</code>：是 WebSocket 客户端发送的一个 base64 编码的密文，是浏览器随机生成的，要求服务端必须返回一个对应加密的 <code>Sec-WebSocket-Accept</code> 应答，否则客户端会抛出 <code>Error during WebSocket handshake</code> 错误，并关闭连接。</li></ul><p>我们先扫码登录一遍，再选择 Messages 选项卡，可以看到有一些数据交互，其中绿色的箭头是客户端发送给服务器的数据，红色箭头是服务器响应返回给客户端的数据，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/043/03.png" alt="03.png"></p><p>我们观察一下整个交互过程，当我们打开二维码页面后，也就是二维码加载出来的同时，WebSocket 连接就建立了，每隔8秒左右，客户端就主动发送一串字符串，服务端也返回相同的字符串，只不过是字典格式，当我们扫码成功时，服务端就返回扫码成功的信息，当我们点击登陆时，客户端又会返回扫码结果，如果成功，就有一个一次性密码 <code>oncePassword</code> 和一个 <code>uuid</code>，这两个参数肯定在后续的请求中会用到的。如果长时间不扫码的话，过段时间就会返回二维码已失效的信息，每隔8秒发送一次消息，正是为了保持连接以及获取二维码状态消息。</p><p>那么到这里就出现了两个问题：</p><ol><li><p>在来回交互发送的那串字符串，是怎么得来的？</p></li><li><p>在 Python 中应该如何实现 WebSocket 请求？</p></li><li><p>如何实现客户端每隔 8 秒发送一次数据的同时，实时接收服务端的信息？（观察请求扫码结果实时返回的，所以不能每隔 8 秒才接收一次）</p></li></ol><h2><span id="can-shu-huo-qu">参数获取</span></h2><p>首先解决第一个问题，客户端发送的那串字符串是怎么来的，这里寻找加密字符串的方式和 HTTP/HTTPS 请求是一样的，在本例中，我们可以直接搜索这个字符串，发现是通过一个接口传过来的，其中 img 就是二维码图片的 base64 值，qrToken 就是客户端发送的那串字符串，如下图所示：</p><p><img src="https://cdn.itbob.cn/img/article/043/04.png" alt="04.png"></p><p>这里需要注意的是，并不是所有的 WebSocket 请求都是如此的简单的，有的客户端发送的数据是 Binary Message（二进制数据）、或者更复杂的加密参数，直接搜索无法获取，针对这种情况，我们也有解决方法：</p><ol><li><p>已知创建 WebSocket 对象的语句为：<code>var Socket = new WebSocket(url, [protocol] );</code>，所以我们可以搜索 <code>new WebSocket</code> 定位到建立请求的位置。</p></li><li><p>已知一个 WebSocket 对象有以下相关事件，我们可以搜索对应事件处理程序代码来定位：</p></li></ol><table><thead><tr><th style="text-align:left">事件</th><th style="text-align:left">事件处理程序</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">open</td><td style="text-align:left">Socket.onopen</td><td style="text-align:left">连接建立时触发</td></tr><tr><td style="text-align:left">message</td><td style="text-align:left">Socket.onmessage</td><td style="text-align:left">客户端接收服务端数据时触发</td></tr><tr><td style="text-align:left">error</td><td style="text-align:left">Socket.onerror</td><td style="text-align:left">通信发生错误时触发</td></tr><tr><td style="text-align:left">close</td><td style="text-align:left">Socket.onclose</td><td style="text-align:left">连接关闭时触发</td></tr></tbody></table><ol start="3"><li>已知一个 WebSocket 对象有以下相关方法，我们可以搜索对应方法来定位：</li></ol><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Socket.send()</td><td style="text-align:left">使用连接发送数据</td></tr><tr><td style="text-align:left">Socket.close()</td><td style="text-align:left">关闭连接</td></tr></tbody></table><h2><span id="python-shi-xian-websocket-qing-qiu">Python 实现 WebSocket 请求</span></h2><p>接着前面说，第二个问题，在 Python 中应该如何实现 WebSocket 请求？Python 库中用于连接 WebSocket 的有很多，比较常用、稳定的有 <a href="https://github.com/websocket-client/websocket-client">websocket-client</a>（非异步）、<a href="https://github.com/aaugustin/websockets">websockets</a>（异步）、<a href="https://github.com/asyncins/aiowebsocket">aiowebsocket</a>（异步）。在本案例中使用 websocket-client，这里还要注意第三个问题，对于客户端来说，要每隔 8 秒发送一次数据，对于服务端，我们需要实时接收服务端的信息，可以观察请求，扫码的结果是实时返回的，如果我们也每隔 8 秒才接收一次数据的话，有可能会丢失数据，而且也会使得整个程序的响应也不及时，效率变低。</p><p>在 websocket-client 官方文档中给我们提供了一个长连接的 demo，它实现了连续发送三次数据，并实时监听服务端返回的数据，其中的 <code>websocket.enableTrace(True)</code> 表示是否显示连接详细信息：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> websocket<span class="hljs-keyword">import</span> _thread<span class="hljs-keyword">import</span> time<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_message</span>(<span class="hljs-params">ws, message</span>):</span>    <span class="hljs-built_in">print</span>(message)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_error</span>(<span class="hljs-params">ws, error</span>):</span>    <span class="hljs-built_in">print</span>(error)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_close</span>(<span class="hljs-params">ws, close_status_code, close_msg</span>):</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;### closed ###&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_open</span>(<span class="hljs-params">ws</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">*args</span>):</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):            time.sleep(<span class="hljs-number">1</span>)            ws.send(<span class="hljs-string">&quot;Hello %d&quot;</span> % i)        time.sleep(<span class="hljs-number">1</span>)        ws.close()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;thread terminating...&quot;</span>)    _thread.start_new_thread(run, ())<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    websocket.enableTrace(<span class="hljs-literal">True</span>)    ws = websocket.WebSocketApp(        <span class="hljs-string">&quot;ws://echo.websocket.org/&quot;</span>, on_open=on_open,        on_message=on_message, on_error=on_error, on_close=on_close    )    ws.run_forever()</code></pre><p>我们将其适当改造一下，客户端在 run 方法里，依然是每隔 8 秒发送一次 qr_token，实时接收服务端的消息，当“扫码成功”字样出现在消息里时，将得到的 <code>oncePassword</code> 和 <code>uuid</code> 存起来，然后关闭连接，逻辑代码如下所示，后续只要将二维码的获取逻辑接入就行了。（已脱敏处理，不能直接运行）</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> _thread<span class="hljs-keyword">import</span> websocketweb_socket_url = <span class="hljs-string">&quot;wss://appcomm-user.脱敏处理.com/app-commserv-user/websocket?qrToken=%s&quot;</span>qr_token = <span class="hljs-string">&quot;ca6e6cfb70de4f2f915b968aefcad404&quot;</span>once_password = <span class="hljs-string">&quot;&quot;</span>uuid = <span class="hljs-string">&quot;&quot;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wss_on_message</span>(<span class="hljs-params">ws, message</span>):</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=============== [message] ===============&quot;</span>)    message = json.loads(message)    <span class="hljs-built_in">print</span>(message)    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;扫码成功&quot;</span> <span class="hljs-keyword">in</span> message[<span class="hljs-string">&quot;msg&quot;</span>]:        <span class="hljs-keyword">global</span> once_password, uuid        once_password = message[<span class="hljs-string">&quot;oncePassword&quot;</span>]        uuid = message[<span class="hljs-string">&quot;uuid&quot;</span>]        ws.close()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wss_on_error</span>(<span class="hljs-params">ws, error</span>):</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=============== [error] ===============&quot;</span>)    <span class="hljs-built_in">print</span>(error)    ws.close()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wss_on_close</span>(<span class="hljs-params">ws, close_status_code, close_msg</span>):</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=============== [closed] ===============&quot;</span>)    <span class="hljs-built_in">print</span>(close_status_code)    <span class="hljs-built_in">print</span>(close_msg)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wss_on_open</span>(<span class="hljs-params">ws</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">*args</span>):</span>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            ws.send(qr_token)            time.sleep(<span class="hljs-number">8</span>)    _thread.start_new_thread(run, (qr_token,))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wss</span>():</span>    <span class="hljs-comment"># websocket.enableTrace(True)  # 是否显示连接详细信息</span>    ws = websocket.WebSocketApp(        web_socket_url % qr_token, on_open=wss_on_open,        on_message=wss_on_message, on_error=wss_on_error,        on_close=wss_on_close    )    ws.run_forever()</code></pre><h2><span id="shi-xian-sao-ma-deng-lu">实现扫码登录</span></h2><p>最重要的 WebSocket 请求部分已经解决了，扫码拿到 <code>oncePassword</code> 和 <code>uuid</code> 后，后续的处理步骤就比较简单了，现在来理一下完整的步骤：</p><ol><li>请求首页，第一次获取 cookie，包含：INGRESSCOOKIE、JSESSIONID、SERVERID、acw_tc；</li><li>请求获取二维码接口，得到二维码的 base64 值和 qrToken；</li><li>建立 WebSocket 连接，扫描二维码，获取一次性密码 oncePassword 和 uuid（好像没什么用）；</li><li>请求一个登录接口，302 重定向，需要携带一次性密码，第二次获取 cookie，包含：CASLOGC、CASTGC，同时更新 SERVERID；</li><li>请求第 4 步 302 重定向地址，第三次获取 cookie，包含：SESSION；</li><li>携带完整 cookie，请求用户信息接口，获取真实用户名等信息。</li></ol><p>实际上 WebSocket 连接结束后，有很多请求，看起来都比较可以，但是经过测试，只有两个重定向比较有用，抓包如下：</p><p><img src="https://cdn.itbob.cn/img/article/043/05.png" alt="05.png"></p><h2><span id="wan-zheng-dai-ma">完整代码</span></h2><p><strong>以下只演示部分关键代码，不能直接运行！</strong> 完整代码仓库地址：<a href="https://github.com/TRHX/Python3-Spider-Practice/">https://github.com/TRHX/Python3-Spider-Practice/</a></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> _thread<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> websocket<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Imageweb_socket_url = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>get_login_qr_img_url = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>login_url = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>user_info_url = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>headers = &#123;    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>,    <span class="hljs-string">&quot;Pragma&quot;</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,    <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>,    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36&quot;</span>&#125;qr_token = <span class="hljs-string">&quot;&quot;</span>once_password = <span class="hljs-string">&quot;&quot;</span>uuid = <span class="hljs-string">&quot;&quot;</span>cookie = &#123;&#125;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cookies_first</span>():</span>    response = requests.get(url=login_url, headers=headers)    <span class="hljs-keyword">global</span> cookie    cookie = response.cookies.get_dict()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_login_qr_img</span>():</span>    response = requests.get(url=get_login_qr_img_url, headers=headers, cookies=cookie).json()    qr_img = response[<span class="hljs-string">&quot;img&quot;</span>]    <span class="hljs-keyword">global</span> qr_token    qr_token = response[<span class="hljs-string">&quot;qrToken&quot;</span>]    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;code.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:        f.write(base64.b64decode(qr_img))    image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;code.png&#x27;</span>)    image.show()    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请扫描验证码! &quot;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wss_on_message</span>(<span class="hljs-params">ws, message</span>):</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=============== [message] ===============&quot;</span>)    message = json.loads(message)    <span class="hljs-built_in">print</span>(message)    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;扫码成功&quot;</span> <span class="hljs-keyword">in</span> message[<span class="hljs-string">&quot;msg&quot;</span>]:        <span class="hljs-keyword">global</span> once_password, uuid        once_password = message[<span class="hljs-string">&quot;oncePassword&quot;</span>]        uuid = message[<span class="hljs-string">&quot;uuid&quot;</span>]        ws.close()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wss_on_error</span>(<span class="hljs-params">ws, error</span>):</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=============== [error] ===============&quot;</span>)    <span class="hljs-built_in">print</span>(error)    ws.close()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wss_on_close</span>(<span class="hljs-params">ws, close_status_code, close_msg</span>):</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=============== [closed] ===============&quot;</span>)    <span class="hljs-built_in">print</span>(close_status_code)    <span class="hljs-built_in">print</span>(close_msg)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wss_on_open</span>(<span class="hljs-params">ws</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">*args</span>):</span>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            ws.send(qr_token)            time.sleep(<span class="hljs-number">8</span>)    _thread.start_new_thread(run, (qr_token,))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wss</span>():</span>    <span class="hljs-comment"># websocket.enableTrace(True)  # 是否显示连接详细信息</span>    ws = websocket.WebSocketApp(        web_socket_url % qr_token, on_open=wss_on_open,        on_message=wss_on_message, on_error=wss_on_error,        on_close=wss_on_close    )    ws.run_forever()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cookie_second</span>():</span>    <span class="hljs-keyword">global</span> cookie    params = &#123;        <span class="hljs-string">&quot;pwd&quot;</span>: once_password,        <span class="hljs-string">&quot;service&quot;</span>: <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>    &#125;    headers[<span class="hljs-string">&quot;Host&quot;</span>] = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>    headers[<span class="hljs-string">&quot;Referer&quot;</span>] = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>    response = requests.get(url=login_url, params=params, headers=headers, cookies=cookie, allow_redirects=<span class="hljs-literal">False</span>)    cookie.update(response.cookies.get_dict())    location = response.headers.get(<span class="hljs-string">&quot;Location&quot;</span>)    <span class="hljs-keyword">return</span> location<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cookie_third</span>(<span class="hljs-params">location</span>):</span>    <span class="hljs-keyword">global</span> cookie    headers[<span class="hljs-string">&quot;Host&quot;</span>] = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>    headers[<span class="hljs-string">&quot;Referer&quot;</span>] = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>    response = requests.get(url=location, headers=headers, cookies=cookie, allow_redirects=<span class="hljs-literal">False</span>)    cookie.update(response.cookies.get_dict())    location = response.headers.get(<span class="hljs-string">&quot;Location&quot;</span>)    <span class="hljs-keyword">return</span> location<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_login_user_info</span>():</span>    headers[<span class="hljs-string">&quot;Host&quot;</span>] = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>    headers[<span class="hljs-string">&quot;Origin&quot;</span>] = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>    headers[<span class="hljs-string">&quot;Referer&quot;</span>] = <span class="hljs-string">&quot;脱敏处理，完整代码关注 GitHub：https://github.com/TRHX/Python3-Spider-Practice&quot;</span>    params = &#123;<span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time.time() * <span class="hljs-number">1000</span>))&#125;    response = requests.get(url=user_info_url, headers=headers, cookies=cookie, params=params)    <span class="hljs-built_in">print</span>(response.text)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>    <span class="hljs-comment"># 第一次获取 cookie，包含 INGRESSCOOKIE、JSESSIONID、SERVERID、acw_tc</span>    get_cookies_first()    <span class="hljs-comment"># 获取二维码</span>    get_login_qr_img()    <span class="hljs-comment"># websocket 扫码登录，返回一次性密码</span>    wss()    <span class="hljs-comment"># 第二次获取 cookie，更新 SERVERID、获取 CASLOGC、CASTGC</span>    location1 = get_cookie_second()    <span class="hljs-comment"># 第三次获取 cookie，获取 SESSION</span>    get_cookie_third(location1)    <span class="hljs-comment"># 获取登录用户信息</span>    get_login_user_info()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS 逆向实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS 逆向实战 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loguru：Python 日志终极解决方案</title>
      <link href="/article/042/"/>
      <url>/article/042/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/loguru.png" alt="loguru"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#ri-zhi-de-chong-yao-xing">日志的重要性</a></li><li><a href="#chang-jian-ri-zhi-ji-lu-fang-shi">常见日志记录方式</a><ul><li><a href="#yi-print">一、print()</a></li><li><a href="#er-zi-xie-mo-ban">二、自写模板</a></li><li><a href="#san-logging">三、Logging</a></li></ul></li><li><a href="#geng-you-ya-de-jie-jue-fang-an-loguru">更优雅的解决方案：Loguru</a><ul><li><a href="#an-zhuang">安装</a></li><li><a href="#kai-xiang-ji-yong">开箱即用</a></li><li><a href="#add-remove">add() / remove()</a></li><li><a href="#wan-zheng-can-shu">完整参数</a></li><li><a href="#rotation-ri-zhi-wen-jian-fen-ge">rotation 日志文件分隔</a></li><li><a href="#retention-ri-zhi-bao-liu-shi-jian">retention 日志保留时间</a></li><li><a href="#compression-ri-zhi-ya-suo-ge-shi">compression 日志压缩格式</a></li><li><a href="#zi-fu-chuan-ge-shi-hua">字符串格式化</a></li><li><a href="#yi-chang-zhui-su">异常追溯</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="ri-zhi-de-chong-yao-xing">日志的重要性</span></h2><p>日志的作用非常重要，日志可以记录用户的操作、程序的异常，还可以为数据分析提供依据，日志的存在意义就是为了能够在程序在运行过程中记录错误，方便维护和调试，能够快速定位出错的地方，减少维护成本。每个程序员都应该知道，不是为了记录日志而记录日志，日志也不是随意记的。要实现能够只通过日志文件还原整个程序执行的过程，达到能透明地看到程序里执行情况，每个线程、每个过程到底执行到哪的目的。日志就像飞机的黑匣子一样，应当能够复原异常的整个现场乃至细节！</p><h2><span id="chang-jian-ri-zhi-ji-lu-fang-shi">常见日志记录方式</span></h2><h3><span id="yi-print">一、print()</span></h3><p>最常见的是把输出函数 <code>print()</code> 当作日志记录的方式，直接打印各种提示信息，常见于个人练习项目里，通常是懒得单独配置日志，而且项目太小不需要日志信息，不需要上线，不需要持续运行，完整的项目不推荐直接打印日志信息，现实中也几乎没有人这么做。</p><h3><span id="er-zi-xie-mo-ban">二、自写模板</span></h3><p>我们可以在不少小项目里面看到作者自己写了一个日志模板，通常利用 <code>print()</code> 或者 <code>sys.stdout</code> 稍微封装一下即可实现简单的日志输出，这里的 <code>sys.stdout</code> 是 Python 中的标准输出流，<code>print()</code> 函数是对 <code>sys.stdout</code> 的高级封装，当我们在 Python 中打印对象调用 <code>print(obj)</code> 时候，事实上是调用了 <code>sys.stdout.write(obj+'\n')</code>，<code>print()</code> 将内容打印到了控制台，然后追加了一个换行符 <code>\n</code>。</p><p>自写日志模板适合比较小的项目，可以按照自己的喜好编写模板，不需要太多复杂配置，方便快捷，但是这种记录日志的方式并不是很规范，有可能你自己觉得阅读体验不错，但是别人在接触你的项目的时候往往需要花费一定的时间去学习日志的逻辑、格式、输出方式等，比较大的项目同样不推荐这种方法。</p><p>一个简单的自写日志模板举例：</p><p>日志模板 <a href="http://log.py">log.py</a>：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> traceback<span class="hljs-keyword">import</span> datetime<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getnowtime</span>():</span>    <span class="hljs-keyword">return</span> datetime.datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_log</span>(<span class="hljs-params">content, level, *args</span>):</span>    sys.stdout.write(<span class="hljs-string">&quot;%s - %s - %s\n&quot;</span> % (getnowtime(), level, content))    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args:        sys.stdout.write(<span class="hljs-string">&quot;%s\n&quot;</span> % arg)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>(<span class="hljs-params">content, *args</span>):</span>    _log(content, <span class="hljs-string">&#x27;DEBUG&#x27;</span>, *args)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">info</span>(<span class="hljs-params">content, *args</span>):</span>    _log(content, <span class="hljs-string">&#x27;INFO&#x27;</span>, *args)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">warn</span>(<span class="hljs-params">content, *args</span>):</span>    _log(content, <span class="hljs-string">&#x27;WARN&#x27;</span>, *args)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">error</span>(<span class="hljs-params">content, *args</span>):</span>    _log(content, <span class="hljs-string">&#x27;ERROR&#x27;</span>, *args)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exception</span>(<span class="hljs-params">content</span>):</span>    sys.stdout.write(<span class="hljs-string">&quot;%s - %s\n&quot;</span> % (getnowtime(), content))    traceback.print_exc(file=sys.stdout)</code></pre><p>调用日志模块：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> loglog.info(<span class="hljs-string">&quot;This is log info!&quot;</span>)log.warn(<span class="hljs-string">&quot;This is log warn!&quot;</span>)log.error(<span class="hljs-string">&quot;This is log error!&quot;</span>)log.debug(<span class="hljs-string">&quot;This is log debug!&quot;</span>)people_info = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">20</span>&#125;<span class="hljs-keyword">try</span>:    gender = people_info[<span class="hljs-string">&quot;gender&quot;</span>]<span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> error:    log.exception(error)</code></pre><p>日志输出：</p><pre><code class="hljs python"><span class="hljs-number">2021</span>-<span class="hljs-number">10</span>-<span class="hljs-number">19</span> 09:<span class="hljs-number">50</span>:<span class="hljs-number">58</span> - INFO - This <span class="hljs-keyword">is</span> log info!<span class="hljs-number">2021</span>-<span class="hljs-number">10</span>-<span class="hljs-number">19</span> 09:<span class="hljs-number">50</span>:<span class="hljs-number">58</span> - WARN - This <span class="hljs-keyword">is</span> log warn!<span class="hljs-number">2021</span>-<span class="hljs-number">10</span>-<span class="hljs-number">19</span> 09:<span class="hljs-number">50</span>:<span class="hljs-number">58</span> - ERROR - This <span class="hljs-keyword">is</span> log error!<span class="hljs-number">2021</span>-<span class="hljs-number">10</span>-<span class="hljs-number">19</span> 09:<span class="hljs-number">50</span>:<span class="hljs-number">58</span> - DEBUG - This <span class="hljs-keyword">is</span> log debug!<span class="hljs-number">2021</span>-<span class="hljs-number">10</span>-<span class="hljs-number">19</span> 09:<span class="hljs-number">50</span>:<span class="hljs-number">58</span> - <span class="hljs-string">&#x27;gender&#x27;</span>Traceback (most recent call last):  File <span class="hljs-string">&quot;D:/python3Project/test.py&quot;</span>, line <span class="hljs-number">18</span>, <span class="hljs-keyword">in</span> &lt;module&gt;    gender = people_info[<span class="hljs-string">&quot;gender&quot;</span>]KeyError: <span class="hljs-string">&#x27;gender&#x27;</span></code></pre><h3><span id="san-logging">三、Logging</span></h3><p>在一个完整的项目中，大多数人都会引入专门的日志记录库，而 Python 自带的标准库 logging 就是专门为日志记录而生的，logging 模块定义的函数和类为应用程序和库的开发实现了一个灵活的事件日志系统。由标准库模块提供日志记录 API 的关键好处是所有 Python 模块都可以使用这个日志记录功能。所以，你的应用日志可以将你自己的日志信息与来自第三方模块的信息整合起来。</p><p>logging 模块虽然强大，但是其配置也是比较繁琐的，在大型项目中通常需要单独初始化日志、配置日志格式等等，我在日常使用中通常都会对 logging 做如下的封装写法，使日志可以按天保存，保留15天的日志，可以配置是否输出到控制台和文件，如下所示：</p><pre><code class="hljs python"><span class="hljs-comment"># 实现按天分割保留日志</span><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> logging<span class="hljs-keyword">from</span> logging <span class="hljs-keyword">import</span> handlersPARENT_DIR = os.path.split(os.path.realpath(__file__))[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 父目录</span>LOGGING_DIR = os.path.join(PARENT_DIR, <span class="hljs-string">&quot;log&quot;</span>)              <span class="hljs-comment"># 日志目录</span>LOGGING_NAME = <span class="hljs-string">&quot;test&quot;</span>                                      <span class="hljs-comment"># 日志文件名</span>LOGGING_TO_FILE = <span class="hljs-literal">True</span>                                     <span class="hljs-comment"># 日志输出文件</span>LOGGING_TO_CONSOLE = <span class="hljs-literal">True</span>                                  <span class="hljs-comment"># 日志输出到控制台</span>LOGGING_WHEN = <span class="hljs-string">&#x27;D&#x27;</span>                                         <span class="hljs-comment"># 日志文件切分维度</span>LOGGING_INTERVAL = <span class="hljs-number">1</span>                                       <span class="hljs-comment"># 间隔少个 when 后，自动重建文件</span>LOGGING_BACKUP_COUNT = <span class="hljs-number">15</span>                                  <span class="hljs-comment"># 日志保留个数，0 保留所有日志</span>LOGGING_LEVEL = logging.DEBUG                              <span class="hljs-comment"># 日志等级</span>LOGGING_suffix = <span class="hljs-string">&quot;%Y.%m.%d.log&quot;</span>                            <span class="hljs-comment"># 旧日志文件名</span><span class="hljs-comment"># 日志输出格式</span>LOGGING_FORMATTER = <span class="hljs-string">&quot;%(levelname)s - %(asctime)s - process:%(process)d - %(filename)s - %(name)s - line:%(lineno)d - %(module)s - %(message)s&quot;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logging_init</span>():</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(LOGGING_DIR):        os.makedirs(LOGGING_DIR)    logger = logging.getLogger()    logger.setLevel(LOGGING_LEVEL)    formatter = logging.Formatter(LOGGING_FORMATTER)    <span class="hljs-keyword">if</span> LOGGING_TO_FILE:        file_handler = handlers.TimedRotatingFileHandler(filename=os.path.join(LOGGING_DIR, LOGGING_NAME), when=LOGGING_WHEN, interval=LOGGING_INTERVAL, backupCount=LOGGING_BACKUP_COUNT)        file_handler.suffix = LOGGING_suffix        file_handler.setFormatter(formatter)        logger.addHandler(file_handler)    <span class="hljs-keyword">if</span> LOGGING_TO_CONSOLE:        stream_handler = logging.StreamHandler(sys.stderr)        stream_handler.setFormatter(formatter)        logger.addHandler(stream_handler)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logging_test</span>():</span>    logging.info(<span class="hljs-string">&quot;This is log info!&quot;</span>)    logging.warning(<span class="hljs-string">&quot;This is log warn!&quot;</span>)    logging.error(<span class="hljs-string">&quot;This is log error!&quot;</span>)    logging.debug(<span class="hljs-string">&quot;This is log debug!&quot;</span>)    people_info = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">20</span>&#125;    <span class="hljs-keyword">try</span>:        gender = people_info[<span class="hljs-string">&quot;gender&quot;</span>]    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> error:        logging.exception(error)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    logging_init()    logging_test()</code></pre><p>输出日志：</p><pre><code class="hljs bash">INFO - 2021-10-19 11:28:10,103 - process:15144 - test.py - root - line:52 - <span class="hljs-built_in">test</span> - This is <span class="hljs-built_in">log</span> info!WARNING - 2021-10-19 11:28:10,105 - process:15144 - test.py - root - line:53 - <span class="hljs-built_in">test</span> - This is <span class="hljs-built_in">log</span> warn!ERROR - 2021-10-19 11:28:10,105 - process:15144 - test.py - root - line:54 - <span class="hljs-built_in">test</span> - This is <span class="hljs-built_in">log</span> error!DEBUG - 2021-10-19 11:28:10,105 - process:15144 - test.py - root - line:55 - <span class="hljs-built_in">test</span> - This is <span class="hljs-built_in">log</span> debug!ERROR - 2021-10-19 11:28:10,105 - process:15144 - test.py - root - line:61 - <span class="hljs-built_in">test</span> - <span class="hljs-string">&#x27;gender&#x27;</span>Traceback (most recent call last):  File <span class="hljs-string">&quot;D:/python3Project/test.py&quot;</span>, line 59, <span class="hljs-keyword">in</span> logging_test    gender = people_info[<span class="hljs-string">&quot;gender&quot;</span>]KeyError: <span class="hljs-string">&#x27;gender&#x27;</span></code></pre><p>它在控制台中是这样的：</p><p><img src="https://cdn.itbob.cn/img/article/042/01.png" alt="01.png"></p><p>当然，如果你不需要很复杂的功能，希望简洁一点，仅仅需要在控制台输出一下日志的话，也可以只进行简单的配置：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> logginglogging.basicConfig(level=logging.DEBUG, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)logging.getLogger()</code></pre><h2><span id="geng-you-ya-de-jie-jue-fang-an-loguru">更优雅的解决方案：Loguru</span></h2><p>对于 logging 模块，即便是简单的使用，也需要自己定义格式，这里介绍一个更加优雅、高效、简洁的第三方模块：loguru，官方的介绍是：Loguru is a library which aims to bring enjoyable logging in Python. Loguru 旨在为 Python 带来愉快的日志记录。这里引用官方的一个 GIF 来快速演示其功能：</p><p><img src="https://cdn.itbob.cn/img/article/042/02.gif" alt="02.gif"></p><hr><h3><span id="an-zhuang">安装</span></h3><p>Loguru 仅支持 Python 3.5 及以上的版本，使用 pip 安装即可：</p><pre><code class="hljs bash">pip install loguru</code></pre><hr><h3><span id="kai-xiang-ji-yong">开箱即用</span></h3><p>Loguru 的主要概念是只有一个：logger</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> loggerlogger.info(<span class="hljs-string">&quot;This is log info!&quot;</span>)logger.warning(<span class="hljs-string">&quot;This is log warn!&quot;</span>)logger.error(<span class="hljs-string">&quot;This is log error!&quot;</span>)logger.debug(<span class="hljs-string">&quot;This is log debug!&quot;</span>)</code></pre><p>控制台输出：</p><p><img src="https://cdn.itbob.cn/img/article/042/03.png" alt="03.png"></p><p>可以看到不需要手动设置，Loguru 会提前配置一些基础信息，自动输出时间、日志级别、模块名、行号等信息，而且根据等级的不同，还自动设置了不同的颜色，方便观察，真正做到了开箱即用！</p><hr><h3><span id="add-remove">add() / remove()</span></h3><p>如果想自定义日志级别，自定义日志格式，保存日志到文件该怎么办？与 logging 模块不同，不需要 Handler，不需要 Formatter，只需要一个 <code>add()</code> 函数就可以了，例如我们想把日志储存到文件：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> loggerlogger.add(<span class="hljs-string">&#x27;test.log&#x27;</span>)logger.debug(<span class="hljs-string">&#x27;this is a debug&#x27;</span>)</code></pre><p>我们不需要像 logging 模块一样再声明一个 FileHandler 了，就一行 <code>add()</code> 语句搞定，运行之后会发现目录下 test.log 里面同样出现了刚刚控制台输出的 debug 信息。</p><p>与 <code>add()</code> 语句相反，<code>remove()</code> 语句可以删除我们添加的配置：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> loggerlog_file = logger.add(<span class="hljs-string">&#x27;test.log&#x27;</span>)logger.debug(<span class="hljs-string">&#x27;This is log debug!&#x27;</span>)logger.remove(log_file)logger.debug(<span class="hljs-string">&#x27;This is another log debug!&#x27;</span>)</code></pre><p>此时控制台会输出两条 debug 信息：</p><pre><code class="hljs bash">2021-10-19 13:53:36.610 | DEBUG    | __main__:&lt;module&gt;:86 - This is <span class="hljs-built_in">log</span> debug!2021-10-19 13:53:36.611 | DEBUG    | __main__:&lt;module&gt;:88 - This is another <span class="hljs-built_in">log</span> debug!</code></pre><p>而 test.log 日志文件里面只有一条 debug  信息，原因就在于我们在第二条 debug 语句之前使用了 <code>remove()</code> 语句。</p><hr><h3><span id="wan-zheng-can-shu">完整参数</span></h3><p>Loguru 对输出到文件的配置有非常强大的支持，比如支持输出到多个文件，分级别分别输出，过大创建新文件，过久自动删除等等。 下面我们来详细看一下 <code>add()</code> 语句的详细参数：</p><p>基本语法：</p><pre><code class="hljs python">add(sink, *, level=<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;&lt;green&gt;&#123;time:YYYY-MM-DD HH:mm:ss.SSS&#125;&lt;/green&gt; | &lt;level&gt;&#123;level: &lt;8&#125;&lt;/level&gt; | &lt;cyan&gt;&#123;name&#125;&lt;/cyan&gt;:&lt;cyan&gt;&#123;function&#125;&lt;/cyan&gt;:&lt;cyan&gt;&#123;line&#125;&lt;/cyan&gt; - &lt;level&gt;&#123;message&#125;&lt;/level&gt;&#x27;</span>, <span class="hljs-built_in">filter</span>=<span class="hljs-literal">None</span>, colorize=<span class="hljs-literal">None</span>, serialize=<span class="hljs-literal">False</span>, backtrace=<span class="hljs-literal">True</span>, diagnose=<span class="hljs-literal">True</span>, enqueue=<span class="hljs-literal">False</span>, catch=<span class="hljs-literal">True</span>, **kwargs)</code></pre><p><strong>基本参数释义：</strong></p><ul><li><strong>sink</strong>：可以是一个 file 对象，例如 <code>sys.stderr</code> 或 <code>open('file.log', 'w')</code>，也可以是 <code>str</code> 字符串或者 <code>pathlib.Path</code> 对象，即文件路径，也可以是一个方法，可以自行定义输出实现，也可以是一个 logging 模块的 Handler，比如 FileHandler、StreamHandler 等，还可以是 <a href="https://docs.python.org/3/glossary.html#term-coroutine-function">coroutine function</a>，即一个返回协程对象的函数等。</li><li><strong>level</strong>：日志输出和保存级别。</li><li><strong>format</strong>：日志格式模板。</li><li><strong>filter</strong>：一个可选的指令，用于决定每个记录的消息是否应该发送到 sink。</li><li><strong>colorize</strong>：格式化消息中包含的颜色标记是否应转换为用于终端着色的 ansi 代码，或以其他方式剥离。 如果没有，则根据 sink 是否为 tty（电传打字机缩写） 自动做出选择。</li><li><strong>serialize</strong>：在发送到 sink 之前，是否应首先将记录的消息转换为 JSON 字符串。</li><li><strong>backtrace</strong>：格式化的异常跟踪是否应该向上扩展，超出捕获点，以显示生成错误的完整堆栈跟踪。</li><li><strong>diagnose</strong>：异常跟踪是否应显示变量值以简化调试。建议在生产环境中设置 <code>False</code>，避免泄露敏感数据。</li><li><strong>enqueue</strong>：要记录的消息是否应在到达 sink 之前首先通过多进程安全队列，这在通过多个进程记录到文件时很有用，这样做的好处还在于使日志记录调用是非阻塞的。</li><li><strong>catch</strong>：是否应自动捕获 sink 处理日志消息时发生的错误，如果为 <code>True</code>，则会在 <code>sys.stderr</code> 上显示异常消息，但该异常不会传播到 sink，从而防止应用程序崩溃。</li><li>*<strong>*kwargs</strong>：仅对配置协程或文件接收器有效的附加参数（见下文）。</li></ul><p><strong>当且仅当 sink 是协程函数时，以下参数适用：</strong></p><ul><li><strong>loop</strong>：将在其中调度和执行异步日志记录任务的事件循环。如果为 <code>None</code>，将使用 <code>asyncio.get_event_loop()</code> 返回的循环。</li></ul><p><strong>当且仅当 sink 是文件路径时，以下参数适用：</strong></p><ul><li><strong>rotation</strong>：一种条件，指示何时应关闭当前记录的文件并开始新的文件。</li><li>**retention **：过滤旧文件的指令，在循环或程序结束期间会删除旧文件。</li><li><strong>compression</strong>：日志文件在关闭时应转换为的压缩或存档格式。</li><li><strong>delay</strong>：是在配置 sink 后立即创建文件，还是延迟到第一条记录的消息时再创建。默认为 <code>False</code>。</li><li><strong>mode</strong>：内置 <code>open()</code> 函数的打开模式，默认为 <code>a</code>（以追加模式打开文件）。</li><li><strong>buffering</strong>：内置 <code>open()</code> 函数的缓冲策略，默认为<code>1</code>（行缓冲文件）。</li><li><strong>encoding</strong>：内置 <code>open()</code> 函数的文件编码，如果 <code>None</code>，则默认为 <a href="https://docs.python.org/3/library/locale.html#locale.getpreferredencoding"><code>locale.getpreferredencoding()</code></a>。</li><li>*<strong>*kwargs</strong>：其他传递给内置 <code>open()</code> 函数的参数。</li></ul><p>这么多参数可以见识到 <code>add()</code> 函数的强大之处，仅仅一个函数就能实现 logging 模块的诸多功能，接下来介绍几个比较常用的方法。</p><hr><h3><span id="rotation-ri-zhi-wen-jian-fen-ge">rotation 日志文件分隔</span></h3><p><code>add()</code> 函数的 rotation 参数，可以实现按照固定时间创建新的日志文件，比如设置每天 0 点新创建一个 log 文件：</p><pre><code class="hljs python">logger.add(<span class="hljs-string">&#x27;runtime_&#123;time&#125;.log&#x27;</span>, rotation=<span class="hljs-string">&#x27;00:00&#x27;</span>)</code></pre><p>设置超过 500 MB 新创建一个 log 文件：</p><pre><code class="hljs python">logger.add(<span class="hljs-string">&#x27;runtime_&#123;time&#125;.log&#x27;</span>, rotation=<span class="hljs-string">&quot;500 MB&quot;</span>)</code></pre><p>设置每隔一个周新创建一个 log 文件：</p><pre><code class="hljs python">logger.add(<span class="hljs-string">&#x27;runtime_&#123;time&#125;.log&#x27;</span>, rotation=<span class="hljs-string">&#x27;1 week&#x27;</span>)</code></pre><hr><h3><span id="retention-ri-zhi-bao-liu-shi-jian">retention 日志保留时间</span></h3><p><code>add()</code> 函数的 retention 参数，可以设置日志的最长保留时间，比如设置日志文件最长保留 15 天：</p><pre><code class="hljs python">logger.add(<span class="hljs-string">&#x27;runtime_&#123;time&#125;.log&#x27;</span>, retention=<span class="hljs-string">&#x27;15 days&#x27;</span>)</code></pre><p>设置日志文件最多保留 10 个：</p><pre><code class="hljs python">logger.add(<span class="hljs-string">&#x27;runtime_&#123;time&#125;.log&#x27;</span>, retention=<span class="hljs-number">10</span>)</code></pre><p>也可以是一个 <code>datetime.timedelta</code> 对象，比如设置日志文件最多保留 5 个小时：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> loggerlogger.add(<span class="hljs-string">&#x27;runtime_&#123;time&#125;.log&#x27;</span>, retention=datetime.timedelta(hours=<span class="hljs-number">5</span>))</code></pre><hr><h3><span id="compression-ri-zhi-ya-suo-ge-shi">compression 日志压缩格式</span></h3><p><code>add()</code> 函数的 compression 参数，可以配置日志文件的压缩格式，这样可以更加节省存储空间，比如设置使用 zip 文件格式保存：</p><pre><code class="hljs python">logger.add(<span class="hljs-string">&#x27;runtime_&#123;time&#125;.log&#x27;</span>, compression=<span class="hljs-string">&#x27;zip&#x27;</span>)</code></pre><p>其格式支持：<code>gz</code>、<code>bz2</code>、<code>xz</code>、<code>lzma</code>、<code>tar</code>、<code>tar.gz</code>、<code>tar.bz2</code>、<code>tar.xz</code></p><hr><h3><span id="zi-fu-chuan-ge-shi-hua">字符串格式化</span></h3><p>Loguru 在输出 log 的时候还提供了非常友好的字符串格式化功能，相当于 <code>str.format()</code>：</p><pre><code class="hljs python">logger.info(<span class="hljs-string">&#x27;If you are using Python &#123;&#125;, prefer &#123;feature&#125; of course!&#x27;</span>, <span class="hljs-number">3.6</span>, feature=<span class="hljs-string">&#x27;f-strings&#x27;</span>)</code></pre><p>输出：</p><pre><code class="hljs python"><span class="hljs-number">2021</span>-<span class="hljs-number">10</span>-<span class="hljs-number">19</span> <span class="hljs-number">14</span>:<span class="hljs-number">59</span>:<span class="hljs-number">06.412</span> | INFO     | __main__:&lt;module&gt;:<span class="hljs-number">3</span> - If you are using Python <span class="hljs-number">3.6</span>, prefer f-strings of course!</code></pre><hr><h3><span id="yi-chang-zhui-su">异常追溯</span></h3><p>在 Loguru 里可以直接使用它提供的装饰器就可以直接进行异常捕获，而且得到的日志是无比详细的：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<span class="hljs-meta">@logger.catch</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_function</span>(<span class="hljs-params">x, y, z</span>):</span>    <span class="hljs-comment"># An error? It&#x27;s caught anyway!</span>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (x + y + z)my_function(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</code></pre><p>日志输出：</p><pre><code class="hljs python"><span class="hljs-number">2021</span>-<span class="hljs-number">10</span>-<span class="hljs-number">19</span> <span class="hljs-number">15</span>:04:<span class="hljs-number">51.675</span> | ERROR    | __main__:&lt;module&gt;:<span class="hljs-number">10</span> - An error has been caught <span class="hljs-keyword">in</span> function <span class="hljs-string">&#x27;&lt;module&gt;&#x27;</span>, process <span class="hljs-string">&#x27;MainProcess&#x27;</span> (<span class="hljs-number">30456</span>), thread <span class="hljs-string">&#x27;MainThread&#x27;</span> (<span class="hljs-number">26268</span>):Traceback (most recent call last):&gt; File <span class="hljs-string">&quot;D:/python3Project\test.py&quot;</span>, line <span class="hljs-number">10</span>, <span class="hljs-keyword">in</span> &lt;module&gt;    my_function(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)    └ &lt;function my_function at <span class="hljs-number">0x014CDFA8</span>&gt;  File <span class="hljs-string">&quot;D:/python3Project\test.py&quot;</span>, line <span class="hljs-number">7</span>, <span class="hljs-keyword">in</span> my_function    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / (x + y + z)                │   │   └ <span class="hljs-number">0</span>                │   └ <span class="hljs-number">0</span>                └ <span class="hljs-number">0</span>ZeroDivisionError: division by zero</code></pre><p>在控制台的输出是这样的：</p><p><img src="https://cdn.itbob.cn/img/article/042/04.png" alt="04.png"></p><p>相比 Logging，Loguru 无论是在配置方面、日志输出样式还是异常追踪，都远优于 Logging，使用 Loguru 无疑能提升开发人员效率。本文仅介绍了一些常用的方法，想要详细了解可参考 <a href="https://loguru.readthedocs.io/">Loguru 官方文档</a>或关注 <a href="https://github.com/Delgan/loguru">Loguru GitHub</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识 SM1/SM2/SM3/SM4/SM7/SM9/ZUC 国密算法</title>
      <link href="/article/041/"/>
      <url>/article/041/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/sm_algorithm.png" alt="sm_algorithm"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#jian-jie">简介</a></li><li><a href="#suan-fa-gai-shu">算法概述</a></li><li><a href="#suan-fa-xiang-jie">算法详解</a><ul><li><a href="#sm1-fen-zu-jia-mi-suan-fa">SM1 分组加密算法</a></li><li><a href="#tuo-yuan-qu-xian-gong-yao-jia-mi-suan-fa">椭圆曲线公钥加密算法</a></li><li><a href="#za-cou-suan-fa">杂凑算法</a></li><li><a href="#fen-zu-jia-mi-suan-fa">分组加密算法</a></li><li><a href="#fen-zu-jia-mi-suan-fa-1">分组加密算法</a></li><li><a href="#biao-shi-jia-mi-suan-fa">标识加密算法</a></li><li><a href="#zu-chong-zhi-suan-fa">祖冲之算法</a></li></ul></li><li><a href="#bian-cheng-yu-yan-shi-xian">编程语言实现</a><ul><li><a href="#python-yu-yan-shi-xian">Python 语言实现</a></li><li><a href="#javascript-yu-yan-shi-xian">JavaScript 语言实现</a></li><li><a href="#qi-ta-yu-yan-shi-xian-yi-ji-can-kao-zi-liao">其他语言实现以及参考资料</a></li></ul></li><li><a href="#fu-gm-t-mi-ma-xing-ye-biao-zhun">附：GM/T 密码行业标准</a></li></ul><!-- tocstop --><hr><h2><span id="jian-jie">简介</span></h2><p>国密即国家密码局认定的国产加密算法，爬虫工程师在做 JS 逆向的时候，会遇到各种各样的加密算法，其中 RSA、AES、SHA 等算法是最常见的，这些算法都是国外的，在我以前的文章里也有介绍：<a href="https://itrhx.blog.csdn.net/article/details/119250052">《史上最全总结！爬虫常见加密解密算法》</a></p><p>事实上从 2010 年开始，我国国家密码管理局就已经开始陆续发布了一系列国产加密算法，这其中就包括 SM1、SM2、SM3 、SM4、SM7、SM9、ZUC（祖冲之加密算法）等，SM 代表商密，即商业密码，是指用于商业的、不涉及国家秘密的密码技术。<strong>SM1 和 SM7 的算法不公开</strong>，其余算法都已成为 ISO/IEC 国际标准。</p><p>在这些国产加密算法中，<strong><font color="#B01B15">SM2、SM3、SM4 三种加密算法是比较常见的</font></strong>，在爬取部分 gov 网站时，也可能会遇到这些算法，所以作为爬虫工程师是有必要了解一下这些算法的，如下图所示某 gov 网站就使用了 SM2 和 SM4 加密算法：</p><p><img src="https://img-blog.csdnimg.cn/758cb19d1fbc4ec5ad7cc33781c2f34e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVFJIWCDigKIg6bKN5YuD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt></p><hr><h2><span id="suan-fa-gai-shu">算法概述</span></h2><table><thead><tr><th style="text-align:center">算法名称</th><th style="text-align:center">算法类别</th><th style="text-align:center">应用领域</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center">SM1</td><td style="text-align:center">对称（分组）加密算法</td><td style="text-align:center">芯片</td><td style="text-align:center">分组长度、密钥长度均为 128 比特</td></tr><tr><td style="text-align:center">SM2</td><td style="text-align:center">非对称（基于椭圆曲线 ECC）加密算法</td><td style="text-align:center">数据加密</td><td style="text-align:center">ECC 椭圆曲线密码机制 256 位，相比 RSA 处理速度快，消耗更少</td></tr><tr><td style="text-align:center">SM3</td><td style="text-align:center">散列（hash）函数算法</td><td style="text-align:center">完整性校验</td><td style="text-align:center">安全性及效率与 SHA-256 相当，压缩函数更复杂</td></tr><tr><td style="text-align:center">SM4</td><td style="text-align:center">对称（分组）加密算法</td><td style="text-align:center">数据加密和局域网产品</td><td style="text-align:center">分组长度、密钥长度均为 128 比特，计算轮数多</td></tr><tr><td style="text-align:center">SM7</td><td style="text-align:center">对称（分组）加密算法</td><td style="text-align:center">非接触式 IC 卡</td><td style="text-align:center">分组长度、密钥长度均为 128 比特</td></tr><tr><td style="text-align:center">SM9</td><td style="text-align:center">标识加密算法（IBE）</td><td style="text-align:center">端对端离线安全通讯</td><td style="text-align:center">加密强度等同于 3072 位密钥的 RSA 加密算法</td></tr><tr><td style="text-align:center">ZUC</td><td style="text-align:center">对称（序列）加密算法</td><td style="text-align:center">移动通信 4G 网络</td><td style="text-align:center">流密码</td></tr></tbody></table><hr><h2><span id="suan-fa-xiang-jie">算法详解</span></h2><h3><span id="sm1-fen-zu-jia-mi-suan-fa">SM1 分组加密算法</span></h3><p>SM1 为分组加密算法，对称加密，分组长度和密钥长度都为 128 位，故对消息进行加解密时，若消息长度过长，需要进行分组，要消息长度不足，则要进行填充。算法安全保密强度及相关软硬件实现性能与 AES 相当，该算法不公开，仅以 IP 核的形式存在于芯片中，调用该算法时，需要通过加密芯片的接口进行调用，采用该算法已经研制了系列芯片、智能 IC 卡、智能密码钥匙、加密卡、加密机等安全产品，广泛应用于电子政务、电子商务及国民经济的各个应用领域（包括国家政务通、警务通等重要领域），一般了解的人比较少，爬虫工程师也不会遇到这种加密算法。</p><h3><span id="tuo-yuan-qu-xian-gong-yao-jia-mi-suan-fa">椭圆曲线公钥加密算法</span></h3><p>SM2 为椭圆曲线（ECC）公钥加密算法，非对称加密，SM2 算法和 RSA 算法都是公钥加密算法，SM2 算法是一种更先进安全的算法，在我们国家商用密码体系中被用来替换 RSA 算法，在不少 gov 网站会见到此类加密算法。我国学者对椭圆曲线密码的研究从 20 世纪 80 年代开始，目前已取得不少成果，SM2 椭圆曲线公钥密码算法比 RSA 算法有以下优势：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">SM2</th><th style="text-align:center">RSA</th></tr></thead><tbody><tr><td style="text-align:center">安全性</td><td style="text-align:center">256 位 SM2 强度已超过 RSA-2048</td><td style="text-align:center">一般</td></tr><tr><td style="text-align:center">算法结构</td><td style="text-align:center">基本椭圆曲线（ECC）</td><td style="text-align:center">基于特殊的可逆模幂运算</td></tr><tr><td style="text-align:center">计算复杂度</td><td style="text-align:center">完全指数级</td><td style="text-align:center">亚指数级</td></tr><tr><td style="text-align:center">存储空间（密钥长度）</td><td style="text-align:center">192-256 bit</td><td style="text-align:center">2048-4096 bit</td></tr><tr><td style="text-align:center">秘钥生成速度</td><td style="text-align:center">较 RSA 算法快百倍以上</td><td style="text-align:center">慢</td></tr><tr><td style="text-align:center">解密加密速度</td><td style="text-align:center">较快</td><td style="text-align:center">一般</td></tr></tbody></table><h3><span id="za-cou-suan-fa">杂凑算法</span></h3><p>SM3 为密码杂凑算法，采用密码散列（hash）函数标准，用于替代 MD5/SHA-1/SHA-2 等国际算法，是在 SHA-256 基础上改进实现的一种算法，消息分组长度为 512 位，摘要值长度为 256 位，其中使用了异或、模、模加、移位、与、或、非运算，由填充、迭代过程、消息扩展和压缩函数所构成。在商用密码体系中，SM3 主要用于数字签名及验证、消息认证码生成及验证、随机数生成等。据国家密码管理局表示，其安全性及效率要高于 MD5 算法和 SHA-1 算法，与 SHA-256 相当。</p><h3><span id="fen-zu-jia-mi-suan-fa">分组加密算法</span></h3><p>SM4 为无线局域网标准的分组加密算法，对称加密，用于替代 DES/AES 等国际算法，SM4 算法与 AES 算法具有相同的密钥长度和分组长度，均为 128 位，故对消息进行加解密时，若消息长度过长，需要进行分组，要消息长度不足，则要进行填充。加密算法与密钥扩展算法都采用 32 轮非线性迭代结构，解密算法与加密算法的结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。</p><table><thead><tr><th></th><th>SM4</th><th>DES</th><th>AES</th></tr></thead><tbody><tr><td>计算轮数</td><td>32</td><td>16（3DES 为 16*3）</td><td>10/12/14</td></tr><tr><td>密码部件</td><td>S 盒、非线性变换、线性变换、合成变换</td><td>标准算术和逻辑运算、先替换后置换，不含线性变换</td><td>S 盒、行移位变换、列混合变换、圈密钥加变换（AddRoundKey）</td></tr></tbody></table><h3><span id="fen-zu-jia-mi-suan-fa">分组加密算法</span></h3><p>SM7 为分组加密算法，对称加密，该算法不公开，应用包括身份识别类应用（非接触式 IC 卡、门禁卡、工作证、参赛证等），票务类应用（大型赛事门票、展会门票等），支付与通卡类应用（积分消费卡、校园一卡通、企业一卡通等）。爬虫工程师基本上不会遇到此类算法。</p><h3><span id="biao-shi-jia-mi-suan-fa">标识加密算法</span></h3><p>SM9 为标识加密算法（Identity-Based Cryptography），非对称加密，标识加密将用户的标识（如微信号、邮件地址、手机号码、QQ 号等）作为公钥，省略了交换数字证书和公钥过程，使得安全系统变得易于部署和管理，适用于互联网应用的各种新兴应用的安全保障，如基于云技术的密码服务、电子邮件安全、智能终端保护、物联网安全、云存储安全等等。这些安全应用可采用手机号码或邮件地址作为公钥，实现数据加密、身份认证、通话加密、通道加密等。在商用密码体系中，SM9 主要用于用户的身份认证，据新华网公开报道，SM9 的加密强度等同于 3072 位密钥的 RSA 加密算法。</p><h3><span id="zu-chong-zhi-suan-fa">祖冲之算法</span></h3><p>ZUC 为流密码算法，对称加密，该机密性算法可适用于 3GPP LTE 通信中的加密和解密，该算法包括祖冲之算法（ZUC）、机密性算法（128-EEA3）和完整性算法（128-EIA3）三个部分。已经被国际组织 3GPP 推荐为 4G 无线通信的第三套国际加密和完整性标准的候选算法。</p><hr><h2><span id="bian-cheng-yu-yan-shi-xian">编程语言实现</span></h2><h3><span id="python-yu-yan-shi-xian">Python 语言实现</span></h3><p>在 Python 里面并没有比较官方的库来实现国密算法，这里仅列出了其中两个较为完善的第三方库，需要注意的是，SM1 和 SM7 算法不公开，目前大多库仅实现了 SM2、SM3、SM4 三种密算法。</p><ul><li>snowland-smx-python：<a href="https://gitee.com/snowlandltd/snowland-smx-python">https://gitee.com/snowlandltd/snowland-smx-python</a></li><li>gmssl：<a href="https://github.com/duanhongyi/gmssl">https://github.com/duanhongyi/gmssl</a></li><li>gmssl-python：<a href="https://github.com/gongxian-ding/gmssl-python">https://github.com/gongxian-ding/gmssl-python</a></li></ul><p>其中 gmssl-python 是 gmssl 的改进版，gmssl-python 新增支持了 SM9 算法，不过截止本文编写时，gmssl-python 并未发布 pypi，也未 PR 到 gmssl，使用 <code>pip install gmssl</code> 安装的 gmssl 不支持 SM9 算法。若要使用 SM9 算法，可下载 gmssl-python 源码手动安装。</p><p>以 gmssl 的 SM2 算法为例，实现如下（其他算法和详细用法可参考其官方文档）：</p><p>SM2 加密（encrypt）和解密（decrypt）：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm2<span class="hljs-comment"># 16 进制的公钥和私钥</span>private_key = <span class="hljs-string">&#x27;00B9AB0B828FF68872F21A837FC303668428DEA11DCD1B24429D0C99E24EED83D5&#x27;</span>public_key = <span class="hljs-string">&#x27;B9C9A6E04E9C91F7BA880429273747D7EF5DDEB0BB2FF6317EB00BEF331A83081A6994B8993F3F5D6EADDDB81872266C87C018FB4162F5AF347B483E24620207&#x27;</span>sm2_crypt = sm2.CryptSM2(public_key=public_key, private_key=private_key)<span class="hljs-comment"># 待加密数据和加密后数据为 bytes 类型</span>data = <span class="hljs-string">b&quot;this is the data to be encrypted&quot;</span>enc_data = sm2_crypt.encrypt(data)dec_data = sm2_crypt.decrypt(enc_data)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enc_data: &#x27;</span>, enc_data.<span class="hljs-built_in">hex</span>())<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dec_data: &#x27;</span>, dec_data)<span class="hljs-comment"># enc_data:  3cb96dd2e0b6c24df8e22a5da3951d061a6ee6ce99f46a446426feca83e501073288b1553ca8d91fad79054e26696a27c982492466dafb5ed06a573fb09947f2aed8dfae243b095ab88115c584bb6f0814efe2f338a00de42b244c99698e81c7913c1d82b7609557677a36681dd10b646229350ad0261b51ca5ed6030d660947</span><span class="hljs-comment"># dec_data:  b&#x27;this is the data to be encrypted&#x27;</span></code></pre><p>SM2 签名（sign）和校验（verify）：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm2, func<span class="hljs-comment"># 16 进制的公钥和私钥</span>private_key = <span class="hljs-string">&#x27;00B9AB0B828FF68872F21A837FC303668428DEA11DCD1B24429D0C99E24EED83D5&#x27;</span>public_key = <span class="hljs-string">&#x27;B9C9A6E04E9C91F7BA880429273747D7EF5DDEB0BB2FF6317EB00BEF331A83081A6994B8993F3F5D6EADDDB81872266C87C018FB4162F5AF347B483E24620207&#x27;</span>sm2_crypt = sm2.CryptSM2(public_key=public_key, private_key=private_key)<span class="hljs-comment"># 待签名数据为 bytes 类型</span>data = <span class="hljs-string">b&quot;this is the data to be signed&quot;</span>random_hex_str = func.random_hex(sm2_crypt.para_len)<span class="hljs-comment">#  16 进制</span>sign = sm2_crypt.sign(data, random_hex_str)verify = sm2_crypt.verify(sign, data)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sign: &#x27;</span>, sign)<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;verify: &#x27;</span>, verify)<span class="hljs-comment"># sign:  45cfe5306b1a87cf5d0034ef6712babdd1d98547e75bcf89a17f3bcb617150a3f111ab05597601bab8c41e2b980754b74ebe9a169a59db37d549569910ae273a</span><span class="hljs-comment"># verify:  True</span></code></pre><h3><span id="javascript-yu-yan-shi-xian">JavaScript 语言实现</span></h3><p>在 JavaScript 中已有比较成熟的实现库，这里推荐 sm-crypto，目前支持 SM2、SM3 和 SM4，需要注意的是，SM2 非对称加密的结果由 C1、C2、C3 三部分组成，其中 C1 是生成随机数的计算出的椭圆曲线点，C2 是密文数据，C3 是 SM3 的摘要值，最开始的国密标准的结果是按 C1C2C3 顺序的，新标准的是按 C1C3C2 顺序存放的，sm-crypto 支持设置 cipherMode，也就是 C1C2C3 的排列顺序。</p><p>sm-crypto：<a href="https://www.npmjs.com/package/sm-crypto">https://www.npmjs.com/package/sm-crypto</a></p><p>以 SM2 算法为例，实现如下（其他算法和详细用法可参考其官方文档）：</p><p>SM2 加密（encrypt）和解密（decrypt）：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sm2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sm-crypto&#x27;</span>).sm2<span class="hljs-comment">// 1 - C1C3C2，0 - C1C2C3，默认为1</span><span class="hljs-keyword">const</span> cipherMode = <span class="hljs-number">1</span><span class="hljs-comment">// 获取密钥对</span><span class="hljs-keyword">let</span> keypair = sm2.generateKeyPairHex()<span class="hljs-keyword">let</span> publicKey = keypair.publicKey   <span class="hljs-comment">// 公钥</span><span class="hljs-keyword">let</span> privateKey = keypair.privateKey <span class="hljs-comment">// 私钥</span><span class="hljs-keyword">let</span> msgString = <span class="hljs-string">&quot;this is the data to be encrypted&quot;</span><span class="hljs-keyword">let</span> encryptData = sm2.doEncrypt(msgString, publicKey, cipherMode)    <span class="hljs-comment">// 加密结果</span><span class="hljs-keyword">let</span> decryptData = sm2.doDecrypt(encryptData, privateKey, cipherMode) <span class="hljs-comment">// 解密结果</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;encryptData: &quot;</span>, encryptData)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;decryptData: &quot;</span>, decryptData)<span class="hljs-comment">// encryptData:  ddf261103fae06d0efe20ea0fe0d82bcc170e8efd8eeae24e9559b3835993f0ed2acb8ba6782fc21941ee74ca453d77664a5cb7dbb91517e6a3b0c27db7ce587ae7af54f8df48d7fa822b7062e2af66c112aa57de94d12ba28e5ba96bf4439d299b41da4a5282d054696adc64156d248049d1eb1d0af28d76b542fe8a95d427e</span><span class="hljs-comment">// decryptData:  this is the data to be encrypted</span></code></pre><p>SM2 签名（sign）和校验（verify）：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sm2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sm-crypto&#x27;</span>).sm2<span class="hljs-comment">// 获取密钥对</span><span class="hljs-keyword">let</span> keypair = sm2.generateKeyPairHex()<span class="hljs-keyword">let</span> publicKey = keypair.publicKey   <span class="hljs-comment">// 公钥</span><span class="hljs-keyword">let</span> privateKey = keypair.privateKey <span class="hljs-comment">// 私钥</span><span class="hljs-comment">// 纯签名 + 生成椭圆曲线点</span><span class="hljs-keyword">let</span> msgString = <span class="hljs-string">&quot;this is the data to be signed&quot;</span><span class="hljs-keyword">let</span> sigValueHex = sm2.doSignature(msgString, privateKey)                    <span class="hljs-comment">// 签名</span><span class="hljs-keyword">let</span> verifyResult = sm2.doVerifySignature(msgString, sigValueHex, publicKey) <span class="hljs-comment">// 验签结果</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;sigValueHex: &quot;</span>, sigValueHex)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;verifyResult: &quot;</span>, verifyResult)<span class="hljs-comment">// sigValueHex:  924cbb9f2b5adb554ef77129ff1e3a00b2da42017ad3ec2f806d824a77646987ba8c8c4fb94576c38bc11ae69cc98ebbb40b5d47715171ec7dcea913dfc6ccc1</span><span class="hljs-comment">// verifyResult:  true</span></code></pre><h3><span id="qi-ta-yu-yan-shi-xian-yi-ji-can-kao-zi-liao">其他语言实现以及参考资料</span></h3><ul><li>Java 语言实现：<ul><li><a href="https://github.com/bcgit/bc-csharp">https://github.com/bcgit/bc-csharp</a></li><li><a href="https://github.com/xjfuuu/SM2_SM3_SM4Encrypt">https://github.com/xjfuuu/SM2_SM3_SM4Encrypt</a></li></ul></li><li>Go 语言实现：<a href="https://github.com/tjfoc/gmsm">https://github.com/tjfoc/gmsm</a></li><li>开源国密算法工具箱：<a href="http://gmssl.org/">http://gmssl.org/</a></li><li>国密算法源代码下载：<a href="http://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71">http://www.scctc.org.cn/templates/Download/index.aspx?nodeid=71</a></li><li>国家密码管理局：<a href="https://www.sca.gov.cn/">https://www.sca.gov.cn/</a></li><li>密码标准委员会：<a href="http://www.gmbz.org.cn/">http://www.gmbz.org.cn/</a></li></ul><hr><h2><span id="fu-gm-t-mi-ma-xing-ye-biao-zhun">附：GM/T 密码行业标准</span></h2><ul><li><a href="http://www.gmbz.org.cn/main/viewfile/20180117202410524608.html">GM/T 0001.1-2012：祖冲之序列密码算法：第1部分：算法描述</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180107233806310781.html">GM/T 0001.2-2012：祖冲之序列密码算法：第2部分：基于祖冲之算法的机密性算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180107234058336917.html">GM/T 0001.3-2012：祖冲之序列密码算法：第3部分：基于祖冲之算法的完整性算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108015515787986.html">GM/T 0003.1-2012：SM2 椭圆曲线公钥密码算法第1部分：总则</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108023346264349.html">GM/T 0003.2-2012：SM2 椭圆曲线公钥密码算法第2部分：数字签名算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108023456003485.html">GM/T 0003.3-2012：SM2 椭圆曲线公钥密码算法第3部分：密钥交换协议</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108023602687857.html">GM/T 0003.4-2012：SM2 椭圆曲线公钥密码算法第4部分：公钥加密算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/2018010802371372251.html">GM/T 0003.5-2012：SM2 椭圆曲线公钥密码算法第5部分：参数定义</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108023812835219.html">GM/T 0004-2012：SM3 密码杂凑算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180108015408199368.html">GM/T 0002-2012：SM4 分组密码算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/2018011002473633053.html">GM/T 0044.1-2016：SM9 标识密码算法 第1部分：总则</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180110024900801385.html">GM/T 0044.2-2016：SM9 标识密码算法 第2部分：数字签名算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180110025010004565.html">GM/T 0044.3-2016：SM9 标识密码算法 第3部分：密钥交换协议</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180110025115084846.html">GM/T 0044.4-2016：SM9 标识密码算法 第4部分：密钥封装机制和公钥加密算法</a></li><li><a href="http://www.gmbz.org.cn/main/viewfile/20180110025229918536.html">GM/T 0044.5-2016：SM9 标识密码算法 第5部分：参数定义</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS 逆向理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> JS 逆向理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫逆向基础，理解 JavaScript 模块化编程 webpack</title>
      <link href="/article/040/"/>
      <url>/article/040/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/webpack.png" alt="webpack"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#jian-jie">简介</a></li><li><a href="#han-shu-sheng-ming-yu-han-shu-biao-da-shi">函数声明与函数表达式</a></li><li><a href="#iife-li-ji-diao-yong-han-shu-biao-da-shi">IIFE 立即调用函数表达式</a><ul><li><a href="#iife-ji-ben-yu-fa">IIFE 基本语法</a></li><li><a href="#iife-can-shu-chuan-di">IIFE 参数传递</a></li></ul></li><li><a href="#function-prototype-call-apply-bind">Function.prototype.call() / apply() / bind()</a><ul><li><a href="#call">call()</a></li><li><a href="#apply">apply()</a></li><li><a href="#bind">bind()</a></li></ul></li><li><a href="#li-jie-webpack">理解 webpack</a></li><li><a href="#gai-xie-webpack">改写 webpack</a></li></ul><!-- tocstop --><hr><h2><span id="jian-jie">简介</span></h2><p>在分析一些站点的 JavaScript 代码时，比较简单的代码，函数通常都是一个一个的，例如：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>)&#125;</code></pre><p>但是稍微复杂一点的站点，通常会遇到类似如下的代码结构：</p><pre><code class="hljs javascript">!<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params">t</span>) </span>&#123;        <span class="hljs-keyword">return</span> i[t].call(a, b, c, d)    &#125;&#125;([    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t, e</span>) </span>&#123;&#125;,     <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t, e, n</span>) </span>&#123;&#125;,     <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t, e, r</span>) </span>&#123;&#125;,     <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t, e, o</span>) </span>&#123;&#125;]);</code></pre><p>这种写法在 JavaScript 中很常见，对于熟悉 JavaScript 的人来说可能非常简单，但是爬虫工程师大多数都是用 Python 或者 Java 来写代码的，看到这种语法就有可能懵了，由于在剥离 JS 加密代码时会经常遇到，所以理解这种语法对于爬虫工程师来说是非常重要的。</p><p>这种写法貌似没有官方的名称，相当于进行了模块化编程，因此大多数人称其为 webpack，上面的示例看起来比较费劲，简单优化一下：</p><pre><code class="hljs javascript">!<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">allModule</span>) </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useModule</span>(<span class="hljs-params">whichModule</span>) </span>&#123;        allModule[whichModule].call(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;hello world!&quot;</span>);    &#125;    useModule(<span class="hljs-number">0</span>)&#125;([    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">module0</span>(<span class="hljs-params">param</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;module0: &quot;</span> + param)&#125;,    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">module1</span>(<span class="hljs-params">param</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;module1: &quot;</span> + param)&#125;,    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">module2</span>(<span class="hljs-params">param</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;module2: &quot;</span> + param)&#125;,]);</code></pre><p>运行以上代码，会输出 <code>module0: hello world!</code>，相信通过浅显易懂的变量名和函数名，应该就可以看懂大致含义了，调用 <code>useModule(0)</code>，从所有函数里选择第一个，将 <code>hello world!</code> 传递给 <code>module0</code> 并输出。</p><p>仔细观察以上代码，我们会发现主要用到了 <code>!function()&#123;&#125;()</code> 和 <code>function.call()</code> 语法，接下来就一一介绍一下。</p><hr><h2><span id="han-shu-sheng-ming-yu-han-shu-biao-da-shi">函数声明与函数表达式</span></h2><p>在 ECMAScript（JavaScript 的一个标准）中，有两个最常用的创建函数对象的方法，即使用函数声明或者函数表达式，ECMAScript 规范明确了一点，即函数声明必须始终带有一个标识符，也就是我们所说的函数名，而函数表达式则可以省略。</p><p>函数声明，会给函数指定一个名字，会在代码执行以前被加载到作用域中，所以<strong>调用函数在函数声明之前或之后都是可以的</strong>：</p><pre><code class="hljs javascript">test(<span class="hljs-string">&quot;Hello World!&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">arg</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(arg)&#125;</code></pre><p>函数表达式，创建一个匿名函数，然后将这个匿名函数赋给一个变量，在代码执行到函数表达式的时候才会有定义，所以<strong>调用函数在函数表达式之后才能正确运行</strong>，否则是会报错的：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arg</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(arg)&#125;test(<span class="hljs-string">&quot;Hello World!&quot;</span>)</code></pre><hr><h2><span id="iife-li-ji-diao-yong-han-shu-biao-da-shi">IIFE 立即调用函数表达式</span></h2><p>IIFE 全称 Immediately-invoked Function Expressions，译为立即调用函数表达式，也称为自执行函数、立即执行函数、自执行匿名函数等，IIFE 是一种语法，这种模式本质上就是函数表达式（命名的或者匿名的）在创建后立即执行。当函数变成立即执行的函数表达式时，表达式中的变量不能从外部访问。IIFE 主要用来隔离作用域，避免污染。</p><hr><h3><span id="iife-ji-ben-yu-fa">IIFE 基本语法</span></h3><p>IIFE 的写法非常灵活，主要有以下几种格式：</p><p>1、匿名函数前面加上一元操作符，后面加上 <code>()</code>：</p><pre><code class="hljs javascript">!<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I AM IIFE&quot;</span>)&#125;();-<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I AM IIFE&quot;</span>)&#125;();+<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I AM IIFE&quot;</span>)&#125;();~<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I AM IIFE&quot;</span>)&#125;();</code></pre><p>2、匿名函数后面加上 <code>()</code>，然后再用 <code>()</code> 将整个括起来：</p><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I AM IIFE&quot;</span>)&#125;());</code></pre><p>3、先用 <code>()</code> 将匿名函数括起来，再在后面加上 <code>()</code>：</p><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I AM IIFE&quot;</span>)&#125;)();</code></pre><p>4、使用箭头函数表达式，先用 <code>()</code> 将箭头函数表达式括起来，再在后面加上 <code>()</code>：</p><pre><code class="hljs javascript">(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I AM IIFE&quot;</span>)&#125;)()</code></pre><p>5、匿名函数前面加上 <code>void</code> 关键字，后面加上 <code>()</code>， <code>void</code> 指定要计算或运行一个表达式，但是不返回值：</p><pre><code class="hljs javascript"><span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I AM IIFE&quot;</span>)&#125;();</code></pre><p>有的时候，我们还有可能见到立即执行函数前面后分号的情况，例如：</p><pre><code class="hljs javascript">;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I AM IIFE&quot;</span>)&#125;());!<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I AM IIFE&quot;</span>)&#125;()</code></pre><p>这是因为立即执行函数通常作为一个单独模块使用一般是没有问题的，但是还是建议在立即执行函数前面或者后面加上分号，这样可以有效地与前面或者后面的代码进行隔离，否则可能出现意想不到的错误。</p><hr><h3><span id="iife-can-shu-chuan-di">IIFE 参数传递</span></h3><p>将参数放在末尾的 <code>()</code> 里即可实现参数传递：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I AM IIFE&quot;</span>;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">param</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(param)&#125;)(text);<span class="hljs-comment">// I AM IIFE</span></code></pre><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> dict = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;20&quot;</span>&#125;;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(dict.name);&#125;)(dict);<span class="hljs-comment">// Bob</span></code></pre><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++) &#123;        sum += list[i];    &#125;    <span class="hljs-built_in">console</span>.log(sum);&#125;)(list);<span class="hljs-comment">// 15</span></code></pre><hr><h2><span id="function-prototype-call-apply-bind">Function.prototype.call() / apply() / bind()</span></h2><p><code>Function.prototype.call()</code>、<code>Function.prototype.apply()</code>、<code>Function.prototype.bind()</code> 都是比较常用的方法。它们的作用一模一样，即<strong>改变函数中的 <code>this</code> 指向</strong>，它们的区别如下：</p><ul><li><code>call()</code> 方法会立即执行这个函数，接受一个多个参数，参数之间用逗号隔开；</li><li><code>apply()</code> 方法会立即执行这个函数，接受一个包含多个参数的数组；</li><li><code>bind()</code> 方法不会立即执行这个函数，返回的是一个修改过后的函数，便于稍后调用，接受的参数和 <code>call()</code> 一样。</li></ul><hr><h3><span id="call">call()</span></h3><p><code>call()</code> 方法接受多个参数，第一个参数 thisArg 指定了函数体内 this 对象的指向，如果这个函数处于非严格模式下，指定为 null 或 undefined 时会自动替换为指向全局对象（浏览器中就是 window 对象），在严格模式下，函数体内的 this 还是为 null。从第二个参数开始往后，每个参数被依次传入函数，基本语法如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>.call(thisArg, arg1, arg2, ...)</code></pre><p>示例：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b, c</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(a + b + c)&#125;test.call(<span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <span class="hljs-comment">// 6</span></code></pre><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">this</span>.lastName)&#125;<span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Doe&quot;</span>&#125;test.call(data)  <span class="hljs-comment">// John Doe</span></code></pre><hr><h3><span id="apply">apply()</span></h3><p><code>apply()</code> 方法接受两个参数，第一个参数 thisArg 与 <code>call()</code> 方法一致，第二个参数为一个带下标的集合，从 ECMAScript 第5版开始，这个集合可以为数组，也可以为类数组，<code>apply()</code> 方法把这个集合中的元素作为参数传递给被调用的函数，基本语法如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>.apply(thisArg, [arg1, arg2, ...])</code></pre><p>示例：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b, c</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(a + b + c)&#125;test.apply(<span class="hljs-literal">null</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])  <span class="hljs-comment">// 6</span></code></pre><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">this</span>.lastName)&#125;<span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Doe&quot;</span>&#125;test.apply(data)  <span class="hljs-comment">// John Doe</span></code></pre><hr><h3><span id="bind">bind()</span></h3><p><code>bind()</code> 方法和 <code>call()</code> 接受的参数是相同的，只不过 <code>bind()</code> 返回的是一个函数，基本语法如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>.bind(thisArg, arg1, arg2, ...)</code></pre><p>示例：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b, c</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(a + b + c)&#125;test.bind(<span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)()  <span class="hljs-comment">// 6</span></code></pre><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">this</span>.lastName)&#125;<span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Doe&quot;</span>&#125;test.bind(data)()  <span class="hljs-comment">// John Doe</span></code></pre><hr><h2><span id="li-jie-webpack">理解 webpack</span></h2><p>有了以上知识后，我们再来理解一下模块化编程，也就是前面所说的 webpack 写法：</p><pre><code class="hljs javascript">!<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">allModule</span>) </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useModule</span>(<span class="hljs-params">whichModule</span>) </span>&#123;        allModule[whichModule].call(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;hello world!&quot;</span>);    &#125;    useModule(<span class="hljs-number">0</span>)&#125;([    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">module0</span>(<span class="hljs-params">param</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;module0: &quot;</span> + param)&#125;,    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">module1</span>(<span class="hljs-params">param</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;module1: &quot;</span> + param)&#125;,    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">module2</span>(<span class="hljs-params">param</span>) </span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;module2: &quot;</span> + param)&#125;,]);</code></pre><p>首先，这整个代码是一个 IIFE 立即调用函数表达式，传递的参数是一个数组，里面包含三个方法，分别是 <code>module0</code>、<code>module1</code> 和 <code>module2</code>，可以将其视为三个模块，那么 IIFE 接受的参数 <code>allModule</code> 就包含这三个模块，IIFE 里面还包含一个函数 <code>useModule()</code>，可以将其视为模块加载器，即要使用哪个模块，示例中 <code>useModule(0)</code> 即表示调用第一个模块，函数里面使用 <code>call()</code> 方法改变函数中的 <code>this</code> 指向并传递参数，调用相应的模块进行输出。</p><hr><h2><span id="gai-xie-webpack">改写 webpack</span></h2><p>对于我们爬虫逆向当中经常遇到的 webpack 模块化的写法，可以很容易对其进行改写，以下以一段加密代码为例：</p><pre><code class="hljs javascript">CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;crypto-js&quot;</span>)!<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">func</span>) </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">acvs</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> kk = func[<span class="hljs-number">1</span>].call(<span class="hljs-literal">null</span>, <span class="hljs-number">1e3</span>);        <span class="hljs-keyword">var</span> data = &#123;            <span class="hljs-attr">r</span>: <span class="hljs-string">&quot;I LOVE PYTHON&quot;</span>,            <span class="hljs-attr">e</span>: kk,            <span class="hljs-attr">i</span>: <span class="hljs-string">&quot;62bs819idl00oac2&quot;</span>,            <span class="hljs-attr">k</span>: <span class="hljs-string">&quot;0123456789abcdef&quot;</span>        &#125;        <span class="hljs-keyword">return</span> func[<span class="hljs-number">0</span>].call(data);    &#125;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加密文本：&quot;</span> + acvs())    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">odsc</span>(<span class="hljs-params">account</span>) </span>&#123;        <span class="hljs-keyword">var</span> cr = <span class="hljs-literal">false</span>;        <span class="hljs-keyword">var</span> regExp = <span class="hljs-regexp">/(^\d&#123;7,8&#125;$)|(^0\d&#123;10,12&#125;$)/</span>;        <span class="hljs-keyword">if</span> (regExp.test(account)) &#123;            cr = <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-keyword">return</span> cr;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mkle</span>(<span class="hljs-params">account</span>) </span>&#123;        <span class="hljs-keyword">var</span> cr = <span class="hljs-literal">false</span>;        <span class="hljs-keyword">var</span> regExp = <span class="hljs-regexp">/^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]&#123;2,4&#125;)+$/</span>;        <span class="hljs-keyword">if</span> (regExp.test(account)) &#123;            cr = <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-keyword">return</span> cr;    &#125;&#125;([    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-string">&quot;&quot;</span>, t = <span class="hljs-number">0</span>; t &lt; <span class="hljs-built_in">this</span>.r.length; t++) &#123;            <span class="hljs-keyword">var</span> o = <span class="hljs-built_in">this</span>.e ^ <span class="hljs-built_in">this</span>.r.charCodeAt(t);            n += <span class="hljs-built_in">String</span>.fromCharCode(o)        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">encodeURIComponent</span>(n)    &#125;,    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.ceil(x * <span class="hljs-built_in">Math</span>.random())    &#125;,    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;        <span class="hljs-keyword">var</span> a = CryptoJS.MD5(<span class="hljs-built_in">this</span>.k);        <span class="hljs-keyword">var</span> c = CryptoJS.enc.Utf8.parse(a);        <span class="hljs-keyword">var</span> d = CryptoJS.AES.encrypt(e, c, &#123;            <span class="hljs-attr">iv</span>: <span class="hljs-built_in">this</span>.i        &#125;);        <span class="hljs-keyword">return</span> d + <span class="hljs-string">&quot;&quot;</span>    &#125;,    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;        <span class="hljs-keyword">var</span> b = CryptoJS.MD5(<span class="hljs-built_in">this</span>.k);        <span class="hljs-keyword">var</span> d = CryptoJS.enc.Utf8.parse(b);        <span class="hljs-keyword">var</span> a = CryptoJS.AES.decrypt(e, d, &#123;            <span class="hljs-attr">iv</span>: <span class="hljs-built_in">this</span>.i        &#125;).toString(CryptoJS.enc.Utf8);        <span class="hljs-keyword">return</span> a    &#125;]);</code></pre><p>可以看到关键的加密入口函数是 <code>acvs()</code>，<code>acvs()</code> 里面又调用了 IIFE 参数列表里面的第一个和第二个函数，剩下的其他函数都是干扰项，而第一个函数中用到了 r 和 e 参数，将其直接传入即可，最终改写如下：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params">r, e</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-string">&quot;&quot;</span>, t = <span class="hljs-number">0</span>; t &lt; r.length; t++) &#123;        <span class="hljs-keyword">var</span> o = e ^ r.charCodeAt(t);        n += <span class="hljs-built_in">String</span>.fromCharCode(o)    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">encodeURIComponent</span>(n)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params">x</span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.ceil(x * <span class="hljs-built_in">Math</span>.random())&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">acvs</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> kk = b(<span class="hljs-number">1e3</span>);    <span class="hljs-keyword">var</span> r = <span class="hljs-string">&quot;I LOVE PYTHON&quot;</span>;    <span class="hljs-keyword">return</span> a(r, kk);&#125;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加密文本：&quot;</span> + acvs())</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS 逆向理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> JS 逆向理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫常见加密解密算法总结</title>
      <link href="/article/039/"/>
      <url>/article/039/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/cover/encryption_algorithm.png" alt="encryption_algorithm"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#jian-jie">简介</a><ul><li><a href="#javascript-jia-mi-jie-mi-mo-kuai">JavaScript 加密解密模块</a><ul><li><a href="#crypto-js">Crypto-JS</a></li><li><a href="#node-rsa">Node-RSA</a></li><li><a href="#jsencrypt">JSEncrypt</a></li></ul></li><li><a href="#python-jia-mi-jie-mi-ku">Python 加密解密库</a><ul><li><a href="#cryptodome-crypto">Cryptodome &amp; Crypto</a></li><li><a href="#hashlib">Hashlib</a></li><li><a href="#hmac">HMAC</a></li><li><a href="#pydes">pyDes</a></li><li><a href="#esa">ESA</a></li></ul></li></ul></li><li><a href="#jia-mi-jie-mi-ji-ben-can-shu">加密解密基本参数</a><ul><li><a href="#chu-shi-xiang-liang-iv">初始向量 iv</a></li><li><a href="#jia-mi-mo-shi-mode">加密模式 mode</a></li><li><a href="#tian-chong-fang-shi-padding">填充方式 padding</a></li></ul></li><li><a href="#base64">Base64</a><ul><li><a href="#javascript-shi-xian">JavaScript 实现</a></li><li><a href="#python-shi-xian">Python 实现</a></li></ul></li><li><a href="#md5">MD5</a><ul><li><a href="#javascript-shi-xian-1">JavaScript 实现</a></li><li><a href="#python-shi-xian-1">Python 实现</a></li></ul></li><li><a href="#pbkdf2">PBKDF2</a><ul><li><a href="#javascript-shi-xian-2">JavaScript 实现</a></li><li><a href="#python-shi-xian-2">Python 实现</a></li></ul></li><li><a href="#sha">SHA</a><ul><li><a href="#javascript-shi-xian-3">JavaScript 实现</a></li><li><a href="#python-shi-xian-3">Python 实现</a></li></ul></li><li><a href="#hmac-1">HMAC</a><ul><li><a href="#javascript-shi-xian-4">JavaScript 实现</a></li><li><a href="#python-shi-xian-4">Python 实现</a></li></ul></li><li><a href="#des">DES</a><ul><li><a href="#javascript-shi-xian-5">JavaScript 实现</a></li><li><a href="#python-shi-xian-5">Python 实现</a></li></ul></li><li><a href="#3des">3DES</a><ul><li><a href="#javascript-shi-xian-6">JavaScript 实现</a></li><li><a href="#python-shi-xian-6">Python 实现</a></li></ul></li><li><a href="#aes">AES</a><ul><li><a href="#javascript-shi-xian-7">JavaScript 实现</a></li><li><a href="#python-shi-xian-7">Python 实现</a></li></ul></li><li><a href="#rc4">RC4</a><ul><li><a href="#javascript-shi-xian-8">JavaScript 实现</a></li><li><a href="#python-shi-xian-8">Python 实现</a></li></ul></li><li><a href="#rabbit">Rabbit</a><ul><li><a href="#javascript-shi-xian-9">JavaScript 实现</a></li><li><a href="#python-shi-xian-9">Python 实现</a></li></ul></li><li><a href="#rsa">RSA</a><ul><li><a href="#javascript-shi-xian-10">JavaScript 实现</a></li><li><a href="#python-shi-xian-10">Python 实现</a></li></ul></li></ul><!-- tocstop --><hr><h2><span id="jian-jie">简介</span></h2><p>本文总结了在爬虫中常见的各种加密算法、编码算法的原理、在 JavaScript 中和 Python 中的基本实现方法，遇到 JS 加密的时候可以快速还原加密过程，有的网站在加密的过程中可能还经过了其他处理，但是大致的方法是一样的。</p><p>常见加密算法：</p><ol><li>对称加密（加密解密密钥相同）：DES、3DES、AES、RC4、Rabbit</li><li>非对称加密（区分公钥和私钥）：RSA、DSA、ECC</li><li>消息摘要算法/签名算法：MD5、SHA、HMAC、PBKDF2</li></ol><p>常见编码算法：Base64</p><h3><span id="javascript-jia-mi-jie-mi-mo-kuai">JavaScript 加密解密模块</span></h3><h4><span id="crypto-js">Crypto-JS</span></h4><p>Crypto-JS 支持 MD5、SHA、RIPEMD-160、HMAC、PBKDF2、AES、DES、3DES（Triple DES）、Rabbit、RC4 等，<strong>不支持 RSA、ECC</strong>，是应用比较广的加密模块，使用命令 <code>npm install crypto-js</code> 安装。</p><p>参考资料：</p><ul><li><p>Crypto-JS 文档：<a href="https://cryptojs.gitbook.io/docs/">https://cryptojs.gitbook.io/docs/</a></p></li><li><p>Crypto-JS Github：<a href="https://github.com/brix/crypto-js">https://github.com/brix/crypto-js</a></p></li></ul><h4><span id="node-rsa">Node-RSA</span></h4><p>Node-RSA 对  RSA 算法提供了支持，使用命令 <code>npm install node-rsa </code> 安装。</p><p>参考资料：Node-RSA Github：<a href="https://github.com/rzcoder/node-rsa">https://github.com/rzcoder/node-rsa</a></p><h4><span id="jsencrypt">JSEncrypt</span></h4><p>参考资料：JSEncrypt 对  RSA 算法提供了更加全面的支持，使用命令 <code>npm install jsencrypt </code> 安装。</p><ul><li>JSEncrypt 文档：<a href="http://travistidwell.com/jsencrypt/">http://travistidwell.com/jsencrypt/</a></li><li>JSEncrypt Github：<a href="https://github.com/travist/jsencrypt">https://github.com/travist/jsencrypt</a></li></ul><h3><span id="python-jia-mi-jie-mi-ku">Python 加密解密库</span></h3><h4><span id="cryptodome-amp-crypto">Cryptodome &amp; Crypto</span></h4><p>在 Python 中有很多算法是通过第三方库 Cryptodome 或者 Crypto 来实现的，Cryptodome 几乎是 Crypto 的替代品，Crypto 已经停止更新好多年了，有很多未知错误，所以<strong>不建议安装 Crypto ！</strong></p><p>Cryptodome 支持几乎所有主流加密算法，包括 MD5、SHA、BLAKE2b、BLAKE2s、HMAC、PBKDF2、AES、DES、3DES（Triple DES）、ECC、RSA、RC4 等。</p><p>Cryptodome 使用命令 <code>pip install pycryptodome</code> 进行安装，Crypto 使用命令 <code>pip install pycrypto </code> 进行安装。</p><p>参考资料：</p><ul><li><p>Crypto 库：<a href="https://www.dlitz.net/software/pycrypto/">https://www.dlitz.net/software/pycrypto/</a></p></li><li><p>Cryptodome 库：<a href="https://www.pycryptodome.org/en/latest/">https://www.pycryptodome.org/en/latest/</a></p></li></ul><h4><span id="hashlib">Hashlib</span></h4><p>Python 的标准库 hashlib 提供了常见的摘要算法，如 MD5，SHA、BLAKE2b、BLAKE2s 等。</p><p>参考资料：</p><ul><li>hashlib 库：<a href="https://docs.python.org/3/library/hashlib.html">https://docs.python.org/3/library/hashlib.html</a></li><li>廖雪峰 hashlib：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017686752491744">https://www.liaoxuefeng.com/wiki/1016959663602400/1017686752491744</a></li></ul><h4><span id="hmac">HMAC</span></h4><p>Python 的标准库 hmac 对 HMAC 算法提供了支持。</p><p>参考资料：</p><ul><li>hmac 库：<a href="https://docs.python.org/3/library/hmac.html">https://docs.python.org/3/library/hmac.html</a></li><li>廖雪峰 hmac：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1183198304823296">https://www.liaoxuefeng.com/wiki/1016959663602400/1183198304823296</a></li></ul><h4><span id="pydes">pyDes</span></h4><p>Python 的第三方库 pyDes 对 DES 算法提供了支持。使用命令 <code>pip install pydes</code> 进行安装。</p><p>参考资料：pyDes 库：<a href="https://github.com/twhiteman/pyDes">https://github.com/twhiteman/pyDes</a></p><h4><span id="esa">ESA</span></h4><p>Python 的第三方库 rsa 对 RSA 算法提供了支持。使用命令 <code>pip install rsa</code> 进行安装。</p><p>参考资料：rsa 库：<a href="https://stuvel.eu/python-rsa-doc/">https://stuvel.eu/python-rsa-doc/</a></p><h2><span id="jia-mi-jie-mi-ji-ben-can-shu">加密解密基本参数</span></h2><p>在一些对称和非对称加密算法中，经常会用到以下三个参数：初始向量 iv、加密模式 mode、填充方式 padding，先介绍一下这三个参数的含义和作用：</p><h3><span id="chu-shi-xiang-liang-iv">初始向量 iv</span></h3><p>在密码学中，初始向量（initialization vector，缩写为 iv），又称初始变数（starting variable，缩写为 sv），与密钥结合使用，作为加密数据的手段，它是一个固定长度的值，iv 的长度取决于加密方法，通常与使用的加密密钥或密码块的长度相当，一般在使用过程中会要求它是随机数或拟随机数，使用随机数产生的初始向量才能达到语义安全，让攻击者难以对原文一致且使用同一把密钥生成的密文进行破解。</p><p>参考资料：维基百科：<a href="https://en.wikipedia.org/wiki/Initialization_vector">https://en.wikipedia.org/wiki/Initialization_vector</a></p><h3><span id="jia-mi-mo-shi-mode">加密模式 mode</span></h3><p>目前流行的加密和数字认证算法，都是采用块加密方式，就是将需要加密的明文分成固定大小的数据块，然后对其执行密码算法，得到密文。数据块的大小通常采用跟密钥一样的长度。加密模式在加密算法的基础上发展出来，同时也可以独立于加密算法而存在，加密模式定义了怎样通过重复利用加密算法将大于一个数据块大小的明文转化为密文，描述了加密每一数据块的过程。目前利用较多的加密模式有以下几种：</p><ul><li><p><strong>ECB：Electronic Code Book（电子码本模式）</strong>，是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。</p></li><li><p><strong>CBC：Cipher Block Chaining（密码块链接模式）</strong>，是一种循环模式，前一个分组的密文和当前分组的明文异或操作后再加密，这样做的目的是增强破解难度。</p></li><li><p><strong>PCBC：Propagating Cipher Block Chaining（填充密码块链接模式）</strong>，也称为明文密码块链接模式（Plaintext Cipher Block Chaining），是一种可以使密文中的微小更改在解密时导致明文大部分错误的模式，并在加密的时候也具有同样的特性。</p></li><li><p><strong>CFB：Cipher Feedback（密码反馈模式）</strong>，可以将块密码变为自同步的流密码，类似于 CBC，CFB 的解密过程几乎就是颠倒的 CBC 的加密过程。</p></li><li><p><strong>OFB：Output Feedback（输出反馈模式）</strong>，可以将块密码变成同步的流密码，它产生密钥流的块，然后将其与明文块进行异或，得到密文。与其它流密码一样，密文中一个位的翻转会使明文中同样位置的位也产生翻转。</p></li><li><p><strong>CTR：Counter mode（计数器模式）</strong>，也被称为 ICM 模式（Integer Counter Mode，整数计数模式）和 SIC 模式（Segmented Integer Counter），在 CTR 模式中，有一个自增的算子，这个算子用密钥加密之后的输出和明文异或的结果得到密文，相当于一次一密。这种加密方式简单快速，安全可靠，而且可以并行加密，但是在计算器不能维持很长的情况下，密钥只能使用一次。</p></li></ul><p>参考资料：维基百科：<a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation</a></p><h3><span id="tian-chong-fang-shi-padding">填充方式 padding</span></h3><p>块密码只能对确定长度的数据块进行处理，而消息的长度通常是可变的。因此部分模式最后一块数据在加密前需要进行填充。有数种填充方法，其中最简单的一种是在明文的最后填充空字符以使其长度为块长度的整数倍。常见填充方式有以下几种：</p><ul><li><p><strong>PKCS7</strong>：在填充时首先获取需要填充的字节长度 = 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为需要填充的字节长度值。</p></li><li><p><strong>PKCS5</strong>：PKCS5 作为 PKCS7 的子集算法，概念上没有什么区别，只是在 blockSize 上固定为 8 bytes，即块大小固定为 8 字节。</p></li><li><p><strong>ZeroPadding</strong>：在填充时首先获取需要填充的字节长度 = 块长度 - （数据长度 % 块长度）, 在填充字节序列中所有字节填充为 0 。</p></li><li><p><strong>ISO10126</strong>：在填充时首先获取需要填充的字节长度 = 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充随机数值。</p></li><li><p><strong>ANSIX923</strong>：在填充时首先获取需要填充的字节长度 = 块长度 - （数据长度 % 块长度），在填充字节序列中最后一个字节填充为需要填充的字节长度值，填充字节中其余字节均填充数字零。</p></li></ul><p>参考资料：</p><ul><li>维基百科：<a href="https://en.wikipedia.org/wiki/Padding_(cryptography)">https://en.wikipedia.org/wiki/Padding_(cryptography)</a></li><li>PKCS7/PKCS5 填充算法：<a href="https://segmentfault.com/a/1190000019793040">https://segmentfault.com/a/1190000019793040</a></li></ul><h2><span id="base64">Base64</span></h2><p>简介：Base64 是一种用 64 个字符来表示任意二进制数据的方法。</p><p>参考资料：</p><ul><li>Base64 百度百科：<a href="https://baike.baidu.com/item/base64/8545775">https://baike.baidu.com/item/base64/8545775</a></li><li>Base64 维基百科：<a href="https://en.wikipedia.org/wiki/Base64">https://en.wikipedia.org/wiki/Base64</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64Encode</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> srcs = CryptoJS.enc.Utf8.parse(text);    <span class="hljs-keyword">var</span> encodeData = CryptoJS.enc.Base64.stringify(srcs);    <span class="hljs-keyword">return</span> encodeData&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base64Decode</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> srcs = CryptoJS.enc.Base64.parse(encodeData);    <span class="hljs-keyword">var</span> decodeData = srcs.toString(CryptoJS.enc.Utf8);    <span class="hljs-keyword">return</span> decodeData&#125;<span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love Python!&quot;</span><span class="hljs-keyword">var</span> encodeData = base64Encode()<span class="hljs-keyword">var</span> decodeData = base64Decode()<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Base64 编码: &quot;</span>, encodeData)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Base64 解码: &quot;</span>, decodeData)<span class="hljs-comment">// Base64 编码:  SSBsb3ZlIFB5dGhvbiE=</span><span class="hljs-comment">// Base64 解码:  I love Python!</span></code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">base64_encode</span>(<span class="hljs-params">text</span>):</span>    encode_data = base64.b64encode(text.encode())    <span class="hljs-keyword">return</span> encode_data<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">base64_decode</span>(<span class="hljs-params">encode_data</span>):</span>    decode_data = base64.b64decode(encode_data)    <span class="hljs-keyword">return</span> decode_data<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>    encode_data = base64_encode(text)    decode_data = base64_decode(encode_data)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Base64 编码：&#x27;</span>, encode_data)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Base64 解码：&#x27;</span>, decode_data)<span class="hljs-comment"># Base64 编码： b&#x27;SSBsb3ZlIFB5dGhvbiE=&#x27;</span><span class="hljs-comment"># Base64 解码： b&#x27;I love Python!&#x27;</span></code></pre><h2><span id="md5">MD5</span></h2><p>简介：全称 MD5 消息摘要算法（英文名称：MD5 Message-Digest Algorithm），又称哈希算法、散列算法，由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于 1992 年作为 RFC 1321 被公布，用以取代 MD4 算法。摘要算法是单向加密的，也就是说明文通过摘要算法加密之后，是不能解密的。摘要算法的第二个特点密文是固定长度的，它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。之所以叫摘要算法，它的算法就是提取明文重要的特征。所以，两个不同的明文，使用了摘要算法之后，有可能他们的密文是一样的，不过这个概率非常的低。</p><p>参考资料：</p><ul><li>RFC 1321：<a href="https://datatracker.ietf.org/doc/rfc1321/">https://datatracker.ietf.org/doc/rfc1321/</a></li><li>MD5 维基百科：<a href="https://en.wikipedia.org/wiki/MD5">https://en.wikipedia.org/wiki/MD5</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MD5Test</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love python!&quot;</span>    <span class="hljs-keyword">return</span> CryptoJS.MD5(text).toString()&#125;<span class="hljs-built_in">console</span>.log(MD5Test())  <span class="hljs-comment">// 21169ee3acd4a24e1fcb4322cfd9a2b8</span></code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5_test1</span>():</span>    md5 = hashlib.new(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))    <span class="hljs-built_in">print</span>(md5.hexdigest())<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5_test2</span>():</span>    md5 = hashlib.md5()    md5.update(<span class="hljs-string">&#x27;I love &#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))    md5.update(<span class="hljs-string">&#x27;python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))    <span class="hljs-built_in">print</span>(md5.hexdigest())<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    md5_test1()  <span class="hljs-comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span>    md5_test2()  <span class="hljs-comment"># 21169ee3acd4a24e1fcb4322cfd9a2b8</span></code></pre><h2><span id="pbkdf2">PBKDF2</span></h2><p>简介：英文名称：Password-Based Key Derivation Function 2，PBKDF2 是 RSA 实验室的公钥加密标准（PKCS）系列的一部分，2017 年发布的 RFC 8018 （PKCS #5 v2.1）推荐使用 PBKDF2 进行密码散列。PBKDF2 将伪随机函数（例如 HMAC），把明文和一个盐值（salt）作为输入参数，然后进行重复运算，并最终产生密钥，如果重复的次数足够大，破解的成本就会变得很高。</p><p>参考资料：</p><ul><li>RFC 8018：<a href="https://datatracker.ietf.org/doc/rfc8018/">https://datatracker.ietf.org/doc/rfc8018/</a></li><li>PBKDF2 维基百科：<a href="https://en.wikipedia.org/wiki/PBKDF2">https://en.wikipedia.org/wiki/PBKDF2</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pbkdf2Encrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love Python!&quot;</span>    <span class="hljs-keyword">var</span> salt = <span class="hljs-string">&quot;43215678&quot;</span>    <span class="hljs-comment">// key 长度 128，10 次重复运算</span>    <span class="hljs-keyword">var</span> encryptedData = CryptoJS.PBKDF2(text, salt, &#123;<span class="hljs-attr">keySize</span>: <span class="hljs-number">128</span>/<span class="hljs-number">32</span>,<span class="hljs-attr">iterations</span>: <span class="hljs-number">10</span>&#125;);    <span class="hljs-keyword">return</span> encryptedData.toString()&#125;<span class="hljs-built_in">console</span>.log(pbkdf2Encrypt())  <span class="hljs-comment">// 7fee6e8350cfe96314c76aaa6e853a50</span></code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<span class="hljs-keyword">from</span> Cryptodome.Hash <span class="hljs-keyword">import</span> SHA1<span class="hljs-keyword">from</span> Cryptodome.Protocol.KDF <span class="hljs-keyword">import</span> PBKDF2text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>salt = <span class="hljs-string">b&#x27;43215678&#x27;</span>result = PBKDF2(text,  salt, count=<span class="hljs-number">10</span>, hmac_hash_module=SHA1)result = binascii.hexlify(result)<span class="hljs-built_in">print</span>(result)<span class="hljs-comment"># b&#x27;7fee6e8350cfe96314c76aaa6e853a50&#x27;</span></code></pre><h2><span id="sha">SHA</span></h2><p>简介：全称安全哈希算法（英文名称：Secure Hash Algorithm），由美国国家安全局（NSA）所设计，主要适用于数字签名标准（Digital Signature Standard DSS）里面定义的数字签名算法（Digital Signature Algorithm DSA），SHA 通常指 SHA 家族的五个算法，分别是 SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，后四者有时并称为 SHA-2，SHA 是比 MD5 更安全一点的摘要算法，MD5 的密文是 32 位，而 SHA-1 是 40 位，版本越强，密文越长，代价是速度越慢。</p><p>参考资料：</p><ul><li>RFC 3174：<a href="https://datatracker.ietf.org/doc/rfc3174/">https://datatracker.ietf.org/doc/rfc3174/</a></li><li>SHA 维基百科：<a href="https://en.wikipedia.org/wiki/Secure_Hash_Algorithms">https://en.wikipedia.org/wiki/Secure_Hash_Algorithms</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SHA1Encrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love python!&quot;</span>    <span class="hljs-keyword">return</span> CryptoJS.SHA1(text).toString();&#125;<span class="hljs-built_in">console</span>.log(SHA1Encrypt())  <span class="hljs-comment">// 23c02b203bd2e2ca19da911f1d270a06d86719fb</span></code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sha1_test1</span>():</span>    sha1 = hashlib.new(<span class="hljs-string">&#x27;sha1&#x27;</span>, <span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))    <span class="hljs-built_in">print</span>(sha1.hexdigest())<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sha1_test2</span>():</span>    sha1 = hashlib.sha1()    sha1.update(<span class="hljs-string">&#x27;I love python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))    <span class="hljs-built_in">print</span>(sha1.hexdigest())<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    sha1_test1()  <span class="hljs-comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span>    sha1_test2()  <span class="hljs-comment"># 23c02b203bd2e2ca19da911f1d270a06d86719fb</span></code></pre><h2><span id="hmac">HMAC</span></h2><p>简介：全称散列消息认证码、密钥相关的哈希运算消息认证码（英文名称：Hash-based Message Authentication Code 或者 Keyed-hash Message Authentication Code），于 1996 年提出，1997 年作为 RFC 2104 被公布，HMAC 加密算法是一种安全的基于加密 Hash 函数和共享密钥的消息认证协议，它要求通信双方共享密钥 key、约定算法、对报文进行 Hash 运算，形成固定长度的认证码。通信双方通过认证码的校验来确定报文的合法性。</p><p>参考资料：</p><ul><li>RFC 2104：<a href="https://datatracker.ietf.org/doc/rfc2104/">https://datatracker.ietf.org/doc/rfc2104/</a></li><li>HMAC 维基百科：<a href="https://en.wikipedia.org/wiki/HMAC">https://en.wikipedia.org/wiki/HMAC</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HMACEncrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love python!&quot;</span>    <span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;secret&quot;</span>    <span class="hljs-keyword">return</span> CryptoJS.HmacMD5(text, key).toString();    <span class="hljs-comment">// return CryptoJS.HmacSHA1(text, key).toString();</span>    <span class="hljs-comment">// return CryptoJS.HmacSHA256(text, key).toString();</span>&#125;<span class="hljs-built_in">console</span>.log(HMACEncrypt())</code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> hmac<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hmac_test1</span>():</span>    message = <span class="hljs-string">b&#x27;I love python!&#x27;</span>    key = <span class="hljs-string">b&#x27;secret&#x27;</span>    md5 = hmac.new(key, message, digestmod=<span class="hljs-string">&#x27;MD5&#x27;</span>)    <span class="hljs-built_in">print</span>(md5.hexdigest())<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hmac_test2</span>():</span>    key = <span class="hljs-string">&#x27;secret&#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)    sha1 = hmac.new(key, digestmod=<span class="hljs-string">&#x27;sha1&#x27;</span>)    sha1.update(<span class="hljs-string">&#x27;I love &#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))    sha1.update(<span class="hljs-string">&#x27;Python!&#x27;</span>.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))    <span class="hljs-built_in">print</span>(sha1.hexdigest())<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    hmac_test1()  <span class="hljs-comment"># 9c503a1f852edcc3526ea56976c38edf</span>    hmac_test2()  <span class="hljs-comment"># 2d8449a4292d4bbeed99ce9ea570880d6e19b61a</span></code></pre><h2><span id="des">DES</span></h2><p>简介：全称数据加密标准（英文名称：Data Encryption Standard），加密与解密使用同一密钥，属于对称加密算法，1977 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），DES 是一个分组加密算法，使用 56 位的密钥（一般认为密钥是 64 位，但是密钥的每个第 8 位设置为奇偶校验位，所以实际上有效位只有 56 位），由于 56 位密钥长度相对较短，所以 DES 是不安全的，现在基本上已被更高级的加密标准 AES 取代。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 4772：<a href="https://datatracker.ietf.org/doc/rfc4772/">https://datatracker.ietf.org/doc/rfc4772/</a></li><li>DES 维基百科：<a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard">https://en.wikipedia.org/wiki/Data_Encryption_Standard</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">desEncrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> key = CryptoJS.enc.Utf8.parse(desKey),        iv = CryptoJS.enc.Utf8.parse(desIv),        srcs = CryptoJS.enc.Utf8.parse(text),        <span class="hljs-comment">// CBC 加密模式，Pkcs7 填充方式</span>        encrypted = CryptoJS.DES.encrypt(srcs, key, &#123;            <span class="hljs-attr">iv</span>: iv,            <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,            <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7        &#125;);    <span class="hljs-keyword">return</span> encrypted.toString();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">desDecrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> key = CryptoJS.enc.Utf8.parse(desKey),        iv = CryptoJS.enc.Utf8.parse(desIv),        srcs = encryptedData,        <span class="hljs-comment">// CBC 加密模式，Pkcs7 填充方式</span>        decrypted = CryptoJS.DES.decrypt(srcs, key, &#123;            <span class="hljs-attr">iv</span>: iv,            <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,            <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7        &#125;);    <span class="hljs-keyword">return</span> decrypted.toString(CryptoJS.enc.Utf8);&#125;<span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love Python!&quot;</span>       <span class="hljs-comment">// 待加密对象</span><span class="hljs-keyword">var</span> desKey = <span class="hljs-string">&quot;6f726c64f2c2057&quot;</span>    <span class="hljs-comment">// 密钥</span><span class="hljs-keyword">var</span> desIv = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 初始向量</span><span class="hljs-keyword">var</span> encryptedData = desEncrypt()<span class="hljs-keyword">var</span> decryptedData = desDecrypt()<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<span class="hljs-comment">// 加密字符串:  +ndbEkWNw2QAfIYQtwC14w==</span><span class="hljs-comment">// 解密字符串:  I love Python!</span></code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<span class="hljs-comment"># 加密模式 CBC，填充方式 PAD_PKCS5</span><span class="hljs-keyword">from</span> pyDes <span class="hljs-keyword">import</span> des, CBC, PAD_PKCS5<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">des_encrypt</span>(<span class="hljs-params">key, text, iv</span>):</span>    k = des(key, CBC, iv, pad=<span class="hljs-literal">None</span>, padmode=PAD_PKCS5)    en = k.encrypt(text, padmode=PAD_PKCS5)    <span class="hljs-keyword">return</span> binascii.b2a_hex(en)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">des_decrypt</span>(<span class="hljs-params">key, text, iv</span>):</span>    k = des(key, CBC, iv, pad=<span class="hljs-literal">None</span>, padmode=PAD_PKCS5)    de = k.decrypt(binascii.a2b_hex(text), padmode=PAD_PKCS5)    <span class="hljs-keyword">return</span> de<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    secret_key = <span class="hljs-string">&#x27;12345678&#x27;</span>   <span class="hljs-comment"># 密钥</span>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>   <span class="hljs-comment"># 加密对象</span>    iv = secret_key           <span class="hljs-comment"># 偏移量</span>    secret_str = des_encrypt(secret_key, text, iv)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, secret_str)    clear_str = des_decrypt(secret_key, secret_str, iv)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, clear_str)<span class="hljs-comment"># 加密字符串： b&#x27;302d3abf2421169239f829b38a9545f1&#x27;</span><span class="hljs-comment"># 解密字符串： b&#x27;I love Python!&#x27;</span></code></pre><h2><span id="3des">3DES</span></h2><p>简介：全称三重数据加密算法（英文名称：Triple Data Encryption Standard、 Triple Data Encryption Algorithm、TDES、TDEA），是对称加密算法中的一种。70 年代初由 IBM 研发，后 1977 年被美国国家标准局采纳为数据加密标准，它相当于是对每个数据块应用三次 DES 加密算法。由于计算机运算能力的增强，原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，即通过增加 DES 的密钥长度来避免破解，所以严格来说 3DES 不是设计一种全新的块密码算法。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 1851：<a href="https://datatracker.ietf.org/doc/rfc1851/">https://datatracker.ietf.org/doc/rfc1851/</a></li><li>3DES 维基百科：<a href="https://en.wikipedia.org/wiki/Triple_DES">https://en.wikipedia.org/wiki/Triple_DES</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tripleDesEncrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> key = CryptoJS.enc.Utf8.parse(desKey),        iv = CryptoJS.enc.Utf8.parse(desIv),        srcs = CryptoJS.enc.Utf8.parse(text),        <span class="hljs-comment">// ECB 加密方式，Iso10126 填充方式</span>        encrypted = CryptoJS.TripleDES.encrypt(srcs, key, &#123;            <span class="hljs-attr">iv</span>: iv,            <span class="hljs-attr">mode</span>: CryptoJS.mode.ECB,            <span class="hljs-attr">padding</span>: CryptoJS.pad.Iso10126        &#125;);    <span class="hljs-keyword">return</span> encrypted.toString();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tripleDesDecrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> key = CryptoJS.enc.Utf8.parse(desKey),        iv = CryptoJS.enc.Utf8.parse(desIv),        srcs = encryptedData,        <span class="hljs-comment">// ECB 加密方式，Iso10126 填充方式</span>        decrypted = CryptoJS.TripleDES.decrypt(srcs, key, &#123;            <span class="hljs-attr">iv</span>: iv,            <span class="hljs-attr">mode</span>: CryptoJS.mode.ECB,            <span class="hljs-attr">padding</span>: CryptoJS.pad.Iso10126        &#125;);    <span class="hljs-keyword">return</span> decrypted.toString(CryptoJS.enc.Utf8);&#125;<span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love Python!&quot;</span>       <span class="hljs-comment">// 待加密对象</span><span class="hljs-keyword">var</span> desKey = <span class="hljs-string">&quot;6f726c64f2c2057c&quot;</span>    <span class="hljs-comment">// 密钥</span><span class="hljs-keyword">var</span> desIv = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 偏移量</span><span class="hljs-keyword">var</span> encryptedData = tripleDesEncrypt()<span class="hljs-keyword">var</span> decryptedData = tripleDesDecrypt()<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<span class="hljs-comment">// 加密字符串:  3J0NX7x6GbewjjhoW2HKqg==</span><span class="hljs-comment">// 解密字符串:  I love Python!</span></code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><pre><code class="hljs python"><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> DES3<span class="hljs-keyword">from</span> Cryptodome <span class="hljs-keyword">import</span> Random<span class="hljs-comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_to_16</span>(<span class="hljs-params">value</span>):</span>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(value) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:        value += <span class="hljs-string">&#x27;\0&#x27;</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.encode(value)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">des_encrypt</span>(<span class="hljs-params">key, text, iv</span>):</span>    <span class="hljs-comment"># 加密模式 OFB</span>    cipher_encrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)    encrypted_text = cipher_encrypt.encrypt(text.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))    <span class="hljs-keyword">return</span> encrypted_text<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">des_decrypt</span>(<span class="hljs-params">key, text, iv</span>):</span>    <span class="hljs-comment"># 加密模式 OFB</span>    cipher_decrypt = DES3.new(add_to_16(key), DES3.MODE_OFB, iv)    decrypted_text = cipher_decrypt.decrypt(text)    <span class="hljs-keyword">return</span> decrypted_text<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    key = <span class="hljs-string">&#x27;12345678&#x27;</span>            <span class="hljs-comment"># 密钥，16 位</span>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>     <span class="hljs-comment"># 加密对象</span>    iv = Random.new().read(DES3.block_size)  <span class="hljs-comment"># DES3.block_size == 8</span>    secret_str = des_encrypt(key, text, iv)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, secret_str)    clear_str = des_decrypt(key, secret_str, iv)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, clear_str)<span class="hljs-comment"># 加密字符串： b&#x27;\xa5\x8a\xd4R\x99\x16j\xba?vg\xf2\xb6\xa9&#x27;</span><span class="hljs-comment"># 解密字符串： b&#x27;I love Python!&#x27;</span></code></pre><h2><span id="aes">AES</span></h2><p>简介：全称高级加密标准（英文名称：Advanced Encryption Standard），在密码学中又称 Rijndael 加密法，由美国国家标准与技术研究院 （NIST）于 2001 年发布，并在 2002 年成为有效的标准，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用，它本身只有一个密钥，即用来实现加密，也用于解密。</p><ul><li>mode 支持：CBC，CFB，CTR，CTRGladman，ECB，OFB 等。</li><li>padding 支持：ZeroPadding，NoPadding，AnsiX923，Iso10126，Iso97971，Pkcs7 等。</li></ul><p>参考资料：</p><ul><li>RFC 3268：<a href="https://datatracker.ietf.org/doc/rfc3268/">https://datatracker.ietf.org/doc/rfc3268/</a></li><li>AES 维基百科：<a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3> <pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aesEncrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> key = CryptoJS.enc.Utf8.parse(aesKey),        iv = CryptoJS.enc.Utf8.parse(aesIv),        srcs = CryptoJS.enc.Utf8.parse(text),        <span class="hljs-comment">// CBC 加密方式，Pkcs7 填充方式</span>        encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;            <span class="hljs-attr">iv</span>: iv,            <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,            <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7        &#125;);    <span class="hljs-keyword">return</span> encrypted.toString();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aesDecrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> key = CryptoJS.enc.Utf8.parse(aesKey),        iv = CryptoJS.enc.Utf8.parse(aesIv),        srcs = encryptedData,        <span class="hljs-comment">// CBC 加密方式，Pkcs7 填充方式</span>        decrypted = CryptoJS.AES.decrypt(srcs, key, &#123;            <span class="hljs-attr">iv</span>: iv,            <span class="hljs-attr">mode</span>: CryptoJS.mode.CBC,            <span class="hljs-attr">padding</span>: CryptoJS.pad.Pkcs7        &#125;);    <span class="hljs-keyword">return</span> decrypted.toString(CryptoJS.enc.Utf8);&#125;<span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love Python!&quot;</span>       <span class="hljs-comment">// 待加密对象</span><span class="hljs-keyword">var</span> aesKey = <span class="hljs-string">&quot;6f726c64f2c2057c&quot;</span>   <span class="hljs-comment">// 密钥，16 倍数</span><span class="hljs-keyword">var</span> aesIv = <span class="hljs-string">&quot;0123456789ABCDEF&quot;</span>    <span class="hljs-comment">// 偏移量，16 倍数</span><span class="hljs-keyword">var</span> encryptedData = aesEncrypt()<span class="hljs-keyword">var</span> decryptedData = aesDecrypt()<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<span class="hljs-comment">// 加密字符串:  dZL7TLJR786VGvuUvqYGoQ==</span><span class="hljs-comment">// 解密字符串:  I love Python!</span></code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> AES<span class="hljs-comment"># 需要补位，str不是16的倍数那就补足为16的倍数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_to_16</span>(<span class="hljs-params">value</span>):</span>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(value) % <span class="hljs-number">16</span> != <span class="hljs-number">0</span>:        value += <span class="hljs-string">&#x27;\0&#x27;</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.encode(value)<span class="hljs-comment"># 加密方法</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">aes_encrypt</span>(<span class="hljs-params">key, t, iv</span>):</span>    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))  <span class="hljs-comment"># 初始化加密器</span>    encrypt_aes = aes.encrypt(add_to_16(t))                    <span class="hljs-comment"># 先进行 aes 加密</span>    encrypted_text = <span class="hljs-built_in">str</span>(base64.encodebytes(encrypt_aes), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># 执行加密并转码返回 bytes</span>    <span class="hljs-keyword">return</span> encrypted_text<span class="hljs-comment"># 解密方法</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">aes_decrypt</span>(<span class="hljs-params">key, t, iv</span>):</span>    aes = AES.new(add_to_16(key), AES.MODE_CBC, add_to_16(iv))         <span class="hljs-comment"># 初始化加密器</span>    base64_decrypted = base64.decodebytes(t.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))  <span class="hljs-comment"># 优先逆向解密 base64 成 bytes</span>    decrypted_text = <span class="hljs-built_in">str</span>(aes.decrypt(base64_decrypted), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>).replace(<span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># 执行解密密并转码返回str</span>    <span class="hljs-keyword">return</span> decrypted_text<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    secret_key = <span class="hljs-string">&#x27;12345678&#x27;</span>   <span class="hljs-comment"># 密钥</span>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>   <span class="hljs-comment"># 加密对象</span>    iv = secret_key           <span class="hljs-comment"># 初始向量</span>    encrypted_str = aes_encrypt(secret_key, text, iv)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, encrypted_str)    decrypted_str = aes_decrypt(secret_key, encrypted_str, iv)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, decrypted_str)<span class="hljs-comment"># 加密字符串： lAVKvkQh+GtdNpoKf4/mHA==</span><span class="hljs-comment"># 解密字符串： I love Python!</span></code></pre><h2><span id="rc4">RC4</span></h2><p>简介：英文名称：Rivest Cipher 4，也称为 ARC4 或 ARCFOUR，是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4 是有线等效加密（WEP）中采用的加密算法，也曾经是 TLS 可采用的算法之一，该算法的速度可以达到 DES 加密的 10 倍左右，且具有很高级别的非线性，虽然它在软件方面的简单性和速度非常出色，但在 RC4 中发现了多个漏洞，它特别容易受到攻击，RC4 作为一种老旧的验证和加密算法易于受到黑客攻击，现在逐渐不推荐使用了。</p><p>参考资料：</p><ul><li>RFC 7465：<a href="https://datatracker.ietf.org/doc/rfc7465/">https://datatracker.ietf.org/doc/rfc7465/</a></li><li>RC4 维基百科：<a href="https://en.wikipedia.org/wiki/RC4">https://en.wikipedia.org/wiki/RC4</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RC4Encrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> CryptoJS.RC4.encrypt(text, key).toString();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RC4Decrypt</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">return</span> CryptoJS.RC4.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);&#125;<span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love Python!&quot;</span><span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;6f726c64f2c2057c&quot;</span><span class="hljs-keyword">var</span> encryptedData = RC4Encrypt()<span class="hljs-keyword">var</span> decryptedData = RC4Decrypt()<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<span class="hljs-comment">// 加密字符串:  U2FsdGVkX18hMm9WWdoEQGPolnXzlg9ryArdGNwv</span><span class="hljs-comment">// 解密字符串:  I love Python!</span></code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> ARC4<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_encrypt</span>(<span class="hljs-params">key, t</span>):</span>    enc = ARC4.new(key.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))    res = enc.encrypt(t.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))    res = base64.b64encode(res)    <span class="hljs-keyword">return</span> res<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_decrypt</span>(<span class="hljs-params">key, t</span>):</span>    data = base64.b64decode(t)    enc = ARC4.new(key.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>))    res = enc.decrypt(data)    <span class="hljs-keyword">return</span> res<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    secret_key = <span class="hljs-string">&#x27;12345678&#x27;</span>   <span class="hljs-comment"># 密钥</span>    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>   <span class="hljs-comment"># 加密对象</span>    encrypted_str = rc4_encrypt(secret_key, text)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, encrypted_str)    decrypted_str = rc4_decrypt(secret_key, encrypted_str)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, decrypted_str)<span class="hljs-comment"># 加密字符串： b&#x27;8tNVu3/U/veJR2KgyBw=&#x27;</span><span class="hljs-comment"># 解密字符串： b&#x27;I love Python!&#x27;</span></code></pre><h2><span id="rabbit">Rabbit</span></h2><p>简介：Rabbit 加密算法是一个高性能的流密码加密方式，2003 年首次被提出，它从 128 位密钥和 64 位初始向量（iv）创建一个密钥流。</p><p>参考资料：</p><ul><li>RFC 4503：<a href="https://datatracker.ietf.org/doc/rfc4503/">https://datatracker.ietf.org/doc/rfc4503/</a></li><li>Rabbit 维基百科：<a href="https://en.wikipedia.org/wiki/Rabbit_(cipher)">https://en.wikipedia.org/wiki/Rabbit_(cipher)</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 crypto-js 加密模块</span><span class="hljs-keyword">var</span> CryptoJS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rabbitEncrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> CryptoJS.Rabbit.encrypt(text, key).toString();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rabbitDecrypt</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> CryptoJS.Rabbit.decrypt(encryptedData, key).toString(CryptoJS.enc.Utf8);&#125;<span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love Python!&quot;</span><span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;6f726c64f2c2057&quot;</span><span class="hljs-keyword">var</span> encryptedData = rabbitEncrypt()<span class="hljs-keyword">var</span> decryptedData = rabbitDecrypt()<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<span class="hljs-comment">// 加密字符串:  U2FsdGVkX1+ZVCHRXlhmG5Xw87YPWMNIBlbukuh8</span><span class="hljs-comment">// 解密字符串:  I love Python!</span></code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><p>目前没有找到有第三方库可以直接实现 Rabbit 算法，在 Python 中实现可以参考：<a href="https://asecuritysite.com/encryption/rabbit2">https://asecuritysite.com/encryption/rabbit2</a></p><h2><span id="rsa">RSA</span></h2><p>简介：英文名称：Rivest-Shamir-Adleman，是 1977 年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的，RSA 就是他们三人姓氏开头字母拼在一起组成的，RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。它被普遍认为是目前比较优秀的公钥方案之一。RSA是第一个能同时用于加密和数字签名的算法，它能够抵抗到目前为止已知的所有密码攻击。</p><p>参考资料：</p><ul><li>RSA 维基百科：<a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">https://en.wikipedia.org/wiki/RSA_(cryptosystem)</a></li></ul><h3><span id="javascript-shi-xian">JavaScript 实现</span></h3><pre><code class="hljs javascript"><span class="hljs-comment">// 引用 node-rsa 加密模块</span><span class="hljs-keyword">var</span> NodeRSA = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-rsa&#x27;</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rsaEncrypt</span>(<span class="hljs-params"></span>) </span>&#123;    pubKey = <span class="hljs-keyword">new</span> NodeRSA(publicKey,<span class="hljs-string">&#x27;pkcs8-public&#x27;</span>);    <span class="hljs-keyword">var</span> encryptedData = pubKey.encrypt(text, <span class="hljs-string">&#x27;base64&#x27;</span>);    <span class="hljs-keyword">return</span> encryptedData&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rsaDecrypt</span>(<span class="hljs-params"></span>) </span>&#123;    priKey = <span class="hljs-keyword">new</span> NodeRSA(privatekey,<span class="hljs-string">&#x27;pkcs8-private&#x27;</span>);    <span class="hljs-keyword">var</span> decryptedData = priKey.decrypt(encryptedData, <span class="hljs-string">&#x27;utf8&#x27;</span>);    <span class="hljs-keyword">return</span> decryptedData&#125;<span class="hljs-keyword">var</span> key = <span class="hljs-keyword">new</span> NodeRSA(&#123;<span class="hljs-attr">b</span>: <span class="hljs-number">512</span>&#125;);                    <span class="hljs-comment">//生成512位秘钥</span><span class="hljs-keyword">var</span> publicKey = key.exportKey(<span class="hljs-string">&#x27;pkcs8-public&#x27;</span>);    <span class="hljs-comment">//导出公钥</span><span class="hljs-keyword">var</span> privatekey = key.exportKey(<span class="hljs-string">&#x27;pkcs8-private&#x27;</span>);  <span class="hljs-comment">//导出私钥</span><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;I love Python!&quot;</span><span class="hljs-keyword">var</span> encryptedData = rsaEncrypt()<span class="hljs-keyword">var</span> decryptedData = rsaDecrypt()<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;公钥:\n&quot;</span>, publicKey)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;私钥:\n&quot;</span>, privatekey)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;加密字符串: &quot;</span>, encryptedData)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;解密字符串: &quot;</span>, decryptedData)<span class="hljs-comment">/*</span><span class="hljs-comment">公钥:</span><span class="hljs-comment"> -----BEGIN PUBLIC KEY-----</span><span class="hljs-comment">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAOV1BwTJSVce/QjJAro5fXG9WzOpal09</span><span class="hljs-comment">Qtv1yuXKE81vZSNTHxW6dICwPT/kjCfC3bA5Qs6wnYBANuwD6wlAS0UCAwEAAQ==</span><span class="hljs-comment">-----END PUBLIC KEY-----</span><span class="hljs-comment">私钥:</span><span class="hljs-comment"> -----BEGIN PRIVATE KEY-----</span><span class="hljs-comment">MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA5XUHBMlJVx79CMkC</span><span class="hljs-comment">ujl9cb1bM6lqXT1C2/XK5coTzW9lI1MfFbp0gLA9P+SMJ8LdsDlCzrCdgEA27APr</span><span class="hljs-comment">CUBLRQIDAQABAkAiXwJbJC+5PioXG80tyhjRZdT4iyMkrl2Kh2oKO9f1iLaBXLya</span><span class="hljs-comment">D0HW82wFh+cUy8GcMl9jse8DE8wd1TdORmHhAiEA/rwmWjXHVgDqcH/fqk8Ufku0</span><span class="hljs-comment">fXvs56h5QDoh1so5vokCIQDmmL3JDW6Y7RuK2qwFbHBZtYPRFRVdn5X1oqU2FOSX</span><span class="hljs-comment">3QIhAOVTjVN5RtNuT6Cn/jvcpZ5tmTe+8TA8w6vGqeAsfn/BAiBvKKIUEQ2HWoU0</span><span class="hljs-comment">YkUaODPQiteIKomqIAvB5S2O7HNlYQIgWMuLUxGZbbcAmIX+YmRXuET97S7OWv+z</span><span class="hljs-comment">WHVfb/rbXtI=</span><span class="hljs-comment">-----END PRIVATE KEY-----</span><span class="hljs-comment">加密字符串:  hHXTF1K3w55Wd6OSjVYtqxceJ5VhlySNUahel9pwKD92Ef7wIT7DYPuJRKiqz5tuHtUqujbmbZBSL0qDE/EA+A==</span><span class="hljs-comment">解密字符串:  I love Python!</span><span class="hljs-comment">*/</span></code></pre><h3><span id="python-shi-xian">Python 实现</span></h3><p>模块：rsa：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> rsa<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rsa_encrypt</span>(<span class="hljs-params">pu_key, t</span>):</span>    <span class="hljs-comment"># 公钥加密</span>    rsa = rsa.encrypt(t.encode(<span class="hljs-string">&quot;utf-8&quot;</span>), pu_key)    <span class="hljs-keyword">return</span> rsa<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rsa_decrypt</span>(<span class="hljs-params">pr_key, t</span>):</span>    <span class="hljs-comment"># 私钥解密</span>    rsa = rsa.decrypt(t, pr_key).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    <span class="hljs-keyword">return</span> rsa<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    public_key, private_key = rsa.newkeys(<span class="hljs-number">512</span>)   <span class="hljs-comment"># 生成公钥、私钥</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;公钥：&#x27;</span>, public_key)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;私钥：&#x27;</span>, private_key)    text = <span class="hljs-string">&#x27;I love Python!&#x27;</span>  <span class="hljs-comment"># 加密对象</span>    encrypted_str = rsa_encrypt(public_key, text)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密字符串：&#x27;</span>, encrypted_str)    decrypted_str = rsa_decrypt(private_key, encrypted_str)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密字符串：&#x27;</span>, decrypted_str)<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">公钥： PublicKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537)</span><span class="hljs-string">私钥： PrivateKey(7636479066127060956100056267701318377455704072072698049978592945665550579944731953431504993757594103617537700972424661030900303472123028864161050235168613, 65537, 3850457767980968449796700480128630632818465005441846698224554128042451115530564586537997896922067523638756079019054611200173122138274839877369624069360253, 4713180694194659323798858305046043997526301456820208338158979730140812744181638767, 1620238976946735819854194349514460863335347861649166352709029254680140139)</span><span class="hljs-string">加密字符串： b&quot;\x1aaeps\xa0c&#125;\xb6\xcf\xa3\xb0\xbb\xedA\x7f&#125;\x03\xdc\xd5\x1c\x9b\xdb\xda\xf9q\x80[=\xf5\x91\r\xd0&#x27;f\xce\x1f\x01\xef\xa5\xdb3\x96\t0qIxF\xbd\x11\xd6\xb25\xc5\xe1pM\xb4M\xc2\xd4\x03\xa6&quot;</span><span class="hljs-string">解密字符串： I love Python!</span><span class="hljs-string">&#x27;&#x27;&#x27;</span></code></pre><p>模块 Cryptodome：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<span class="hljs-keyword">from</span> Cryptodome.PublicKey <span class="hljs-keyword">import</span> RSA<span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> PKCS1_v1_5data = <span class="hljs-string">&quot;cKK8B2rWwfwWeXhz&quot;</span>public_key = <span class="hljs-string">&quot;MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAM1xhOWaThSMpfxFsjV5YaWOFHt+6RvS+zH2Pa47VVr8PkZYnRaaKKy2MYBuEh7mZfM/R1dUXTgu0gp6VTNeNQkCAwEAAQ==&quot;</span>rsa_key = RSA.import_key(base64.b64decode(public_key))  <span class="hljs-comment"># 导入读取到的公钥</span>cipher = PKCS1_v1_5.new(rsa_key)                        <span class="hljs-comment"># 生成对象</span>cipher_text = base64.b64encode(cipher.encrypt(data.encode(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)))<span class="hljs-built_in">print</span>(cipher_text)</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS 逆向理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> JS 逆向理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据结构之栈的实现</title>
      <link href="/article/038/"/>
      <url>/article/038/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#zhan-de-gai-nian">栈的概念</a></li><li><a href="#zhan-de-te-dian">栈的特点</a></li><li><a href="#zhan-de-cao-zuo">栈的操作</a></li><li><a href="#python-shi-xian-zhan">Python 实现栈</a></li><li><a href="#zhan-de-jian-dan-ying-yong-gua-hao-pi-pei-wen-ti">栈的简单应用：括号匹配问题</a></li><li><a href="#zhan-de-jian-dan-ying-yong-dao-xu-shu-chu-yi-zu-yuan-su">栈的简单应用：倒序输出一组元素</a></li></ul><!-- tocstop --><hr><h2><span id="zhan-de-gai-nian">栈的概念</span></h2><p>栈（stack）又名堆栈，栈是一种线性数据结构，用先进后出或者是后进先出的方式存储数据，栈中数据的插入删除操作都是在栈的顶端进行，这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><p><img src="https://cdn.itbob.cn/img/article/038/01.png" alt="01"></p><hr><h2><span id="zhan-de-te-dian">栈的特点</span></h2><p>元素后进先出（Last in First Out，LIFO）</p><hr><h2><span id="zhan-de-cao-zuo">栈的操作</span></h2><ul><li><font color="#FF0000"><strong>push(item)</strong></font>：进栈（向栈顶添加元素）</li><li><font color="#FF0000"><strong>pop()</strong></font>：出栈（删除栈顶元素）</li><li><font color="#FF0000"><strong>top()</strong></font>：查看栈顶元素</li><li><font color="#FF0000"><strong>empty()</strong></font>：判断栈是否为空</li></ul><hr><h2><span id="python-shi-xian-zhan">Python 实现栈</span></h2><p>栈并不是 Python 的内建类型，在必要的时候可以使用列表来模拟基于数组的栈。如果将列表的末尾看作是栈的顶，列表方法 <code>append()</code> 就是将元素压入到栈中（进栈），而列表方法 <code>pop()</code> 会删除并返回栈顶的元素（出栈），列表索引的方式 <code>arr[-1]</code> 可以查看栈顶元素。具体代码实现如下：</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        self.stack = []    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, item</span>):</span>        self.stack.append(item)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">if</span> self.empty():            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> self.stack.pop()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">if</span> self.empty():            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> self.stack[-<span class="hljs-number">1</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.stack) == <span class="hljs-number">0</span></code></pre><hr><h2><span id="zhan-de-jian-dan-ying-yong-gua-hao-pi-pei-wen-ti">栈的简单应用：括号匹配问题</span></h2><p><font color="#2DAF8B"><strong>问题描述：</strong></font></p><p>给定一个字符串，字符串中只包含小括号 <code>()</code>、中括号 <code>[]</code>、大括号 <code>&#123;&#125;</code>，求该字符串中的括号是否匹配。匹配规则：成对出现或者左右对称出现，例如：</p><p><font color="#FF0000"><strong>()[]{}</strong></font>：匹配；<font color="#FF0000"><strong>{[()]}</strong></font>：匹配；<font color="#FF0000"><strong>({}]</strong></font>：不匹配；<font color="#FF0000"><strong>()]</strong></font>：不匹配；<font color="#FF0000"><strong>({)}</strong></font>：不匹配</p><p><font color="#2DAF8B"><strong>通过栈来解决：</strong></font></p><p>有字符串 <font color="#FF0000"><strong>()[{}]</strong></font>，依次取每个括号，只要是左括号就进栈，只要是右括号就判断栈顶是否为对应的左括号，具体步骤如下：</p><ul><li><strong>①</strong> 遇到左小括号 <font color="#FF0000"><strong>(</strong></font>，执行进栈操作；</li><li><strong>②</strong> 遇到右小括号 <font color="#FF0000"><strong>)</strong></font>，判断此时栈顶是否为左小括号 <font color="#FF0000"><strong>(</strong></font>，是则让左小括号 <font color="#FF0000"><strong>(</strong></font> 出栈，此时栈为空;</li><li><strong>③</strong> 遇到左中括号 <font color="#FF0000"><strong>[</strong></font>，执行进栈操作；</li><li><strong>④</strong> 遇到左大括号 <font color="#FF0000"><strong>{</strong></font>，执行进栈操作；</li><li><strong>⑤</strong> 遇到右大括号 <font color="#FF0000"><strong>}</strong></font>，判断此时栈顶是否为左大括号 <font color="#FF0000"><strong>{</strong></font>，是则让左大括号 <font color="#FF0000"><strong>{</strong></font> 出栈，此时栈为空；</li><li><strong>⑥</strong> 遇到右中括号 <font color="#FF0000"><strong>]</strong></font>，判断此时栈顶是否为左中括号 <font color="#FF0000"><strong>[</strong></font>，是则让左中括号 <font color="#FF0000"><strong>[</strong></font> 出栈，此时栈为空；</li><li><strong>⑦</strong> 判断最终的栈是否为空，是则表示匹配，不是则表示不匹配。其中第 <strong>② ⑤ ⑥</strong> 步中，若判断为不是，则直接表示不匹配。</li></ul><p><font color="#2DAF8B"><strong>Python 代码实现：</strong></font></p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        self.stack = []    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, item</span>):</span>        self.stack.append(item)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">if</span> self.empty():            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> self.stack.pop()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">if</span> self.empty():            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> self.stack[-<span class="hljs-number">1</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.stack) == <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">brackets_match</span>(<span class="hljs-params">s</span>):</span>    match_dict = &#123;<span class="hljs-string">&#x27;&#125;&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>: <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&#x27;)&#x27;</span>: <span class="hljs-string">&#x27;(&#x27;</span>&#125;    stack = Stack()    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s:        <span class="hljs-keyword">if</span> ch <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>]:    <span class="hljs-comment"># 如果为左括号，则执行进栈操作</span>            stack.push(ch)        <span class="hljs-keyword">else</span>:                        <span class="hljs-comment"># 如果为右括号</span>            <span class="hljs-keyword">if</span> stack.empty():        <span class="hljs-comment"># 如果栈为空，则不匹配，即多了一个右括号，没有左括号匹配</span>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>            <span class="hljs-keyword">elif</span> stack.top() == match_dict[ch]:  <span class="hljs-comment"># 如果栈顶的元素为对应的左括号，则让栈顶出栈</span>                stack.pop()            <span class="hljs-keyword">else</span>:                    <span class="hljs-comment"># 如果栈顶元素不是对应的左括号，则不匹配</span>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>    <span class="hljs-keyword">if</span> stack.empty():                <span class="hljs-comment"># 最后的栈如果为空，则匹配，否则不匹配</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><span class="hljs-built_in">print</span>(brackets_match(<span class="hljs-string">&#x27;[&#123;()&#125;()&#123;()&#125;[](&#123;&#125;)&#123;&#125;]&#x27;</span>))<span class="hljs-built_in">print</span>(brackets_match(<span class="hljs-string">&#x27;()[&#123;&#125;]&#x27;</span>))<span class="hljs-built_in">print</span>(brackets_match(<span class="hljs-string">&#x27;(&#123;)&#125;&#x27;</span>))<span class="hljs-built_in">print</span>(brackets_match(<span class="hljs-string">&#x27;[]&#125;&#x27;</span>))</code></pre><p>输出结果：</p><pre><code class="hljs python"><span class="hljs-literal">True</span><span class="hljs-literal">True</span><span class="hljs-literal">False</span><span class="hljs-literal">False</span></code></pre><hr><h2><span id="zhan-de-jian-dan-ying-yong-dao-xu-shu-chu-yi-zu-yuan-su">栈的简单应用：倒序输出一组元素</span></h2><p>把元素存入栈，再顺序取出：</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        self.stack = []    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, item</span>):</span>        self.stack.append(item)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">if</span> self.empty():            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> self.stack.pop()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">if</span> self.empty():            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> self.stack[-<span class="hljs-number">1</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.stack) == <span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_list</span>(<span class="hljs-params">s</span>):</span>    stack = Stack()    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s:        stack.push(ch)    new_list = []    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> stack.empty():        new_list.append(stack.pop())    <span class="hljs-keyword">return</span> new_list<span class="hljs-built_in">print</span>(reverse_list([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>]))</code></pre><p>输出结果：</p><pre><code class="hljs python">[<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 算法之递归与尾递归，斐波那契数列以及汉诺塔的实现</title>
      <link href="/article/037/"/>
      <url>/article/037/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#di-gui-gai-nian">递归概念</a></li><li><a href="#di-gui-yao-su">递归要素</a></li><li><a href="#di-gui-yu-die-dai-de-qu-bie">递归与迭代的区别</a></li><li><a href="#shi-li-yi-jie-cheng">示例一：阶乘</a></li><li><a href="#shi-li-er-fei-bo-na-qi-shu-lie">示例二：斐波那契数列</a></li><li><a href="#shi-li-san-han-nuo-ta-wen-ti">示例三：汉诺塔问题</a></li><li><a href="#wei-di-gui">尾递归</a></li><li><a href="#python-zhong-wei-di-gui-de-jie-jue-fang-an">Python 中尾递归的解决方案</a></li></ul><!-- tocstop --><hr><h2><span id="di-gui-gai-nian">递归概念</span></h2><p><font color="#ff0000"><strong>递归</strong></font>：程序调用自身的编程技巧称为递归（ recursion）。用一种通俗的话来说就是自己调用自己，它通常把一个大型复杂的问题层层转化为一个与原问题相似的、但是规模较小的问题来求解，当问题小到一定规模的时候，需要一个递归出口返回。递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</p><p><font color="#ff0000"><strong>递归函数</strong></font>：在编程语言中，函数直接或间接调用函数本身，则该函数称为递归函数；在数学上的定义如下：对于某一函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>，其定义域是集合 A，那么若对于 A 集合中的某一个值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">X_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其函数值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x_0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(f(x_0))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span> 决定，那么就称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 为递归函数。</p><hr><h2><span id="di-gui-yao-su">递归要素</span></h2><ul><li><p>递归必须包含一个基本的出口（结束条件），否则就会无限递归，最终导致栈溢出；</p></li><li><p>递归必须包含一个可以分解的问题，例如要想求得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fact(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，就需要用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>∗</mo><mi>f</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n * fact(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>；</p></li><li><p>递归必须必须要向着递归出口靠近，例如每次递归调用都会 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，向着递归出口 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n == 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 靠近。</p></li></ul><hr><h2><span id="di-gui-yu-die-dai-de-qu-bie">递归与迭代的区别</span></h2><ul><li><p><font color="#ff0000"><strong>递归（recursion）</strong></font>：递归则是一步一步往前递推，直到递归基础，寻找一条路径， 然后再由前向后计算。（A调用A）</p></li><li><p><font color="#ff0000"><strong>迭代（iteration）</strong></font>：迭代是重复反馈过程的活动，其目的通常是为了逼近所需目标或结果。每一次对过程的重复称为一次“迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值，因此迭代是从前往后计算的。（A重复调用B）</p></li></ul><hr><h2><span id="shi-li-yi-jie-cheng">示例一：阶乘</span></h2><p>一个正整数的阶乘（factorial）是所有小于及等于该数的正整数的积，并且 0 的阶乘为 1。即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><mn>1</mn><mo>×</mo><mn>2</mn><mo>×</mo><mn>3</mn><mo>×</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>×</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n!=1×2×3×...×(n-1)×n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，以递归方式定义：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">n!=(n-1)!×n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)!</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">factorial</span>(<span class="hljs-params">n</span>):</span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> n * factorial(n-<span class="hljs-number">1</span>)</code></pre><hr><h2><span id="shi-li-er-fei-bo-na-qi-shu-lie">示例二：斐波那契数列</span></h2><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家莱昂纳多·斐波那契以兔子繁殖为例子而引入，故又称为“兔子数列”。</p><p>有一个数列：0、1、1、2、3、5、8、13、21、34、55、89…，这个数列从第3项开始，每一项都等于前两项之和。以递推的方法定义：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo>≥</mo><mn>3</mn><mo separator="true">,</mo><mi>n</mi><mo>∈</mo><msup><mi>N</mi><mo>∗</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(n)=F(n - 1)+F(n - 2) (n ≥ 3, n ∈ N^*)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fibonacc</span>(<span class="hljs-params">n</span>):</span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">2</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> fibonacc(n-<span class="hljs-number">1</span>) + fibonacc(n-<span class="hljs-number">2</span>)</code></pre><p>以上方法的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，稍微大一点的数都会算很久，有一个简单的解决方案，使用 <code>lru_cache</code> 缓存装饰器，缓存一些中间结果：</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> lru_cache<span class="hljs-comment"># 缓存斐波那契函数已经计算出的结果，最多占用1024字节内存</span><span class="hljs-meta">@lru_cache(<span class="hljs-params">maxsize=<span class="hljs-number">1024</span></span>)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fibonacc</span>(<span class="hljs-params">n</span>):</span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n == <span class="hljs-number">2</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> fibonacc(n-<span class="hljs-number">1</span>) + fibonacc(n-<span class="hljs-number">2</span>)</code></pre><p>另外还有更加节省时间和空间的方法：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fibonacc</span>(<span class="hljs-params">n, current=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-number">1</span></span>):</span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:        <span class="hljs-keyword">return</span> current    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> fibonacc(n-<span class="hljs-number">1</span>, <span class="hljs-built_in">next</span>, current+<span class="hljs-built_in">next</span>)</code></pre><hr><h2><span id="shi-li-san-han-nuo-ta-wen-ti">示例三：汉诺塔问题</span></h2><p>汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。64片黄金圆盘移动完毕之日，就是世界毁灭之时。</p><p><img src="https://cdn.itbob.cn/img/article/037/01.gif" alt="01汉诺塔"></p><p>对于 n 个盘子，移动步骤如下：</p><ul><li>把 n-1 个盘子由 A 经过 C 移动到 B</li><li>把最后一个盘子移动到 C</li><li>把 n-1 个盘子由 B 经过 A 移动到 C</li></ul><p><img src="https://cdn.itbob.cn/img/article/037/02.png" alt="02汉诺塔"></p><p>递归代码实现：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hanoi</span>(<span class="hljs-params">n, a, b, c</span>):</span>                                <span class="hljs-comment"># n 个盘子，a，b，c三个柱子</span>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span>:        hanoi(n-<span class="hljs-number">1</span>, a, c, b)                           <span class="hljs-comment"># 把 n-1 个盘子由 a 经过 c 移动到 b</span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;moving from &#123;0&#125; to &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, c))  <span class="hljs-comment"># 把最后一个盘子移动到 c</span>        hanoi(n-<span class="hljs-number">1</span>, b, a, c)                           <span class="hljs-comment"># 把 n-1 个盘子由 b 经过 a 移动到 c</span></code></pre><p>示例：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hanoi</span>(<span class="hljs-params">n, a, b, c</span>):</span>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span>:        hanoi(n-<span class="hljs-number">1</span>, a, c, b)        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;moving from &#123;0&#125; to &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a, c))        hanoi(n-<span class="hljs-number">1</span>, b, a, c)hanoi(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>)</code></pre><pre><code class="hljs python">moving <span class="hljs-keyword">from</span> A to Cmoving <span class="hljs-keyword">from</span> A to Bmoving <span class="hljs-keyword">from</span> C to Bmoving <span class="hljs-keyword">from</span> A to Cmoving <span class="hljs-keyword">from</span> B to Amoving <span class="hljs-keyword">from</span> B to Cmoving <span class="hljs-keyword">from</span> A to C</code></pre><hr><h2><span id="wei-di-gui">尾递归</span></h2><p>如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。通俗来讲就是递归调用放在了函数的最后。</p><pre><code class="hljs python"><span class="hljs-comment"># 一般递归</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">n</span>):</span>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span>:        func(n-<span class="hljs-number">1</span>)        <span class="hljs-built_in">print</span>(n)<span class="hljs-comment"># 一般递归</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">n</span>):</span>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span>:        <span class="hljs-keyword">return</span> func(n-<span class="hljs-number">1</span>) + n<span class="hljs-comment"># 尾递归</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">n</span>):</span>    a = n    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span>:        a += <span class="hljs-number">1</span>        <span class="hljs-built_in">print</span>(a, n)        <span class="hljs-keyword">return</span> func(n-<span class="hljs-number">1</span>)</code></pre><p>对于普通的递归，每一级递归都产生了新的局部变量，必须创建新的调用栈，随着递归深度的增加，创建的栈越来越多，容易造成爆栈。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">normal_recursion</span>(<span class="hljs-params">n</span>):</span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> n + normal_recursion(n-<span class="hljs-number">1</span>)</code></pre><p><code>normal_recursion(5)</code> 执行：</p><pre><code class="hljs python">normal_recursion(<span class="hljs-number">5</span>)<span class="hljs-number">5</span> + normal_recursion(<span class="hljs-number">4</span>)<span class="hljs-number">5</span> + <span class="hljs-number">4</span> + normal_recursion(<span class="hljs-number">3</span>)<span class="hljs-number">5</span> + <span class="hljs-number">4</span> + <span class="hljs-number">3</span> + normal_recursion(<span class="hljs-number">2</span>)<span class="hljs-number">5</span> + <span class="hljs-number">4</span> + <span class="hljs-number">3</span> + <span class="hljs-number">2</span> + normal_recursion(<span class="hljs-number">1</span>)<span class="hljs-number">5</span> + <span class="hljs-number">4</span> + <span class="hljs-number">3</span> + <span class="hljs-number">3</span><span class="hljs-number">5</span> + <span class="hljs-number">4</span> + <span class="hljs-number">6</span><span class="hljs-number">5</span> + <span class="hljs-number">10</span><span class="hljs-number">15</span></code></pre><p>尾递归基于函数的尾调用，每一级调用直接返回递归函数更新调用栈，没有新局部变量的产生，类似迭代的实现。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tail_recursion</span>(<span class="hljs-params">n, total=<span class="hljs-number">0</span></span>):</span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:        <span class="hljs-keyword">return</span> total    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> tail_recursion(n-<span class="hljs-number">1</span>, total+n)</code></pre><p><code>normal_recursion(5)</code> 执行：</p><pre><code class="hljs python">tail_recursion(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>)tail_recursion(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)tail_recursion(<span class="hljs-number">3</span>, <span class="hljs-number">9</span>)tail_recursion(<span class="hljs-number">2</span>, <span class="hljs-number">12</span>)tail_recursion(<span class="hljs-number">1</span>, <span class="hljs-number">14</span>)tail_recursion(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>)<span class="hljs-number">15</span></code></pre><p>在 Python，Java，Pascal 等语言中是无法实现尾递归优化的，所以采用了 for，while，goto 等特殊结构以迭代的方式来代替尾递归。</p><hr><h2><span id="python-zhong-wei-di-gui-de-jie-jue-fang-an">Python 中尾递归的解决方案</span></h2><p>使用普通的递归来实现斐波那契数列的计算，代码段如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fibonacc</span>(<span class="hljs-params">n, current=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-number">1</span></span>):</span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:        <span class="hljs-keyword">return</span> current    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> fibonacc(n-<span class="hljs-number">1</span>, <span class="hljs-built_in">next</span>, current+<span class="hljs-built_in">next</span>)a = fibonacc(<span class="hljs-number">1000</span>)<span class="hljs-built_in">print</span>(a)</code></pre><p>此时会报错，因为超过了最大递归深度（默认深度900-1000左右）：</p><pre><code class="hljs python">Traceback (most recent call last):  File <span class="hljs-string">&quot;F:/PycharmProjects/algorithm/fibonacc_test.py&quot;</span>, line <span class="hljs-number">57</span>, <span class="hljs-keyword">in</span> &lt;module&gt;    a = fibonacc(<span class="hljs-number">1000</span>)  File <span class="hljs-string">&quot;F:/PycharmProjects/algorithm/fibonacc_test.py&quot;</span>, line <span class="hljs-number">47</span>, <span class="hljs-keyword">in</span> fibonacc    <span class="hljs-keyword">return</span> fibonacc(n-<span class="hljs-number">1</span>, <span class="hljs-built_in">next</span>, current+<span class="hljs-built_in">next</span>)  File <span class="hljs-string">&quot;F:/PycharmProjects/algorithm/fibonacc_test.py&quot;</span>, line <span class="hljs-number">47</span>, <span class="hljs-keyword">in</span> fibonacc    <span class="hljs-keyword">return</span> fibonacc(n-<span class="hljs-number">1</span>, <span class="hljs-built_in">next</span>, current+<span class="hljs-built_in">next</span>)  File <span class="hljs-string">&quot;F:/PycharmProjects/algorithm/fibonacc_test.py&quot;</span>, line <span class="hljs-number">47</span>, <span class="hljs-keyword">in</span> fibonacc    <span class="hljs-keyword">return</span> fibonacc(n-<span class="hljs-number">1</span>, <span class="hljs-built_in">next</span>, current+<span class="hljs-built_in">next</span>)  [Previous line repeated <span class="hljs-number">995</span> more times]  File <span class="hljs-string">&quot;F:/PycharmProjects/algorithm/fibonacc_test.py&quot;</span>, line <span class="hljs-number">44</span>, <span class="hljs-keyword">in</span> fibonacc    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:RecursionError: maximum recursion depth exceeded <span class="hljs-keyword">in</span> comparison</code></pre><p>如果是递归深度不是很大的情况，可以手动重设递归深度来解决：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> syssys.setrecursionlimit(<span class="hljs-number">10000</span>)  <span class="hljs-comment"># 递归深度设置为 10000</span></code></pre><p>如果递归深度非常大，那么就可以采用尾递归优化，但是 Python 官方是并不支持尾递归的（不知道为啥），然而这难不到广大的程序员们，早在 2006 年 <a href="https://code.activestate.com/recipes/users/2792865/">Crutcher Dunnavant</a> 就想出了一个解决办法，实现一个 <code>tail_call_optimized</code> 装饰器，原文链接：<a href="https://code.activestate.com/recipes/474088/">https://code.activestate.com/recipes/474088/</a>，原代码是 Python 2.4 实现的，用 Python 3.x 实现如下：</p><pre><code class="hljs python"><span class="hljs-comment"># This program shows off a python decorator</span><span class="hljs-comment"># which implements tail call optimization. It</span><span class="hljs-comment"># does this by throwing an exception if it is</span><span class="hljs-comment"># it&#x27;s own grandparent, and catching such</span><span class="hljs-comment"># exceptions to recall the stack.</span><span class="hljs-keyword">import</span> sys<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TailRecurseException</span>(<span class="hljs-params">BaseException</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, args, kwargs</span>):</span>        self.args = args        self.kwargs = kwargs<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tail_call_optimized</span>(<span class="hljs-params">g</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    This function decorates a function with tail call</span><span class="hljs-string">    optimization. It does this by throwing an exception</span><span class="hljs-string">    if it is it&#x27;s own grandparent, and catching such</span><span class="hljs-string">    exceptions to fake the tail call optimization.</span><span class="hljs-string"></span><span class="hljs-string">    This function fails if the decorated5</span><span class="hljs-string">    function recurses in a non-tail context.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">*args, **kwargs</span>):</span>        f = sys._getframe()        <span class="hljs-keyword">if</span> f.f_back <span class="hljs-keyword">and</span> f.f_back.f_back <span class="hljs-keyword">and</span> f.f_back.f_back.f_code == f.f_code:            <span class="hljs-keyword">raise</span> TailRecurseException(args, kwargs)        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:                <span class="hljs-keyword">try</span>:                    <span class="hljs-keyword">return</span> g(*args, **kwargs)                <span class="hljs-keyword">except</span> TailRecurseException <span class="hljs-keyword">as</span> e:                    args = e.args                    kwargs = e.kwargs    func.__doc__ = g.__doc__    <span class="hljs-keyword">return</span> func</code></pre><p>使用该装饰器再来实现比较大的斐波那契数列的计算：</p><pre><code class="hljs python"><span class="hljs-meta">@tail_call_optimized</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fibonacc</span>(<span class="hljs-params">n, current=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-number">1</span></span>):</span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:        <span class="hljs-keyword">return</span> current    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> fibonacc(n-<span class="hljs-number">1</span>, <span class="hljs-built_in">next</span>, current+<span class="hljs-built_in">next</span>)a = fibonacc(<span class="hljs-number">1000</span>)<span class="hljs-built_in">print</span>(a)</code></pre><p>输出结果：</p><pre><code class="hljs python"><span class="hljs-number">43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875</span></code></pre><p><code>tail_call_optimized</code> 实现尾递归优化的原理：当递归函数被该装饰器修饰后，递归调用在装饰器while循环内部进行，每当产生新的递归调用栈帧时，<code>f.f_back.f_back.f_code == f.f_code:</code> 就捕获当前尾调用函数的参数，并抛出异常，从而销毁递归栈并使用捕获的参数手动调用递归函数，所以递归的过程中始终只存在一个栈帧对象，达到优化的目的。</p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">TRHX•鲍勃。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/109322815</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 实现十大经典排序算法</title>
      <link href="/article/036/"/>
      <url>/article/036/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-pai-xu-suan-fa-fen-lei-font"><font color="#FF0000">排序算法分类</font></a></li><li><a href="#font-color-ff0000-yi-mou-pao-pai-xu-bubble-sort-font"><font color="#FF0000">一、冒泡排序（Bubble Sort）</font></a><ul><li><a href="#1-yuan-li">1、原理</a></li><li><a href="#2-bu-zou">2、步骤</a></li><li><a href="#3-dong-hua-yan-shi">3、动画演示</a></li><li><a href="#4-dai-ma-shi-xian">4、代码实现</a></li><li><a href="#5-ju-ti-shi-li">5、具体示例</a></li></ul></li><li><a href="#font-color-ff0000-er-xuan-ze-pai-xu-selection-sort-font"><font color="#FF0000">二、选择排序（Selection Sort）</font></a><ul><li><a href="#1-yuan-li-1">1、原理</a></li><li><a href="#2-bu-zou-1">2、步骤</a></li><li><a href="#3-dong-hua-yan-shi-1">3、动画演示</a></li><li><a href="#4-dai-ma-shi-xian-1">4、代码实现</a></li><li><a href="#5-ju-ti-shi-li-1">5、具体示例</a></li></ul></li><li><a href="#font-color-ff0000-san-cha-ru-pai-xu-insertion-sort-font"><font color="#FF0000">三、插入排序（Insertion Sort）</font></a><ul><li><a href="#1-yuan-li-2">1、原理</a></li><li><a href="#2-bu-zou-2">2、步骤</a></li><li><a href="#3-dong-hua-yan-shi-2">3、动画演示</a></li><li><a href="#4-dai-ma-shi-xian-2">4、代码实现</a></li><li><a href="#5-ju-ti-shi-li-2">5、具体示例</a></li></ul></li><li><a href="#font-color-ff0000-si-xi-er-pai-xu-shell-sort-font"><font color="#FF0000">四、希尔排序（Shell Sort）</font></a><ul><li><a href="#1-yuan-li-3">1、原理</a></li><li><a href="#2-bu-zou-3">2、步骤</a></li><li><a href="#3-dong-hua-yan-shi-3">3、动画演示</a></li><li><a href="#4-dai-ma-shi-xian-3">4、代码实现</a></li><li><a href="#5-ju-ti-shi-li-3">5、具体示例</a></li></ul></li><li><a href="#font-color-ff0000-wu-gui-bing-pai-xu-merge-sort-font"><font color="#FF0000">五、归并排序（Merge Sort）</font></a><ul><li><a href="#1-yuan-li-4">1、原理</a></li><li><a href="#2-bu-zou-4">2、步骤</a></li><li><a href="#3-dong-hua-yan-shi-4">3、动画演示</a></li><li><a href="#4-dai-ma-shi-xian-4">4、代码实现</a></li><li><a href="#5-ju-ti-shi-li-4">5、具体示例</a></li></ul></li><li><a href="#font-color-ff0000-liu-kuai-su-pai-xu-quick-sort-font"><font color="#FF0000">六、快速排序（Quick Sort）</font></a><ul><li><a href="#1-yuan-li-5">1、原理</a></li><li><a href="#2-bu-zou-5">2、步骤</a></li><li><a href="#3-dong-hua-yan-shi-5">3、动画演示</a></li><li><a href="#4-dai-ma-shi-xian-5">4、代码实现</a></li><li><a href="#5-ju-ti-shi-li-5">5、具体示例</a></li></ul></li><li><a href="#font-color-ff0000-qi-dui-pai-xu-heap-sort-font"><font color="#FF0000">七、堆排序（Heap Sort）</font></a><ul><li><a href="#1-yuan-li-6">1、原理</a></li><li><a href="#2-bu-zou-6">2、步骤</a></li><li><a href="#3-dong-hua-yan-shi-6">3、动画演示</a></li><li><a href="#4-dai-ma-shi-xian-6">4、代码实现</a></li><li><a href="#5-ju-ti-shi-li-6">5、具体示例</a></li></ul></li><li><a href="#font-color-ff0000-ba-ji-shu-pai-xu-counting-sort-font"><font color="#FF0000">八、计数排序（Counting Sort）</font></a><ul><li><a href="#1-yuan-li-7">1、原理</a></li><li><a href="#2-bu-zou-7">2、步骤</a></li><li><a href="#3-dong-hua-yan-shi-7">3、动画演示</a></li><li><a href="#4-dai-ma-shi-xian-7">4、代码实现</a></li><li><a href="#5-ju-ti-shi-li-7">5、具体示例</a></li></ul></li><li><a href="#font-color-ff0000-jiu-tong-pai-xu-bucket-sort-font"><font color="#FF0000">九、桶排序（Bucket Sort）</font></a><ul><li><a href="#1-yuan-li-8">1、原理</a></li><li><a href="#2-bu-zou-8">2、步骤</a></li><li><a href="#3-dong-hua-yan-shi-8">3、动画演示</a></li><li><a href="#4-dai-ma-shi-xian-8">4、代码实现</a></li><li><a href="#5-ju-ti-shi-li-8">5、具体示例</a></li></ul></li><li><a href="#font-color-ff0000-shi-ji-shu-pai-xu-radix-sort-font"><font color="#FF0000">十、基数排序（Radix Sort）</font></a><ul><li><a href="#1-yuan-li-9">1、原理</a></li><li><a href="#2-bu-zou-9">2、步骤</a></li><li><a href="#3-dong-hua-yan-shi-9">3、动画演示</a></li><li><a href="#4-dai-ma-shi-xian-9">4、代码实现</a></li><li><a href="#5-ju-ti-shi-li-9">5、具体示例</a></li></ul></li></ul><!-- tocstop --><hr><ul><li>参考资料：<a href="https://www.bilibili.com/video/BV1mp4y1D7UP">https://www.bilibili.com/video/BV1mp4y1D7UP</a></li><li>本文动图演示来源：<a href="https://visualgo.net/">https://visualgo.net/</a></li></ul><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/108987300</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="pai-xu-suan-fa-fen-lei"><font color="#FF0000">排序算法分类</font></span></h2><ul><li><font color="#FF0000"><strong>内部排序</strong></font>：指在排序期间，元素全部存放在内存中的排序，常见的内部排序算法有：<strong>冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、基数排序</strong>等。</li><li><font color="#FF0000"><strong>外部排序</strong></font>：指在排序期间，元素无法完全全部同时存放在内存中，必须在排序的过程中根据要求不断地在内、外存之间移动的排序；</li><li><font color="#FF0000"><strong>比较类排序</strong></font>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</li><li><font color="#FF0000"><strong>非比较类排序</strong></font>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。 常见的非比较类排序算法有：<strong>基数排序、计数排序、桶排序</strong>等</li></ul><hr><p>一般情况下，内部排序算法在执行过程中都要进行两种操作：比较和移动。通过比较两个关键字的大小，确定对应元素的前后关系，然后通过移动元素以达到有序。但是，并非所有的内部排序算法都要基于比较操作。</p><p>每种排序算法都有各自的优缺点，适合在不同的环境下使用，就其全面性能而言，很难提出一种被认为是最好的算法。<font color="#FF0000"><strong>通常可以将排序算法分为插入排序、交换排序、选择排序、归并排序和基数排序五大类</strong></font>，内部排序算法的性能取决于算法的时间复杂度和空间复杂度，而时间复杂度一般是由比较和移动的次数决定的。</p><hr><p><img src="https://cdn.itbob.cn/img/article/036/01.png" alt="01"></p><table><thead><tr><th>排序算法</th><th>时间复杂度（平均）</th><th>时间复杂度（最好）</th><th>时间复杂度（最坏）</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>选择排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>不稳定</td></tr><tr><td>插入排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>希尔排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog^2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlog^2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>不稳定</td></tr><tr><td>归并排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>快速排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>不稳定</td></tr><tr><td>堆排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td><td>不稳定</td></tr><tr><td>计数排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>桶排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr><tr><td>基数排序</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n*k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n*k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>∗</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n*k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td><td>稳定</td></tr></tbody></table><p><strong>稳定性</strong>：排序后 2 个相等键值的顺序和排序之前它们的顺序是否相同。例：如果 a 原本在 b 前面，且 a=b，排序之后 a 仍然在 b 的前面，则表示具有稳定性。</p><p>常见时间复杂度大小比较：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt;...&lt; O(2^n)&lt;O (n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!)</span></span></span></span></p><hr><h2><span id="yi-mou-pao-pai-xu-bubble-sort"><font color="#FF0000">一、冒泡排序（Bubble Sort）</font></span></h2><h3><span id="1-yuan-li">1、原理</span></h3><p>重复地走访要排序的元素，依次比较两个相邻的元素，如果顺序（如从大到小）错误就把他们交换过来。走访元素的工作是重复地进行，直到没有相邻元素需要交换，也就是说该元素列已经排序完成。冒泡的意思其实就是每一轮冒泡一个最大的元素就会通过不断比较和交换相邻元素使它转移到最右边。</p><p>假如有 10 个小盆友从左到右站成一排，个头不等。老师想让他们按照个头从低到高站好，于是他开始喊口号。 每喊一次，从第一个小盆友开始，相邻的小朋友如果身高不是正序就会两两调换，就这样第一轮个头最高的排到了最右边（冒泡到最右边），第二轮依次这么来，从第一个小朋友开始两两交换，这样次高的小盆友又排到了倒数第二个位置。依次类推。</p><h3><span id="2-bu-zou">2、步骤</span></h3><ul><li><strong>①</strong> 比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li><strong>②</strong> 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li><strong>③</strong> 针对所有的元素重复步骤 <strong>①</strong> ~ <strong>②</strong>，除了最后一个元素，直到排序完成。</li></ul><h3><span id="3-dong-hua-yan-shi">3、动画演示</span></h3><p><img src="https://cdn.itbob.cn/img/article/036/02%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="02冒泡排序"></p><h3><span id="4-dai-ma-shi-xian">4、代码实现</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubbleSort</span>(<span class="hljs-params">arr</span>):</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-<span class="hljs-number">1</span>):         <span class="hljs-comment"># 循环第 i 趟</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-i-<span class="hljs-number">1</span>):   <span class="hljs-comment"># j 为下标</span>            <span class="hljs-keyword">if</span> arr[j] &gt; arr[j+<span class="hljs-number">1</span>]:       <span class="hljs-comment"># 如果这个数大于后面的数就交换两者的位置</span>                arr[j], arr[j+<span class="hljs-number">1</span>] = arr[j+<span class="hljs-number">1</span>], arr[j]    <span class="hljs-keyword">return</span> arr</code></pre><p>冒泡排序还有一种优化算法，就是立一个 flag，当某一趟序列遍历中元素没有发生交换，则证明该序列已经有序，就不再进行后续的排序。动画演示里就是改进后的算法，改进后的代码如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubbleSort</span>(<span class="hljs-params">arr</span>):</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-<span class="hljs-number">1</span>):         <span class="hljs-comment"># 循环第 i 趟</span>    flag = <span class="hljs-literal">False</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-i-<span class="hljs-number">1</span>):   <span class="hljs-comment"># j 为下标</span>            <span class="hljs-keyword">if</span> arr[j] &gt; arr[j+<span class="hljs-number">1</span>]:       <span class="hljs-comment"># 如果这个数大于后面的数就交换两者的位置</span>                arr[j], arr[j+<span class="hljs-number">1</span>] = arr[j+<span class="hljs-number">1</span>], arr[j]                flag = <span class="hljs-literal">True</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:            <span class="hljs-keyword">return</span>    <span class="hljs-keyword">return</span> arr</code></pre><p>冒泡排序最快的情况：当输入的数据是正序时；最慢的情况：当输入的数据是反序时。</p><h3><span id="5-ju-ti-shi-li">5、具体示例</span></h3><p>未改进版本：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span>(<span class="hljs-params">arr</span>):</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-<span class="hljs-number">1</span>):         <span class="hljs-comment"># 循环第 i 趟</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-i-<span class="hljs-number">1</span>):   <span class="hljs-comment"># j 为下标</span>            <span class="hljs-keyword">if</span> arr[j] &gt; arr[j+<span class="hljs-number">1</span>]:       <span class="hljs-comment"># 如果这个数大于后面的数就交换两者的位置</span>                arr[j], arr[j+<span class="hljs-number">1</span>] = arr[j+<span class="hljs-number">1</span>], arr[j]        <span class="hljs-built_in">print</span>(arr)                      <span class="hljs-comment"># 每一趟比较完了就打印一次</span>arr = [<span class="hljs-number">3</span>, <span class="hljs-number">44</span>, <span class="hljs-number">38</span>, <span class="hljs-number">5</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">46</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>]bubble_sort(arr)</code></pre><pre><code class="hljs python">[<span class="hljs-number">3</span>, <span class="hljs-number">38</span>, <span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">46</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">38</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">44</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">38</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">36</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>, <span class="hljs-number">27</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>]</code></pre><p>改进版本：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span>(<span class="hljs-params">arr</span>):</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-<span class="hljs-number">1</span>):         <span class="hljs-comment"># 循环第 i 趟</span>        flag = <span class="hljs-literal">False</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-i-<span class="hljs-number">1</span>):   <span class="hljs-comment"># j 为下标</span>            <span class="hljs-keyword">if</span> arr[j] &gt; arr[j+<span class="hljs-number">1</span>]:       <span class="hljs-comment"># 如果这个数大于后面的数就交换两者的位置</span>                arr[j], arr[j+<span class="hljs-number">1</span>] = arr[j+<span class="hljs-number">1</span>], arr[j]                flag = <span class="hljs-literal">True</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:            <span class="hljs-keyword">return</span>        <span class="hljs-built_in">print</span>(arr)                      <span class="hljs-comment"># 每一趟比较完了就打印一次</span>arr = [<span class="hljs-number">3</span>, <span class="hljs-number">44</span>, <span class="hljs-number">38</span>, <span class="hljs-number">5</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">46</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>]bubble_sort(arr)</code></pre><pre><code class="hljs python">[<span class="hljs-number">3</span>, <span class="hljs-number">38</span>, <span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">46</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">38</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">44</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">38</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">36</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>, <span class="hljs-number">27</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>]</code></pre><hr><h2><span id="er-xuan-ze-pai-xu-selection-sort"><font color="#FF0000">二、选择排序（Selection Sort）</font></span></h2><h3><span id="1-yuan-li">1、原理</span></h3><p>第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。可以理解为 一个 0 到 n-1 的迭代，每次向后查找选择一个最小的元素。选择排序是不稳定的排序方法。</p><p>假如有 10 个小盆友从左到右站成一排，个头不等。老师想让他们按照个头从低到高站好，我们从第一个开始，从头到尾找一个个头最小的小盆友，然后把它和第一个小盆友交换。 然后从第二个小盆友开始采取同样的策略，这样一圈下来小盆友就是有序的了。</p><h3><span id="2-bu-zou">2、步骤</span></h3><ul><li><strong>①</strong> 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置；</li><li><strong>②</strong> 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾；</li><li><strong>③</strong> 重复步骤 <strong>②</strong>，直到所有元素均排序完毕。</li></ul><h3><span id="3-dong-hua-yan-shi">3、动画演示</span></h3><p><img src="https://cdn.itbob.cn/img/article/036/03%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="03选择排序"></p><h3><span id="4-dai-ma-shi-xian">4、代码实现</span></h3><p>Python 代码：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selection_sort</span>(<span class="hljs-params">arr</span>):</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-<span class="hljs-number">1</span>):          <span class="hljs-comment"># 循环第 i 趟</span>        min_index = i                    <span class="hljs-comment"># 记录最小数的下标</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr)):   <span class="hljs-comment"># j 为下标</span>            <span class="hljs-keyword">if</span> arr[j] &lt; arr[min_index]:  <span class="hljs-comment"># 如果这个数小于记录的最小数，则更新最小数的下标</span>                min_index = j        arr[i], arr[min_index] = arr[min_index], arr[i]  <span class="hljs-comment"># 将 i 位置的数（已排序序列的末尾的数）和最小数进行交换</span>    <span class="hljs-keyword">return</span> arr</code></pre><h3><span id="5-ju-ti-shi-li">5、具体示例</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selection_sort</span>(<span class="hljs-params">arr</span>):</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)-<span class="hljs-number">1</span>):          <span class="hljs-comment"># 循环第 i 趟</span>        min_index = i                    <span class="hljs-comment"># 记录最小数的下标</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr)):   <span class="hljs-comment"># j 为下标</span>            <span class="hljs-keyword">if</span> arr[j] &lt; arr[min_index]:  <span class="hljs-comment"># 如果这个数小于记录的最小数，则更新最小数的下标</span>                min_index = j        arr[i], arr[min_index] = arr[min_index], arr[i]  <span class="hljs-comment"># 将 i 位置的数（已排序序列的末尾的数）和最小数进行交换</span>        <span class="hljs-built_in">print</span>(arr)                       <span class="hljs-comment"># 每一趟比较完了就打印一次</span>arr = [<span class="hljs-number">3</span>, <span class="hljs-number">44</span>, <span class="hljs-number">38</span>, <span class="hljs-number">5</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">2</span>, <span class="hljs-number">46</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>]selection_sort(arr)</code></pre><pre><code class="hljs python">[<span class="hljs-number">2</span>, <span class="hljs-number">44</span>, <span class="hljs-number">38</span>, <span class="hljs-number">5</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">3</span>, <span class="hljs-number">46</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">38</span>, <span class="hljs-number">5</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">4</span>, <span class="hljs-number">19</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">38</span>, <span class="hljs-number">19</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">38</span>, <span class="hljs-number">19</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">47</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">38</span>, <span class="hljs-number">19</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">38</span>, <span class="hljs-number">47</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">27</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">38</span>, <span class="hljs-number">47</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">38</span>, <span class="hljs-number">47</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">38</span>, <span class="hljs-number">47</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">46</span>, <span class="hljs-number">44</span>, <span class="hljs-number">47</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">50</span>, <span class="hljs-number">48</span>][<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">36</span>, <span class="hljs-number">38</span>, <span class="hljs-number">44</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>, <span class="hljs-number">50</span>]</code></pre><hr><h2><span id="san-cha-ru-pai-xu-insertion-sort"><font color="#FF0000">三、插入排序（Insertion Sort）</font></span></h2><h3><span id="1-yuan-li">1、原理</span></h3><p>插入排序一般也被称为直接插入排序。对于少量元素的排序，它是一个有效的算法。它的基本思想是将一个记录插入到已经排好序的有序表中，从而形成一个新的有序表。在其实现过程使用双层循环，外层循环对除了第一个元素之外的所有元素进行遍历，内层循环对当前元素前面有序表进行待插入位置查找，并进行移动。</p><p>插入排序的工作方式像许多人排序一手扑克牌。开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较。拿在左手上的牌总是排序好的，原来这些牌是桌子上牌堆中顶部的牌。</p><h3><span id="2-bu-zou">2、步骤</span></h3><ul><li><strong>①</strong> 从第一个元素开始，该元素可以认为已经被排序；</li><li><strong>②</strong> 取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li><strong>③</strong> 如果该元素（已排序的）大于新元素，将该元素往右移到下一位置，重复该步骤，直到找到已排序的元素小于或者等于新元素的位置；</li><li><strong>④</strong> 将新元素插入到步骤 <strong>③</strong> 找到的位置的后面；</li><li><strong>⑤</strong> 重复步骤 <strong>②</strong> ~ <strong>④</strong>。</li></ul><h3><span id="3-dong-hua-yan-shi">3、动画演示</span></h3><p><img src="https://cdn.itbob.cn/img/article/036/04%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="04插入排序"></p><h3><span id="4-dai-ma-shi-xian">4、代码实现</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertion_sort</span>(<span class="hljs-params">arr</span>):</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr)):    <span class="hljs-comment"># 将 i 看做摸到的牌的下标</span>        tmp = arr[i]                <span class="hljs-comment"># 将摸到的牌储存到 tmp</span>        j = i-<span class="hljs-number">1</span>                     <span class="hljs-comment"># 将 j 看做手里的牌的下标</span>        <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[j] &gt; tmp:  <span class="hljs-comment"># 如果手里的牌大于摸到的牌</span>            arr[j+<span class="hljs-number">1</span>] = arr[j]       <span class="hljs-comment"># 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span>            j -= <span class="hljs-number">1</span>                  <span class="hljs-comment"># 将手里的牌的下标减 1，再次准备与摸到的牌进行比较</span>        arr[j+<span class="hljs-number">1</span>] = tmp              <span class="hljs-comment"># 将摸到的牌插入到 j+1 位置</span>    <span class="hljs-keyword">return</span> arr</code></pre><h3><span id="5-ju-ti-shi-li">5、具体示例</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertion_sort</span>(<span class="hljs-params">arr</span>):</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr)):    <span class="hljs-comment"># 将 i 看做摸到的牌的下标</span>        tmp = arr[i]                <span class="hljs-comment"># 将摸到的牌储存到 tmp</span>        j = i-<span class="hljs-number">1</span>                     <span class="hljs-comment"># 将 j 看做手里的牌的下标</span>        <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[j] &gt; tmp:  <span class="hljs-comment"># 如果手里的牌大于摸到的牌</span>            arr[j+<span class="hljs-number">1</span>] = arr[j]       <span class="hljs-comment"># 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span>            j -= <span class="hljs-number">1</span>                  <span class="hljs-comment"># 将手里的牌的下标减 1，再次准备与摸到的牌进行比较</span>        arr[j+<span class="hljs-number">1</span>] = tmp              <span class="hljs-comment"># 将摸到的牌插入到 j+1 位置</span>        <span class="hljs-built_in">print</span>(arr)                  <span class="hljs-comment"># 每一趟比较完了就打印一次</span>arr = [<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]insertion_sort(arr)</code></pre><pre><code class="hljs python">[<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]  <span class="hljs-comment"># 手里第一张牌为 0，摸到 9，此时 i=1，j=0，0 比 9 小，将 9 插到索引 j+1=1 处。</span>[<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]  <span class="hljs-comment"># 手里的牌为 0，9，摸到 8，此时 i=2，j=1，9 比 8 大，将 9 右移一个位置，j-1=0，将 8 插到 j+1=1 处</span>[<span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>][<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>][<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>][<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>][<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>][<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>][<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]</code></pre><hr><h2><span id="si-xi-er-pai-xu-shell-sort"><font color="#FF0000">四、希尔排序（Shell Sort）</font></span></h2><h3><span id="1-yuan-li">1、原理</span></h3><p>希尔排序是插入排序的一种更高效的改进版本，是一种分组插入排序算法，又称缩小增量排序（Diminishing Increment Sort），希尔排序是非稳定排序算法。该方法因 D.L.Shell 于 1959 年提出而得名。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><h3><span id="2-bu-zou">2、步骤</span></h3><ul><li><strong>①</strong> n 为数组长度，首先取一个整数 <strong>d1=n/2</strong>，将元素分为 <strong>d1</strong> 个组，每组相邻量元素之间距离为 <strong>d1-1</strong>，在各组内进行直接插入排序；</li><li><strong>②</strong> 取第二个整数 <strong>d2=d1/2</strong>，重复步骤 <strong>①</strong> 分组排序过程，直到 <strong>di=1</strong>，即所有元素在同一组内进行直接插入排序。</li></ul><p>PS：希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。</p><h3><span id="3-dong-hua-yan-shi">3、动画演示</span></h3><p><img src="https://cdn.itbob.cn/img/article/036/05%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" alt="05希尔排序"></p><p><img src="https://cdn.itbob.cn/img/article/036/06%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" alt="06希尔排序"></p><h3><span id="4-dai-ma-shi-xian">4、代码实现</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertion_sort_gap</span>(<span class="hljs-params">arr, gap</span>):</span>     <span class="hljs-comment"># 将 gap 看做隔 gap 个距离摸一张牌，而不是依次按照顺序摸牌</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(gap, <span class="hljs-built_in">len</span>(arr)):    <span class="hljs-comment"># 将 i 看做摸到的牌的下标</span>        tmp = arr[i]                  <span class="hljs-comment"># 将摸到的牌储存到 tmp</span>        j = i-gap                     <span class="hljs-comment"># 将 j 看做手里的牌的下标</span>        <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[j] &gt; tmp:  <span class="hljs-comment"># 如果手里的牌大于摸到的牌</span>            arr[j+gap] = arr[j]         <span class="hljs-comment"># 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span>            j -= gap                    <span class="hljs-comment"># 将手里的牌的下标减 gap，再次准备与摸到的牌进行比较</span>        arr[j+gap] = tmp                <span class="hljs-comment"># 将摸到的牌插入到 j+gap 位置</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shell_sort</span>(<span class="hljs-params">arr</span>):</span>    d = <span class="hljs-built_in">len</span>(arr) // <span class="hljs-number">2</span>                   <span class="hljs-comment"># 第一次分组</span>    <span class="hljs-keyword">while</span> d &gt;= <span class="hljs-number">1</span>:        insertion_sort_gap(arr, d)      <span class="hljs-comment"># 调用插入排序</span>        d //= <span class="hljs-number">2</span>                         <span class="hljs-comment"># 整除 2 后再次分组</span>    <span class="hljs-keyword">return</span> arr</code></pre><p>也可以不使用两个函数，写在一起即可：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shell_sort</span>(<span class="hljs-params">arr</span>):</span>    d = <span class="hljs-built_in">len</span>(arr) // <span class="hljs-number">2</span>                   <span class="hljs-comment"># 第一次分组</span>    <span class="hljs-keyword">while</span> d &gt;= <span class="hljs-number">1</span>:                       <span class="hljs-comment"># 将 d 看做隔 d 个距离摸一张牌，而不是依次按照顺序摸牌</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d, <span class="hljs-built_in">len</span>(arr)):    <span class="hljs-comment"># 将 i 看做摸到的牌的下标</span>            tmp = arr[i]                <span class="hljs-comment"># 将摸到的牌储存到 tmp</span>            j = i - d                   <span class="hljs-comment"># 将 j 看做手里的牌的下标</span>            <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[j] &gt; tmp:   <span class="hljs-comment"># 如果手里的牌大于摸到的牌</span>                arr[j + d] = arr[j]          <span class="hljs-comment"># 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span>                j -= d                       <span class="hljs-comment"># 将手里的牌的下标减 d，再次准备与摸到的牌进行比较</span>            arr[j + d] = tmp                 <span class="hljs-comment"># 将摸到的牌插入到 j+d 位置</span>        d //= <span class="hljs-number">2</span>                              <span class="hljs-comment"># 整除 2 后再次分组</span>    <span class="hljs-keyword">return</span> arr</code></pre><h3><span id="5-ju-ti-shi-li">5、具体示例</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertion_sort_gap</span>(<span class="hljs-params">arr, gap</span>):</span>     <span class="hljs-comment"># 将 gap 看做隔 gap 个距离摸一张牌，而不是依次按照顺序摸牌</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(gap, <span class="hljs-built_in">len</span>(arr)):    <span class="hljs-comment"># 将 i 看做摸到的牌的下标</span>        tmp = arr[i]                  <span class="hljs-comment"># 将摸到的牌储存到 tmp</span>        j = i-gap                     <span class="hljs-comment"># 将 j 看做手里的牌的下标</span>        <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[j] &gt; tmp:  <span class="hljs-comment"># 如果手里的牌大于摸到的牌</span>            arr[j+gap] = arr[j]         <span class="hljs-comment"># 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span>            j -= gap                    <span class="hljs-comment"># 将手里的牌的下标减 gap，再次准备与摸到的牌进行比较</span>        arr[j+gap] = tmp                <span class="hljs-comment"># 将摸到的牌插入到 j+gap 位置</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shell_sort</span>(<span class="hljs-params">arr</span>):</span>    d = <span class="hljs-built_in">len</span>(arr) // <span class="hljs-number">2</span>                   <span class="hljs-comment"># 第一次分组</span>    <span class="hljs-keyword">while</span> d &gt;= <span class="hljs-number">1</span>:        insertion_sort_gap(arr, d)      <span class="hljs-comment"># 调用插入排序</span>        <span class="hljs-built_in">print</span>(arr)                      <span class="hljs-comment"># 每一轮排序后打印一次</span>        d //= <span class="hljs-number">2</span>                         <span class="hljs-comment"># 整除 2 后再次分组</span>arr = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>]shell_sort(arr)</code></pre><pre><code class="hljs python">[<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>][<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]</code></pre><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shell_sort</span>(<span class="hljs-params">arr</span>):</span>    d = <span class="hljs-built_in">len</span>(arr) // <span class="hljs-number">2</span>                   <span class="hljs-comment"># 第一次分组</span>    <span class="hljs-keyword">while</span> d &gt;= <span class="hljs-number">1</span>:                       <span class="hljs-comment"># 将 d 看做隔 d 个距离摸一张牌，而不是依次按照顺序摸牌</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d, <span class="hljs-built_in">len</span>(arr)):    <span class="hljs-comment"># 将 i 看做摸到的牌的下标</span>            tmp = arr[i]                <span class="hljs-comment"># 将摸到的牌储存到 tmp</span>            j = i - d                   <span class="hljs-comment"># 将 j 看做手里的牌的下标</span>            <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[j] &gt; tmp:   <span class="hljs-comment"># 如果手里的牌大于摸到的牌</span>                arr[j + d] = arr[j]          <span class="hljs-comment"># 将手里的牌往右移一个位置（将手里的牌赋值给下一个位置）</span>                j -= d                       <span class="hljs-comment"># 将手里的牌的下标减 d，再次准备与摸到的牌进行比较</span>            arr[j + d] = tmp                 <span class="hljs-comment"># 将摸到的牌插入到 j+d 位置</span>        <span class="hljs-built_in">print</span>(arr)                           <span class="hljs-comment"># 每一轮排序后打印一次</span>        d //= <span class="hljs-number">2</span>                              <span class="hljs-comment"># 整除 2 后再次分组</span>arr = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>]shell_sort(arr)</code></pre><pre><code class="hljs python">[<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>][<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]</code></pre><hr><h2><span id="wu-gui-bing-pai-xu-merge-sort"><font color="#FF0000">五、归并排序（Merge Sort）</font></span></h2><h3><span id="1-yuan-li">1、原理</span></h3><p>归并的概念：假设一个列表分为两段，其中每一段都是有序列表，现在将该两段合并为一个有序列表，这种操作称为一次归并。</p><p>归并排序是建立在归并操作上的一种有效，稳定的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><p><img src="https://cdn.itbob.cn/img/article/036/08.png" alt="08"></p><h3><span id="2-bu-zou">2、步骤</span></h3><p><font color="#ff0000"><strong>归并的基本步骤：</strong></font></p><ul><li><strong>①</strong> 申请空间，使其大小为<strong>两个已经排序序列之和</strong>，该空间用来存放合并后的序列；</li><li><strong>②</strong> 设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li><strong>③</strong> 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li><strong>④</strong> 重复步骤 <strong>③</strong> 直到某一指针达到序列尾；</li><li><strong>⑤</strong> 将另一序列剩下的所有元素直接复制到合并序列尾。</li></ul><p><font color="#ff0000"><strong>归并排序的步骤：</strong></font></p><ul><li><strong>①</strong> 分解：将列表越分越小，直至分成一个元素，终止条件：一个元素是有序的。</li><li><strong>②</strong> 合并：不断将两个有序列表进行归并，列表越来越大，直到所有序列归并完毕。</li></ul><h3><span id="3-dong-hua-yan-shi">3、动画演示</span></h3><p><img src="https://cdn.itbob.cn/img/article/036/07%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif" alt="07归并排序"></p><h3><span id="4-dai-ma-shi-xian">4、代码实现</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span>(<span class="hljs-params">arr, low, mid, high</span>):</span>    <span class="hljs-comment"># low 和 high 为整个数组的第一个和最后一个位置索引，mid 为中间位置索引</span>    <span class="hljs-comment"># i 和 j 为指针，最初位置分别为两个有序序列的起始位置</span>    <span class="hljs-comment"># ltmp 用来存放合并后的序列</span>    i = low    j = mid+<span class="hljs-number">1</span>    ltmp = []    <span class="hljs-keyword">while</span> i &lt;= mid <span class="hljs-keyword">and</span> j &lt;= high:  <span class="hljs-comment"># 只要左右两边都有数</span>        <span class="hljs-keyword">if</span> arr[i] &lt; arr[j]:        <span class="hljs-comment"># 当左边的数小于右边的数</span>            ltmp.append(arr[i])    <span class="hljs-comment"># 将左边的数存入 ltmp</span>            i += <span class="hljs-number">1</span>                 <span class="hljs-comment"># 左边的指针往右移一位</span>        <span class="hljs-keyword">else</span>:                      <span class="hljs-comment"># 当右边的数小于左边的数</span>            ltmp.append(arr[j])    <span class="hljs-comment"># 将右边的数存入 ltmp</span>            j += <span class="hljs-number">1</span>                 <span class="hljs-comment"># 右边的指针往右移一位</span>    <span class="hljs-comment"># 上面的 while 语句执行完后，左边或者右边没有数了</span>    <span class="hljs-keyword">while</span> i &lt;= mid:                <span class="hljs-comment"># 当左边还有数的时候</span>        ltmp.append(arr[i])        <span class="hljs-comment"># 将左边剩下的数全部存入 ltmp</span>        i += <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> j &lt;= high:               <span class="hljs-comment"># 当右边还有数的时候</span>        ltmp.append(arr[j])        <span class="hljs-comment"># 将右边剩下的数全部存入 ltmp</span>        j += <span class="hljs-number">1</span>    arr[low:high+<span class="hljs-number">1</span>] = ltmp         <span class="hljs-comment"># 将排序后的数组写回原数组</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sort</span>(<span class="hljs-params">arr, low, high</span>):</span>       <span class="hljs-comment"># low 和 high 为整个数组的第一个和最后一个位置索引</span>    <span class="hljs-keyword">if</span> low &lt; high:                    <span class="hljs-comment"># 至少有两个元素</span>        mid = (low + high) // <span class="hljs-number">2</span>        merge_sort(arr, low, mid)     <span class="hljs-comment"># 把左边递归分解</span>        merge_sort(arr, mid+<span class="hljs-number">1</span>, high)  <span class="hljs-comment"># 把右边递归分解</span>        merge(arr, low, mid, high)    <span class="hljs-comment"># 做归并</span></code></pre><h3><span id="5-ju-ti-shi-li">5、具体示例</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span>(<span class="hljs-params">arr, low, mid, high</span>):</span>    <span class="hljs-comment"># low 和 high 为整个数组的第一个和最后一个位置索引，mid 为中间位置索引</span>    <span class="hljs-comment"># i 和 j 为指针，最初位置分别为两个有序序列的起始位置</span>    <span class="hljs-comment"># ltmp 用来存放合并后的序列</span>    i = low    j = mid+<span class="hljs-number">1</span>    ltmp = []    <span class="hljs-keyword">while</span> i &lt;= mid <span class="hljs-keyword">and</span> j &lt;= high:  <span class="hljs-comment"># 只要左右两边都有数</span>        <span class="hljs-keyword">if</span> arr[i] &lt; arr[j]:        <span class="hljs-comment"># 当左边的数小于右边的数</span>            ltmp.append(arr[i])    <span class="hljs-comment"># 将左边的数存入 ltmp</span>            i += <span class="hljs-number">1</span>                 <span class="hljs-comment"># 左边的指针往右移一位</span>        <span class="hljs-keyword">else</span>:                      <span class="hljs-comment"># 当右边的数小于左边的数</span>            ltmp.append(arr[j])    <span class="hljs-comment"># 将右边的数存入 ltmp</span>            j += <span class="hljs-number">1</span>                 <span class="hljs-comment"># 右边的指针往右移一位</span>    <span class="hljs-comment"># 上面的 while 语句执行完后，左边或者右边没有数了</span>    <span class="hljs-keyword">while</span> i &lt;= mid:                <span class="hljs-comment"># 当左边还有数的时候</span>        ltmp.append(arr[i])        <span class="hljs-comment"># 将左边剩下的数全部存入 ltmp</span>        i += <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> j &lt;= high:               <span class="hljs-comment"># 当右边还有数的时候</span>        ltmp.append(arr[j])        <span class="hljs-comment"># 将右边剩下的数全部存入 ltmp</span>        j += <span class="hljs-number">1</span>    arr[low:high+<span class="hljs-number">1</span>] = ltmp         <span class="hljs-comment"># 将排序后的数组写回原数组</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sort</span>(<span class="hljs-params">arr, low, high</span>):</span>       <span class="hljs-comment"># low 和 high 为整个数组的第一个和最后一个位置索引</span>    <span class="hljs-keyword">if</span> low &lt; high:                    <span class="hljs-comment"># 至少有两个元素</span>        mid = (low + high) // <span class="hljs-number">2</span>        merge_sort(arr, low, mid)     <span class="hljs-comment"># 把左边递归分解</span>        merge_sort(arr, mid+<span class="hljs-number">1</span>, high)  <span class="hljs-comment"># 把右边递归分解</span>        merge(arr, low, mid, high)    <span class="hljs-comment"># 做归并</span>        <span class="hljs-built_in">print</span>(arr)                    <span class="hljs-comment"># 每一次归并打印一次</span>arr = [<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>]merge_sort(arr, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(arr)-<span class="hljs-number">1</span>)</code></pre><pre><code class="hljs python">[<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>][<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/108987300</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="liu-kuai-su-pai-xu-quick-sort"><font color="#FF0000">六、快速排序（Quick Sort）</font></span></h2><h3><span id="1-yuan-li">1、原理</span></h3><p>快速排序是对冒泡排序的一种改进。顾名思义快速排序就是快，而且效率高！它是处理大数据最快的排序算法之一了。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><h3><span id="2-bu-zou">2、步骤</span></h3><ul><li><strong>①</strong> 从数列中挑出一个元素，称为 “基准值”;</li><li><strong>②</strong> 重新排序数列，所有元素比基准值小的放在基准值的左边，比基准值大的放在基准值的右边（相同的数可以到任一边）。在这个分区退出之后，该基准值就处于数列的中间位置。这个称为分区（partition）操作，也可以称为一次归位操作，归位操作的过程见下动图；</li><li><strong>③</strong> 递归地把小于基准值元素的子数列和大于基准值元素的子数列按照步骤 <strong>① ②</strong> 排序。</li></ul><p><img src="https://cdn.itbob.cn/img/article/036/09%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="09快速排序"></p><h3><span id="3-dong-hua-yan-shi">3、动画演示</span></h3><p><img src="https://cdn.itbob.cn/img/article/036/10%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="10快速排序"></p><h3><span id="4-dai-ma-shi-xian">4、代码实现</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span>(<span class="hljs-params">arr, left, right</span>):</span>    <span class="hljs-comment"># 归位操作，left，right 分别为数组左边和右边的位置索引</span>    tmp = arr[left]    <span class="hljs-keyword">while</span> left &lt; right:        <span class="hljs-keyword">while</span> left &lt; right <span class="hljs-keyword">and</span> arr[right] &gt;= tmp:  <span class="hljs-comment"># 从右边找比 tmp 小的数，如果比 tmp 大，则移动指针</span>            right -= <span class="hljs-number">1</span>                             <span class="hljs-comment"># 将指针左移一个位置</span>        arr[left] = arr[right]                     <span class="hljs-comment"># 将右边的值写到左边的空位上</span>        <span class="hljs-keyword">while</span> left &lt; right <span class="hljs-keyword">and</span> arr[left] &lt;= tmp:   <span class="hljs-comment"># 从左边找比 tmp 大的数，如果比 tmp 小，则移动指针</span>            left += <span class="hljs-number">1</span>                              <span class="hljs-comment"># 将指针右移一个位置</span>        arr[right] = arr[left]                     <span class="hljs-comment"># 将左边的值写到右边的空位上</span>    arr[left] = tmp                                <span class="hljs-comment"># 把 tmp 归位</span>    <span class="hljs-keyword">return</span> left                   <span class="hljs-comment"># 返回 left，right 都可以，目的是便于后面的递归操作对左右两部分进行排序</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span>(<span class="hljs-params">arr, left, right</span>):</span>          <span class="hljs-comment"># 快速排序</span>    <span class="hljs-keyword">if</span> left &lt; right:        mid = partition(arr, left, right)        quick_sort(arr, left, mid-<span class="hljs-number">1</span>)       <span class="hljs-comment"># 对左半部分进行归位操作</span>        quick_sort(arr, mid+<span class="hljs-number">1</span>, right)      <span class="hljs-comment"># 对右半部分进行归位操作</span>    <span class="hljs-keyword">return</span> arr</code></pre><h3><span id="5-ju-ti-shi-li">5、具体示例</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span>(<span class="hljs-params">arr, left, right</span>):</span>    <span class="hljs-comment"># 归位操作，left，right 分别为数组左边和右边的位置索引</span>    tmp = arr[left]    <span class="hljs-keyword">while</span> left &lt; right:        <span class="hljs-keyword">while</span> left &lt; right <span class="hljs-keyword">and</span> arr[right] &gt;= tmp:  <span class="hljs-comment"># 从右边找比 tmp 小的数，如果比 tmp 大，则移动指针</span>            right -= <span class="hljs-number">1</span>                             <span class="hljs-comment"># 将指针左移一个位置</span>        arr[left] = arr[right]                     <span class="hljs-comment"># 将右边的值写到左边的空位上</span>        <span class="hljs-keyword">while</span> left &lt; right <span class="hljs-keyword">and</span> arr[left] &lt;= tmp:   <span class="hljs-comment"># 从左边找比 tmp 大的数，如果比 tmp 小，则移动指针</span>            left += <span class="hljs-number">1</span>                              <span class="hljs-comment"># 将指针右移一个位置</span>        arr[right] = arr[left]                     <span class="hljs-comment"># 将左边的值写到右边的空位上</span>    arr[left] = tmp                                <span class="hljs-comment"># 把 tmp 归位</span>    <span class="hljs-keyword">return</span> left                   <span class="hljs-comment"># 返回 left，right 都可以，目的是便于后面的递归操作对左右两部分进行排序</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span>(<span class="hljs-params">arr, left, right</span>):</span>    <span class="hljs-keyword">if</span> left &lt; right:        mid = partition(arr, left, right)        <span class="hljs-built_in">print</span>(arr)                         <span class="hljs-comment"># 每次归位后打印一次</span>        quick_sort(arr, left, mid-<span class="hljs-number">1</span>)       <span class="hljs-comment"># 对左半部分进行归位操作</span>        quick_sort(arr, mid+<span class="hljs-number">1</span>, right)      <span class="hljs-comment"># 对右半部分进行归位操作</span>arr = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>]quick_sort(arr, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(arr)-<span class="hljs-number">1</span>)</code></pre><pre><code class="hljs python">[<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]</code></pre><hr><h2><span id="qi-dui-pai-xu-heap-sort"><font color="#FF0000">七、堆排序（Heap Sort）</font></span></h2><h3><span id="1-yuan-li">1、原理</span></h3><p>堆排序是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><ul><li>堆：一种特殊的完全二叉树结构</li><li>大根堆：一棵完全二叉树，满足任一节点都比其孩子节点大</li><li>小根堆：一棵完全二叉树，满足任一节点都比其孩子节点小</li></ul><p><img src="https://cdn.itbob.cn/img/article/036/11%E5%A0%86%E6%8E%92%E5%BA%8F.png" alt="11堆排序"></p><h3><span id="2-bu-zou">2、步骤</span></h3><ul><li>① 构建堆：将待排序序列构建成一个堆 H[0……n-1]，从最后一个非叶子结点开始，从左至右，从下至上进行调整。根据升序或降序需求选择大顶堆或小顶堆；</li><li>② 此时的堆顶元素，为最大或者最小元素；</li><li>③ 把堆顶元素和堆尾元素互换，调整堆，重新使堆有序；</li><li>④ 此时堆顶元素为第二大元素；</li><li>⑤ 重复以上步骤，直到堆变空。</li></ul><h3><span id="3-dong-hua-yan-shi">3、动画演示</span></h3><p><img src="https://cdn.itbob.cn/img/article/036/12%E6%9E%84%E5%BB%BA%E5%A0%86.gif" alt="12构建堆"></p><p>堆构建完成后再进行推排序：</p><p><img src="https://cdn.itbob.cn/img/article/036/13%E5%A0%86%E6%8E%92%E5%BA%8F.gif" alt="13堆排序"></p><h3><span id="4-dai-ma-shi-xian">4、代码实现</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sift</span>(<span class="hljs-params">arr, low, high</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    :param li: 列表</span><span class="hljs-string">    :param low: 堆的根节点位置</span><span class="hljs-string">    :param high: 堆的最后一个元素的位置</span><span class="hljs-string">    &quot;&quot;&quot;</span>    i = low                 <span class="hljs-comment"># i最开始指向根节点</span>    j = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>           <span class="hljs-comment"># j开始是左孩子</span>    tmp = arr[low]          <span class="hljs-comment"># 把堆顶存起来</span>    <span class="hljs-keyword">while</span> j &lt;= high:        <span class="hljs-comment"># 只要j位置有数</span>        <span class="hljs-keyword">if</span> j + <span class="hljs-number">1</span> &lt;= high <span class="hljs-keyword">and</span> arr[j+<span class="hljs-number">1</span>] &gt; arr[j]:   <span class="hljs-comment"># 如果右孩子有并且比较大</span>            j = j + <span class="hljs-number">1</span>       <span class="hljs-comment"># j指向右孩子</span>        <span class="hljs-keyword">if</span> arr[j] &gt; tmp:            arr[i] = arr[j]            i = j           <span class="hljs-comment"># 往下看一层</span>            j = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:               <span class="hljs-comment"># tmp更大，把tmp放到i的位置上</span>            arr[i] = tmp    <span class="hljs-comment"># 把tmp放到某一级领导位置上</span>            <span class="hljs-keyword">break</span>    <span class="hljs-keyword">else</span>:        arr[i] = tmp        <span class="hljs-comment"># 把tmp放到叶子节点上</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">heap_sort</span>(<span class="hljs-params">arr</span>):</span>    n = <span class="hljs-built_in">len</span>(arr)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((n-<span class="hljs-number">2</span>)//<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):   <span class="hljs-comment"># i表示建堆的时候调整的部分的根的下标</span>        sift(arr, i, n-<span class="hljs-number">1</span>)    <span class="hljs-comment"># 建堆完成</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):        <span class="hljs-comment"># i 指向当前堆的最后一个元素</span>        arr[<span class="hljs-number">0</span>], arr[i] = arr[i], arr[<span class="hljs-number">0</span>]        sift(arr, <span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>)             <span class="hljs-comment"># i-1是新的high</span>    <span class="hljs-keyword">return</span> arr</code></pre><h3><span id="5-ju-ti-shi-li">5、具体示例</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sift</span>(<span class="hljs-params">arr, low, high</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    :param li: 列表</span><span class="hljs-string">    :param low: 堆的根节点位置</span><span class="hljs-string">    :param high: 堆的最后一个元素的位置</span><span class="hljs-string">    &quot;&quot;&quot;</span>    i = low                 <span class="hljs-comment"># i最开始指向根节点</span>    j = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>           <span class="hljs-comment"># j开始是左孩子</span>    tmp = arr[low]          <span class="hljs-comment"># 把堆顶存起来</span>    <span class="hljs-keyword">while</span> j &lt;= high:        <span class="hljs-comment"># 只要j位置有数</span>        <span class="hljs-keyword">if</span> j + <span class="hljs-number">1</span> &lt;= high <span class="hljs-keyword">and</span> arr[j+<span class="hljs-number">1</span>] &gt; arr[j]:   <span class="hljs-comment"># 如果右孩子有并且比较大</span>            j = j + <span class="hljs-number">1</span>       <span class="hljs-comment"># j指向右孩子</span>        <span class="hljs-keyword">if</span> arr[j] &gt; tmp:            arr[i] = arr[j]            i = j           <span class="hljs-comment"># 往下看一层</span>            j = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:               <span class="hljs-comment"># tmp更大，把tmp放到i的位置上</span>            arr[i] = tmp    <span class="hljs-comment"># 把tmp放到某一级领导位置上</span>            <span class="hljs-keyword">break</span>    <span class="hljs-keyword">else</span>:        arr[i] = tmp        <span class="hljs-comment"># 把tmp放到叶子节点上</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">heap_sort</span>(<span class="hljs-params">arr</span>):</span>    n = <span class="hljs-built_in">len</span>(arr)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;建堆过程：&#x27;</span>)    <span class="hljs-built_in">print</span>(arr)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((n-<span class="hljs-number">2</span>)//<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):   <span class="hljs-comment"># i表示建堆的时候调整的部分的根的下标</span>        sift(arr, i, n-<span class="hljs-number">1</span>)        <span class="hljs-built_in">print</span>(arr)    <span class="hljs-comment"># 建堆完成</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;堆排序过程：&#x27;</span>)    <span class="hljs-built_in">print</span>(arr)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):        <span class="hljs-comment"># i 指向当前堆的最后一个元素</span>        arr[<span class="hljs-number">0</span>], arr[i] = arr[i], arr[<span class="hljs-number">0</span>]        sift(arr, <span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>)             <span class="hljs-comment"># i-1是新的high</span>        <span class="hljs-built_in">print</span>(arr)arr = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">26</span>, <span class="hljs-number">25</span>, <span class="hljs-number">19</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">90</span>, <span class="hljs-number">3</span>, <span class="hljs-number">36</span>]heap_sort(arr)</code></pre><pre><code class="hljs python">建堆过程：[<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">26</span>, <span class="hljs-number">25</span>, <span class="hljs-number">19</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">90</span>, <span class="hljs-number">3</span>, <span class="hljs-number">36</span>][<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">26</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">90</span>, <span class="hljs-number">3</span>, <span class="hljs-number">19</span>][<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">26</span>, <span class="hljs-number">90</span>, <span class="hljs-number">36</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">25</span>, <span class="hljs-number">3</span>, <span class="hljs-number">19</span>][<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">26</span>, <span class="hljs-number">90</span>, <span class="hljs-number">36</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">25</span>, <span class="hljs-number">3</span>, <span class="hljs-number">19</span>][<span class="hljs-number">2</span>, <span class="hljs-number">90</span>, <span class="hljs-number">26</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">19</span>][<span class="hljs-number">90</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">25</span>, <span class="hljs-number">19</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]堆排序过程：[<span class="hljs-number">90</span>, <span class="hljs-number">36</span>, <span class="hljs-number">26</span>, <span class="hljs-number">25</span>, <span class="hljs-number">19</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>][<span class="hljs-number">36</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">7</span>, <span class="hljs-number">19</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">90</span>][<span class="hljs-number">26</span>, <span class="hljs-number">25</span>, <span class="hljs-number">17</span>, <span class="hljs-number">7</span>, <span class="hljs-number">19</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">36</span>, <span class="hljs-number">90</span>][<span class="hljs-number">25</span>, <span class="hljs-number">19</span>, <span class="hljs-number">17</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">90</span>][<span class="hljs-number">19</span>, <span class="hljs-number">7</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">90</span>][<span class="hljs-number">17</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">19</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">90</span>][<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">90</span>][<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">90</span>][<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">90</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">90</span>][<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">36</span>, <span class="hljs-number">90</span>]</code></pre><hr><h2><span id="ba-ji-shu-pai-xu-counting-sort"><font color="#FF0000">八、计数排序（Counting Sort）</font></span></h2><h3><span id="1-yuan-li">1、原理</span></h3><p>计数排序是一个非基于比较的排序算法，它的优势在于在对一定范围内的整数排序时，它的复杂度为 Ο(n+k)，其中 k 是整数的范围，快于任何比较排序算法。计数排序是一种牺牲空间换取时间的做法。计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，<strong>计数排序要求输入的数据必须是有确定范围的整数。</strong></p><h3><span id="2-bu-zou">2、步骤</span></h3><ul><li><strong>①</strong> 找到待排序列表中的最大值 k，开辟一个长度为 k+1 的计数列表，计数列表中的值都为 0。</li><li><strong>②</strong> 遍历待排序列表，如果遍历到的元素值为 i，则计数列表中索引 i 的值加1。</li><li><strong>③</strong> 遍历完整个待排序列表，计数列表中索引 i 的值 j 表示 i 的个数为 j，统计出待排序列表中每个值的数量。</li><li><strong>④</strong> 创建一个新列表（也可以清空原列表，在原列表中添加），遍历计数列表，依次在新列表中添加 j 个 i，新列表就是排好序后的列表，整个过程没有比较待排序列表中的数据大小。</li></ul><h3><span id="3-dong-hua-yan-shi">3、动画演示</span></h3><p><img src="https://cdn.itbob.cn/img/article/036/14%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="14计数排序"></p><h3><span id="4-dai-ma-shi-xian">4、代码实现</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count_sort</span>(<span class="hljs-params">arr</span>):</span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &lt; <span class="hljs-number">2</span>:                       <span class="hljs-comment"># 如果数组长度小于 2 则直接返回</span>        <span class="hljs-keyword">return</span> arr    max_num = <span class="hljs-built_in">max</span>(arr)    count = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_num+<span class="hljs-number">1</span>)]  <span class="hljs-comment"># 开辟一个计数列表</span>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> arr:        count[val] += <span class="hljs-number">1</span>    arr.clear()                        <span class="hljs-comment"># 原数组清空</span>    <span class="hljs-keyword">for</span> ind, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(count):  <span class="hljs-comment"># 遍历值和下标（值的数量）</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(val):            arr.append(ind)    <span class="hljs-keyword">return</span> arr</code></pre><h3><span id="5-ju-ti-shi-li">5、具体示例</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count_sort</span>(<span class="hljs-params">arr</span>):</span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &lt; <span class="hljs-number">2</span>:                       <span class="hljs-comment"># 如果数组长度小于 2 则直接返回</span>        <span class="hljs-keyword">return</span> arr    max_num = <span class="hljs-built_in">max</span>(arr)    count = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_num+<span class="hljs-number">1</span>)]  <span class="hljs-comment"># 开辟一个计数列表</span>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> arr:        count[val] += <span class="hljs-number">1</span>    arr.clear()                        <span class="hljs-comment"># 原数组清空</span>    <span class="hljs-keyword">for</span> ind, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(count):  <span class="hljs-comment"># 遍历值和下标（值的数量）</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(val):            arr.append(ind)    <span class="hljs-keyword">return</span> arrarr = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>]sorted_arr = count_sort(arr)<span class="hljs-built_in">print</span>(sorted_arr)</code></pre><pre><code class="hljs python">[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>]</code></pre><hr><h2><span id="jiu-tong-pai-xu-bucket-sort"><font color="#FF0000">九、桶排序（Bucket Sort）</font></span></h2><h3><span id="1-yuan-li">1、原理</span></h3><p>桶排序又叫箱排序，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。</p><p>桶排序也是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><ul><li>在额外空间充足的情况下，尽量增大桶的数量；</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中。</li></ul><p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><ul><li>最快情况：当输入的数据可以均匀的分配到每一个桶中；</li><li>最慢情况：当输入的数据被分配到了同一个桶中。</li></ul><h3><span id="2-bu-zou">2、步骤</span></h3><ul><li><strong>①</strong> 创建一个定量的数组当作空桶子；</li><li><strong>②</strong> 遍历序列，把元素一个一个放到对应的桶子去；</li><li><strong>③</strong> 对每个不是空的桶子进行排序；</li><li><strong>④</strong> 从不是空的桶子里把元素再放回原来的序列中。</li></ul><h3><span id="3-dong-hua-yan-shi">3、动画演示</span></h3><p>（动图来源于@五分钟学算法，侵删）</p><p><img src="https://cdn.itbob.cn/img/article/036/15%E6%A1%B6%E6%8E%92%E5%BA%8F.gif" alt="15桶排序"></p><h3><span id="4-dai-ma-shi-xian">4、代码实现</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bucket_sort</span>(<span class="hljs-params">arr</span>):</span>    max_num = <span class="hljs-built_in">max</span>(arr)    n = <span class="hljs-built_in">len</span>(arr)    buckets = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]         <span class="hljs-comment"># 创建桶</span>    <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> arr:        i = <span class="hljs-built_in">min</span>(var // (max_num // n), n-<span class="hljs-number">1</span>)  <span class="hljs-comment"># i 表示 var 放到几号桶里</span>        buckets[i].append(var)               <span class="hljs-comment"># 把 var 加到桶里边</span>        <span class="hljs-comment"># 保持桶内的顺序</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buckets[i])-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> buckets[i][j] &lt; buckets[i][j-<span class="hljs-number">1</span>]:                buckets[i][j], buckets[i][j-<span class="hljs-number">1</span>] = buckets[i][j-<span class="hljs-number">1</span>], buckets[i][j]            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">break</span>    sorted_arr = []    <span class="hljs-keyword">for</span> buc <span class="hljs-keyword">in</span> buckets:        sorted_arr.extend(buc)    <span class="hljs-keyword">return</span> sorted_arr</code></pre><h3><span id="5-ju-ti-shi-li">5、具体示例</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bucket_sort</span>(<span class="hljs-params">arr</span>):</span>    max_num = <span class="hljs-built_in">max</span>(arr)    n = <span class="hljs-built_in">len</span>(arr)    buckets = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]         <span class="hljs-comment"># 创建桶</span>    <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> arr:        i = <span class="hljs-built_in">min</span>(var // (max_num // n), n-<span class="hljs-number">1</span>)  <span class="hljs-comment"># i 表示 var 放到几号桶里</span>        buckets[i].append(var)               <span class="hljs-comment"># 把 var 加到桶里边</span>        <span class="hljs-comment"># 保持桶内的顺序</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buckets[i])-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> buckets[i][j] &lt; buckets[i][j-<span class="hljs-number">1</span>]:                buckets[i][j], buckets[i][j-<span class="hljs-number">1</span>] = buckets[i][j-<span class="hljs-number">1</span>], buckets[i][j]            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">break</span>    sorted_arr = []    <span class="hljs-keyword">for</span> buc <span class="hljs-keyword">in</span> buckets:        sorted_arr.extend(buc)    <span class="hljs-keyword">return</span> sorted_arrarr = [<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">56</span>, <span class="hljs-number">23</span>, <span class="hljs-number">19</span>, <span class="hljs-number">33</span>, <span class="hljs-number">35</span>, <span class="hljs-number">42</span>, <span class="hljs-number">42</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">22</span>, <span class="hljs-number">39</span>, <span class="hljs-number">26</span>, <span class="hljs-number">17</span>]sorted_arr = bucket_sort(arr)<span class="hljs-built_in">print</span>(sorted_arr)</code></pre><pre><code class="hljs python">[<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">26</span>, <span class="hljs-number">33</span>, <span class="hljs-number">35</span>, <span class="hljs-number">39</span>, <span class="hljs-number">42</span>, <span class="hljs-number">42</span>, <span class="hljs-number">56</span>]</code></pre><hr><h2><span id="shi-ji-shu-pai-xu-radix-sort"><font color="#FF0000">十、基数排序（Radix Sort）</font></span></h2><h3><span id="1-yuan-li">1、原理</span></h3><p>基数排序属于分配式排序，是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p>基数排序、计数排序、桶排序三种排序算法都利用了桶的概念，但对桶的使用方法上是有明显差异的：</p><ul><li>基数排序：根据键值的每位数字来分配桶；</li><li>计数排序：每个桶只存储单一键值；</li><li>桶排序：每个桶存储一定范围的数值。</li></ul><h3><span id="2-bu-zou">2、步骤</span></h3><ul><li><strong>①</strong> 取数组中的最大数，并取得位数；</li><li><strong>②</strong> 从最低位开始，依次进行一次排序；</li><li><strong>③</strong> 从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</li></ul><h3><span id="3-dong-hua-yan-shi">3、动画演示</span></h3><p><img src="https://cdn.itbob.cn/img/article/036/16%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt="16基数排序"></p><h3><span id="4-dai-ma-shi-xian">4、代码实现</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">radix_sort</span>(<span class="hljs-params">li</span>):</span>    max_num = <span class="hljs-built_in">max</span>(li)      <span class="hljs-comment"># 最大值 9-&gt;1次循环, 99-&gt;2次循环, 888-&gt;3次循环, 10000-&gt;5次循环</span>    it = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> <span class="hljs-number">10</span> ** it &lt;= max_num:        buckets = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]        <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> li:            <span class="hljs-comment"># var=987, it=1, 987//10-&gt;98, 98%10-&gt;8; it=2, 987//100-&gt;9, 9%10=9</span>            digit = (var // <span class="hljs-number">10</span> ** it) % <span class="hljs-number">10</span>   <span class="hljs-comment"># 依次取一位数</span>            buckets[digit].append(var)        <span class="hljs-comment"># 分桶完成</span>        li.clear()        <span class="hljs-keyword">for</span> buc <span class="hljs-keyword">in</span> buckets:            li.extend(buc)        it += <span class="hljs-number">1</span>            <span class="hljs-comment"># 把数重新写回 li</span>    <span class="hljs-keyword">return</span> arr</code></pre><h3><span id="5-ju-ti-shi-li">5、具体示例</span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">radix_sort</span>(<span class="hljs-params">li</span>):</span>    max_num = <span class="hljs-built_in">max</span>(li)      <span class="hljs-comment"># 最大值 9-&gt;1次循环, 99-&gt;2次循环, 888-&gt;3次循环, 10000-&gt;5次循环</span>    it = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> <span class="hljs-number">10</span> ** it &lt;= max_num:        buckets = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]        <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> li:            <span class="hljs-comment"># var=987, it=1, 987//10-&gt;98, 98%10-&gt;8; it=2, 987//100-&gt;9, 9%10=9</span>            digit = (var // <span class="hljs-number">10</span> ** it) % <span class="hljs-number">10</span>   <span class="hljs-comment"># 依次取一位数</span>            buckets[digit].append(var)        <span class="hljs-comment"># 分桶完成</span>        li.clear()        <span class="hljs-keyword">for</span> buc <span class="hljs-keyword">in</span> buckets:            li.extend(buc)        it += <span class="hljs-number">1</span>            <span class="hljs-comment"># 把数重新写回 li</span>    <span class="hljs-keyword">return</span> arrarr = [<span class="hljs-number">3221</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">9680</span>, <span class="hljs-number">577</span>, <span class="hljs-number">9420</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5622</span>, <span class="hljs-number">4793</span>, <span class="hljs-number">2030</span>, <span class="hljs-number">3138</span>, <span class="hljs-number">82</span>, <span class="hljs-number">2599</span>, <span class="hljs-number">743</span>, <span class="hljs-number">4127</span>]sorted_arr = radix_sort(arr)<span class="hljs-built_in">print</span>(sorted_arr)</code></pre><pre><code class="hljs python">[<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">82</span>, <span class="hljs-number">577</span>, <span class="hljs-number">743</span>, <span class="hljs-number">2030</span>, <span class="hljs-number">2599</span>, <span class="hljs-number">3138</span>, <span class="hljs-number">3221</span>, <span class="hljs-number">4127</span>, <span class="hljs-number">4793</span>, <span class="hljs-number">5622</span>, <span class="hljs-number">9420</span>, <span class="hljs-number">9680</span>]</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/108987300</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>COVID-19 肺炎疫情数据实时监控（python 爬虫 + pyecharts 数据可视化 + wordcloud 词云图）</title>
      <link href="/article/035/"/>
      <url>/article/035/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-qian-yan-font"><font color="#FF0000">【1x00】前言</font></a></li><li><a href="#font-color-ff0000-2x00-si-wei-dao-tu-font"><font color="#FF0000">【2x00】思维导图</font></a></li><li><a href="#font-color-ff0000-3x00-shu-ju-jie-gou-fen-xi-font"><font color="#FF0000">【3x00】数据结构分析</font></a></li><li><a href="#font-color-ff0000-4x00-zhu-han-shu-main-font"><font color="#FF0000">【4x00】主函数 main()</font></a></li><li><a href="#font-color-ff0000-5x00-shu-ju-huo-qu-mo-kuai-data-get-font"><font color="#FF0000">【5x00】数据获取模块 data_get</font></a><ul><li><a href="#font-color-4876ff-5x01-chu-shi-hua-han-shu-init-font"><font color="#4876FF">【5x01】初始化函数 init()</font></a></li><li><a href="#font-color-4876ff-5x02-zhong-guo-zong-shu-ju-china-total-data-font"><font color="#4876FF">【5x02】中国总数据 china_total_data()</font></a></li><li><a href="#font-color-4876ff-5x03-quan-qiu-zong-shu-ju-global-total-data-font"><font color="#4876FF">【5x03】全球总数据 global_total_data()</font></a></li><li><a href="#font-color-4876ff-5x04-zhong-guo-mei-ri-shu-ju-china-daily-data-font"><font color="#4876FF">【5x04】中国每日数据 china_daily_data()</font></a></li><li><a href="#font-color-4876ff-5x05-jing-wai-mei-ri-shu-ju-foreign-daily-data-font"><font color="#4876FF">【5x05】境外每日数据 foreign_daily_data()</font></a></li></ul></li><li><a href="#font-color-ff0000-6x00-ci-yun-tu-hui-zhi-mo-kuai-data-wordcloud-font"><font color="#FF0000">【6x00】词云图绘制模块 data_wordcloud</font></a><ul><li><a href="#font-color-4876ff-6x01-zhong-guo-lei-ji-que-zhen-ci-yun-tu-foreign-daily-data-font"><font color="#4876FF">【6x01】中国累计确诊词云图 foreign_daily_data()</font></a></li><li><a href="#font-color-4876ff-6x02-quan-qiu-lei-ji-que-zhen-ci-yun-tu-foreign-daily-data-font"><font color="#4876FF">【6x02】全球累计确诊词云图 foreign_daily_data()</font></a></li></ul></li><li><a href="#font-color-ff0000-7x00-di-tu-hui-zhi-mo-kuai-data-map-font"><font color="#FF0000">【7x00】地图绘制模块 data_map</font></a><ul><li><a href="#font-color-4876ff-7x01-zhong-guo-lei-ji-que-zhen-di-tu-china-total-map-font"><font color="#4876FF">【7x01】中国累计确诊地图 china_total_map()</font></a></li><li><a href="#font-color-4876ff-7x02-quan-qiu-lei-ji-que-zhen-di-tu-global-total-map-font"><font color="#4876FF">【7x02】全球累计确诊地图 global_total_map()</font></a></li><li><a href="#font-color-4876ff-7x03-zhong-guo-mei-ri-shu-ju-zhe-xian-tu-china-daily-map-font"><font color="#4876FF">【7x03】中国每日数据折线图 china_daily_map()</font></a></li><li><a href="#font-color-4876ff-7x04-jing-wai-mei-ri-shu-ju-zhe-xian-tu-foreign-daily-map-font"><font color="#4876FF">【7x04】境外每日数据折线图 foreign_daily_map()</font></a></li></ul></li><li><a href="#font-color-ff0000-8x00-jie-guo-jie-tu-font"><font color="#FF0000">【8x00】结果截图</font></a><ul><li><a href="#font-color-4876ff-8x01-shu-ju-chu-cun-excel-font"><font color="#4876FF">【8x01】数据储存 Excel</font></a></li><li><a href="#font-color-4876ff-8x02-ci-yun-tu-font"><font color="#4876FF">【8x02】词云图</font></a></li><li><a href="#font-color-4876ff-8x03-di-tu-zhe-xian-tu-font"><font color="#4876FF">【8x03】地图 + 折线图</font></a></li></ul></li><li><a href="#font-color-ff0000-9x00-wan-zheng-dai-ma-font"><font color="#FF0000">【9x00】完整代码</font></a></li></ul><!-- tocstop --><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/107140534</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-qian-yan"><font color="#FF0000">【1x00】前言</font></span></h2><p>本来两三个月之前就想搞个疫情数据实时数据展示的，由于各种不可抗拒因素一而再再而三的鸽了，最近终于抽空写了一个，数据是用 Python 爬取的<a href="https://voice.baidu.com/act/newpneumonia/newpneumonia/">百度疫情实时大数据报告</a>，请求库用的 requests，解析用的 Xpath 语法，词云用的 wordcloud 库，数据可视化用 pyecharts 绘制的地图和折线图，数据储存在 Excel 表格里面，使用 openpyxl 对表格进行处理。</p><p>本程序实现了累计确诊地图展示和每日数据变化折线图展示，其他更多数据的获取和展示均可在程序中进行拓展，可以将程序部署在服务器上，设置定时运行，即可实时展示数据，pyecharts 绘图模块也可以整合到 Web 框架（Django、Flask等）中使用。</p><p>在获取数据时有<font color="#FF0000"><strong>全球</strong></font>和<font color="#FF0000"><strong>境外</strong></font>两个概念，全球包含中国，境外不包含中国，后期绘制的四个图：中国累计确诊地图、全球累计确诊地图（包含中国）、中国每日数据折线图、境外每日数据折线图（不包含中国）。</p><p><font color="#FF0000"><strong>注意项：直接向该网页发送请求获取的响应中，没有每个国家的每日数据，该数据获取的地址是：<a href="https://voice.baidu.com/newpneumonia/get?target=trend&amp;isCaseIn=1&amp;stage=publish">https://voice.baidu.com/newpneumonia/get?target=trend&amp;isCaseIn=1&amp;stage=publish</a></strong></font></p><ul><li><strong>预览地址</strong>：<s><a href="http://cov.itrhx.com/">http://cov.itrhx.com/</a></s>（已失效）</li><li><strong>数据来源</strong>：<a href="https://voice.baidu.com/act/newpneumonia/newpneumonia/">https://voice.baidu.com/act/newpneumonia/newpneumonia/</a></li><li><strong>pyecharts 文档</strong>：<a href="https://pyecharts.org/">https://pyecharts.org/</a></li><li><strong>openpyxl 文档</strong>：<a href="https://openpyxl.readthedocs.io/">https://openpyxl.readthedocs.io/</a></li><li><strong>wordcloud 文档</strong>：<a href="http://amueller.github.io/word_cloud/">http://amueller.github.io/word_cloud/</a></li></ul><h2><span id="2x00-si-wei-dao-tu"><font color="#FF0000">【2x00】思维导图</font></span></h2><p><img src="https://cdn.itbob.cn/img/article/035/01.png" alt="01"></p><h2><span id="3x00-shu-ju-jie-gou-fen-xi"><font color="#FF0000">【3x00】数据结构分析</font></span></h2><p>通过查看百度的疫情数据页面，可以看到很多整齐的数据，猜测就是疫情相关的数据，保存该页面，对其进行格式化，很容易可以分析出所有的数据都在 <code>&lt;script type=&quot;application/json&quot; id=&quot;captain-config&quot;&gt;&lt;/script&gt;</code> 里面，其中 title 里面是一些 Unicode 编码，将其转为中文后更容易得到不同的分类数据。</p><p><img src="https://cdn.itbob.cn/img/article/035/02.png" alt="02"></p><p>由于数据繁多，可以将数据主体部分提取出来，删除一些重复项和其他杂项，留下数据大体位置并分析数据结构，便于后期的数据提取，经过处理后的数据大致结构如下：</p><pre><code class="hljs json">&lt;script type=<span class="hljs-string">&quot;application/json&quot;</span> id=<span class="hljs-string">&quot;captain-config&quot;</span>&gt;    &#123;        <span class="hljs-attr">&quot;component&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;mapLastUpdatedTime&quot;</span>: <span class="hljs-string">&quot;2020.07.05 16:13&quot;</span>,        <span class="hljs-comment">// 国内疫情数据最后更新时间</span>                <span class="hljs-attr">&quot;caseList&quot;</span>: [                                    <span class="hljs-comment">// caseList 列表，每一个元素是一个字典</span>                    &#123;                        <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                        <span class="hljs-comment">// 每个字典包含中国每个省的每一项疫情数据</span>                        <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                        <span class="hljs-attr">&quot;crued&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                        <span class="hljs-attr">&quot;relativeTime&quot;</span>: <span class="hljs-string">&quot;1593792000&quot;</span>,                        <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                        <span class="hljs-attr">&quot;diedRelative&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                        <span class="hljs-attr">&quot;curedRelative&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                        <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                        <span class="hljs-attr">&quot;curConfirmRelative&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                        <span class="hljs-attr">&quot;icuDisable&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                        <span class="hljs-attr">&quot;area&quot;</span>: <span class="hljs-string">&quot;西藏&quot;</span>,                        <span class="hljs-attr">&quot;subList&quot;</span>: [                            <span class="hljs-comment">// subList 列表，每一个元素是一个字典</span>                            &#123;                                <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;拉萨&quot;</span>,                 <span class="hljs-comment">// 每个字典包含该省份对应的每个城市疫情数据</span>                                <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                                <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                                <span class="hljs-attr">&quot;crued&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                                <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                                <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                                <span class="hljs-attr">&quot;cityCode&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>                            &#125;                        ]                    &#125;                ],                <span class="hljs-attr">&quot;caseOutsideList&quot;</span>: [                           <span class="hljs-comment">// caseOutsideList 列表，每一个元素是一个字典</span>                    &#123;                        <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;241419&quot;</span>,                 <span class="hljs-comment">// 每个字典包含各国的每一项疫情数据</span>                        <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;34854&quot;</span>,                        <span class="hljs-attr">&quot;crued&quot;</span>: <span class="hljs-string">&quot;191944&quot;</span>,                        <span class="hljs-attr">&quot;relativeTime&quot;</span>: <span class="hljs-string">&quot;1593792000&quot;</span>,                        <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;223&quot;</span>,                        <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;14621&quot;</span>,                        <span class="hljs-attr">&quot;icuDisable&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                        <span class="hljs-attr">&quot;area&quot;</span>: <span class="hljs-string">&quot;意大利&quot;</span>,                        <span class="hljs-attr">&quot;subList&quot;</span>: [                          <span class="hljs-comment">// subList 列表，每一个元素是一个字典</span>                            &#123;                                <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;伦巴第&quot;</span>,              <span class="hljs-comment">// 每个字典包含每个国家对应的每个城市疫情数据</span>                                <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;94318&quot;</span>,                                <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;16691&quot;</span>,                                <span class="hljs-attr">&quot;crued&quot;</span>: <span class="hljs-string">&quot;68201&quot;</span>,                                <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;9426&quot;</span>                            &#125;                        ]                    &#125;                ],                <span class="hljs-attr">&quot;summaryDataIn&quot;</span>: &#123;                           <span class="hljs-comment">// summaryDataIn 国内总的疫情数据</span>                    <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;85307&quot;</span>,                    <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;4648&quot;</span>,                    <span class="hljs-attr">&quot;cured&quot;</span>: <span class="hljs-string">&quot;80144&quot;</span>,                    <span class="hljs-attr">&quot;asymptomatic&quot;</span>: <span class="hljs-string">&quot;99&quot;</span>,                    <span class="hljs-attr">&quot;asymptomaticRelative&quot;</span>: <span class="hljs-string">&quot;7&quot;</span>,                    <span class="hljs-attr">&quot;unconfirmed&quot;</span>: <span class="hljs-string">&quot;7&quot;</span>,                    <span class="hljs-attr">&quot;relativeTime&quot;</span>: <span class="hljs-string">&quot;1593792000&quot;</span>,                    <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;19&quot;</span>,                    <span class="hljs-attr">&quot;unconfirmedRelative&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                    <span class="hljs-attr">&quot;curedRelative&quot;</span>: <span class="hljs-string">&quot;27&quot;</span>,                    <span class="hljs-attr">&quot;diedRelative&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                    <span class="hljs-attr">&quot;icu&quot;</span>: <span class="hljs-string">&quot;6&quot;</span>,                    <span class="hljs-attr">&quot;icuRelative&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                    <span class="hljs-attr">&quot;overseasInput&quot;</span>: <span class="hljs-string">&quot;1931&quot;</span>,                    <span class="hljs-attr">&quot;unOverseasInputCumulative&quot;</span>: <span class="hljs-string">&quot;83375&quot;</span>,                    <span class="hljs-attr">&quot;overseasInputRelative&quot;</span>: <span class="hljs-string">&quot;6&quot;</span>,                    <span class="hljs-attr">&quot;unOverseasInputNewAdd&quot;</span>: <span class="hljs-string">&quot;13&quot;</span>,                    <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;515&quot;</span>,                    <span class="hljs-attr">&quot;curConfirmRelative&quot;</span>: <span class="hljs-string">&quot;-8&quot;</span>,                    <span class="hljs-attr">&quot;icuDisable&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>                &#125;,                <span class="hljs-attr">&quot;summaryDataOut&quot;</span>: &#123;                           <span class="hljs-comment">// summaryDataOut 国外总的疫情数据</span>                    <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;11302569&quot;</span>,                    <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;528977&quot;</span>,                    <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;4410601&quot;</span>,                    <span class="hljs-attr">&quot;cured&quot;</span>: <span class="hljs-string">&quot;6362991&quot;</span>,                    <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;206165&quot;</span>,                    <span class="hljs-attr">&quot;curedRelative&quot;</span>: <span class="hljs-string">&quot;190018&quot;</span>,                    <span class="hljs-attr">&quot;diedRelative&quot;</span>: <span class="hljs-string">&quot;4876&quot;</span>,                    <span class="hljs-attr">&quot;curConfirmRelative&quot;</span>: <span class="hljs-string">&quot;11271&quot;</span>,                    <span class="hljs-attr">&quot;relativeTime&quot;</span>: <span class="hljs-string">&quot;1593792000&quot;</span>                &#125;,                <span class="hljs-attr">&quot;trend&quot;</span>: &#123;                                    <span class="hljs-comment">// trend 字典，包含国内每日的疫情数据</span>                    <span class="hljs-attr">&quot;updateDate&quot;</span>: [],                         <span class="hljs-comment">// 日期</span>                    <span class="hljs-attr">&quot;list&quot;</span>: [                                 <span class="hljs-comment">// list 列表，每项数据及其对应的值</span>                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;确诊&quot;</span>,                            <span class="hljs-attr">&quot;data&quot;</span>: []                        &#125;,                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;疑似&quot;</span>,                            <span class="hljs-attr">&quot;data&quot;</span>: []                        &#125;,                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;治愈&quot;</span>,                            <span class="hljs-attr">&quot;data&quot;</span>: []                        &#125;,                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;死亡&quot;</span>,                            <span class="hljs-attr">&quot;data&quot;</span>: []                        &#125;,                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;新增确诊&quot;</span>,                            <span class="hljs-attr">&quot;data&quot;</span>: []                        &#125;,                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;新增疑似&quot;</span>,                            <span class="hljs-attr">&quot;data&quot;</span>: []                        &#125;,                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;新增治愈&quot;</span>,                            <span class="hljs-attr">&quot;data&quot;</span>: []                        &#125;,                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;新增死亡&quot;</span>,                            <span class="hljs-attr">&quot;data&quot;</span>: []                        &#125;,                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;累计境外输入&quot;</span>,                            <span class="hljs-attr">&quot;data&quot;</span>: []                        &#125;,                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;新增境外输入&quot;</span>,                            <span class="hljs-attr">&quot;data&quot;</span>: []                        &#125;                    ]                &#125;,                <span class="hljs-attr">&quot;foreignLastUpdatedTime&quot;</span>: <span class="hljs-string">&quot;2020.07.05 16:13&quot;</span>,       <span class="hljs-comment">// 国外疫情数据最后更新时间</span>                <span class="hljs-attr">&quot;globalList&quot;</span>: [                                     <span class="hljs-comment">// globalList 列表，每一个元素是一个字典</span>                    &#123;                        <span class="hljs-attr">&quot;area&quot;</span>: <span class="hljs-string">&quot;亚洲&quot;</span>,                              <span class="hljs-comment">// 按照不同洲进行分类</span>                        <span class="hljs-attr">&quot;subList&quot;</span>: [                                <span class="hljs-comment">// subList 列表，每个洲各个国家的疫情数据</span>                            &#123;                                <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;52&quot;</span>,                                <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;6159&quot;</span>,                                <span class="hljs-attr">&quot;crued&quot;</span>: <span class="hljs-string">&quot;4809&quot;</span>,                                <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;1298&quot;</span>,                                <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                                <span class="hljs-attr">&quot;relativeTime&quot;</span>: <span class="hljs-string">&quot;1593792000&quot;</span>,                                <span class="hljs-attr">&quot;country&quot;</span>: <span class="hljs-string">&quot;塔吉克斯坦&quot;</span>                            &#125;                        ],                        <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;56556&quot;</span>,                            <span class="hljs-comment">// 每个洲总的疫情数据</span>                        <span class="hljs-attr">&quot;crued&quot;</span>: <span class="hljs-string">&quot;1625562&quot;</span>,                        <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;2447873&quot;</span>,                        <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;765755&quot;</span>,                        <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;60574&quot;</span>                    &#125;,                    &#123;                        <span class="hljs-attr">&quot;area&quot;</span>: <span class="hljs-string">&quot;其他&quot;</span>,                             <span class="hljs-comment">// 其他特殊区域疫情数据</span>                        <span class="hljs-attr">&quot;subList&quot;</span>: [                            &#123;                                <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;13&quot;</span>,                                <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;712&quot;</span>,                                <span class="hljs-attr">&quot;crued&quot;</span>: <span class="hljs-string">&quot;651&quot;</span>,                                <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;48&quot;</span>,                                <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,                                <span class="hljs-attr">&quot;relativeTime&quot;</span>: <span class="hljs-string">&quot;1593792000&quot;</span>,                                <span class="hljs-attr">&quot;country&quot;</span>: <span class="hljs-string">&quot;钻石公主号邮轮&quot;</span>                            &#125;                        ],                        <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;13&quot;</span>,                              <span class="hljs-comment">// 其他特殊区域疫情总的数据</span>                        <span class="hljs-attr">&quot;crued&quot;</span>: <span class="hljs-string">&quot;651&quot;</span>,                        <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;712&quot;</span>,                        <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;48&quot;</span>,                        <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>                    &#125;,                    &#123;                        <span class="hljs-attr">&quot;area&quot;</span>: <span class="hljs-string">&quot;热门&quot;</span>,                            <span class="hljs-comment">// 热门国家疫情数据</span>                        <span class="hljs-attr">&quot;subList&quot;</span>: [                            &#123;                                <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;5206&quot;</span>,                                <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;204610&quot;</span>,                                <span class="hljs-attr">&quot;crued&quot;</span>: <span class="hljs-string">&quot;179492&quot;</span>,                                <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;19912&quot;</span>,                                <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;1172&quot;</span>,                                <span class="hljs-attr">&quot;relativeTime&quot;</span>: <span class="hljs-string">&quot;1593792000&quot;</span>,                                <span class="hljs-attr">&quot;country&quot;</span>: <span class="hljs-string">&quot;土耳其&quot;</span>                            &#125;                        ],                        <span class="hljs-attr">&quot;died&quot;</span>: <span class="hljs-string">&quot;528967&quot;</span>,                         <span class="hljs-comment">// 热门国家疫情总的数据</span>                        <span class="hljs-attr">&quot;crued&quot;</span>: <span class="hljs-string">&quot;6362924&quot;</span>,                        <span class="hljs-attr">&quot;confirmed&quot;</span>: <span class="hljs-string">&quot;11302357&quot;</span>,                        <span class="hljs-attr">&quot;confirmedRelative&quot;</span>: <span class="hljs-string">&quot;216478&quot;</span>,                        <span class="hljs-attr">&quot;curConfirm&quot;</span>: <span class="hljs-string">&quot;4410466&quot;</span>                    &#125;],                <span class="hljs-attr">&quot;allForeignTrend&quot;</span>: &#123;                            <span class="hljs-comment">// allForeignTrend 字典，包含国外每日的疫情数据</span>                        <span class="hljs-attr">&quot;updateDate&quot;</span>: [],                       <span class="hljs-comment">// 日期</span>                        <span class="hljs-attr">&quot;list&quot;</span>: [                               <span class="hljs-comment">// list 列表，每项数据及其对应的值</span>                            &#123;                                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;累计确诊&quot;</span>,                                <span class="hljs-attr">&quot;data&quot;</span>: []                            &#125;,                            &#123;                                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;治愈&quot;</span>,                                <span class="hljs-attr">&quot;data&quot;</span>: []                            &#125;,                            &#123;                                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;死亡&quot;</span>,                                <span class="hljs-attr">&quot;data&quot;</span>: []                            &#125;,                            &#123;                                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;现有确诊&quot;</span>,                                <span class="hljs-attr">&quot;data&quot;</span>: []                            &#125;,                            &#123;                                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;新增确诊&quot;</span>,                                <span class="hljs-attr">&quot;data&quot;</span>: []                            &#125;                        ]                    &#125;,                <span class="hljs-attr">&quot;topAddCountry&quot;</span>: [                    <span class="hljs-comment">// 确诊增量最高的国家</span>                        &#123;                            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;美国&quot;</span>,                            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">53162</span>                        &#125;                    ],                <span class="hljs-attr">&quot;topOverseasInput&quot;</span>: [                <span class="hljs-comment">// 境外输入最多的省份</span>                    &#123;                        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;黑龙江&quot;</span>,                        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">386</span>                    &#125;                ]            &#125;        ]    &#125;&lt;/script&gt;</code></pre><h2><span id="4x00-zhu-han-shu-main"><font color="#FF0000">【4x00】主函数 main()</font></span></h2><p>分别将数据获取、词云图绘制、地图绘制写入三个文件：<code>data_get()</code>、<code>data_wordcloud()</code>、<code>data_map()</code>，然后使用一个主函数文件 <a href="http://main.py">main.py</a> 来调用这三个文件里面的函数。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> data_get<span class="hljs-keyword">import</span> data_wordcloud<span class="hljs-keyword">import</span> data_mapdata_dict = data_get.init()data_get.china_total_data(data_dict)data_get.global_total_data(data_dict)data_get.china_daily_data(data_dict)data_get.foreign_daily_data(data_dict)data_wordcloud.china_wordcloud()data_wordcloud.global_wordcloud()data_map.all_map()</code></pre><h2><span id="5x00-shu-ju-huo-qu-mo-kuai-data-get"><font color="#FF0000">【5x00】数据获取模块 data_get</font></span></h2><h3><span id="5x01-chu-shi-hua-han-shu-init"><font color="#4876FF">【5x01】初始化函数 init()</font></span></h3><p>使用 xpath 语法 <code>//script[@id=&quot;captain-config&quot;]/text()</code> 提取里面的值，利用 <code>json.loads</code> 方法将其转换为字典对象，以便后续的其他函数调用。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">init</span>():</span>    headers = &#123;        <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.13 Safari/537.36&#x27;</span>    &#125;    url = <span class="hljs-string">&#x27;https://voice.baidu.com/act/newpneumonia/newpneumonia/&#x27;</span>    response = requests.get(url=url, headers=headers)    tree = etree.HTML(response.text)    dict1 = tree.xpath(<span class="hljs-string">&#x27;//script[@id=&quot;captain-config&quot;]/text()&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(dict1[<span class="hljs-number">0</span>]))    dict2 = json.loads(dict1[<span class="hljs-number">0</span>])    <span class="hljs-keyword">return</span> dict2</code></pre><h3><span id="5x02-zhong-guo-zong-shu-ju-china-total-data"><font color="#4876FF">【5x02】中国总数据 china_total_data()</font></span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">china_total_data</span>(<span class="hljs-params">data</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    1、中国省/直辖市/自治区/行政区疫情数据</span><span class="hljs-string">    省/直辖市/自治区/行政区：area</span><span class="hljs-string">    现有确诊：    curConfirm</span><span class="hljs-string">    累计确诊：    confirmed</span><span class="hljs-string">    累计治愈：    crued</span><span class="hljs-string">    累计死亡：    died</span><span class="hljs-string">    现有确诊增量： curConfirmRelative</span><span class="hljs-string">    累计确诊增量： confirmedRelative</span><span class="hljs-string">    累计治愈增量： curedRelative</span><span class="hljs-string">    累计死亡增量： diedRelative</span><span class="hljs-string">    &quot;&quot;&quot;</span>    wb = openpyxl.Workbook()            <span class="hljs-comment"># 创建工作簿</span>    ws_china = wb.active                <span class="hljs-comment"># 获取工作表</span>    ws_china.title = <span class="hljs-string">&quot;中国省份疫情数据&quot;</span>   <span class="hljs-comment"># 命名工作表</span>    ws_china.append([<span class="hljs-string">&#x27;省/直辖市/自治区/行政区&#x27;</span>, <span class="hljs-string">&#x27;现有确诊&#x27;</span>, <span class="hljs-string">&#x27;累计确诊&#x27;</span>, <span class="hljs-string">&#x27;累计治愈&#x27;</span>,                     <span class="hljs-string">&#x27;累计死亡&#x27;</span>, <span class="hljs-string">&#x27;现有确诊增量&#x27;</span>, <span class="hljs-string">&#x27;累计确诊增量&#x27;</span>,                     <span class="hljs-string">&#x27;累计治愈增量&#x27;</span>, <span class="hljs-string">&#x27;累计死亡增量&#x27;</span>])    china = data[<span class="hljs-string">&#x27;component&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;caseList&#x27;</span>]    <span class="hljs-keyword">for</span> province <span class="hljs-keyword">in</span> china:        ws_china.append([province[<span class="hljs-string">&#x27;area&#x27;</span>],                        province[<span class="hljs-string">&#x27;curConfirm&#x27;</span>],                        province[<span class="hljs-string">&#x27;confirmed&#x27;</span>],                        province[<span class="hljs-string">&#x27;crued&#x27;</span>],                        province[<span class="hljs-string">&#x27;died&#x27;</span>],                        province[<span class="hljs-string">&#x27;curConfirmRelative&#x27;</span>],                        province[<span class="hljs-string">&#x27;confirmedRelative&#x27;</span>],                        province[<span class="hljs-string">&#x27;curedRelative&#x27;</span>],                        province[<span class="hljs-string">&#x27;diedRelative&#x27;</span>]])    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    2、中国城市疫情数据</span><span class="hljs-string">    城市：city</span><span class="hljs-string">    现有确诊：curConfirm</span><span class="hljs-string">    累计确诊：confirmed</span><span class="hljs-string">    累计治愈：crued</span><span class="hljs-string">    累计死亡：died</span><span class="hljs-string">    累计确诊增量：confirmedRelative</span><span class="hljs-string">    &quot;&quot;&quot;</span>    ws_city = wb.create_sheet(<span class="hljs-string">&#x27;中国城市疫情数据&#x27;</span>)    ws_city.append([<span class="hljs-string">&#x27;城市&#x27;</span>, <span class="hljs-string">&#x27;现有确诊&#x27;</span>, <span class="hljs-string">&#x27;累计确诊&#x27;</span>,                    <span class="hljs-string">&#x27;累计治愈&#x27;</span>, <span class="hljs-string">&#x27;累计死亡&#x27;</span>, <span class="hljs-string">&#x27;累计确诊增量&#x27;</span>])    <span class="hljs-keyword">for</span> province <span class="hljs-keyword">in</span> china:        <span class="hljs-keyword">for</span> city <span class="hljs-keyword">in</span> province[<span class="hljs-string">&#x27;subList&#x27;</span>]:            <span class="hljs-comment"># 某些城市没有 curConfirm 数据，则将其设置为 0，crued 和 died 为空时，替换成 0</span>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;curConfirm&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> city:                city[<span class="hljs-string">&#x27;curConfirm&#x27;</span>] = <span class="hljs-string">&#x27;0&#x27;</span>            <span class="hljs-keyword">if</span> city[<span class="hljs-string">&#x27;crued&#x27;</span>] == <span class="hljs-string">&#x27;&#x27;</span>:                city[<span class="hljs-string">&#x27;crued&#x27;</span>] = <span class="hljs-string">&#x27;0&#x27;</span>            <span class="hljs-keyword">if</span> city[<span class="hljs-string">&#x27;died&#x27;</span>] == <span class="hljs-string">&#x27;&#x27;</span>:                city[<span class="hljs-string">&#x27;died&#x27;</span>] = <span class="hljs-string">&#x27;0&#x27;</span>            ws_city.append([city[<span class="hljs-string">&#x27;city&#x27;</span>], <span class="hljs-string">&#x27;0&#x27;</span>, city[<span class="hljs-string">&#x27;confirmed&#x27;</span>],                           city[<span class="hljs-string">&#x27;crued&#x27;</span>], city[<span class="hljs-string">&#x27;died&#x27;</span>], city[<span class="hljs-string">&#x27;confirmedRelative&#x27;</span>]])    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    3、中国疫情数据更新时间：mapLastUpdatedTime</span><span class="hljs-string">    &quot;&quot;&quot;</span>    time_domestic = data[<span class="hljs-string">&#x27;component&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;mapLastUpdatedTime&#x27;</span>]    ws_time = wb.create_sheet(<span class="hljs-string">&#x27;中国疫情数据更新时间&#x27;</span>)    ws_time.column_dimensions[<span class="hljs-string">&#x27;A&#x27;</span>].width = <span class="hljs-number">22</span>  <span class="hljs-comment"># 调整列宽</span>    ws_time.append([<span class="hljs-string">&#x27;中国疫情数据更新时间&#x27;</span>])    ws_time.append([time_domestic])    wb.save(<span class="hljs-string">&#x27;COVID-19-China.xlsx&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;中国疫情数据已保存至 COVID-19-China.xlsx！&#x27;</span>)</code></pre><h3><span id="5x03-quan-qiu-zong-shu-ju-global-total-data"><font color="#4876FF">【5x03】全球总数据 global_total_data()</font></span></h3><p>全球总数据在提取完成后，进行地图绘制时发现并没有中国的数据，因此在写入全球数据时注意要单独将中国的数据插入 Excel 中。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">global_total_data</span>(<span class="hljs-params">data</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    1、全球各国疫情数据</span><span class="hljs-string">    国家：country</span><span class="hljs-string">    现有确诊：curConfirm</span><span class="hljs-string">    累计确诊：confirmed</span><span class="hljs-string">    累计治愈：crued</span><span class="hljs-string">    累计死亡：died</span><span class="hljs-string">    累计确诊增量：confirmedRelative</span><span class="hljs-string">    &quot;&quot;&quot;</span>    wb = openpyxl.Workbook()    ws_global = wb.active    ws_global.title = <span class="hljs-string">&quot;全球各国疫情数据&quot;</span>    <span class="hljs-comment"># 按照国家保存数据</span>    countries = data[<span class="hljs-string">&#x27;component&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;caseOutsideList&#x27;</span>]    ws_global.append([<span class="hljs-string">&#x27;国家&#x27;</span>, <span class="hljs-string">&#x27;现有确诊&#x27;</span>, <span class="hljs-string">&#x27;累计确诊&#x27;</span>, <span class="hljs-string">&#x27;累计治愈&#x27;</span>, <span class="hljs-string">&#x27;累计死亡&#x27;</span>, <span class="hljs-string">&#x27;累计确诊增量&#x27;</span>])    <span class="hljs-keyword">for</span> country <span class="hljs-keyword">in</span> countries:        ws_global.append([country[<span class="hljs-string">&#x27;area&#x27;</span>],                          country[<span class="hljs-string">&#x27;curConfirm&#x27;</span>],                          country[<span class="hljs-string">&#x27;confirmed&#x27;</span>],                          country[<span class="hljs-string">&#x27;crued&#x27;</span>],                          country[<span class="hljs-string">&#x27;died&#x27;</span>],                          country[<span class="hljs-string">&#x27;confirmedRelative&#x27;</span>]])    <span class="hljs-comment"># 按照洲保存数据</span>    continent = data[<span class="hljs-string">&#x27;component&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;globalList&#x27;</span>]    <span class="hljs-keyword">for</span> area <span class="hljs-keyword">in</span> continent:        ws_foreign = wb.create_sheet(area[<span class="hljs-string">&#x27;area&#x27;</span>] + <span class="hljs-string">&#x27;疫情数据&#x27;</span>)        ws_foreign.append([<span class="hljs-string">&#x27;国家&#x27;</span>, <span class="hljs-string">&#x27;现有确诊&#x27;</span>, <span class="hljs-string">&#x27;累计确诊&#x27;</span>, <span class="hljs-string">&#x27;累计治愈&#x27;</span>, <span class="hljs-string">&#x27;累计死亡&#x27;</span>, <span class="hljs-string">&#x27;累计确诊增量&#x27;</span>])        <span class="hljs-keyword">for</span> country <span class="hljs-keyword">in</span> area[<span class="hljs-string">&#x27;subList&#x27;</span>]:            ws_foreign.append([country[<span class="hljs-string">&#x27;country&#x27;</span>],                               country[<span class="hljs-string">&#x27;curConfirm&#x27;</span>],                               country[<span class="hljs-string">&#x27;confirmed&#x27;</span>],                               country[<span class="hljs-string">&#x27;crued&#x27;</span>],                               country[<span class="hljs-string">&#x27;died&#x27;</span>],                               country[<span class="hljs-string">&#x27;confirmedRelative&#x27;</span>]])    <span class="hljs-comment"># 在“全球各国疫情数据”和“亚洲疫情数据”两张表中写入中国疫情数据</span>    ws1, ws2 = wb[<span class="hljs-string">&#x27;全球各国疫情数据&#x27;</span>], wb[<span class="hljs-string">&#x27;亚洲疫情数据&#x27;</span>]    original_data = data[<span class="hljs-string">&#x27;component&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;summaryDataIn&#x27;</span>]    add_china_data = [<span class="hljs-string">&#x27;中国&#x27;</span>,                      original_data[<span class="hljs-string">&#x27;curConfirm&#x27;</span>],                      original_data[<span class="hljs-string">&#x27;confirmed&#x27;</span>],                      original_data[<span class="hljs-string">&#x27;cured&#x27;</span>],                      original_data[<span class="hljs-string">&#x27;died&#x27;</span>],                      original_data[<span class="hljs-string">&#x27;confirmedRelative&#x27;</span>]]    ws1.append(add_china_data)    ws2.append(add_china_data)    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    2、全球疫情数据更新时间：foreignLastUpdatedTime</span><span class="hljs-string">    &quot;&quot;&quot;</span>    time_foreign = data[<span class="hljs-string">&#x27;component&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;foreignLastUpdatedTime&#x27;</span>]    ws_time = wb.create_sheet(<span class="hljs-string">&#x27;全球疫情数据更新时间&#x27;</span>)    ws_time.column_dimensions[<span class="hljs-string">&#x27;A&#x27;</span>].width = <span class="hljs-number">22</span>  <span class="hljs-comment"># 调整列宽</span>    ws_time.append([<span class="hljs-string">&#x27;全球疫情数据更新时间&#x27;</span>])    ws_time.append([time_foreign])    wb.save(<span class="hljs-string">&#x27;COVID-19-Global.xlsx&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;全球疫情数据已保存至 COVID-19-Global.xlsx！&#x27;</span>)</code></pre><h3><span id="5x04-zhong-guo-mei-ri-shu-ju-china-daily-data"><font color="#4876FF">【5x04】中国每日数据 china_daily_data()</font></span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">china_daily_data</span>(<span class="hljs-params">data</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    i_dict = data[&#x27;component&#x27;][0][&#x27;trend&#x27;]</span><span class="hljs-string">    i_dict[&#x27;updateDate&#x27;]：日期</span><span class="hljs-string">    i_dict[&#x27;list&#x27;][0]：确诊</span><span class="hljs-string">    i_dict[&#x27;list&#x27;][1]：疑似</span><span class="hljs-string">    i_dict[&#x27;list&#x27;][2]：治愈</span><span class="hljs-string">    i_dict[&#x27;list&#x27;][3]：死亡</span><span class="hljs-string">    i_dict[&#x27;list&#x27;][4]：新增确诊</span><span class="hljs-string">    i_dict[&#x27;list&#x27;][5]：新增疑似</span><span class="hljs-string">    i_dict[&#x27;list&#x27;][6]：新增治愈</span><span class="hljs-string">    i_dict[&#x27;list&#x27;][7]：新增死亡</span><span class="hljs-string">    i_dict[&#x27;list&#x27;][8]：累计境外输入</span><span class="hljs-string">    i_dict[&#x27;list&#x27;][9]：新增境外输入</span><span class="hljs-string">    &quot;&quot;&quot;</span>    ccd_dict = data[<span class="hljs-string">&#x27;component&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;trend&#x27;</span>]    update_date = ccd_dict[<span class="hljs-string">&#x27;updateDate&#x27;</span>]              <span class="hljs-comment"># 日期</span>    china_confirmed = ccd_dict[<span class="hljs-string">&#x27;list&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;data&#x27;</span>]     <span class="hljs-comment"># 每日累计确诊数据</span>    china_crued = ccd_dict[<span class="hljs-string">&#x27;list&#x27;</span>][<span class="hljs-number">2</span>][<span class="hljs-string">&#x27;data&#x27;</span>]         <span class="hljs-comment"># 每日累计治愈数据</span>    china_died = ccd_dict[<span class="hljs-string">&#x27;list&#x27;</span>][<span class="hljs-number">3</span>][<span class="hljs-string">&#x27;data&#x27;</span>]          <span class="hljs-comment"># 每日累计死亡数据</span>    wb = openpyxl.load_workbook(<span class="hljs-string">&#x27;COVID-19-China.xlsx&#x27;</span>)    <span class="hljs-comment"># 写入每日累计确诊数据</span>    ws_china_confirmed = wb.create_sheet(<span class="hljs-string">&#x27;中国每日累计确诊数据&#x27;</span>)    ws_china_confirmed.append([<span class="hljs-string">&#x27;日期&#x27;</span>, <span class="hljs-string">&#x27;数据&#x27;</span>])    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(update_date, china_confirmed):        ws_china_confirmed.append(data)    <span class="hljs-comment"># 写入每日累计治愈数据</span>    ws_china_crued = wb.create_sheet(<span class="hljs-string">&#x27;中国每日累计治愈数据&#x27;</span>)    ws_china_crued.append([<span class="hljs-string">&#x27;日期&#x27;</span>, <span class="hljs-string">&#x27;数据&#x27;</span>])    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(update_date, china_crued):        ws_china_crued.append(data)    <span class="hljs-comment"># 写入每日累计死亡数据</span>    ws_china_died = wb.create_sheet(<span class="hljs-string">&#x27;中国每日累计死亡数据&#x27;</span>)    ws_china_died.append([<span class="hljs-string">&#x27;日期&#x27;</span>, <span class="hljs-string">&#x27;数据&#x27;</span>])    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(update_date, china_died):        ws_china_died.append(data)    wb.save(<span class="hljs-string">&#x27;COVID-19-China.xlsx&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;中国每日累计确诊/治愈/死亡数据已保存至 COVID-19-China.xlsx！&#x27;</span>)</code></pre><h3><span id="5x05-jing-wai-mei-ri-shu-ju-foreign-daily-data"><font color="#4876FF">【5x05】境外每日数据 foreign_daily_data()</font></span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foreign_daily_data</span>(<span class="hljs-params">data</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    te_dict = data[&#x27;component&#x27;][0][&#x27;allForeignTrend&#x27;]</span><span class="hljs-string">    te_dict[&#x27;updateDate&#x27;]：日期</span><span class="hljs-string">    te_dict[&#x27;list&#x27;][0]：累计确诊</span><span class="hljs-string">    te_dict[&#x27;list&#x27;][1]：治愈</span><span class="hljs-string">    te_dict[&#x27;list&#x27;][2]：死亡</span><span class="hljs-string">    te_dict[&#x27;list&#x27;][3]：现有确诊</span><span class="hljs-string">    te_dict[&#x27;list&#x27;][4]：新增确诊</span><span class="hljs-string">    &quot;&quot;&quot;</span>    te_dict = data[<span class="hljs-string">&#x27;component&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;allForeignTrend&#x27;</span>]    update_date = te_dict[<span class="hljs-string">&#x27;updateDate&#x27;</span>]                <span class="hljs-comment"># 日期</span>    foreign_confirmed = te_dict[<span class="hljs-string">&#x27;list&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;data&#x27;</span>]     <span class="hljs-comment"># 每日累计确诊数据</span>    foreign_crued = te_dict[<span class="hljs-string">&#x27;list&#x27;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;data&#x27;</span>]         <span class="hljs-comment"># 每日累计治愈数据</span>    foreign_died = te_dict[<span class="hljs-string">&#x27;list&#x27;</span>][<span class="hljs-number">2</span>][<span class="hljs-string">&#x27;data&#x27;</span>]          <span class="hljs-comment"># 每日累计死亡数据</span>    wb = openpyxl.load_workbook(<span class="hljs-string">&#x27;COVID-19-Global.xlsx&#x27;</span>)    <span class="hljs-comment"># 写入每日累计确诊数据</span>    ws_foreign_confirmed = wb.create_sheet(<span class="hljs-string">&#x27;境外每日累计确诊数据&#x27;</span>)    ws_foreign_confirmed.append([<span class="hljs-string">&#x27;日期&#x27;</span>, <span class="hljs-string">&#x27;数据&#x27;</span>])    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(update_date, foreign_confirmed):        ws_foreign_confirmed.append(data)    <span class="hljs-comment"># 写入累计治愈数据</span>    ws_foreign_crued = wb.create_sheet(<span class="hljs-string">&#x27;境外每日累计治愈数据&#x27;</span>)    ws_foreign_crued.append([<span class="hljs-string">&#x27;日期&#x27;</span>, <span class="hljs-string">&#x27;数据&#x27;</span>])    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(update_date, foreign_crued):        ws_foreign_crued.append(data)    <span class="hljs-comment"># 写入累计死亡数据</span>    ws_foreign_died = wb.create_sheet(<span class="hljs-string">&#x27;境外每日累计死亡数据&#x27;</span>)    ws_foreign_died.append([<span class="hljs-string">&#x27;日期&#x27;</span>, <span class="hljs-string">&#x27;数据&#x27;</span>])    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(update_date, foreign_died):        ws_foreign_died.append(data)    wb.save(<span class="hljs-string">&#x27;COVID-19-Global.xlsx&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;境外每日累计确诊/治愈/死亡数据已保存至 COVID-19-Global.xlsx！&#x27;</span>)</code></pre><h2><span id="6x00-ci-yun-tu-hui-zhi-mo-kuai-data-wordcloud"><font color="#FF0000">【6x00】词云图绘制模块 data_wordcloud</font></span></h2><h3><span id="6x01-zhong-guo-lei-ji-que-zhen-ci-yun-tu-foreign-daily-data"><font color="#4876FF">【6x01】中国累计确诊词云图 foreign_daily_data()</font></span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">china_wordcloud</span>():</span>    wb = openpyxl.load_workbook(<span class="hljs-string">&#x27;COVID-19-China.xlsx&#x27;</span>)  <span class="hljs-comment"># 获取已有的xlsx文件</span>    ws_china = wb[<span class="hljs-string">&#x27;中国省份疫情数据&#x27;</span>]                     <span class="hljs-comment"># 获取中国省份疫情数据表</span>    ws_china.delete_rows(<span class="hljs-number">1</span>)                             <span class="hljs-comment"># 删除第一行</span>    china_dict = &#123;&#125;                                     <span class="hljs-comment"># 将省份及其累计确诊按照键值对形式储存在字典中</span>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> ws_china.values:        china_dict[data[<span class="hljs-number">0</span>]] = <span class="hljs-built_in">int</span>(data[<span class="hljs-number">2</span>])    word_cloud = wordcloud.WordCloud(font_path=<span class="hljs-string">&#x27;C:/Windows/Fonts/simsun.ttc&#x27;</span>,                                     background_color=<span class="hljs-string">&#x27;#CDC9C9&#x27;</span>,                                     min_font_size=<span class="hljs-number">15</span>,                                     width=<span class="hljs-number">900</span>, height=<span class="hljs-number">500</span>)    word_cloud.generate_from_frequencies(china_dict)    word_cloud.to_file(<span class="hljs-string">&#x27;WordCloud-China.png&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;中国省份疫情词云图绘制完毕！&#x27;</span>)</code></pre><h3><span id="6x02-quan-qiu-lei-ji-que-zhen-ci-yun-tu-foreign-daily-data"><font color="#4876FF">【6x02】全球累计确诊词云图 foreign_daily_data()</font></span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">global_wordcloud</span>():</span>    wb = openpyxl.load_workbook(<span class="hljs-string">&#x27;COVID-19-Global.xlsx&#x27;</span>)    ws_global = wb[<span class="hljs-string">&#x27;全球各国疫情数据&#x27;</span>]    ws_global.delete_rows(<span class="hljs-number">1</span>)    global_dict = &#123;&#125;    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> ws_global.values:        global_dict[data[<span class="hljs-number">0</span>]] = <span class="hljs-built_in">int</span>(data[<span class="hljs-number">2</span>])    word_cloud = wordcloud.WordCloud(font_path=<span class="hljs-string">&#x27;C:/Windows/Fonts/simsun.ttc&#x27;</span>,                                     background_color=<span class="hljs-string">&#x27;#CDC9C9&#x27;</span>,                                     width=<span class="hljs-number">900</span>, height=<span class="hljs-number">500</span>)    word_cloud.generate_from_frequencies(global_dict)    word_cloud.to_file(<span class="hljs-string">&#x27;WordCloud-Global.png&#x27;</span>)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;全球各国疫情词云图绘制完毕！&#x27;</span>)</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/107140534</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="7x00-di-tu-hui-zhi-mo-kuai-data-map"><font color="#FF0000">【7x00】地图绘制模块 data_map</font></span></h2><h3><span id="7x01-zhong-guo-lei-ji-que-zhen-di-tu-china-total-map"><font color="#4876FF">【7x01】中国累计确诊地图 china_total_map()</font></span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">china_total_map</span>():</span>    wb = openpyxl.load_workbook(<span class="hljs-string">&#x27;COVID-19-China.xlsx&#x27;</span>)  <span class="hljs-comment"># 获取已有的xlsx文件</span>    ws_time = wb[<span class="hljs-string">&#x27;中国疫情数据更新时间&#x27;</span>]                   <span class="hljs-comment"># 获取文件中中国疫情数据更新时间表</span>    ws_data = wb[<span class="hljs-string">&#x27;中国省份疫情数据&#x27;</span>]                      <span class="hljs-comment"># 获取文件中中国省份疫情数据表</span>    ws_data.delete_rows(<span class="hljs-number">1</span>)                              <span class="hljs-comment"># 删除第一行</span>    province = []                                       <span class="hljs-comment"># 省份</span>    curconfirm = []                                     <span class="hljs-comment"># 累计确诊</span>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> ws_data.values:        province.append(data[<span class="hljs-number">0</span>])        curconfirm.append(data[<span class="hljs-number">2</span>])    time_china = ws_time[<span class="hljs-string">&#x27;A2&#x27;</span>].value                    <span class="hljs-comment"># 更新时间</span>    <span class="hljs-comment"># 设置分级颜色</span>    pieces = [        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#FFFFFF&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;1-9&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#FFE5DB&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;10-99&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#FF9985&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">999</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;100-999&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#F57567&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">9999</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;1000-9999&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#E64546&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">99999</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">10000</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;≧10000&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#B80909&#x27;</span>&#125;    ]    <span class="hljs-comment"># 绘制地图</span>    ct_map = (        Map()        .add(series_name=<span class="hljs-string">&#x27;累计确诊人数&#x27;</span>, data_pair=[<span class="hljs-built_in">list</span>(z) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(province, curconfirm)], maptype=<span class="hljs-string">&quot;china&quot;</span>)        .set_global_opts(            title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国疫情数据（累计确诊）&quot;</span>,                                      subtitle=<span class="hljs-string">&#x27;数据更新至：&#x27;</span> + time_china + <span class="hljs-string">&#x27;\n\n来源：百度疫情实时大数据报告&#x27;</span>),            visualmap_opts=opts.VisualMapOpts(max_=<span class="hljs-number">300</span>, is_piecewise=<span class="hljs-literal">True</span>, pieces=pieces)        )    )    <span class="hljs-keyword">return</span> ct_map</code></pre><h3><span id="7x02-quan-qiu-lei-ji-que-zhen-di-tu-global-total-map"><font color="#4876FF">【7x02】全球累计确诊地图 global_total_map()</font></span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">global_total_map</span>():</span>    wb = openpyxl.load_workbook(<span class="hljs-string">&#x27;COVID-19-Global.xlsx&#x27;</span>)    ws_time = wb[<span class="hljs-string">&#x27;全球疫情数据更新时间&#x27;</span>]    ws_data = wb[<span class="hljs-string">&#x27;全球各国疫情数据&#x27;</span>]    ws_data.delete_rows(<span class="hljs-number">1</span>)    country = []                        <span class="hljs-comment"># 国家</span>    curconfirm = []                     <span class="hljs-comment"># 累计确诊</span>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> ws_data.values:        country.append(data[<span class="hljs-number">0</span>])        curconfirm.append(data[<span class="hljs-number">2</span>])    time_global = ws_time[<span class="hljs-string">&#x27;A2&#x27;</span>].value   <span class="hljs-comment"># 更新时间</span>    <span class="hljs-comment"># 国家名称中英文映射表</span>    name_map = &#123;          <span class="hljs-string">&quot;Somalia&quot;</span>: <span class="hljs-string">&quot;索马里&quot;</span>,          <span class="hljs-string">&quot;Liechtenstein&quot;</span>: <span class="hljs-string">&quot;列支敦士登&quot;</span>,          <span class="hljs-string">&quot;Morocco&quot;</span>: <span class="hljs-string">&quot;摩洛哥&quot;</span>,          <span class="hljs-string">&quot;W. Sahara&quot;</span>: <span class="hljs-string">&quot;西撒哈拉&quot;</span>,          <span class="hljs-string">&quot;Serbia&quot;</span>: <span class="hljs-string">&quot;塞尔维亚&quot;</span>,          <span class="hljs-string">&quot;Afghanistan&quot;</span>: <span class="hljs-string">&quot;阿富汗&quot;</span>,          <span class="hljs-string">&quot;Angola&quot;</span>: <span class="hljs-string">&quot;安哥拉&quot;</span>,          <span class="hljs-string">&quot;Albania&quot;</span>: <span class="hljs-string">&quot;阿尔巴尼亚&quot;</span>,          <span class="hljs-string">&quot;Andorra&quot;</span>: <span class="hljs-string">&quot;安道尔共和国&quot;</span>,          <span class="hljs-string">&quot;United Arab Emirates&quot;</span>: <span class="hljs-string">&quot;阿拉伯联合酋长国&quot;</span>,          <span class="hljs-string">&quot;Argentina&quot;</span>: <span class="hljs-string">&quot;阿根廷&quot;</span>,          <span class="hljs-string">&quot;Armenia&quot;</span>: <span class="hljs-string">&quot;亚美尼亚&quot;</span>,          <span class="hljs-string">&quot;Australia&quot;</span>: <span class="hljs-string">&quot;澳大利亚&quot;</span>,          <span class="hljs-string">&quot;Austria&quot;</span>: <span class="hljs-string">&quot;奥地利&quot;</span>,          <span class="hljs-string">&quot;Azerbaijan&quot;</span>: <span class="hljs-string">&quot;阿塞拜疆&quot;</span>,          <span class="hljs-string">&quot;Burundi&quot;</span>: <span class="hljs-string">&quot;布隆迪&quot;</span>,          <span class="hljs-string">&quot;Belgium&quot;</span>: <span class="hljs-string">&quot;比利时&quot;</span>,          <span class="hljs-string">&quot;Benin&quot;</span>: <span class="hljs-string">&quot;贝宁&quot;</span>,          <span class="hljs-string">&quot;Burkina Faso&quot;</span>: <span class="hljs-string">&quot;布基纳法索&quot;</span>,          <span class="hljs-string">&quot;Bangladesh&quot;</span>: <span class="hljs-string">&quot;孟加拉国&quot;</span>,          <span class="hljs-string">&quot;Bulgaria&quot;</span>: <span class="hljs-string">&quot;保加利亚&quot;</span>,          <span class="hljs-string">&quot;Bahrain&quot;</span>: <span class="hljs-string">&quot;巴林&quot;</span>,          <span class="hljs-string">&quot;Bahamas&quot;</span>: <span class="hljs-string">&quot;巴哈马&quot;</span>,          <span class="hljs-string">&quot;Bosnia and Herz.&quot;</span>: <span class="hljs-string">&quot;波斯尼亚和黑塞哥维那&quot;</span>,          <span class="hljs-string">&quot;Belarus&quot;</span>: <span class="hljs-string">&quot;白俄罗斯&quot;</span>,          <span class="hljs-string">&quot;Belize&quot;</span>: <span class="hljs-string">&quot;伯利兹&quot;</span>,          <span class="hljs-string">&quot;Bermuda&quot;</span>: <span class="hljs-string">&quot;百慕大&quot;</span>,          <span class="hljs-string">&quot;Bolivia&quot;</span>: <span class="hljs-string">&quot;玻利维亚&quot;</span>,          <span class="hljs-string">&quot;Brazil&quot;</span>: <span class="hljs-string">&quot;巴西&quot;</span>,          <span class="hljs-string">&quot;Barbados&quot;</span>: <span class="hljs-string">&quot;巴巴多斯&quot;</span>,          <span class="hljs-string">&quot;Brunei&quot;</span>: <span class="hljs-string">&quot;文莱&quot;</span>,          <span class="hljs-string">&quot;Bhutan&quot;</span>: <span class="hljs-string">&quot;不丹&quot;</span>,          <span class="hljs-string">&quot;Botswana&quot;</span>: <span class="hljs-string">&quot;博茨瓦纳&quot;</span>,          <span class="hljs-string">&quot;Central African Rep.&quot;</span>: <span class="hljs-string">&quot;中非共和国&quot;</span>,          <span class="hljs-string">&quot;Canada&quot;</span>: <span class="hljs-string">&quot;加拿大&quot;</span>,          <span class="hljs-string">&quot;Switzerland&quot;</span>: <span class="hljs-string">&quot;瑞士&quot;</span>,          <span class="hljs-string">&quot;Chile&quot;</span>: <span class="hljs-string">&quot;智利&quot;</span>,          <span class="hljs-string">&quot;China&quot;</span>: <span class="hljs-string">&quot;中国&quot;</span>,          <span class="hljs-string">&quot;Côte d&#x27;Ivoire&quot;</span>: <span class="hljs-string">&quot;科特迪瓦&quot;</span>,          <span class="hljs-string">&quot;Cameroon&quot;</span>: <span class="hljs-string">&quot;喀麦隆&quot;</span>,          <span class="hljs-string">&quot;Dem. Rep. Congo&quot;</span>: <span class="hljs-string">&quot;刚果（布）&quot;</span>,          <span class="hljs-string">&quot;Congo&quot;</span>: <span class="hljs-string">&quot;刚果（金）&quot;</span>,          <span class="hljs-string">&quot;Colombia&quot;</span>: <span class="hljs-string">&quot;哥伦比亚&quot;</span>,          <span class="hljs-string">&quot;Cape Verde&quot;</span>: <span class="hljs-string">&quot;佛得角&quot;</span>,          <span class="hljs-string">&quot;Costa Rica&quot;</span>: <span class="hljs-string">&quot;哥斯达黎加&quot;</span>,          <span class="hljs-string">&quot;Cuba&quot;</span>: <span class="hljs-string">&quot;古巴&quot;</span>,          <span class="hljs-string">&quot;N. Cyprus&quot;</span>: <span class="hljs-string">&quot;北塞浦路斯&quot;</span>,          <span class="hljs-string">&quot;Cyprus&quot;</span>: <span class="hljs-string">&quot;塞浦路斯&quot;</span>,          <span class="hljs-string">&quot;Czech Rep.&quot;</span>: <span class="hljs-string">&quot;捷克&quot;</span>,          <span class="hljs-string">&quot;Germany&quot;</span>: <span class="hljs-string">&quot;德国&quot;</span>,          <span class="hljs-string">&quot;Djibouti&quot;</span>: <span class="hljs-string">&quot;吉布提&quot;</span>,          <span class="hljs-string">&quot;Denmark&quot;</span>: <span class="hljs-string">&quot;丹麦&quot;</span>,          <span class="hljs-string">&quot;Dominican Rep.&quot;</span>: <span class="hljs-string">&quot;多米尼加&quot;</span>,          <span class="hljs-string">&quot;Algeria&quot;</span>: <span class="hljs-string">&quot;阿尔及利亚&quot;</span>,          <span class="hljs-string">&quot;Ecuador&quot;</span>: <span class="hljs-string">&quot;厄瓜多尔&quot;</span>,          <span class="hljs-string">&quot;Egypt&quot;</span>: <span class="hljs-string">&quot;埃及&quot;</span>,          <span class="hljs-string">&quot;Eritrea&quot;</span>: <span class="hljs-string">&quot;厄立特里亚&quot;</span>,          <span class="hljs-string">&quot;Spain&quot;</span>: <span class="hljs-string">&quot;西班牙&quot;</span>,          <span class="hljs-string">&quot;Estonia&quot;</span>: <span class="hljs-string">&quot;爱沙尼亚&quot;</span>,          <span class="hljs-string">&quot;Ethiopia&quot;</span>: <span class="hljs-string">&quot;埃塞俄比亚&quot;</span>,          <span class="hljs-string">&quot;Finland&quot;</span>: <span class="hljs-string">&quot;芬兰&quot;</span>,          <span class="hljs-string">&quot;Fiji&quot;</span>: <span class="hljs-string">&quot;斐济&quot;</span>,          <span class="hljs-string">&quot;France&quot;</span>: <span class="hljs-string">&quot;法国&quot;</span>,          <span class="hljs-string">&quot;Gabon&quot;</span>: <span class="hljs-string">&quot;加蓬&quot;</span>,          <span class="hljs-string">&quot;United Kingdom&quot;</span>: <span class="hljs-string">&quot;英国&quot;</span>,          <span class="hljs-string">&quot;Georgia&quot;</span>: <span class="hljs-string">&quot;格鲁吉亚&quot;</span>,          <span class="hljs-string">&quot;Ghana&quot;</span>: <span class="hljs-string">&quot;加纳&quot;</span>,          <span class="hljs-string">&quot;Guinea&quot;</span>: <span class="hljs-string">&quot;几内亚&quot;</span>,          <span class="hljs-string">&quot;Gambia&quot;</span>: <span class="hljs-string">&quot;冈比亚&quot;</span>,          <span class="hljs-string">&quot;Guinea-Bissau&quot;</span>: <span class="hljs-string">&quot;几内亚比绍&quot;</span>,          <span class="hljs-string">&quot;Eq. Guinea&quot;</span>: <span class="hljs-string">&quot;赤道几内亚&quot;</span>,          <span class="hljs-string">&quot;Greece&quot;</span>: <span class="hljs-string">&quot;希腊&quot;</span>,          <span class="hljs-string">&quot;Grenada&quot;</span>: <span class="hljs-string">&quot;格林纳达&quot;</span>,          <span class="hljs-string">&quot;Greenland&quot;</span>: <span class="hljs-string">&quot;格陵兰岛&quot;</span>,          <span class="hljs-string">&quot;Guatemala&quot;</span>: <span class="hljs-string">&quot;危地马拉&quot;</span>,          <span class="hljs-string">&quot;Guam&quot;</span>: <span class="hljs-string">&quot;关岛&quot;</span>,          <span class="hljs-string">&quot;Guyana&quot;</span>: <span class="hljs-string">&quot;圭亚那合作共和国&quot;</span>,          <span class="hljs-string">&quot;Honduras&quot;</span>: <span class="hljs-string">&quot;洪都拉斯&quot;</span>,          <span class="hljs-string">&quot;Croatia&quot;</span>: <span class="hljs-string">&quot;克罗地亚&quot;</span>,          <span class="hljs-string">&quot;Haiti&quot;</span>: <span class="hljs-string">&quot;海地&quot;</span>,          <span class="hljs-string">&quot;Hungary&quot;</span>: <span class="hljs-string">&quot;匈牙利&quot;</span>,          <span class="hljs-string">&quot;Indonesia&quot;</span>: <span class="hljs-string">&quot;印度尼西亚&quot;</span>,          <span class="hljs-string">&quot;India&quot;</span>: <span class="hljs-string">&quot;印度&quot;</span>,          <span class="hljs-string">&quot;Br. Indian Ocean Ter.&quot;</span>: <span class="hljs-string">&quot;英属印度洋领土&quot;</span>,          <span class="hljs-string">&quot;Ireland&quot;</span>: <span class="hljs-string">&quot;爱尔兰&quot;</span>,          <span class="hljs-string">&quot;Iran&quot;</span>: <span class="hljs-string">&quot;伊朗&quot;</span>,          <span class="hljs-string">&quot;Iraq&quot;</span>: <span class="hljs-string">&quot;伊拉克&quot;</span>,          <span class="hljs-string">&quot;Iceland&quot;</span>: <span class="hljs-string">&quot;冰岛&quot;</span>,          <span class="hljs-string">&quot;Israel&quot;</span>: <span class="hljs-string">&quot;以色列&quot;</span>,          <span class="hljs-string">&quot;Italy&quot;</span>: <span class="hljs-string">&quot;意大利&quot;</span>,          <span class="hljs-string">&quot;Jamaica&quot;</span>: <span class="hljs-string">&quot;牙买加&quot;</span>,          <span class="hljs-string">&quot;Jordan&quot;</span>: <span class="hljs-string">&quot;约旦&quot;</span>,          <span class="hljs-string">&quot;Japan&quot;</span>: <span class="hljs-string">&quot;日本&quot;</span>,          <span class="hljs-string">&quot;Siachen Glacier&quot;</span>: <span class="hljs-string">&quot;锡亚琴冰川&quot;</span>,          <span class="hljs-string">&quot;Kazakhstan&quot;</span>: <span class="hljs-string">&quot;哈萨克斯坦&quot;</span>,          <span class="hljs-string">&quot;Kenya&quot;</span>: <span class="hljs-string">&quot;肯尼亚&quot;</span>,          <span class="hljs-string">&quot;Kyrgyzstan&quot;</span>: <span class="hljs-string">&quot;吉尔吉斯斯坦&quot;</span>,          <span class="hljs-string">&quot;Cambodia&quot;</span>: <span class="hljs-string">&quot;柬埔寨&quot;</span>,          <span class="hljs-string">&quot;Korea&quot;</span>: <span class="hljs-string">&quot;韩国&quot;</span>,          <span class="hljs-string">&quot;Kuwait&quot;</span>: <span class="hljs-string">&quot;科威特&quot;</span>,          <span class="hljs-string">&quot;Lao PDR&quot;</span>: <span class="hljs-string">&quot;老挝&quot;</span>,          <span class="hljs-string">&quot;Lebanon&quot;</span>: <span class="hljs-string">&quot;黎巴嫩&quot;</span>,          <span class="hljs-string">&quot;Liberia&quot;</span>: <span class="hljs-string">&quot;利比里亚&quot;</span>,          <span class="hljs-string">&quot;Libya&quot;</span>: <span class="hljs-string">&quot;利比亚&quot;</span>,          <span class="hljs-string">&quot;Sri Lanka&quot;</span>: <span class="hljs-string">&quot;斯里兰卡&quot;</span>,          <span class="hljs-string">&quot;Lesotho&quot;</span>: <span class="hljs-string">&quot;莱索托&quot;</span>,          <span class="hljs-string">&quot;Lithuania&quot;</span>: <span class="hljs-string">&quot;立陶宛&quot;</span>,          <span class="hljs-string">&quot;Luxembourg&quot;</span>: <span class="hljs-string">&quot;卢森堡&quot;</span>,          <span class="hljs-string">&quot;Latvia&quot;</span>: <span class="hljs-string">&quot;拉脱维亚&quot;</span>,          <span class="hljs-string">&quot;Moldova&quot;</span>: <span class="hljs-string">&quot;摩尔多瓦&quot;</span>,          <span class="hljs-string">&quot;Madagascar&quot;</span>: <span class="hljs-string">&quot;马达加斯加&quot;</span>,          <span class="hljs-string">&quot;Mexico&quot;</span>: <span class="hljs-string">&quot;墨西哥&quot;</span>,          <span class="hljs-string">&quot;Macedonia&quot;</span>: <span class="hljs-string">&quot;马其顿&quot;</span>,          <span class="hljs-string">&quot;Mali&quot;</span>: <span class="hljs-string">&quot;马里&quot;</span>,          <span class="hljs-string">&quot;Malta&quot;</span>: <span class="hljs-string">&quot;马耳他&quot;</span>,          <span class="hljs-string">&quot;Myanmar&quot;</span>: <span class="hljs-string">&quot;缅甸&quot;</span>,          <span class="hljs-string">&quot;Montenegro&quot;</span>: <span class="hljs-string">&quot;黑山&quot;</span>,          <span class="hljs-string">&quot;Mongolia&quot;</span>: <span class="hljs-string">&quot;蒙古国&quot;</span>,          <span class="hljs-string">&quot;Mozambique&quot;</span>: <span class="hljs-string">&quot;莫桑比克&quot;</span>,          <span class="hljs-string">&quot;Mauritania&quot;</span>: <span class="hljs-string">&quot;毛里塔尼亚&quot;</span>,          <span class="hljs-string">&quot;Mauritius&quot;</span>: <span class="hljs-string">&quot;毛里求斯&quot;</span>,          <span class="hljs-string">&quot;Malawi&quot;</span>: <span class="hljs-string">&quot;马拉维&quot;</span>,          <span class="hljs-string">&quot;Malaysia&quot;</span>: <span class="hljs-string">&quot;马来西亚&quot;</span>,          <span class="hljs-string">&quot;Namibia&quot;</span>: <span class="hljs-string">&quot;纳米比亚&quot;</span>,          <span class="hljs-string">&quot;New Caledonia&quot;</span>: <span class="hljs-string">&quot;新喀里多尼亚&quot;</span>,          <span class="hljs-string">&quot;Niger&quot;</span>: <span class="hljs-string">&quot;尼日尔&quot;</span>,          <span class="hljs-string">&quot;Nigeria&quot;</span>: <span class="hljs-string">&quot;尼日利亚&quot;</span>,          <span class="hljs-string">&quot;Nicaragua&quot;</span>: <span class="hljs-string">&quot;尼加拉瓜&quot;</span>,          <span class="hljs-string">&quot;Netherlands&quot;</span>: <span class="hljs-string">&quot;荷兰&quot;</span>,          <span class="hljs-string">&quot;Norway&quot;</span>: <span class="hljs-string">&quot;挪威&quot;</span>,          <span class="hljs-string">&quot;Nepal&quot;</span>: <span class="hljs-string">&quot;尼泊尔&quot;</span>,          <span class="hljs-string">&quot;New Zealand&quot;</span>: <span class="hljs-string">&quot;新西兰&quot;</span>,          <span class="hljs-string">&quot;Oman&quot;</span>: <span class="hljs-string">&quot;阿曼&quot;</span>,          <span class="hljs-string">&quot;Pakistan&quot;</span>: <span class="hljs-string">&quot;巴基斯坦&quot;</span>,          <span class="hljs-string">&quot;Panama&quot;</span>: <span class="hljs-string">&quot;巴拿马&quot;</span>,          <span class="hljs-string">&quot;Peru&quot;</span>: <span class="hljs-string">&quot;秘鲁&quot;</span>,          <span class="hljs-string">&quot;Philippines&quot;</span>: <span class="hljs-string">&quot;菲律宾&quot;</span>,          <span class="hljs-string">&quot;Papua New Guinea&quot;</span>: <span class="hljs-string">&quot;巴布亚新几内亚&quot;</span>,          <span class="hljs-string">&quot;Poland&quot;</span>: <span class="hljs-string">&quot;波兰&quot;</span>,          <span class="hljs-string">&quot;Puerto Rico&quot;</span>: <span class="hljs-string">&quot;波多黎各&quot;</span>,          <span class="hljs-string">&quot;Dem. Rep. Korea&quot;</span>: <span class="hljs-string">&quot;朝鲜&quot;</span>,          <span class="hljs-string">&quot;Portugal&quot;</span>: <span class="hljs-string">&quot;葡萄牙&quot;</span>,          <span class="hljs-string">&quot;Paraguay&quot;</span>: <span class="hljs-string">&quot;巴拉圭&quot;</span>,          <span class="hljs-string">&quot;Palestine&quot;</span>: <span class="hljs-string">&quot;巴勒斯坦&quot;</span>,          <span class="hljs-string">&quot;Qatar&quot;</span>: <span class="hljs-string">&quot;卡塔尔&quot;</span>,          <span class="hljs-string">&quot;Romania&quot;</span>: <span class="hljs-string">&quot;罗马尼亚&quot;</span>,          <span class="hljs-string">&quot;Russia&quot;</span>: <span class="hljs-string">&quot;俄罗斯&quot;</span>,          <span class="hljs-string">&quot;Rwanda&quot;</span>: <span class="hljs-string">&quot;卢旺达&quot;</span>,          <span class="hljs-string">&quot;Saudi Arabia&quot;</span>: <span class="hljs-string">&quot;沙特阿拉伯&quot;</span>,          <span class="hljs-string">&quot;Sudan&quot;</span>: <span class="hljs-string">&quot;苏丹&quot;</span>,          <span class="hljs-string">&quot;S. Sudan&quot;</span>: <span class="hljs-string">&quot;南苏丹&quot;</span>,          <span class="hljs-string">&quot;Senegal&quot;</span>: <span class="hljs-string">&quot;塞内加尔&quot;</span>,          <span class="hljs-string">&quot;Singapore&quot;</span>: <span class="hljs-string">&quot;新加坡&quot;</span>,          <span class="hljs-string">&quot;Solomon Is.&quot;</span>: <span class="hljs-string">&quot;所罗门群岛&quot;</span>,          <span class="hljs-string">&quot;Sierra Leone&quot;</span>: <span class="hljs-string">&quot;塞拉利昂&quot;</span>,          <span class="hljs-string">&quot;El Salvador&quot;</span>: <span class="hljs-string">&quot;萨尔瓦多&quot;</span>,          <span class="hljs-string">&quot;Suriname&quot;</span>: <span class="hljs-string">&quot;苏里南&quot;</span>,          <span class="hljs-string">&quot;Slovakia&quot;</span>: <span class="hljs-string">&quot;斯洛伐克&quot;</span>,          <span class="hljs-string">&quot;Slovenia&quot;</span>: <span class="hljs-string">&quot;斯洛文尼亚&quot;</span>,          <span class="hljs-string">&quot;Sweden&quot;</span>: <span class="hljs-string">&quot;瑞典&quot;</span>,          <span class="hljs-string">&quot;Swaziland&quot;</span>: <span class="hljs-string">&quot;斯威士兰&quot;</span>,          <span class="hljs-string">&quot;Seychelles&quot;</span>: <span class="hljs-string">&quot;塞舌尔&quot;</span>,          <span class="hljs-string">&quot;Syria&quot;</span>: <span class="hljs-string">&quot;叙利亚&quot;</span>,          <span class="hljs-string">&quot;Chad&quot;</span>: <span class="hljs-string">&quot;乍得&quot;</span>,          <span class="hljs-string">&quot;Togo&quot;</span>: <span class="hljs-string">&quot;多哥&quot;</span>,          <span class="hljs-string">&quot;Thailand&quot;</span>: <span class="hljs-string">&quot;泰国&quot;</span>,          <span class="hljs-string">&quot;Tajikistan&quot;</span>: <span class="hljs-string">&quot;塔吉克斯坦&quot;</span>,          <span class="hljs-string">&quot;Turkmenistan&quot;</span>: <span class="hljs-string">&quot;土库曼斯坦&quot;</span>,          <span class="hljs-string">&quot;Timor-Leste&quot;</span>: <span class="hljs-string">&quot;东帝汶&quot;</span>,          <span class="hljs-string">&quot;Tonga&quot;</span>: <span class="hljs-string">&quot;汤加&quot;</span>,          <span class="hljs-string">&quot;Trinidad and Tobago&quot;</span>: <span class="hljs-string">&quot;特立尼达和多巴哥&quot;</span>,          <span class="hljs-string">&quot;Tunisia&quot;</span>: <span class="hljs-string">&quot;突尼斯&quot;</span>,          <span class="hljs-string">&quot;Turkey&quot;</span>: <span class="hljs-string">&quot;土耳其&quot;</span>,          <span class="hljs-string">&quot;Tanzania&quot;</span>: <span class="hljs-string">&quot;坦桑尼亚&quot;</span>,          <span class="hljs-string">&quot;Uganda&quot;</span>: <span class="hljs-string">&quot;乌干达&quot;</span>,          <span class="hljs-string">&quot;Ukraine&quot;</span>: <span class="hljs-string">&quot;乌克兰&quot;</span>,          <span class="hljs-string">&quot;Uruguay&quot;</span>: <span class="hljs-string">&quot;乌拉圭&quot;</span>,          <span class="hljs-string">&quot;United States&quot;</span>: <span class="hljs-string">&quot;美国&quot;</span>,          <span class="hljs-string">&quot;Uzbekistan&quot;</span>: <span class="hljs-string">&quot;乌兹别克斯坦&quot;</span>,          <span class="hljs-string">&quot;Venezuela&quot;</span>: <span class="hljs-string">&quot;委内瑞拉&quot;</span>,          <span class="hljs-string">&quot;Vietnam&quot;</span>: <span class="hljs-string">&quot;越南&quot;</span>,          <span class="hljs-string">&quot;Vanuatu&quot;</span>: <span class="hljs-string">&quot;瓦努阿图&quot;</span>,          <span class="hljs-string">&quot;Yemen&quot;</span>: <span class="hljs-string">&quot;也门&quot;</span>,          <span class="hljs-string">&quot;South Africa&quot;</span>: <span class="hljs-string">&quot;南非&quot;</span>,          <span class="hljs-string">&quot;Zambia&quot;</span>: <span class="hljs-string">&quot;赞比亚&quot;</span>,          <span class="hljs-string">&quot;Zimbabwe&quot;</span>: <span class="hljs-string">&quot;津巴布韦&quot;</span>,          <span class="hljs-string">&quot;Aland&quot;</span>: <span class="hljs-string">&quot;奥兰群岛&quot;</span>,          <span class="hljs-string">&quot;American Samoa&quot;</span>: <span class="hljs-string">&quot;美属萨摩亚&quot;</span>,          <span class="hljs-string">&quot;Fr. S. Antarctic Lands&quot;</span>: <span class="hljs-string">&quot;南极洲&quot;</span>,          <span class="hljs-string">&quot;Antigua and Barb.&quot;</span>: <span class="hljs-string">&quot;安提瓜和巴布达&quot;</span>,          <span class="hljs-string">&quot;Comoros&quot;</span>: <span class="hljs-string">&quot;科摩罗&quot;</span>,          <span class="hljs-string">&quot;Curaçao&quot;</span>: <span class="hljs-string">&quot;库拉索岛&quot;</span>,          <span class="hljs-string">&quot;Cayman Is.&quot;</span>: <span class="hljs-string">&quot;开曼群岛&quot;</span>,          <span class="hljs-string">&quot;Dominica&quot;</span>: <span class="hljs-string">&quot;多米尼加&quot;</span>,          <span class="hljs-string">&quot;Falkland Is.&quot;</span>: <span class="hljs-string">&quot;福克兰群岛马尔维纳斯&quot;</span>,          <span class="hljs-string">&quot;Faeroe Is.&quot;</span>: <span class="hljs-string">&quot;法罗群岛&quot;</span>,          <span class="hljs-string">&quot;Micronesia&quot;</span>: <span class="hljs-string">&quot;密克罗尼西亚&quot;</span>,          <span class="hljs-string">&quot;Heard I. and McDonald Is.&quot;</span>: <span class="hljs-string">&quot;赫德岛和麦克唐纳群岛&quot;</span>,          <span class="hljs-string">&quot;Isle of Man&quot;</span>: <span class="hljs-string">&quot;曼岛&quot;</span>,          <span class="hljs-string">&quot;Jersey&quot;</span>: <span class="hljs-string">&quot;泽西岛&quot;</span>,          <span class="hljs-string">&quot;Kiribati&quot;</span>: <span class="hljs-string">&quot;基里巴斯&quot;</span>,          <span class="hljs-string">&quot;Saint Lucia&quot;</span>: <span class="hljs-string">&quot;圣卢西亚&quot;</span>,          <span class="hljs-string">&quot;N. Mariana Is.&quot;</span>: <span class="hljs-string">&quot;北马里亚纳群岛&quot;</span>,          <span class="hljs-string">&quot;Montserrat&quot;</span>: <span class="hljs-string">&quot;蒙特塞拉特&quot;</span>,          <span class="hljs-string">&quot;Niue&quot;</span>: <span class="hljs-string">&quot;纽埃&quot;</span>,          <span class="hljs-string">&quot;Palau&quot;</span>: <span class="hljs-string">&quot;帕劳&quot;</span>,          <span class="hljs-string">&quot;Fr. Polynesia&quot;</span>: <span class="hljs-string">&quot;法属波利尼西亚&quot;</span>,          <span class="hljs-string">&quot;S. Geo. and S. Sandw. Is.&quot;</span>: <span class="hljs-string">&quot;南乔治亚岛和南桑威奇群岛&quot;</span>,          <span class="hljs-string">&quot;Saint Helena&quot;</span>: <span class="hljs-string">&quot;圣赫勒拿&quot;</span>,          <span class="hljs-string">&quot;St. Pierre and Miquelon&quot;</span>: <span class="hljs-string">&quot;圣皮埃尔和密克隆群岛&quot;</span>,          <span class="hljs-string">&quot;São Tomé and Principe&quot;</span>: <span class="hljs-string">&quot;圣多美和普林西比&quot;</span>,          <span class="hljs-string">&quot;Turks and Caicos Is.&quot;</span>: <span class="hljs-string">&quot;特克斯和凯科斯群岛&quot;</span>,          <span class="hljs-string">&quot;St. Vin. and Gren.&quot;</span>: <span class="hljs-string">&quot;圣文森特和格林纳丁斯&quot;</span>,          <span class="hljs-string">&quot;U.S. Virgin Is.&quot;</span>: <span class="hljs-string">&quot;美属维尔京群岛&quot;</span>,          <span class="hljs-string">&quot;Samoa&quot;</span>: <span class="hljs-string">&quot;萨摩亚&quot;</span>        &#125;    pieces = [        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#FFFFFF&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">49</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;1-49&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#FFE5DB&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;50-99&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#FFC4B3&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">999</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;100-999&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#FF9985&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">9999</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;1000-9999&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#F57567&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">99999</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">10000</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;10000-99999&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#E64546&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">999999</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">100000</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;100000-999999&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#B80909&#x27;</span>&#125;,        &#123;<span class="hljs-string">&#x27;max&#x27;</span>: <span class="hljs-number">9999999</span>, <span class="hljs-string">&#x27;min&#x27;</span>: <span class="hljs-number">1000000</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;≧1000000&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;#8A0808&#x27;</span>&#125;    ]    gt_map = (        Map()        .add(series_name=<span class="hljs-string">&#x27;累计确诊人数&#x27;</span>, data_pair=[<span class="hljs-built_in">list</span>(z) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(country, curconfirm)], maptype=<span class="hljs-string">&quot;world&quot;</span>, name_map=name_map, is_map_symbol_show=<span class="hljs-literal">False</span>)        .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>))        .set_global_opts(            title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;全球疫情数据（累计确诊）&quot;</span>,                                      subtitle=<span class="hljs-string">&#x27;数据更新至：&#x27;</span> + time_global + <span class="hljs-string">&#x27;\n\n来源：百度疫情实时大数据报告&#x27;</span>),            visualmap_opts=opts.VisualMapOpts(max_=<span class="hljs-number">300</span>, is_piecewise=<span class="hljs-literal">True</span>, pieces=pieces),        )    )    <span class="hljs-keyword">return</span> gt_map</code></pre><h3><span id="7x03-zhong-guo-mei-ri-shu-ju-zhe-xian-tu-china-daily-map"><font color="#4876FF">【7x03】中国每日数据折线图 china_daily_map()</font></span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">china_daily_map</span>():</span>    wb = openpyxl.load_workbook(<span class="hljs-string">&#x27;COVID-19-China.xlsx&#x27;</span>)    ws_china_confirmed = wb[<span class="hljs-string">&#x27;中国每日累计确诊数据&#x27;</span>]    ws_china_crued = wb[<span class="hljs-string">&#x27;中国每日累计治愈数据&#x27;</span>]    ws_china_died = wb[<span class="hljs-string">&#x27;中国每日累计死亡数据&#x27;</span>]    ws_china_confirmed.delete_rows(<span class="hljs-number">1</span>)    ws_china_crued.delete_rows(<span class="hljs-number">1</span>)    ws_china_died.delete_rows(<span class="hljs-number">1</span>)    x_date = []               <span class="hljs-comment"># 日期</span>    y_china_confirmed = []    <span class="hljs-comment"># 每日累计确诊</span>    y_china_crued = []        <span class="hljs-comment"># 每日累计治愈</span>    y_china_died = []         <span class="hljs-comment"># 每日累计死亡</span>    <span class="hljs-keyword">for</span> china_confirmed <span class="hljs-keyword">in</span> ws_china_confirmed.values:        y_china_confirmed.append(china_confirmed[<span class="hljs-number">1</span>])    <span class="hljs-keyword">for</span> china_crued <span class="hljs-keyword">in</span> ws_china_crued.values:        x_date.append(china_crued[<span class="hljs-number">0</span>])        y_china_crued.append(china_crued[<span class="hljs-number">1</span>])    <span class="hljs-keyword">for</span> china_died <span class="hljs-keyword">in</span> ws_china_died.values:        y_china_died.append(china_died[<span class="hljs-number">1</span>])    fi_map = (        Line(init_opts=opts.InitOpts(height=<span class="hljs-string">&#x27;420px&#x27;</span>))            .add_xaxis(xaxis_data=x_date)            .add_yaxis(            series_name=<span class="hljs-string">&quot;中国累计确诊数据&quot;</span>,            y_axis=y_china_confirmed,            label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>),        )            .add_yaxis(            series_name=<span class="hljs-string">&quot;中国累计治愈趋势&quot;</span>,            y_axis=y_china_crued,            label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>),        )            .add_yaxis(            series_name=<span class="hljs-string">&quot;中国累计死亡趋势&quot;</span>,            y_axis=y_china_died,            label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>),        )            .set_global_opts(            title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国每日累计确诊/治愈/死亡趋势&quot;</span>),            legend_opts=opts.LegendOpts(pos_bottom=<span class="hljs-string">&quot;bottom&quot;</span>, orient=<span class="hljs-string">&#x27;horizontal&#x27;</span>),            tooltip_opts=opts.TooltipOpts(trigger=<span class="hljs-string">&quot;axis&quot;</span>),            yaxis_opts=opts.AxisOpts(                type_=<span class="hljs-string">&quot;value&quot;</span>,                axistick_opts=opts.AxisTickOpts(is_show=<span class="hljs-literal">True</span>),                splitline_opts=opts.SplitLineOpts(is_show=<span class="hljs-literal">True</span>),            ),            xaxis_opts=opts.AxisOpts(type_=<span class="hljs-string">&quot;category&quot;</span>, boundary_gap=<span class="hljs-literal">False</span>),        )    )    <span class="hljs-keyword">return</span> fi_map</code></pre><h3><span id="7x04-jing-wai-mei-ri-shu-ju-zhe-xian-tu-foreign-daily-map"><font color="#4876FF">【7x04】境外每日数据折线图 foreign_daily_map()</font></span></h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foreign_daily_map</span>():</span>    wb = openpyxl.load_workbook(<span class="hljs-string">&#x27;COVID-19-Global.xlsx&#x27;</span>)    ws_foreign_confirmed = wb[<span class="hljs-string">&#x27;境外每日累计确诊数据&#x27;</span>]    ws_foreign_crued = wb[<span class="hljs-string">&#x27;境外每日累计治愈数据&#x27;</span>]    ws_foreign_died = wb[<span class="hljs-string">&#x27;境外每日累计死亡数据&#x27;</span>]    ws_foreign_confirmed.delete_rows(<span class="hljs-number">1</span>)    ws_foreign_crued.delete_rows(<span class="hljs-number">1</span>)    ws_foreign_died.delete_rows(<span class="hljs-number">1</span>)    x_date = []                <span class="hljs-comment"># 日期</span>    y_foreign_confirmed = []   <span class="hljs-comment"># 累计确诊</span>    y_foreign_crued = []       <span class="hljs-comment"># 累计治愈</span>    y_foreign_died = []        <span class="hljs-comment"># 累计死亡</span>    <span class="hljs-keyword">for</span> foreign_confirmed <span class="hljs-keyword">in</span> ws_foreign_confirmed.values:        y_foreign_confirmed.append(foreign_confirmed[<span class="hljs-number">1</span>])    <span class="hljs-keyword">for</span> foreign_crued <span class="hljs-keyword">in</span> ws_foreign_crued.values:        x_date.append(foreign_crued[<span class="hljs-number">0</span>])        y_foreign_crued.append(foreign_crued[<span class="hljs-number">1</span>])    <span class="hljs-keyword">for</span> foreign_died <span class="hljs-keyword">in</span> ws_foreign_died.values:        y_foreign_died.append(foreign_died[<span class="hljs-number">1</span>])    fte_map = (        Line(init_opts=opts.InitOpts(height=<span class="hljs-string">&#x27;420px&#x27;</span>))            .add_xaxis(xaxis_data=x_date)            .add_yaxis(            series_name=<span class="hljs-string">&quot;境外累计确诊趋势&quot;</span>,            y_axis=y_foreign_confirmed,            label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>),        )            .add_yaxis(            series_name=<span class="hljs-string">&quot;境外累计治愈趋势&quot;</span>,            y_axis=y_foreign_crued,            label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>),        )            .add_yaxis(            series_name=<span class="hljs-string">&quot;境外累计死亡趋势&quot;</span>,            y_axis=y_foreign_died,            label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>),        )            .set_global_opts(            title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;境外每日累计确诊/治愈/死亡趋势&quot;</span>),            legend_opts=opts.LegendOpts(pos_bottom=<span class="hljs-string">&quot;bottom&quot;</span>, orient=<span class="hljs-string">&#x27;horizontal&#x27;</span>),            tooltip_opts=opts.TooltipOpts(trigger=<span class="hljs-string">&quot;axis&quot;</span>),            yaxis_opts=opts.AxisOpts(                type_=<span class="hljs-string">&quot;value&quot;</span>,                axistick_opts=opts.AxisTickOpts(is_show=<span class="hljs-literal">True</span>),                splitline_opts=opts.SplitLineOpts(is_show=<span class="hljs-literal">True</span>),            ),            xaxis_opts=opts.AxisOpts(type_=<span class="hljs-string">&quot;category&quot;</span>, boundary_gap=<span class="hljs-literal">False</span>),        )    )    <span class="hljs-keyword">return</span> fte_map</code></pre><h2><span id="8x00-jie-guo-jie-tu"><font color="#FF0000">【8x00】结果截图</font></span></h2><h3><span id="8x01-shu-ju-chu-cun-excel"><font color="#4876FF">【8x01】数据储存 Excel</font></span></h3><p><img src="https://cdn.itbob.cn/img/article/035/03.png" alt="03"></p><p><img src="https://cdn.itbob.cn/img/article/035/04.png" alt="04"></p><h3><span id="8x02-ci-yun-tu"><font color="#4876FF">【8x02】词云图</font></span></h3><p><img src="https://cdn.itbob.cn/img/article/035/05.png" alt="05"></p><p><img src="https://cdn.itbob.cn/img/article/035/06.png" alt="06"></p><h3><span id="8x03-di-tu-zhe-xian-tu"><font color="#4876FF">【8x03】地图 + 折线图</font></span></h3><p><img src="https://cdn.itbob.cn/img/article/035/07.png" alt="07"></p><h2><span id="9x00-wan-zheng-dai-ma"><font color="#FF0000">【9x00】完整代码</font></span></h2><p>预览地址：<s><a href="http://cov.itrhx.com/">http://cov.itrhx.com/</a></s>（已失效）<br>完整代码地址（点亮 star 有 buff 加成）：<a href="https://github.com/TRHX/Python3-Spider-Practice">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278">https://itrhx.blog.csdn.net/article/category/9351278</a></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/107140534</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Pandas（十）：数据读写</title>
      <link href="/article/034/"/>
      <url>/article/034/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01x00-du-qu-shu-ju-font"><font color="#FF0000">【01x00】读取数据</font></a><ul><li><a href="#font-color-4876ff-01x01-jian-dan-shi-li-font"><font color="#4876FF">【01x01】简单示例</font></a></li><li><a href="#font-color-4876ff-01x02-header-names-ding-zhi-lie-biao-qian-font"><font color="#4876FF">【01x02】header / names 定制列标签</font></a></li><li><a href="#font-color-4876ff-01x03-index-col-zhi-ding-lie-wei-xing-suo-yin-font"><font color="#4876FF">【01x03】index_col 指定列为行索引</font></a></li><li><a href="#font-color-4876ff-01x04-sep-zhi-ding-fen-ge-fu-font"><font color="#4876FF">【01x04】sep 指定分隔符</font></a></li><li><a href="#font-color-4876ff-01x05-skiprows-hu-lue-xing-font"><font color="#4876FF">【01x05】skiprows 忽略行</font></a></li><li><a href="#font-color-4876ff-01x06-na-values-she-zhi-que-shi-zhi-font"><font color="#4876FF">【01x06】na_values 设置缺失值</font></a></li><li><a href="#font-color-4876ff-01x07-nrows-chunksize-xing-yu-kuai-font"><font color="#4876FF">【01x07】nrows / chunksize 行与块</font></a></li></ul></li><li><a href="#font-color-ff0000-02x00-xie-ru-shu-ju-font"><font color="#FF0000">【02x00】写入数据</font></a><ul><li><a href="#font-color-4876ff-02x01-jian-dan-shi-li-font"><font color="#4876FF">【02x01】简单示例</font></a></li><li><a href="#font-color-4876ff-02x02-sep-zhi-ding-fen-ge-fu-font"><font color="#4876FF">【02x02】sep 指定分隔符</font></a></li><li><a href="#font-color-4876ff-02x03-na-rep-ti-huan-que-shi-zhi-font"><font color="#4876FF">【02x03】na_rep 替换缺失值</font></a></li><li><a href="#font-color-4876ff-02x04-index-header-xing-yu-lie-biao-qian-font"><font color="#4876FF">【02x04】index / header 行与列标签</font></a></li><li><a href="#font-color-4876ff-02x05-columns-zhi-ding-lie-font"><font color="#4876FF">【02x05】columns 指定列</font></a></li></ul></li></ul><!-- tocstop --><hr><p>Pandas 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/025/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itbob.cn/article/026/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itbob.cn/article/027/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itbob.cn/article/028/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itbob.cn/article/029/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itbob.cn/article/030/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itbob.cn/article/031/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itbob.cn/article/032/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itbob.cn/article/033/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itbob.cn/article/034/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106963135</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01x00-du-qu-shu-ju"><font color="#FF0000">【01x00】读取数据</font></span></h2><p>Pandas 提供了一些用于将表格型数据读取为 DataFrame 对象的函数。常见方法如下：</p><p>Pandas 官方对 IO 工具的介绍：<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html">https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html</a></p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>read_csv</td><td>从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为逗号</td></tr><tr><td>read_table</td><td>从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为制表符（<code>'\t'</code>）</td></tr><tr><td>read_fwf</td><td>读取定宽列格式数据（没有分隔符）</td></tr><tr><td>read_clipboard</td><td>读取剪贴板中的数据，可以看做 read_table 的剪贴板版本。在将网页转换为表格时很有用</td></tr><tr><td>read_excel</td><td>从 Excel XLS 或 XLSX file 读取表格数据</td></tr><tr><td>read_hdf</td><td>读取 pandas写的 HDF5 文件</td></tr><tr><td>read_html</td><td>读取 HTML 文档中的所有表格</td></tr><tr><td>read_json</td><td>读取 JSON（ JavaScript Object Notation）字符串中的数据</td></tr><tr><td>read_msgpack</td><td>读取二进制格式编码的 pandas 数据（Pandas v1.0.0 中已删除对 msgpack 的支持，建议使用 <a href="https://pandas.pydata.org/docs/user_guide/io.html#io-msgpack">pyarrow</a>）</td></tr><tr><td>read_pickle</td><td>读取 Python pickle 格式中存储的任意对象</td></tr><tr><td>read_sas</td><td>读取存储于 SAS 系统自定义存储格式的 SAS 数据集</td></tr><tr><td>read_sql</td><td>（使用 SQLAlchemy）读取 SQL 查询结果为 pandas 的 DataFrame</td></tr><tr><td>read_stata</td><td>读取 Stata 文件格式的数据集</td></tr><tr><td>read_feather</td><td>读取 Feather 二进制格式文件</td></tr></tbody></table><p>以下以 read_csv 和 read_table 为例，它们的参数多达 50 多个，具体可参见官方文档：</p><p>read_csv：<a href="https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html">https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html</a></p><p>read_table：<a href="https://pandas.pydata.org/docs/reference/api/pandas.read_table.html">https://pandas.pydata.org/docs/reference/api/pandas.read_table.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>表示文件系统位置、URL、文件型对象的字符串</td></tr><tr><td>sep / delimiter</td><td>用于对行中各字段进行拆分的字符序列或正则表达式</td></tr><tr><td>header</td><td>用作列名的行号，默认为 0（第一行），如果没有 header 行就应该设置为 None</td></tr><tr><td>index_col</td><td>用作行索引的列编号或列名。可以是单个名称、数字或由多个名称、数字组成的列表（层次化索引）</td></tr><tr><td>names</td><td>用于结果的列名列表，结合 header=None</td></tr><tr><td>skiprows</td><td>需要忽略的行数（从文件开始处算起），或需要跳过的行号列表（从0开始）</td></tr><tr><td>na_values</td><td>指定一组值，将该组值设置为 NaN（缺失值）</td></tr><tr><td>comment</td><td>用于将注释信息从行尾拆分出去的字符（一个或多个）</td></tr><tr><td>parse_dates</td><td>尝试将数据解析为日期，默认为 False。如果为 True，则尝试解析所有列。此外，还可以指定需要解析的一组列号或列名。<br>如果列表的元素为列表或元组，就会将多个列组合到一起再进行日期解析工作（例如，日期、时间分别位于两个列中）</td></tr><tr><td>keep_date_col</td><td>如果连接多列解析日期，则保持参与连接的列。默认为 False</td></tr><tr><td>converters</td><td>由列号 / 列名跟函数之间的映射关系组成的字典。例如，<code>&#123;'foo': f&#125;</code> 会对 foo 列的所有值应用函数 f</td></tr><tr><td>dayfirst</td><td>当解析有歧义的日期时，将其看做国际格式（例如，7/6/2012 —&gt; June 7,2012），默认为 Fase</td></tr><tr><td>date_parser</td><td>用于解析日期的函数</td></tr><tr><td>nrows</td><td>需要读取的行数（从文件开始处算起）</td></tr><tr><td>iterator</td><td>返回一个 TextParser 以便逐块读取文件</td></tr><tr><td>chunksize</td><td>文件块的大小（用于迭代）</td></tr><tr><td>skip_footer</td><td>需要忽略的行数（从文件末尾处算起）</td></tr><tr><td>verbose</td><td>打印各种解析器输出信息，比如“非数值列中缺失值的数量”等</td></tr><tr><td>encoding</td><td>用于 unicode 的文本编码格式。例如，“utf-8” 表示用 UTF-8 编码的文本</td></tr><tr><td>squeeze</td><td>如果数据经解析后仅含一列，则返回 Series</td></tr><tr><td>thousands</td><td>千分位分隔符，如 <code>,</code> 或 <code>.</code></td></tr></tbody></table><h3><span id="01x01-jian-dan-shi-li"><font color="#4876FF">【01x01】简单示例</font></span></h3><p>首先创建一个 test1.csv 文件：</p><p><img src="https://cdn.itbob.cn/img/article/034/01.png" alt="01"></p><p>使用 read_csv 方法将其读出为一个 DataFrame 对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test1.csv&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj   a   b   c   d message<span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   hello<span class="hljs-number">1</span>  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  python<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(obj)&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span></code></pre><p>前面的 csv 文件是以逗号分隔的，可以使用 read_table 方法并指定分隔符来读取：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.read_table(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test1.csv&#x27;</span>, sep=<span class="hljs-string">&#x27;,&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj   a   b   c   d message<span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   hello<span class="hljs-number">1</span>  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  python</code></pre><h3><span id="01x02-header-names-ding-zhi-lie-biao-qian"><font color="#4876FF">【01x02】header / names 定制列标签</font></span></h3><p>以上示例中第一行为列标签，如果没有单独定义列标签，使用 read_csv 方法也会默认将第一行当作列标签：</p><p><img src="https://cdn.itbob.cn/img/article/034/02.png" alt="02"></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test2.csv&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   hello<span class="hljs-number">0</span>  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   world<span class="hljs-number">1</span>  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  python</code></pre><p>避免以上情况，可以设置 <code>header=None</code>，Pandas 会为其自动分配列标签：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test2.csv&#x27;</span>, header=<span class="hljs-literal">None</span>)   <span class="hljs-number">0</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>       <span class="hljs-number">4</span><span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   hello<span class="hljs-number">1</span>  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  python</code></pre><p>也可以使用 <code>names</code> 参数自定义列标签，传递的是一个列表：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test2.csv&#x27;</span>, names=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>])   a   b   c   d message<span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   hello<span class="hljs-number">1</span>  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  python</code></pre><h3><span id="01x03-index-col-zhi-ding-lie-wei-xing-suo-yin"><font color="#4876FF">【01x03】index_col 指定列为行索引</font></span></h3><p><code>index_col</code> 参数可以指定某一列作为 DataFrame 的行索引，传递的参数是列名称，在以下示例中，会将列名为 <code>message</code> 的列作为 DataFrame 的行索引：</p><p><img src="https://cdn.itbob.cn/img/article/034/03.png" alt="03"></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test2.csv&#x27;</span>,                 names=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span>],                 index_col=<span class="hljs-string">&#x27;message&#x27;</span>)         a   b   c   dmessage               hello    <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>world    <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>python   <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span></code></pre><p>如果需要构造多层索引的 DataFrame 对象，则只需传入由列编号或列名组成的列表即可：</p><p><img src="https://cdn.itbob.cn/img/article/034/04.png" alt="04"></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test3.csv&#x27;</span>, index_col=[<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>])           value1  value2key1 key2                one  a          <span class="hljs-number">1</span>       <span class="hljs-number">2</span>     b          <span class="hljs-number">3</span>       <span class="hljs-number">4</span>     c          <span class="hljs-number">5</span>       <span class="hljs-number">6</span>     d          <span class="hljs-number">7</span>       <span class="hljs-number">8</span>two  a          <span class="hljs-number">9</span>      <span class="hljs-number">10</span>     b         <span class="hljs-number">11</span>      <span class="hljs-number">12</span>     c         <span class="hljs-number">13</span>      <span class="hljs-number">14</span>     d         <span class="hljs-number">15</span>      <span class="hljs-number">16</span></code></pre><h3><span id="01x04-sep-zhi-ding-fen-ge-fu"><font color="#4876FF">【01x04】sep 指定分隔符</font></span></h3><p>在 read_table 中，sep 参数用于接收分隔符，如果遇到不是用固定的分隔符去分隔字段的，也可以传递一个正则表达式作为 read_table 的分隔符，如下面的 txt 文件数据之间是由不同的空白字符间隔开的：</p><p><img src="https://cdn.itbob.cn/img/article/034/05.png" alt="05"></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.read_table(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test1.txt&#x27;</span>, sep=<span class="hljs-string">&#x27;\s+&#x27;</span>)            A         B         Caaa -<span class="hljs-number">0.264438</span> -<span class="hljs-number">1.026059</span> -<span class="hljs-number">0.619500</span>bbb  <span class="hljs-number">0.927272</span>  <span class="hljs-number">0.302904</span> -<span class="hljs-number">0.032399</span>ccc -<span class="hljs-number">0.264273</span> -<span class="hljs-number">0.386314</span> -<span class="hljs-number">0.217601</span>ddd -<span class="hljs-number">0.871858</span> -<span class="hljs-number">0.348382</span>  <span class="hljs-number">1.100491</span></code></pre><h3><span id="01x05-skiprows-hu-lue-xing"><font color="#4876FF">【01x05】skiprows 忽略行</font></span></h3><p>skiprows参数可用于设置需要忽略的行数，或需要跳过的行号列表，在下面的示例中，读取文件时选择跳过第1、3、4行（索引值分别为0、2、3）：</p><p><img src="https://cdn.itbob.cn/img/article/034/06.png" alt="06"></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test4.csv&#x27;</span>, skiprows=[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])   a   b   c   d message<span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   hello<span class="hljs-number">1</span>  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span>  <span class="hljs-number">12</span>  python</code></pre><h3><span id="01x06-na-values-she-zhi-que-shi-zhi"><font color="#4876FF">【01x06】na_values 设置缺失值</font></span></h3><p>当文件中出现了空字符串或者 NA 值，Pandas 会将其标记成 NaN（缺失值），同样也可以使用 <code>isnull</code> 方法来判断结果值是否为缺失值：</p><p><img src="https://cdn.itbob.cn/img/article/034/07.png" alt="07"></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test5.csv&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  something  a   b     c   d message<span class="hljs-number">0</span>       one  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3.0</span>   <span class="hljs-number">4</span>     NaN<span class="hljs-number">1</span>       two  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   NaN   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>     three  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">12</span>  python<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.isnull(obj)   something      a      b      c      d  message<span class="hljs-number">0</span>      <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>     <span class="hljs-literal">True</span><span class="hljs-number">1</span>      <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>   <span class="hljs-literal">True</span>  <span class="hljs-literal">False</span>    <span class="hljs-literal">False</span><span class="hljs-number">2</span>      <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>    <span class="hljs-literal">False</span></code></pre><p><code>na_values</code> 方法可以传递一组值，将这组值设置为缺失值，如果传递的为字典对象，则字典的各值将被设置为 NaN：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test5.csv&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  something  a   b     c   d message<span class="hljs-number">0</span>       one  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3.0</span>   <span class="hljs-number">4</span>     NaN<span class="hljs-number">1</span>       two  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   NaN   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>     three  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">12</span>  python<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test5.csv&#x27;</span>, na_values=[<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2  something    a   b     c    d message<span class="hljs-number">0</span>       one  NaN   <span class="hljs-number">2</span>   <span class="hljs-number">3.0</span>  <span class="hljs-number">4.0</span>     NaN<span class="hljs-number">1</span>       two  <span class="hljs-number">5.0</span>   <span class="hljs-number">6</span>   NaN  <span class="hljs-number">8.0</span>   world<span class="hljs-number">2</span>     three  <span class="hljs-number">9.0</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11.0</span>  NaN  python<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>sentinels = &#123;<span class="hljs-string">&#x27;message&#x27;</span>: [<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>], <span class="hljs-string">&#x27;something&#x27;</span>: [<span class="hljs-string">&#x27;two&#x27;</span>]&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj3 = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test5.csv&#x27;</span>, na_values=sentinels)<span class="hljs-meta">&gt;&gt;&gt; </span>obj3  something  a   b     c   d  message<span class="hljs-number">0</span>       one  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3.0</span>   <span class="hljs-number">4</span>      NaN<span class="hljs-number">1</span>       NaN  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   NaN   <span class="hljs-number">8</span>      NaN<span class="hljs-number">2</span>     three  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">12</span>      NaN</code></pre><h3><span id="01x07-nrows-chunksize-xing-yu-kuai"><font color="#4876FF">【01x07】nrows / chunksize 行与块</font></span></h3><p>以下 test6.csv 文件中包含 50 行数据：</p><p><img src="https://cdn.itbob.cn/img/article/034/08.png" alt="08"></p><p>可以设置 <code>pd.options.display.max_rows</code> 来紧凑地显示指定行数的数据：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.options.display.max_rows = <span class="hljs-number">10</span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test6.csv&#x27;</span>)         one       two     three      four key<span class="hljs-number">0</span>   <span class="hljs-number">0.467976</span> -<span class="hljs-number">0.038649</span> -<span class="hljs-number">0.295344</span> -<span class="hljs-number">1.824726</span>   L<span class="hljs-number">1</span>  -<span class="hljs-number">0.358893</span>  <span class="hljs-number">1.404453</span>  <span class="hljs-number">0.704965</span> -<span class="hljs-number">0.200638</span>   B<span class="hljs-number">2</span>  -<span class="hljs-number">0.501840</span>  <span class="hljs-number">0.659254</span> -<span class="hljs-number">0.421691</span> -<span class="hljs-number">0.057688</span>   G<span class="hljs-number">3</span>   <span class="hljs-number">0.204886</span>  <span class="hljs-number">1.074134</span>  <span class="hljs-number">1.388361</span> -<span class="hljs-number">0.982404</span>   R<span class="hljs-number">4</span>   <span class="hljs-number">0.354628</span> -<span class="hljs-number">0.133116</span>  <span class="hljs-number">0.283763</span> -<span class="hljs-number">0.837063</span>   Q..       ...       ...       ...       ...  ..<span class="hljs-number">45</span>  <span class="hljs-number">2.311896</span> -<span class="hljs-number">0.417070</span> -<span class="hljs-number">1.409599</span> -<span class="hljs-number">0.515821</span>   L<span class="hljs-number">46</span> -<span class="hljs-number">0.479893</span> -<span class="hljs-number">0.633419</span>  <span class="hljs-number">0.745152</span> -<span class="hljs-number">0.646038</span>   E<span class="hljs-number">47</span>  <span class="hljs-number">0.523331</span>  <span class="hljs-number">0.787112</span>  <span class="hljs-number">0.486066</span>  <span class="hljs-number">1.093156</span>   K<span class="hljs-number">48</span> -<span class="hljs-number">0.362559</span>  <span class="hljs-number">0.598894</span> -<span class="hljs-number">1.843201</span>  <span class="hljs-number">0.887292</span>   G<span class="hljs-number">49</span> -<span class="hljs-number">0.096376</span> -<span class="hljs-number">1.012999</span> -<span class="hljs-number">0.657431</span> -<span class="hljs-number">0.573315</span>   <span class="hljs-number">0</span>[<span class="hljs-number">50</span> rows x <span class="hljs-number">5</span> columns]</code></pre><p>通过 nrows 参数可以读取指定行数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test6.csv&#x27;</span>, nrows=<span class="hljs-number">5</span>)        one       two     three      four key<span class="hljs-number">0</span>  <span class="hljs-number">0.467976</span> -<span class="hljs-number">0.038649</span> -<span class="hljs-number">0.295344</span> -<span class="hljs-number">1.824726</span>   L<span class="hljs-number">1</span> -<span class="hljs-number">0.358893</span>  <span class="hljs-number">1.404453</span>  <span class="hljs-number">0.704965</span> -<span class="hljs-number">0.200638</span>   B<span class="hljs-number">2</span> -<span class="hljs-number">0.501840</span>  <span class="hljs-number">0.659254</span> -<span class="hljs-number">0.421691</span> -<span class="hljs-number">0.057688</span>   G<span class="hljs-number">3</span>  <span class="hljs-number">0.204886</span>  <span class="hljs-number">1.074134</span>  <span class="hljs-number">1.388361</span> -<span class="hljs-number">0.982404</span>   R<span class="hljs-number">4</span>  <span class="hljs-number">0.354628</span> -<span class="hljs-number">0.133116</span>  <span class="hljs-number">0.283763</span> -<span class="hljs-number">0.837063</span>   Q</code></pre><p>要逐块读取文件，可以指定 chunksize（行数）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>chunker = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test6.csv&#x27;</span>, chunksize=<span class="hljs-number">50</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>chunker&lt;pandas.io.parsers.TextFileReader <span class="hljs-built_in">object</span> at <span class="hljs-number">0x07A20D60</span>&gt;</code></pre><p>返回的 TextParser 对象，可以根据 chunksize 对文件进行逐块迭代。以下示例中，对 test6.csv 文件数据进行迭代处理，将值计数聚合到 “key” 列中：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>chunker = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test6.csv&#x27;</span>, chunksize=<span class="hljs-number">50</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>tot = pd.Series([], dtype=<span class="hljs-string">&#x27;float64&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> piece <span class="hljs-keyword">in</span> chunker:    tot = tot.add(piece[<span class="hljs-string">&#x27;key&#x27;</span>].value_counts(), fill_value=<span class="hljs-number">0</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>tot = tot.sort_values(ascending=<span class="hljs-literal">False</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>tot[:<span class="hljs-number">10</span>]G    <span class="hljs-number">6.0</span>E    <span class="hljs-number">5.0</span>B    <span class="hljs-number">5.0</span>L    <span class="hljs-number">5.0</span><span class="hljs-number">0</span>    <span class="hljs-number">5.0</span>K    <span class="hljs-number">4.0</span>A    <span class="hljs-number">4.0</span>R    <span class="hljs-number">4.0</span>C    <span class="hljs-number">2.0</span>Q    <span class="hljs-number">2.0</span>dtype: float64</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106963135</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="02x00-xie-ru-shu-ju"><font color="#FF0000">【02x00】写入数据</font></span></h2><p>Pandas 提供了一些用于将表格型数据读取为 DataFrame 对象的函数。常见方法如下：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>to_csv</td><td>将对象写入逗号分隔值（csv）文件</td></tr><tr><td>to_clipboard</td><td>将对象复制到系统剪贴板</td></tr><tr><td>to_excel</td><td>将对象写入 Excel 工作表</td></tr><tr><td>to_hdf</td><td>使用 HDFStore 将包含的数据写入 HDF5 文件</td></tr><tr><td>to_html</td><td>将 DataFrame 呈现为 HTML 表格</td></tr><tr><td>to_json</td><td>将对象转换为 JSON（ JavaScript Object Notation）字符串</td></tr><tr><td>to_msgpack</td><td>将对象写入二进制格式编码的文件（Pandas v1.0.0 中已删除对 msgpack 的支持，建议使用 <a href="https://pandas.pydata.org/docs/user_guide/io.html#io-msgpack">pyarrow</a>）</td></tr><tr><td>to_pickle</td><td>Pickle（序列化）对象到文件</td></tr><tr><td>to_sql</td><td>将存储在 DataFrame 中的数据写入 SQL 数据库</td></tr><tr><td>to_stata</td><td>将 DataFrame 对象导出为 Stata 格式</td></tr><tr><td>to_feather</td><td>将 DataFrames 写入 Feather 二进制格式文件</td></tr></tbody></table><p>以下以 to_csv 为例，它的参数同样多达 50 多个，具体可参见官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.to_csv.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.to_csv.html</a></p></li></ul><h3><span id="02x01-jian-dan-shi-li"><font color="#4876FF">【02x01】简单示例</font></span></h3><p>以之前的 test5.csv 文件为例，先读出数据，再将数据写入另外的文件：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test5.csv&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>data  something  a   b     c   d message<span class="hljs-number">0</span>       one  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3.0</span>   <span class="hljs-number">4</span>     NaN<span class="hljs-number">1</span>       two  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   NaN   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>     three  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">12</span>  python<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>data.to_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\out1.csv&#x27;</span>)</code></pre><p><img src="https://cdn.itbob.cn/img/article/034/09.png" alt="09"></p><h3><span id="02x02-sep-zhi-ding-fen-ge-fu"><font color="#4876FF">【02x02】sep 指定分隔符</font></span></h3><p>sep 参数可用于其他分隔符：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test5.csv&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>data  something  a   b     c   d message<span class="hljs-number">0</span>       one  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3.0</span>   <span class="hljs-number">4</span>     NaN<span class="hljs-number">1</span>       two  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   NaN   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>     three  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">12</span>  python&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>data.to_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\out2.csv&#x27;</span>, sep=<span class="hljs-string">&#x27;|&#x27;</span>)</code></pre><p><img src="https://cdn.itbob.cn/img/article/034/10.png" alt="10"></p><h3><span id="02x03-na-rep-ti-huan-que-shi-zhi"><font color="#4876FF">【02x03】na_rep 替换缺失值</font></span></h3><p>na_rep 参数可将缺失值（NaN）替换成其他字符串：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test5.csv&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>data  something  a   b     c   d message<span class="hljs-number">0</span>       one  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3.0</span>   <span class="hljs-number">4</span>     NaN<span class="hljs-number">1</span>       two  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   NaN   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>     three  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">12</span>  python<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>data.to_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\out3.csv&#x27;</span>, na_rep=<span class="hljs-string">&#x27;X&#x27;</span>)</code></pre><p><img src="https://cdn.itbob.cn/img/article/034/11.png" alt="11"></p><h3><span id="02x04-index-header-xing-yu-lie-biao-qian"><font color="#4876FF">【02x04】index / header 行与列标签</font></span></h3><p>设置 <code>index=False</code>, <code>header=False</code>，可以禁用行标签与列标签：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test5.csv&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>data  something  a   b     c   d message<span class="hljs-number">0</span>       one  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3.0</span>   <span class="hljs-number">4</span>     NaN<span class="hljs-number">1</span>       two  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   NaN   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>     three  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">12</span>  python<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>data.to_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\out4.csv&#x27;</span>, index=<span class="hljs-literal">False</span>, header=<span class="hljs-literal">False</span>)</code></pre><p><img src="https://cdn.itbob.cn/img/article/034/12.png" alt="12"></p><p>还可以传入列表来重新设置列标签：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test5.csv&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>data  something  a   b     c   d message<span class="hljs-number">0</span>       one  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3.0</span>   <span class="hljs-number">4</span>     NaN<span class="hljs-number">1</span>       two  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   NaN   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>     three  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">12</span>  python<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>data.to_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\out5.csv&#x27;</span>, header=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>])</code></pre><p><img src="https://cdn.itbob.cn/img/article/034/13.png" alt="13"></p><h3><span id="02x05-columns-zhi-ding-lie"><font color="#4876FF">【02x05】columns 指定列</font></span></h3><p>可以通过设置 columns 参数，只写入部分列，并按照指定顺序排序：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\test5.csv&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>data  something  a   b     c   d message<span class="hljs-number">0</span>       one  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3.0</span>   <span class="hljs-number">4</span>     NaN<span class="hljs-number">1</span>       two  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   NaN   <span class="hljs-number">8</span>   world<span class="hljs-number">2</span>     three  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">12</span>  python&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>data.to_csv(<span class="hljs-string">r&#x27;C:\Users\TanRe\Desktop\out6.csv&#x27;</span>, columns=[<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>])</code></pre><p><img src="https://cdn.itbob.cn/img/article/034/14.png" alt="14"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106963135</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Pandas（九）：时间序列</title>
      <link href="/article/033/"/>
      <url>/article/033/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01x00-shi-jian-xu-lie-font"><font color="#FF0000">【01x00】时间序列</font></a></li><li><a href="#font-color-ff0000-02x00-timestamp-shi-jian-chuo-font"><font color="#FF0000">【02x00】Timestamp 时间戳</font></a><ul><li><a href="#font-color-4876ff-02x01-pandas-timestamp-font"><font color="#4876FF">【02x01】pandas.Timestamp</font></a></li><li><a href="#font-color-4876ff-02x02-freq-pin-lu-bu-fen-qu-zhi-font"><font color="#4876FF">【02x02】freq 频率部分取值</font></a></li><li><a href="#font-color-4876ff-02x03-to-datetime-font"><font color="#4876FF">【02x03】to_datetime</font></a></li><li><a href="#font-color-4876ff-02x04-date-range-font"><font color="#4876FF">【02x04】date_range</font></a></li><li><a href="#font-color-4876ff-02x05-suo-yin-yu-qie-pian-font"><font color="#4876FF">【02x05】索引与切片</font></a></li><li><a href="#font-color-4876ff-02x06-yi-dong-shu-ju-yu-shu-ju-pian-yi-font"><font color="#4876FF">【02x06】移动数据与数据偏移</font></a></li><li><a href="#font-color-4876ff-02x07-shi-qu-chu-li-font"><font color="#4876FF">【02x07】时区处理</font></a></li></ul></li><li><a href="#font-color-ff0000-03x00-period-gu-ding-shi-qi-font"><font color="#FF0000">【03x00】period 固定时期</font></a><ul><li><a href="#font-color-4876ff-03x01-pandas-period-font"><font color="#4876FF">【03x01】pandas.Period</font></a></li><li><a href="#font-color-4876ff-03x02-period-range-font"><font color="#4876FF">【03x02】period_range</font></a></li><li><a href="#font-color-4876ff-03x03-asfreq-shi-qi-pin-lu-zhuan-huan-font"><font color="#4876FF">【03x03】asfreq 时期频率转换</font></a></li><li><a href="#font-color-4876ff-03x04-to-period-yu-to-timestamp-font"><font color="#4876FF">【03x04】to_period 与 to_timestamp()</font></a></li></ul></li><li><a href="#font-color-ff0000-04x00-timedelta-shi-jian-jian-ge-font"><font color="#FF0000">【04x00】timedelta 时间间隔</font></a><ul><li><a href="#font-color-4876ff-04x01-pandas-timedelta-font"><font color="#4876FF">【04x01】pandas.Timedelta</font></a></li><li><a href="#font-color-4876ff-04x02-to-timedelta-font"><font color="#4876FF">【04x02】to_timedelta</font></a></li><li><a href="#font-color-4876ff-04x03-timedelta-range-font"><font color="#4876FF">【04x03】timedelta_range</font></a></li></ul></li><li><a href="#font-color-ff0000-05x00-chong-cai-yang-ji-pin-lu-zhuan-huan-font"><font color="#FF0000">【05x00】重采样及频率转换</font></a></li></ul><!-- tocstop --><hr><p>Pandas 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/025/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itbob.cn/article/026/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itbob.cn/article/027/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itbob.cn/article/028/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itbob.cn/article/029/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itbob.cn/article/030/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itbob.cn/article/031/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itbob.cn/article/032/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itbob.cn/article/033/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itbob.cn/article/034/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106947061</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01x00-shi-jian-xu-lie"><font color="#FF0000">【01x00】时间序列</font></span></h2><p>官网对于时间序列的介绍：<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html">https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html</a></p><p>时间序列（time series）是一种重要的结构化数据形式，应用于多个领域，包括金融学、经济学、生态学、神经科学、物理学等。在多个时间点观察或测量到的任何事物都可以形成一段时间序列。很多时间序列是固定频率的，也就是说，数据点是根据某种规律定期出现的（比如每15秒、每5分钟、每月出现一次）。时间序列也可以是不定期的，没有固定的时间单位或单位之间的偏移量。时间序列数据的意义取决于具体的应用场景，主要有以下几种：</p><ul><li><p><font color="#4169E1"><strong>时间戳（timestamp），表示某个具体的时间点，例如 2020-6-24 15:30；</strong></font></p></li><li><p><font color="#4169E1"><strong>固定周期（period），表示某个时间周期，例如 2020-01；</strong></font></p></li><li><p><font color="#4169E1"><strong>时间间隔（timedelta），持续时间，即两个日期或时间之间的差异。</strong></font></p></li><li><p><font color="#FFA500"><strong>针对时间戳数据，Pandas 提供了 Timestamp 类型。它本质上是 Python 的原生 datetime 类型的替代品，但是在性能更好的 numpy.datetime64 类型的基础上创建。对应的索引数据结构是 DatetimeIndex。</strong></font></p></li><li><p><font color="#FFA500"><strong>针对时间周期数据，Pandas 提供了 Period 类型。这是利用 numpy.datetime64 类型将固定频率的时间间隔进行编码。对应的索引数据结构是 PeriodIndex。</strong></font></p></li><li><p><font color="#FFA500"><strong>针对时间增量或持续时间，Pandas 提供了 Timedelta 类型。Timedelta 是一种代替 Python 原生datetime.timedelta 类型的高性能数据结构，同样是基于 numpy.timedelta64 类型。对应的索引数据结构是 TimedeltaIndex。</strong></font></p></li></ul><h2><span id="02x00-timestamp-shi-jian-chuo"><font color="#FF0000">【02x00】Timestamp 时间戳</font></span></h2><h3><span id="02x01-pandas-timestamp"><font color="#4876FF">【02x01】pandas.Timestamp</font></span></h3><p>在 pandas 中，<code>pandas.Timestamp</code> 方法用来代替 Python 中的 <code>datetime.datetime</code> 方法。</p><p>Timestamp 与 Python 的 Datetime 等效，在大多数情况下都可以互换。 此类型用于组成 DatetimeIndex 以及 Pandas 中其他面向时间序列的数据结构。</p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html">https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html</a></p><p>基本语法：</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pandas</span>.<span class="hljs-title">Timestamp</span>(<span class="hljs-params">ts_input=&lt;<span class="hljs-built_in">object</span> <span class="hljs-built_in">object</span>&gt;, </span></span><span class="hljs-params"><span class="hljs-class">   freq=<span class="hljs-literal">None</span>, tz=<span class="hljs-literal">None</span>, unit=<span class="hljs-literal">None</span>, </span></span><span class="hljs-params"><span class="hljs-class">   year=<span class="hljs-literal">None</span>, month=<span class="hljs-literal">None</span>, day=<span class="hljs-literal">None</span>, </span></span><span class="hljs-params"><span class="hljs-class">   hour=<span class="hljs-literal">None</span>, minute=<span class="hljs-literal">None</span>, second=<span class="hljs-literal">None</span>, </span></span><span class="hljs-params"><span class="hljs-class">   microsecond=<span class="hljs-literal">None</span>, nanosecond=<span class="hljs-literal">None</span>, tzinfo=<span class="hljs-literal">None</span></span>)</span></code></pre><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ts_input</td><td>要转换为时间戳的对象，可以是 datetime-like，str，int，float 类型</td></tr><tr><td>freq</td><td>时间戳将具有的偏移量，可以是 str，日期偏移量类型，取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr><tr><td>tz</td><td>时间戳将具有的时区</td></tr><tr><td>unit</td><td>如果 ts_input 是整数或浮点数，该参数用于设置其单位（D、s、ms、us、ns）</td></tr></tbody></table><p>简单示例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Timestamp(<span class="hljs-string">&#x27;2017-01-01T12&#x27;</span>)Timestamp(<span class="hljs-string">&#x27;2017-01-01 12:00:00&#x27;</span>)</code></pre><p>设置 <code>unit='s'</code>，即待转换对象单位为秒：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Timestamp(<span class="hljs-number">1513393355.5</span>, unit=<span class="hljs-string">&#x27;s&#x27;</span>)Timestamp(<span class="hljs-string">&#x27;2017-12-16 03:02:35.500000&#x27;</span>)</code></pre><p>使用 <code>tz</code> 参数设置时区：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Timestamp(<span class="hljs-number">1513393355</span>, unit=<span class="hljs-string">&#x27;s&#x27;</span>, tz=<span class="hljs-string">&#x27;US/Pacific&#x27;</span>)Timestamp(<span class="hljs-string">&#x27;2017-12-15 19:02:35-0800&#x27;</span>, tz=<span class="hljs-string">&#x27;US/Pacific&#x27;</span>)</code></pre><p>单独设置年月日：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Timestamp(year=<span class="hljs-number">2020</span>, month=<span class="hljs-number">6</span>, day=<span class="hljs-number">24</span>, hour=<span class="hljs-number">12</span>)Timestamp(<span class="hljs-string">&#x27;2020-06-24 12:00:00&#x27;</span>)</code></pre><h3><span id="02x02-freq-pin-lu-bu-fen-qu-zhi"><font color="#4876FF">【02x02】freq 频率部分取值</font></span></h3><p>完整取值参见官方文档：<a href="https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-offset-aliases">https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-offset-aliases</a></p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>D</td><td>Day</td><td>每日历日</td></tr><tr><td>B</td><td>BusinessDay</td><td>每工作日</td></tr><tr><td>H</td><td>Hour</td><td>每小时</td></tr><tr><td>T 或 min</td><td>Minute</td><td>每分</td></tr><tr><td>S</td><td>Second</td><td>每秒</td></tr><tr><td>L 或 ms</td><td>Milli</td><td>每毫秒（即每千分之一秒）</td></tr><tr><td>U</td><td>Micro</td><td>每微秒（即每百万分之一秒）</td></tr><tr><td>M</td><td>MonthEnd</td><td>每月最后一个日历日</td></tr><tr><td>BM</td><td>BusinessMonthEnd</td><td>每月最后一个工作日</td></tr><tr><td>MS</td><td>MonthBegin</td><td>每月第一个日历日</td></tr><tr><td>BMS</td><td>BusinessMonthBegin</td><td>每月第一个工作日</td></tr><tr><td>W-MON、W-TUE…</td><td>Week</td><td>从指定的星期几（MON、TUE、 WED、THU、FR、SAT、SUN）开始算起，每周</td></tr><tr><td>WoM-1MON、WOM-2MON…</td><td>WeekOfMonth</td><td>产生每月第一、第二、第三或第四周的星期几。例如，WoM-3FRI 表示每月第3个星期五</td></tr><tr><td>Q-JAN、Q-FEB…</td><td>QuarterEnd</td><td>对于以指定月份（JAN、FEB、MAR、APR、MAY、JUN、JUL、AUG、SEP、OCT、NOV、DEC）结束的年度，每季度最后一月的最后个日历日</td></tr><tr><td>BQ-JAN、BQ-FEB…</td><td>BusinessQuarterEnd</td><td>对于以指定月份结束的年度，每季度最后一月的最后一个工作日</td></tr><tr><td>QS-JAN、QS-FEB…</td><td>QuarterBegin</td><td>对于以指定月份结束的年度，每季度最后一月的第一个日历日</td></tr><tr><td>BQS-JAN、 BQS-FEB…</td><td>BusinessQuarterBegin</td><td>对于以指定月份结束的年度，每季度最后一月的第一个工作日</td></tr><tr><td>A-JAN、A-FEB…</td><td>YearEnd</td><td>每年指定月份（JAN、FEB、MAR、APR、MAY、JUN、JUL、AUG、SEP、 OCT、NOV、DEC）的最后一个日历日</td></tr><tr><td>BA-JAN、BA-FEB…</td><td>BusinessYearEnd</td><td>每年指定月份的最后一个工作日</td></tr><tr><td>AS-JAN、AS-FEB…</td><td>YearBegin</td><td>每年指定月份的第一个历日日</td></tr><tr><td>BAS-JAN、BAS-FEB…</td><td>BusinessYearBegin</td><td>每年指定月份的第一个工作日</td></tr></tbody></table><h3><span id="02x03-to-datetime"><font color="#4876FF">【02x03】to_datetime</font></span></h3><p>在 Python 中，datetime 库提供了日期和时间处理方法，利用 <code>str</code> 或 <code>strftime</code> 方法可以将 datetime 对象转化成字符串，具体用法可参见<a href="https://blog.csdn.net/qq_36759224/article/details/104427220">【Python 标准库学习】日期和时间处理库 — datetime</a>。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<span class="hljs-meta">&gt;&gt;&gt; </span>stamp = datetime(<span class="hljs-number">2020</span>, <span class="hljs-number">6</span>, <span class="hljs-number">24</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>stampdatetime.datetime(<span class="hljs-number">2020</span>, <span class="hljs-number">6</span>, <span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>(stamp)<span class="hljs-string">&#x27;2020-06-24 00:00:00&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>stamp.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<span class="hljs-string">&#x27;2020-06-24&#x27;</span></code></pre><p><font color="#FF0000"><strong>在 pandas 中 to_datetime 方法可以将字符串解析成多种不同的 Timestamp（时间戳） 对象：</strong></font></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>datestrs = <span class="hljs-string">&#x27;2011-07-06 12:00:00&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(datestrs)&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">str</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt; </span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">pd</span>.<span class="hljs-title">to_datetime</span>(<span class="hljs-params">datestrs</span>)</span><span class="hljs-class"><span class="hljs-title">Timestamp</span>(<span class="hljs-params"><span class="hljs-string">&#x27;2011-07-06 12:00:00&#x27;</span></span>)</span></code></pre><p>基本语法：</p><pre><code class="hljs python">pandas.to_datetime(arg, errors=<span class="hljs-string">&#x27;raise&#x27;</span>, dayfirst=<span class="hljs-literal">False</span>,                    yearfirst=<span class="hljs-literal">False</span>, utc=<span class="hljs-literal">None</span>, <span class="hljs-built_in">format</span>=<span class="hljs-literal">None</span>,                    exact=<span class="hljs-literal">True</span>, unit=<span class="hljs-literal">None</span>, infer_datetime_format=<span class="hljs-literal">False</span>,                    origin=<span class="hljs-string">&#x27;unix&#x27;</span>, cache=<span class="hljs-literal">True</span>)</code></pre><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html">https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arg</td><td>要转换为日期时间的对象，可以接受 int, float, str, datetime, list, tuple, 1-d array, Series DataFrame/dict-like 类型</td></tr><tr><td>errors</td><td>如果字符串不满足时间戳的形式，是否会发生异常<br><code>ignore</code>：不引发异常，返回原始输入；<code>raise</code>：无效解析将引发异常（默认）；<code>coerce</code>：无效解析将被设置为NaT</td></tr><tr><td>dayfirst</td><td>bool 类型，默认 False，如果 arg 是 str 或列表，是否首先解析为日期<br>例如 dayfirst 为 True，<code>10/11/12</code> 被解析为 <code>2012-11-10</code>，为 False 则解析为 <code>2012-10-11</code></td></tr><tr><td>yearfirst</td><td>bool 类型，默认 False，如果 arg 是 str 或列表，是否首先解析为年份<br>例如 dayfirst 为 True，<code>10/11/12</code> 被解析为 <code>2010-11-12</code>，为 False 则解析为 <code>2012-10-11</code><br>如果 dayfirst 和 yearfirst 都为 True，则优先 yearfirst</td></tr><tr><td>utc</td><td>bool 类型，是否转换为协调世界时，默认 None</td></tr><tr><td>format</td><td>格式化时间，如 <code>21/2/20 16:10</code> 使用 <code>%d/%m/%y %H:%M</code> 会被解析为 <code>2020-02-21 16:10:00</code><br>符号含义常见文章：<a href="https://blog.csdn.net/qq_36759224/article/details/104427220">【Python 标准库学习】日期和时间处理库 — datetime</a> 或者<a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior">官方文档</a></td></tr><tr><td>exact</td><td>如果为 True，则需要精确的格式匹配。如果为 False，则允许格式与目标字符串中的任何位置匹配</td></tr><tr><td>unit</td><td>如果 arg 是整数或浮点数，该参数用于设置其单位（D、s、ms、us、ns）</td></tr></tbody></table><p>简单应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2015</span>, <span class="hljs-number">2016</span>], <span class="hljs-string">&#x27;month&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;day&#x27;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj   year  month  day<span class="hljs-number">0</span>  <span class="hljs-number">2015</span>      <span class="hljs-number">2</span>    <span class="hljs-number">4</span><span class="hljs-number">1</span>  <span class="hljs-number">2016</span>      <span class="hljs-number">3</span>    <span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_datetime(obj)<span class="hljs-number">0</span>   <span class="hljs-number">2015</span>-02-04<span class="hljs-number">1</span>   <span class="hljs-number">2016</span>-03-05dtype: datetime64[ns]</code></pre><p>设置 <code>format</code> 和 <code>errors</code> 参数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="hljs-string">&#x27;13000101&#x27;</span>, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>, errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)datetime.datetime(<span class="hljs-number">1300</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="hljs-string">&#x27;13000101&#x27;</span>, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>, errors=<span class="hljs-string">&#x27;coerce&#x27;</span>)NaT<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="hljs-string">&#x27;13000101&#x27;</span>, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%Y%m%d&#x27;</span>, errors=<span class="hljs-string">&#x27;raise&#x27;</span>)Traceback (most recent call last):...pandas._libs.tslibs.np_datetime.OutOfBoundsDatetime: Out of bounds nanosecond timestamp: <span class="hljs-number">1300</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span></code></pre><p>设置 <code>unit</code> 参数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="hljs-number">1490195805</span>, unit=<span class="hljs-string">&#x27;s&#x27;</span>)Timestamp(<span class="hljs-string">&#x27;2017-03-22 15:16:45&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="hljs-number">1490195805433502912</span>, unit=<span class="hljs-string">&#x27;ns&#x27;</span>)Timestamp(<span class="hljs-string">&#x27;2017-03-22 15:16:45.433502912&#x27;</span>)</code></pre><h3><span id="02x04-date-range"><font color="#4876FF">【02x04】date_range</font></span></h3><p><code>pandas.date_range</code> 方法可用于根据指定的频率生成指定长度的 DatetimeIndex。</p><p>基本语法：</p><pre><code class="hljs python">pandas.date_range(start=<span class="hljs-literal">None</span>, end=<span class="hljs-literal">None</span>, periods=<span class="hljs-literal">None</span>, freq=<span class="hljs-literal">None</span>,                   tz=<span class="hljs-literal">None</span>, normalize=<span class="hljs-literal">False</span>, name=<span class="hljs-literal">None</span>, closed=<span class="hljs-literal">None</span>,                   **kwargs) → pandas.core.indexes.datetimes.DatetimeIndex</code></pre><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.date_range.html">https://pandas.pydata.org/docs/reference/api/pandas.date_range.html</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>开始日期</td></tr><tr><td>end</td><td>结束日期</td></tr><tr><td>periods</td><td>int 类型，要生成的时段数（天）</td></tr><tr><td>freq</td><td>频率字符串，即按照某种特定的频率来生成日期，取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr><tr><td>tz</td><td>设置时区，例如 “Asia/Hong_Kong”</td></tr><tr><td>normalize</td><td>bool 类型，默认 False，是否在生成日期之前对其进行规范化（仅保留年月日）</td></tr><tr><td>name</td><td>结果 DatetimeIndex 的名称</td></tr><tr><td>closed</td><td><code>None</code>：默认值，同时保留开始日期和结束日期<br><code>'left'</code>：保留开始日期，不保留结束日期<br><code>'right'</code>：保留结束日期，不保留开始日期</td></tr></tbody></table><p>简单示例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;1/1/2018&#x27;</span>, end=<span class="hljs-string">&#x27;1/08/2018&#x27;</span>)DatetimeIndex([<span class="hljs-string">&#x27;2018-01-01&#x27;</span>, <span class="hljs-string">&#x27;2018-01-02&#x27;</span>, <span class="hljs-string">&#x27;2018-01-03&#x27;</span>, <span class="hljs-string">&#x27;2018-01-04&#x27;</span>,               <span class="hljs-string">&#x27;2018-01-05&#x27;</span>, <span class="hljs-string">&#x27;2018-01-06&#x27;</span>, <span class="hljs-string">&#x27;2018-01-07&#x27;</span>, <span class="hljs-string">&#x27;2018-01-08&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)</code></pre><p>指定 <code>periods</code> 参数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;2012-04-01&#x27;</span>, periods=<span class="hljs-number">20</span>)DatetimeIndex([<span class="hljs-string">&#x27;2012-04-01&#x27;</span>, <span class="hljs-string">&#x27;2012-04-02&#x27;</span>, <span class="hljs-string">&#x27;2012-04-03&#x27;</span>, <span class="hljs-string">&#x27;2012-04-04&#x27;</span>,               <span class="hljs-string">&#x27;2012-04-05&#x27;</span>, <span class="hljs-string">&#x27;2012-04-06&#x27;</span>, <span class="hljs-string">&#x27;2012-04-07&#x27;</span>, <span class="hljs-string">&#x27;2012-04-08&#x27;</span>,               <span class="hljs-string">&#x27;2012-04-09&#x27;</span>, <span class="hljs-string">&#x27;2012-04-10&#x27;</span>, <span class="hljs-string">&#x27;2012-04-11&#x27;</span>, <span class="hljs-string">&#x27;2012-04-12&#x27;</span>,               <span class="hljs-string">&#x27;2012-04-13&#x27;</span>, <span class="hljs-string">&#x27;2012-04-14&#x27;</span>, <span class="hljs-string">&#x27;2012-04-15&#x27;</span>, <span class="hljs-string">&#x27;2012-04-16&#x27;</span>,               <span class="hljs-string">&#x27;2012-04-17&#x27;</span>, <span class="hljs-string">&#x27;2012-04-18&#x27;</span>, <span class="hljs-string">&#x27;2012-04-19&#x27;</span>, <span class="hljs-string">&#x27;2012-04-20&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(end=<span class="hljs-string">&#x27;2012-06-01&#x27;</span>, periods=<span class="hljs-number">20</span>)DatetimeIndex([<span class="hljs-string">&#x27;2012-05-13&#x27;</span>, <span class="hljs-string">&#x27;2012-05-14&#x27;</span>, <span class="hljs-string">&#x27;2012-05-15&#x27;</span>, <span class="hljs-string">&#x27;2012-05-16&#x27;</span>,               <span class="hljs-string">&#x27;2012-05-17&#x27;</span>, <span class="hljs-string">&#x27;2012-05-18&#x27;</span>, <span class="hljs-string">&#x27;2012-05-19&#x27;</span>, <span class="hljs-string">&#x27;2012-05-20&#x27;</span>,               <span class="hljs-string">&#x27;2012-05-21&#x27;</span>, <span class="hljs-string">&#x27;2012-05-22&#x27;</span>, <span class="hljs-string">&#x27;2012-05-23&#x27;</span>, <span class="hljs-string">&#x27;2012-05-24&#x27;</span>,               <span class="hljs-string">&#x27;2012-05-25&#x27;</span>, <span class="hljs-string">&#x27;2012-05-26&#x27;</span>, <span class="hljs-string">&#x27;2012-05-27&#x27;</span>, <span class="hljs-string">&#x27;2012-05-28&#x27;</span>,               <span class="hljs-string">&#x27;2012-05-29&#x27;</span>, <span class="hljs-string">&#x27;2012-05-30&#x27;</span>, <span class="hljs-string">&#x27;2012-05-31&#x27;</span>, <span class="hljs-string">&#x27;2012-06-01&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;2018-04-24&#x27;</span>, end=<span class="hljs-string">&#x27;2018-04-27&#x27;</span>, periods=<span class="hljs-number">3</span>)DatetimeIndex([<span class="hljs-string">&#x27;2018-04-24 00:00:00&#x27;</span>, <span class="hljs-string">&#x27;2018-04-25 12:00:00&#x27;</span>, <span class="hljs-string">&#x27;2018-04-27 00:00:00&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-literal">None</span>)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;2018-04-24&#x27;</span>, end=<span class="hljs-string">&#x27;2018-04-28&#x27;</span>, periods=<span class="hljs-number">3</span>)DatetimeIndex([<span class="hljs-string">&#x27;2018-04-24&#x27;</span>, <span class="hljs-string">&#x27;2018-04-26&#x27;</span>, <span class="hljs-string">&#x27;2018-04-28&#x27;</span>], dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-literal">None</span>)</code></pre><p>指定 <code>freq='M'</code> 会按照每月最后一个日历日的频率生成日期，指定 <code>freq='3M'</code> 会每隔3个月按照每月最后一个日历日的频率生成日期：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;1/1/2018&#x27;</span>, periods=<span class="hljs-number">5</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)DatetimeIndex([<span class="hljs-string">&#x27;2018-01-31&#x27;</span>, <span class="hljs-string">&#x27;2018-02-28&#x27;</span>, <span class="hljs-string">&#x27;2018-03-31&#x27;</span>, <span class="hljs-string">&#x27;2018-04-30&#x27;</span>,               <span class="hljs-string">&#x27;2018-05-31&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;1/1/2018&#x27;</span>, periods=<span class="hljs-number">5</span>, freq=<span class="hljs-string">&#x27;3M&#x27;</span>)DatetimeIndex([<span class="hljs-string">&#x27;2018-01-31&#x27;</span>, <span class="hljs-string">&#x27;2018-04-30&#x27;</span>, <span class="hljs-string">&#x27;2018-07-31&#x27;</span>, <span class="hljs-string">&#x27;2018-10-31&#x27;</span>,               <span class="hljs-string">&#x27;2019-01-31&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;3M&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span></code></pre><p>使用 <code>tz</code> 参数设置时区：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;1/1/2018&#x27;</span>, periods=<span class="hljs-number">5</span>, tz=<span class="hljs-string">&#x27;Asia/Tokyo&#x27;</span>)DatetimeIndex([<span class="hljs-string">&#x27;2018-01-01 00:00:00+09:00&#x27;</span>, <span class="hljs-string">&#x27;2018-01-02 00:00:00+09:00&#x27;</span>,               <span class="hljs-string">&#x27;2018-01-03 00:00:00+09:00&#x27;</span>, <span class="hljs-string">&#x27;2018-01-04 00:00:00+09:00&#x27;</span>,               <span class="hljs-string">&#x27;2018-01-05 00:00:00+09:00&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns, Asia/Tokyo]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;6/24/2020&#x27;</span>, periods=<span class="hljs-number">5</span>, tz=<span class="hljs-string">&#x27;Asia/Hong_Kong&#x27;</span>)DatetimeIndex([<span class="hljs-string">&#x27;2020-06-24 00:00:00+08:00&#x27;</span>, <span class="hljs-string">&#x27;2020-06-25 00:00:00+08:00&#x27;</span>,               <span class="hljs-string">&#x27;2020-06-26 00:00:00+08:00&#x27;</span>, <span class="hljs-string">&#x27;2020-06-27 00:00:00+08:00&#x27;</span>,               <span class="hljs-string">&#x27;2020-06-28 00:00:00+08:00&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns, Asia/Hong_Kong]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)</code></pre><p>设置 <code>normalize</code> 参数，在生成时间戳之前对其进行格式化操作：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(<span class="hljs-string">&#x27;2020-06-24 12:56:31&#x27;</span>, periods=<span class="hljs-number">5</span>, normalize=<span class="hljs-literal">True</span>)DatetimeIndex([<span class="hljs-string">&#x27;2020-06-24&#x27;</span>, <span class="hljs-string">&#x27;2020-06-25&#x27;</span>, <span class="hljs-string">&#x27;2020-06-26&#x27;</span>, <span class="hljs-string">&#x27;2020-06-27&#x27;</span>,               <span class="hljs-string">&#x27;2020-06-28&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)</code></pre><p>设置 <code>closed</code> 参数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;2020-06-20&#x27;</span>, end=<span class="hljs-string">&#x27;2020-06-24&#x27;</span>, closed=<span class="hljs-literal">None</span>)DatetimeIndex([<span class="hljs-string">&#x27;2020-06-20&#x27;</span>, <span class="hljs-string">&#x27;2020-06-21&#x27;</span>, <span class="hljs-string">&#x27;2020-06-22&#x27;</span>, <span class="hljs-string">&#x27;2020-06-23&#x27;</span>,               <span class="hljs-string">&#x27;2020-06-24&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;2020-06-20&#x27;</span>, end=<span class="hljs-string">&#x27;2020-06-24&#x27;</span>, closed=<span class="hljs-string">&#x27;left&#x27;</span>)DatetimeIndex([<span class="hljs-string">&#x27;2020-06-20&#x27;</span>, <span class="hljs-string">&#x27;2020-06-21&#x27;</span>, <span class="hljs-string">&#x27;2020-06-22&#x27;</span>, <span class="hljs-string">&#x27;2020-06-23&#x27;</span>], dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="hljs-string">&#x27;2020-06-20&#x27;</span>, end=<span class="hljs-string">&#x27;2020-06-24&#x27;</span>, closed=<span class="hljs-string">&#x27;right&#x27;</span>)DatetimeIndex([<span class="hljs-string">&#x27;2020-06-21&#x27;</span>, <span class="hljs-string">&#x27;2020-06-22&#x27;</span>, <span class="hljs-string">&#x27;2020-06-23&#x27;</span>, <span class="hljs-string">&#x27;2020-06-24&#x27;</span>], dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)</code></pre><h3><span id="02x05-suo-yin-yu-qie-pian"><font color="#4876FF">【02x05】索引与切片</font></span></h3><p>Pandas 最基本的时间序列类型就是以时间戳（通常以 Python 字符串或 datatime 对象表示）为索引的Series，这些 datetime 对象实际上是被放在 DatetimeIndex 中的，可以使用类似 pandas.Series 对象的切片方法对其进行索引：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>dates = [datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>),             datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>), datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>),             datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>), datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>)]<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">6</span>), index=dates)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">2011</span>-01-02   -<span class="hljs-number">0.407110</span><span class="hljs-number">2011</span>-01-05   -<span class="hljs-number">0.186661</span><span class="hljs-number">2011</span>-01-07   -<span class="hljs-number">0.731080</span><span class="hljs-number">2011</span>-01-08    <span class="hljs-number">0.860970</span><span class="hljs-number">2011</span>-01-<span class="hljs-number">10</span>    <span class="hljs-number">1.929973</span><span class="hljs-number">2011</span>-01-<span class="hljs-number">12</span>   -<span class="hljs-number">0.168599</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.indexDatetimeIndex([<span class="hljs-string">&#x27;2011-01-02&#x27;</span>, <span class="hljs-string">&#x27;2011-01-05&#x27;</span>, <span class="hljs-string">&#x27;2011-01-07&#x27;</span>, <span class="hljs-string">&#x27;2011-01-08&#x27;</span>,               <span class="hljs-string">&#x27;2011-01-10&#x27;</span>, <span class="hljs-string">&#x27;2011-01-12&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-literal">None</span>)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.index[<span class="hljs-number">0</span>]Timestamp(<span class="hljs-string">&#x27;2011-01-02 00:00:00&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]DatetimeIndex([<span class="hljs-string">&#x27;2011-01-02&#x27;</span>, <span class="hljs-string">&#x27;2011-01-05&#x27;</span>, <span class="hljs-string">&#x27;2011-01-07&#x27;</span>], dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-literal">None</span>)</code></pre><p>另外还可以传入一个可以被解释为日期的字符串，或者只需传入“年”或“年月”即可轻松选取数据的切片：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">1000</span>), index=pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">1000</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">2000</span>-01-01   -<span class="hljs-number">1.142284</span><span class="hljs-number">2000</span>-01-02    <span class="hljs-number">1.198785</span><span class="hljs-number">2000</span>-01-03    <span class="hljs-number">2.466909</span><span class="hljs-number">2000</span>-01-04   -<span class="hljs-number">0.086728</span><span class="hljs-number">2000</span>-01-05   -<span class="hljs-number">0.978437</span>                ...   <span class="hljs-number">2002</span>-09-<span class="hljs-number">22</span>   -<span class="hljs-number">0.252240</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">23</span>    <span class="hljs-number">0.148561</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">24</span>   -<span class="hljs-number">1.330409</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">25</span>   -<span class="hljs-number">0.673471</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">26</span>   -<span class="hljs-number">0.253271</span>Freq: D, Length: <span class="hljs-number">1000</span>, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;26/9/2002&#x27;</span>]-<span class="hljs-number">0.25327100684233356</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;2002&#x27;</span>]<span class="hljs-number">2002</span>-01-01    <span class="hljs-number">1.058715</span><span class="hljs-number">2002</span>-01-02    <span class="hljs-number">0.900859</span><span class="hljs-number">2002</span>-01-03    <span class="hljs-number">1.993508</span><span class="hljs-number">2002</span>-01-04   -<span class="hljs-number">0.103211</span><span class="hljs-number">2002</span>-01-05   -<span class="hljs-number">0.950090</span>                ...   <span class="hljs-number">2002</span>-09-<span class="hljs-number">22</span>   -<span class="hljs-number">0.252240</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">23</span>    <span class="hljs-number">0.148561</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">24</span>   -<span class="hljs-number">1.330409</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">25</span>   -<span class="hljs-number">0.673471</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">26</span>   -<span class="hljs-number">0.253271</span>Freq: D, Length: <span class="hljs-number">269</span>, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;2002-09&#x27;</span>]<span class="hljs-number">2002</span>-09-01   -<span class="hljs-number">0.995528</span><span class="hljs-number">2002</span>-09-02    <span class="hljs-number">0.501528</span><span class="hljs-number">2002</span>-09-03   -<span class="hljs-number">0.486753</span><span class="hljs-number">2002</span>-09-04   -<span class="hljs-number">1.083906</span><span class="hljs-number">2002</span>-09-05    <span class="hljs-number">1.458975</span><span class="hljs-number">2002</span>-09-06   -<span class="hljs-number">1.331685</span><span class="hljs-number">2002</span>-09-07    <span class="hljs-number">0.195338</span><span class="hljs-number">2002</span>-09-08   -<span class="hljs-number">0.429613</span><span class="hljs-number">2002</span>-09-09    <span class="hljs-number">1.125823</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">10</span>    <span class="hljs-number">1.607051</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">11</span>    <span class="hljs-number">0.530387</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">12</span>   -<span class="hljs-number">0.015938</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">13</span>    <span class="hljs-number">1.781043</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">14</span>   -<span class="hljs-number">0.277123</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">15</span>    <span class="hljs-number">0.344569</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">16</span>   -<span class="hljs-number">1.010810</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">17</span>    <span class="hljs-number">0.463001</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">18</span>    <span class="hljs-number">1.883636</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">19</span>    <span class="hljs-number">0.274520</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">20</span>    <span class="hljs-number">0.624184</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">21</span>   -<span class="hljs-number">1.203057</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">22</span>   -<span class="hljs-number">0.252240</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">23</span>    <span class="hljs-number">0.148561</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">24</span>   -<span class="hljs-number">1.330409</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">25</span>   -<span class="hljs-number">0.673471</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">26</span>   -<span class="hljs-number">0.253271</span>Freq: D, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;20/9/2002&#x27;</span>:<span class="hljs-string">&#x27;26/9/2002&#x27;</span>]<span class="hljs-number">2002</span>-09-<span class="hljs-number">20</span>    <span class="hljs-number">0.624184</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">21</span>   -<span class="hljs-number">1.203057</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">22</span>   -<span class="hljs-number">0.252240</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">23</span>    <span class="hljs-number">0.148561</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">24</span>   -<span class="hljs-number">1.330409</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">25</span>   -<span class="hljs-number">0.673471</span><span class="hljs-number">2002</span>-09-<span class="hljs-number">26</span>   -<span class="hljs-number">0.253271</span>Freq: D, dtype: float64</code></pre><h3><span id="02x06-yi-dong-shu-ju-yu-shu-ju-pian-yi"><font color="#4876FF">【02x06】移动数据与数据偏移</font></span></h3><p>移动（shifting）指的是沿着时间轴将数据前移或后移。Series 和 DataFrame 都有一个 shift 方法用于执行单纯的前移或后移操作，保持索引不变：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">4</span>),            index=pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">4</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">2000</span>-01-<span class="hljs-number">31</span>   -<span class="hljs-number">0.100217</span><span class="hljs-number">2000</span>-02-<span class="hljs-number">29</span>    <span class="hljs-number">1.177834</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">31</span>   -<span class="hljs-number">0.644353</span><span class="hljs-number">2000</span>-04-<span class="hljs-number">30</span>   -<span class="hljs-number">1.954679</span>Freq: M, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.shift(<span class="hljs-number">2</span>)<span class="hljs-number">2000</span>-01-<span class="hljs-number">31</span>         NaN<span class="hljs-number">2000</span>-02-<span class="hljs-number">29</span>         NaN<span class="hljs-number">2000</span>-03-<span class="hljs-number">31</span>   -<span class="hljs-number">0.100217</span><span class="hljs-number">2000</span>-04-<span class="hljs-number">30</span>    <span class="hljs-number">1.177834</span>Freq: M, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.shift(-<span class="hljs-number">2</span>)<span class="hljs-number">2000</span>-01-<span class="hljs-number">31</span>   -<span class="hljs-number">0.644353</span><span class="hljs-number">2000</span>-02-<span class="hljs-number">29</span>   -<span class="hljs-number">1.954679</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">31</span>         NaN<span class="hljs-number">2000</span>-04-<span class="hljs-number">30</span>         NaNFreq: M, dtype: float64</code></pre><p>因为简单的移位操作不会修改索引，所以部分数据会被丢弃并引入 NaN（缺失值）。因此，如果频率已知，则可以将其传给 shift 以便实现对时间戳进行位移而不是对数据进行简单位移：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">4</span>),            index=pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">4</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">2000</span>-01-<span class="hljs-number">31</span>   -<span class="hljs-number">0.100217</span><span class="hljs-number">2000</span>-02-<span class="hljs-number">29</span>    <span class="hljs-number">1.177834</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">31</span>   -<span class="hljs-number">0.644353</span><span class="hljs-number">2000</span>-04-<span class="hljs-number">30</span>   -<span class="hljs-number">1.954679</span>Freq: M, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.shift(<span class="hljs-number">2</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)<span class="hljs-number">2000</span>-03-<span class="hljs-number">31</span>   -<span class="hljs-number">0.100217</span><span class="hljs-number">2000</span>-04-<span class="hljs-number">30</span>    <span class="hljs-number">1.177834</span><span class="hljs-number">2000</span>-05-<span class="hljs-number">31</span>   -<span class="hljs-number">0.644353</span><span class="hljs-number">2000</span>-06-<span class="hljs-number">30</span>   -<span class="hljs-number">1.954679</span>Freq: M, dtype: float64</code></pre><p>Pandas 中的频率是由一个基础频率（base frequency）和一个乘数组成的。基础频率通常以一个字符串别名表示，比如 <code>&quot;M&quot;</code> 表示每月，<code>&quot;H&quot;</code> 表示每小时。对于每个基础频率，都有一个被称为日期偏移量（date offset）的对象与之对应。例如，按小时计算的频率可以用 <code>Hour</code> 类表示：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pandas.tseries.offsets <span class="hljs-keyword">import</span> Hour, Minute<span class="hljs-meta">&gt;&gt;&gt; </span>hour = Hour()<span class="hljs-meta">&gt;&gt;&gt; </span>hour&lt;Hour&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>four_hours = Hour(<span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>four_hours&lt;<span class="hljs-number">4</span> * Hours&gt;</code></pre><p>一般来说，无需明确创建这样的对象，只需使用诸如 <code>&quot;H&quot;</code> 或 <code>&quot;4H&quot;</code> 这样的字符串别名即可。在基础频率前面放上一个整数即可创建倍数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(<span class="hljs-string">&#x27;2000-01-01&#x27;</span>, <span class="hljs-string">&#x27;2000-01-03 23:59&#x27;</span>, freq=<span class="hljs-string">&#x27;4h&#x27;</span>)DatetimeIndex([<span class="hljs-string">&#x27;2000-01-01 00:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01 04:00:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-01 08:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01 12:00:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-01 16:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01 20:00:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-02 00:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-02 04:00:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-02 08:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-02 12:00:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-02 16:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-02 20:00:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-03 00:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-03 04:00:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-03 08:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-03 12:00:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-03 16:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-03 20:00:00&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;4H&#x27;</span>)</code></pre><p>大部分偏移量对象都可通过加法进行连接：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pandas.tseries.offsets <span class="hljs-keyword">import</span> Hour, Minute<span class="hljs-meta">&gt;&gt;&gt; </span>Hour(<span class="hljs-number">2</span>) + Minute(<span class="hljs-number">30</span>)&lt;<span class="hljs-number">150</span> * Minutes&gt;</code></pre><p>对于 <code>freq</code> 参数也可以传入频率字符串（如 <code>&quot;2h30min&quot;</code>），这种字符串可以被高效地解析为等效的表达式：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.date_range(<span class="hljs-string">&#x27;2000-01-01&#x27;</span>, periods=<span class="hljs-number">10</span>, freq=<span class="hljs-string">&#x27;1h30min&#x27;</span>)DatetimeIndex([<span class="hljs-string">&#x27;2000-01-01 00:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01 01:30:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-01 03:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01 04:30:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-01 06:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01 07:30:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-01 09:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01 10:30:00&#x27;</span>,               <span class="hljs-string">&#x27;2000-01-01 12:00:00&#x27;</span>, <span class="hljs-string">&#x27;2000-01-01 13:30:00&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;90T&#x27;</span>)</code></pre><p>这种偏移量还可以用在 datetime 或 Timestamp 对象上：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pandas.tseries.offsets <span class="hljs-keyword">import</span> Day, MonthEnd<span class="hljs-meta">&gt;&gt;&gt; </span>now = datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">11</span>, <span class="hljs-number">17</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>now + <span class="hljs-number">3</span> * Day()Timestamp(<span class="hljs-string">&#x27;2011-11-20 00:00:00&#x27;</span>)</code></pre><p>如果加的是锚点偏移量，比如 MonthEnd，第一次增量会将原日期向前滚动到符合频率规则的下一个日期：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pandas.tseries.offsets <span class="hljs-keyword">import</span> Day, MonthEnd<span class="hljs-meta">&gt;&gt;&gt; </span>now = datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">11</span>, <span class="hljs-number">17</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>now + MonthEnd()Timestamp(<span class="hljs-string">&#x27;2011-11-30 00:00:00&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>now + MonthEnd(<span class="hljs-number">2</span>)Timestamp(<span class="hljs-string">&#x27;2011-12-31 00:00:00&#x27;</span>)</code></pre><p>通过锚点偏移量的 rollforward 和 rollback 方法，可明确地将日期向前或向后滚动：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pandas.tseries.offsets <span class="hljs-keyword">import</span> Day, MonthEnd<span class="hljs-meta">&gt;&gt;&gt; </span>now = datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">11</span>, <span class="hljs-number">17</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>offset = MonthEnd()<span class="hljs-meta">&gt;&gt;&gt; </span>offset.rollforward(now)Timestamp(<span class="hljs-string">&#x27;2011-11-30 00:00:00&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>offset.rollback(now)Timestamp(<span class="hljs-string">&#x27;2011-10-31 00:00:00&#x27;</span>)</code></pre><p>与 <code>groupby</code> 方法结合使用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pandas.tseries.offsets <span class="hljs-keyword">import</span> Day, MonthEnd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">20</span>),            index=pd.date_range(<span class="hljs-string">&#x27;1/15/2000&#x27;</span>, periods=<span class="hljs-number">20</span>, freq=<span class="hljs-string">&#x27;4d&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">2000</span>-01-<span class="hljs-number">15</span>   -<span class="hljs-number">0.591729</span><span class="hljs-number">2000</span>-01-<span class="hljs-number">19</span>   -<span class="hljs-number">0.775844</span><span class="hljs-number">2000</span>-01-<span class="hljs-number">23</span>   -<span class="hljs-number">0.745603</span><span class="hljs-number">2000</span>-01-<span class="hljs-number">27</span>   -<span class="hljs-number">0.076439</span><span class="hljs-number">2000</span>-01-<span class="hljs-number">31</span>    <span class="hljs-number">1.796417</span><span class="hljs-number">2000</span>-02-04   -<span class="hljs-number">0.500349</span><span class="hljs-number">2000</span>-02-08    <span class="hljs-number">0.515851</span><span class="hljs-number">2000</span>-02-<span class="hljs-number">12</span>   -<span class="hljs-number">0.344171</span><span class="hljs-number">2000</span>-02-<span class="hljs-number">16</span>    <span class="hljs-number">0.419657</span><span class="hljs-number">2000</span>-02-<span class="hljs-number">20</span>    <span class="hljs-number">0.307288</span><span class="hljs-number">2000</span>-02-<span class="hljs-number">24</span>    <span class="hljs-number">0.115113</span><span class="hljs-number">2000</span>-02-<span class="hljs-number">28</span>   -<span class="hljs-number">0.362585</span><span class="hljs-number">2000</span>-03-03    <span class="hljs-number">1.074892</span><span class="hljs-number">2000</span>-03-07    <span class="hljs-number">1.111366</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">11</span>    <span class="hljs-number">0.949910</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">15</span>   -<span class="hljs-number">1.535727</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">19</span>    <span class="hljs-number">0.545944</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">23</span>   -<span class="hljs-number">0.810139</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">27</span>   -<span class="hljs-number">1.260627</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">31</span>   -<span class="hljs-number">0.128403</span>Freq: 4D, dtype: float64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>offset = MonthEnd()<span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(offset.rollforward).mean()<span class="hljs-number">2000</span>-01-<span class="hljs-number">31</span>   -<span class="hljs-number">0.078640</span><span class="hljs-number">2000</span>-02-<span class="hljs-number">29</span>    <span class="hljs-number">0.021543</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">31</span>   -<span class="hljs-number">0.006598</span>dtype: float64</code></pre><h3><span id="02x07-shi-qu-chu-li"><font color="#4876FF">【02x07】时区处理</font></span></h3><p>在 Python 中，时区信息来自第三方库 pytz，使用 <code>pytz.common_timezones</code> 方法可以查看所有的时区名称，使用 <code>pytz.timezone</code> 方法从 pytz 中获取时区对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pytz<span class="hljs-meta">&gt;&gt;&gt; </span>pytz.common_timezones[<span class="hljs-string">&#x27;Africa/Abidjan&#x27;</span>, <span class="hljs-string">&#x27;Africa/Accra&#x27;</span>, <span class="hljs-string">&#x27;Africa/Addis_Ababa&#x27;</span>, ..., <span class="hljs-string">&#x27;UTC&#x27;</span>]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>tz = pytz.timezone(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>tz&lt;DstTzInfo <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span> LMT+<span class="hljs-number">8</span>:06:<span class="hljs-number">00</span> STD&gt;  <span class="hljs-comment"># 表示与 UTC 时间相差8小时6分</span></code></pre><p>在 <code>date_range</code> 方法中，<code>tz</code> 参数用于指定时区，默认为 None，可以使用 <code>tz_localize</code> 方法将其进行本地化时区转换，如下示例中，将无时区转本地化 UTC 时区：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>rng = pd.date_range(<span class="hljs-string">&#x27;3/9/2012 9:30&#x27;</span>, periods=<span class="hljs-number">6</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>ts = pd.Series(np.random.randn(<span class="hljs-built_in">len</span>(rng)), index=rng)<span class="hljs-meta">&gt;&gt;&gt; </span>ts<span class="hljs-number">2012</span>-03-09 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">1.527913</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">10</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">1.116101</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">11</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.359358</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">12</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">0.475920</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">13</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">0.336570</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">14</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">1.075952</span>Freq: D, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(ts.index.tz)<span class="hljs-literal">None</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>ts_utc = ts.tz_localize(<span class="hljs-string">&#x27;UTC&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>ts_utc<span class="hljs-number">2012</span>-03-09 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">1.527913</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">10</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">1.116101</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">11</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.359358</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">12</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">0.475920</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">13</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">0.336570</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">14</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">1.075952</span>Freq: D, dtype: float64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>ts_utc.indexDatetimeIndex([<span class="hljs-string">&#x27;2012-03-09 09:30:00+00:00&#x27;</span>, <span class="hljs-string">&#x27;2012-03-10 09:30:00+00:00&#x27;</span>,               <span class="hljs-string">&#x27;2012-03-11 09:30:00+00:00&#x27;</span>, <span class="hljs-string">&#x27;2012-03-12 09:30:00+00:00&#x27;</span>,               <span class="hljs-string">&#x27;2012-03-13 09:30:00+00:00&#x27;</span>, <span class="hljs-string">&#x27;2012-03-14 09:30:00+00:00&#x27;</span>],              dtype=<span class="hljs-string">&#x27;datetime64[ns, UTC]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)</code></pre><p>时间序列被本地化到某个特定时区后，就可以用 <code>tz_convert</code> 方法将其转换到别的时区了：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>rng = pd.date_range(<span class="hljs-string">&#x27;3/9/2012 9:30&#x27;</span>, periods=<span class="hljs-number">6</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>ts = pd.Series(np.random.randn(<span class="hljs-built_in">len</span>(rng)), index=rng)<span class="hljs-meta">&gt;&gt;&gt; </span>ts<span class="hljs-number">2012</span>-03-09 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.480303</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">10</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">1.461039</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">11</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">1.512749</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">12</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   -<span class="hljs-number">2.185421</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">13</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">1.657845</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">14</span> 09:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.175633</span>Freq: D, dtype: float64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>ts.tz_localize(<span class="hljs-string">&#x27;UTC&#x27;</span>).tz_convert(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>)<span class="hljs-number">2012</span>-03-09 <span class="hljs-number">17</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+08:<span class="hljs-number">00</span>    <span class="hljs-number">0.480303</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">10</span> <span class="hljs-number">17</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+08:<span class="hljs-number">00</span>   -<span class="hljs-number">1.461039</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">11</span> <span class="hljs-number">17</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+08:<span class="hljs-number">00</span>   -<span class="hljs-number">1.512749</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">12</span> <span class="hljs-number">17</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+08:<span class="hljs-number">00</span>   -<span class="hljs-number">2.185421</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">13</span> <span class="hljs-number">17</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+08:<span class="hljs-number">00</span>    <span class="hljs-number">1.657845</span><span class="hljs-number">2012</span>-03-<span class="hljs-number">14</span> <span class="hljs-number">17</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+08:<span class="hljs-number">00</span>    <span class="hljs-number">0.175633</span>Freq: D, dtype: float64</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106947061</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="03x00-period-gu-ding-shi-qi"><font color="#FF0000">【03x00】period 固定时期</font></span></h2><h3><span id="03x01-pandas-period"><font color="#4876FF">【03x01】pandas.Period</font></span></h3><p>固定时期（period）表示的是时间区间，比如数日、数月、数季、数年等。Period 类所表示的就是这种数据类型，其构造函数需要用到一个字符串或整数。</p><p>基本语法：</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pandas</span>.<span class="hljs-title">Period</span>(<span class="hljs-params">value=<span class="hljs-literal">None</span>, freq=<span class="hljs-literal">None</span>, ordinal=<span class="hljs-literal">None</span>, </span></span><span class="hljs-params"><span class="hljs-class">year=<span class="hljs-literal">None</span>, month=<span class="hljs-literal">None</span>, quarter=<span class="hljs-literal">None</span>, </span></span><span class="hljs-params"><span class="hljs-class">day=<span class="hljs-literal">None</span>, hour=<span class="hljs-literal">None</span>, minute=<span class="hljs-literal">None</span>, second=<span class="hljs-literal">None</span></span>)</span></code></pre><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Period.html">https://pandas.pydata.org/docs/reference/api/pandas.Period.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>时间段</td></tr><tr><td>freq</td><td>时间戳将具有的偏移量，可以是 str，日期偏移量类型，取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr></tbody></table><p>以下示例中，Period 对象表示的是从2020年1月1日到2020年12月31日之间的整段时间</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Period(<span class="hljs-number">2020</span>, freq=<span class="hljs-string">&#x27;A-DEC&#x27;</span>)Period(<span class="hljs-string">&#x27;2020&#x27;</span>, <span class="hljs-string">&#x27;A-DEC&#x27;</span>)</code></pre><p>利用加减法对其按照频率进行位移：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Period(<span class="hljs-number">2020</span>, freq=<span class="hljs-string">&#x27;A-DEC&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>objPeriod(<span class="hljs-string">&#x27;2020&#x27;</span>, <span class="hljs-string">&#x27;A-DEC&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj + <span class="hljs-number">5</span>Period(<span class="hljs-string">&#x27;2025&#x27;</span>, <span class="hljs-string">&#x27;A-DEC&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj - <span class="hljs-number">5</span>Period(<span class="hljs-string">&#x27;2015&#x27;</span>, <span class="hljs-string">&#x27;A-DEC&#x27;</span>)</code></pre><p>PeriodIndex 类保存了一组 Period，它可以在任何 pandas 数据结构中被用作轴索引：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>rng = [pd.Period(<span class="hljs-string">&#x27;2000-01&#x27;</span>), pd.Period(<span class="hljs-string">&#x27;2000-02&#x27;</span>), pd.Period(<span class="hljs-string">&#x27;2000-03&#x27;</span>),            pd.Period(<span class="hljs-string">&#x27;2000-04&#x27;</span>), pd.Period(<span class="hljs-string">&#x27;2000-05&#x27;</span>), pd.Period(<span class="hljs-string">&#x27;2000-06&#x27;</span>)]<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">6</span>), index=rng)<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">2000</span>-01    <span class="hljs-number">0.229092</span><span class="hljs-number">2000</span>-02    <span class="hljs-number">1.515498</span><span class="hljs-number">2000</span>-03   -<span class="hljs-number">0.334401</span><span class="hljs-number">2000</span>-04   -<span class="hljs-number">0.492681</span><span class="hljs-number">2000</span>-05   -<span class="hljs-number">2.012818</span><span class="hljs-number">2000</span>-06    <span class="hljs-number">0.338804</span>Freq: M, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.indexPeriodIndex([<span class="hljs-string">&#x27;2000-01&#x27;</span>, <span class="hljs-string">&#x27;2000-02&#x27;</span>, <span class="hljs-string">&#x27;2000-03&#x27;</span>, <span class="hljs-string">&#x27;2000-04&#x27;</span>, <span class="hljs-string">&#x27;2000-05&#x27;</span>, <span class="hljs-string">&#x27;2000-06&#x27;</span>], dtype=<span class="hljs-string">&#x27;period[M]&#x27;</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>values = [<span class="hljs-string">&#x27;2001Q3&#x27;</span>, <span class="hljs-string">&#x27;2002Q2&#x27;</span>, <span class="hljs-string">&#x27;2003Q1&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>index = pd.PeriodIndex(values, freq=<span class="hljs-string">&#x27;Q-DEC&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>indexPeriodIndex([<span class="hljs-string">&#x27;2001Q3&#x27;</span>, <span class="hljs-string">&#x27;2002Q2&#x27;</span>, <span class="hljs-string">&#x27;2003Q1&#x27;</span>], dtype=<span class="hljs-string">&#x27;period[Q-DEC]&#x27;</span>, freq=<span class="hljs-string">&#x27;Q-DEC&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span></code></pre><h3><span id="03x02-period-range"><font color="#4876FF">【03x02】period_range</font></span></h3><p><code>pandas.period_range</code> 方法可根据指定的频率生成指定长度的 PeriodIndex。</p><p>基本语法：</p><p><code>pandas.period_range(start=None, end=None, periods=None, freq=None, name=None) → pandas.core.indexes.period.PeriodIndex</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.period_range.html">https://pandas.pydata.org/docs/reference/api/pandas.period_range.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>起始日期</td></tr><tr><td>end</td><td>结束日期</td></tr><tr><td>periods</td><td>要生成的时段数</td></tr><tr><td>freq</td><td>时间戳将具有的偏移量，可以是 str，日期偏移量类型，取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr><tr><td>name</td><td>结果 PeriodIndex 对象名称</td></tr></tbody></table><p>简单应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.period_range(start=<span class="hljs-string">&#x27;2019-01-01&#x27;</span>, end=<span class="hljs-string">&#x27;2020-01-01&#x27;</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)PeriodIndex([<span class="hljs-string">&#x27;2019-01&#x27;</span>, <span class="hljs-string">&#x27;2019-02&#x27;</span>, <span class="hljs-string">&#x27;2019-03&#x27;</span>, <span class="hljs-string">&#x27;2019-04&#x27;</span>, <span class="hljs-string">&#x27;2019-05&#x27;</span>, <span class="hljs-string">&#x27;2019-06&#x27;</span>,             <span class="hljs-string">&#x27;2019-07&#x27;</span>, <span class="hljs-string">&#x27;2019-08&#x27;</span>, <span class="hljs-string">&#x27;2019-09&#x27;</span>, <span class="hljs-string">&#x27;2019-10&#x27;</span>, <span class="hljs-string">&#x27;2019-11&#x27;</span>, <span class="hljs-string">&#x27;2019-12&#x27;</span>,             <span class="hljs-string">&#x27;2020-01&#x27;</span>],            dtype=<span class="hljs-string">&#x27;period[M]&#x27;</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>pd.period_range(start=pd.Period(<span class="hljs-string">&#x27;2017Q1&#x27;</span>, freq=<span class="hljs-string">&#x27;Q&#x27;</span>),                end=pd.Period(<span class="hljs-string">&#x27;2017Q2&#x27;</span>, freq=<span class="hljs-string">&#x27;Q&#x27;</span>), freq=<span class="hljs-string">&#x27;M&#x27;</span>)PeriodIndex([<span class="hljs-string">&#x27;2017-03&#x27;</span>, <span class="hljs-string">&#x27;2017-04&#x27;</span>, <span class="hljs-string">&#x27;2017-05&#x27;</span>, <span class="hljs-string">&#x27;2017-06&#x27;</span>], dtype=<span class="hljs-string">&#x27;period[M]&#x27;</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)</code></pre><h3><span id="03x03-asfreq-shi-qi-pin-lu-zhuan-huan"><font color="#4876FF">【03x03】asfreq 时期频率转换</font></span></h3><p>Period 和 PeriodIndex 对象都可以通过 asfreq 方法被转换成别的频率。</p><p>基本语法：<code>PeriodIndex.asfreq(self, *args, **kwargs)</code></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>freq</td><td>新的频率（偏移量），取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr><tr><td>how</td><td>按照开始或者结束对齐，<code>'E'</code> or <code>'END'</code> or <code>'FINISH'</code>；<code>'S'</code> or <code>'START'</code> or <code>'BEGIN'</code></td></tr></tbody></table><p>应用示例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pidx = pd.period_range(<span class="hljs-string">&#x27;2010-01-01&#x27;</span>, <span class="hljs-string">&#x27;2015-01-01&#x27;</span>, freq=<span class="hljs-string">&#x27;A&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>pidxPeriodIndex([<span class="hljs-string">&#x27;2010&#x27;</span>, <span class="hljs-string">&#x27;2011&#x27;</span>, <span class="hljs-string">&#x27;2012&#x27;</span>, <span class="hljs-string">&#x27;2013&#x27;</span>, <span class="hljs-string">&#x27;2014&#x27;</span>, <span class="hljs-string">&#x27;2015&#x27;</span>], dtype=<span class="hljs-string">&#x27;period[A-DEC]&#x27;</span>, freq=<span class="hljs-string">&#x27;A-DEC&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pidx.asfreq(<span class="hljs-string">&#x27;M&#x27;</span>)PeriodIndex([<span class="hljs-string">&#x27;2010-12&#x27;</span>, <span class="hljs-string">&#x27;2011-12&#x27;</span>, <span class="hljs-string">&#x27;2012-12&#x27;</span>, <span class="hljs-string">&#x27;2013-12&#x27;</span>, <span class="hljs-string">&#x27;2014-12&#x27;</span>, <span class="hljs-string">&#x27;2015-12&#x27;</span>], dtype=<span class="hljs-string">&#x27;period[M]&#x27;</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pidx.asfreq(<span class="hljs-string">&#x27;M&#x27;</span>, how=<span class="hljs-string">&#x27;S&#x27;</span>)PeriodIndex([<span class="hljs-string">&#x27;2010-01&#x27;</span>, <span class="hljs-string">&#x27;2011-01&#x27;</span>, <span class="hljs-string">&#x27;2012-01&#x27;</span>, <span class="hljs-string">&#x27;2013-01&#x27;</span>, <span class="hljs-string">&#x27;2014-01&#x27;</span>, <span class="hljs-string">&#x27;2015-01&#x27;</span>], dtype=<span class="hljs-string">&#x27;period[M]&#x27;</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)</code></pre><h3><span id="03x04-to-period-yu-to-timestamp"><font color="#4876FF">【03x04】to_period 与 to_timestamp()</font></span></h3><p><code>to_period</code> 方法可以将 Timestamp（时间戳） 转换为 Period（固定时期）；</p><p><code>to_timestamp</code> 方法可以将 Period（固定时期）转换为 Timestamp（时间戳） 。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>rng = pd.date_range(<span class="hljs-string">&#x27;2000-01-01&#x27;</span>, periods=<span class="hljs-number">3</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>ts = pd.Series(np.random.randn(<span class="hljs-number">3</span>), index=rng)<span class="hljs-meta">&gt;&gt;&gt; </span>ts<span class="hljs-number">2000</span>-01-<span class="hljs-number">31</span>    <span class="hljs-number">0.220759</span><span class="hljs-number">2000</span>-02-<span class="hljs-number">29</span>   -<span class="hljs-number">0.108221</span><span class="hljs-number">2000</span>-03-<span class="hljs-number">31</span>    <span class="hljs-number">0.819433</span>Freq: M, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pts = ts.to_period()<span class="hljs-meta">&gt;&gt;&gt; </span>pts<span class="hljs-number">2000</span>-01    <span class="hljs-number">0.220759</span><span class="hljs-number">2000</span>-02   -<span class="hljs-number">0.108221</span><span class="hljs-number">2000</span>-03    <span class="hljs-number">0.819433</span>Freq: M, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pts2 = pts.to_timestamp()<span class="hljs-meta">&gt;&gt;&gt; </span>pts2<span class="hljs-number">2000</span>-01-01    <span class="hljs-number">0.220759</span><span class="hljs-number">2000</span>-02-01   -<span class="hljs-number">0.108221</span><span class="hljs-number">2000</span>-03-01    <span class="hljs-number">0.819433</span>Freq: MS, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>ts.indexDatetimeIndex([<span class="hljs-string">&#x27;2000-01-31&#x27;</span>, <span class="hljs-string">&#x27;2000-02-29&#x27;</span>, <span class="hljs-string">&#x27;2000-03-31&#x27;</span>], dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pts.indexPeriodIndex([<span class="hljs-string">&#x27;2000-01&#x27;</span>, <span class="hljs-string">&#x27;2000-02&#x27;</span>, <span class="hljs-string">&#x27;2000-03&#x27;</span>], dtype=<span class="hljs-string">&#x27;period[M]&#x27;</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pts2.indexDatetimeIndex([<span class="hljs-string">&#x27;2000-01-01&#x27;</span>, <span class="hljs-string">&#x27;2000-02-01&#x27;</span>, <span class="hljs-string">&#x27;2000-03-01&#x27;</span>], dtype=<span class="hljs-string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;MS&#x27;</span>)</code></pre><h2><span id="04x00-timedelta-shi-jian-jian-ge"><font color="#FF0000">【04x00】timedelta 时间间隔</font></span></h2><h3><span id="04x01-pandas-timedelta"><font color="#4876FF">【04x01】pandas.Timedelta</font></span></h3><p>Timedelta 表示持续时间，即两个日期或时间之间的差。</p><p>Timedelta 相当于 Python 的 datetime.timedelta，在大多数情况下两者可以互换。</p><p>基本语法：<code>class pandas.Timedelta(value=&lt;object object&gt;, unit=None, **kwargs)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Timedelta.html">https://pandas.pydata.org/docs/reference/api/pandas.Timedelta.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>传入的值，可以是 Timedelta，timedelta，np.timedelta64，string 或 integer 对象</td></tr><tr><td>unit</td><td>用于设置 value 的单位，具体取值参见官方文档</td></tr></tbody></table><p>表示两个 datetime 对象之间的时间差：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="hljs-string">&#x27;2020-6-24&#x27;</span>) - pd.to_datetime(<span class="hljs-string">&#x27;2016-1-1&#x27;</span>)Timedelta(<span class="hljs-string">&#x27;1636 days 00:00:00&#x27;</span>)</code></pre><p>通过字符串传递参数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Timedelta(<span class="hljs-string">&#x27;3 days 3 hours 3 minutes 30 seconds&#x27;</span>)Timedelta(<span class="hljs-string">&#x27;3 days 03:03:30&#x27;</span>)</code></pre><p>通过整数传递参数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Timedelta(<span class="hljs-number">5</span>,unit=<span class="hljs-string">&#x27;h&#x27;</span>)Timedelta(<span class="hljs-string">&#x27;0 days 05:00:00&#x27;</span>)</code></pre><p>获取属性：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Timedelta(<span class="hljs-string">&#x27;3 days 3 hours 3 minutes 30 seconds&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>objTimedelta(<span class="hljs-string">&#x27;3 days 03:03:30&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.days<span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.seconds<span class="hljs-number">11010</span></code></pre><h3><span id="04x02-to-timedelta"><font color="#4876FF">【04x02】to_timedelta</font></span></h3><p>to_timedelta 方法可以将传入的对象转换成 timedelta 对象。</p><p>基本语法：<code>pandas.to_timedelta(arg, unit='ns', errors='raise')</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.to_timedelta.html">https://pandas.pydata.org/docs/reference/api/pandas.to_timedelta.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arg</td><td>要转换为 timedelta 的对象，可以是 str，timedelta，list-like 或 Series 对象</td></tr><tr><td>unit</td><td>用于设置 arg 的单位，具体取值参见官方文档</td></tr><tr><td>errors</td><td>如果 arg 不满足时间戳的形式，是否会发生异常<br><code>ignore</code>：不引发异常，返回原始输入；<code>raise</code>：无效解析将引发异常（默认）；<code>coerce</code>：无效解析将被设置为NaT</td></tr></tbody></table><p>将单个字符串解析为 timedelta 对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_timedelta(<span class="hljs-string">&#x27;1 days 06:05:01.00003&#x27;</span>)Timedelta(<span class="hljs-string">&#x27;1 days 06:05:01.000030&#x27;</span>)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_timedelta(<span class="hljs-string">&#x27;15.5us&#x27;</span>)Timedelta(<span class="hljs-string">&#x27;0 days 00:00:00.000015&#x27;</span>)</code></pre><p>将字符串列表或数组解析为  timedelta 对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_timedelta([<span class="hljs-string">&#x27;1 days 06:05:01.00003&#x27;</span>, <span class="hljs-string">&#x27;15.5us&#x27;</span>, <span class="hljs-string">&#x27;nan&#x27;</span>])TimedeltaIndex([<span class="hljs-string">&#x27;1 days 06:05:01.000030&#x27;</span>, <span class="hljs-string">&#x27;0 days 00:00:00.000015&#x27;</span>, NaT], dtype=<span class="hljs-string">&#x27;timedelta64[ns]&#x27;</span>, freq=<span class="hljs-literal">None</span>)</code></pre><p>指定 <code>unit</code> 参数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_timedelta(np.arange(<span class="hljs-number">5</span>), unit=<span class="hljs-string">&#x27;s&#x27;</span>)TimedeltaIndex([<span class="hljs-string">&#x27;00:00:00&#x27;</span>, <span class="hljs-string">&#x27;00:00:01&#x27;</span>, <span class="hljs-string">&#x27;00:00:02&#x27;</span>, <span class="hljs-string">&#x27;00:00:03&#x27;</span>, <span class="hljs-string">&#x27;00:00:04&#x27;</span>], dtype=<span class="hljs-string">&#x27;timedelta64[ns]&#x27;</span>, freq=<span class="hljs-literal">None</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.to_timedelta(np.arange(<span class="hljs-number">5</span>), unit=<span class="hljs-string">&#x27;d&#x27;</span>)TimedeltaIndex([<span class="hljs-string">&#x27;0 days&#x27;</span>, <span class="hljs-string">&#x27;1 days&#x27;</span>, <span class="hljs-string">&#x27;2 days&#x27;</span>, <span class="hljs-string">&#x27;3 days&#x27;</span>, <span class="hljs-string">&#x27;4 days&#x27;</span>], dtype=<span class="hljs-string">&#x27;timedelta64[ns]&#x27;</span>, freq=<span class="hljs-literal">None</span>)</code></pre><h3><span id="04x03-timedelta-range"><font color="#4876FF">【04x03】timedelta_range</font></span></h3><p><code>timedelta_range</code> 方法可根据指定的频率生成指定长度的 TimedeltaIndex。</p><p>基本语法：</p><pre><code class="hljs python">pandas.timedelta_range(start=<span class="hljs-literal">None</span>, end=<span class="hljs-literal">None</span>, periods=<span class="hljs-literal">None</span>,                       freq=<span class="hljs-literal">None</span>, name=<span class="hljs-literal">None</span>, closed=<span class="hljs-literal">None</span>) → pandas.core.indexes.timedeltas.TimedeltaIndex</code></pre><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.timedelta_range.html">https://pandas.pydata.org/docs/reference/api/pandas.timedelta_range.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>开始日期</td></tr><tr><td>end</td><td>结束日期</td></tr><tr><td>periods</td><td>int 类型，要生成的时段数</td></tr><tr><td>freq</td><td>频率字符串，即按照某种特定的频率来生成日期，取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr><tr><td>name</td><td>结果 TimedeltaIndex 的名称</td></tr><tr><td>closed</td><td><code>None</code>：默认值，同时保留开始日期和结束日期<br><code>'left'</code>：保留开始日期，不保留结束日期<br><code>'right'</code>：保留结束日期，不保留开始日期</td></tr></tbody></table><p>应用示例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.timedelta_range(start=<span class="hljs-string">&#x27;1 day&#x27;</span>, periods=<span class="hljs-number">4</span>)TimedeltaIndex([<span class="hljs-string">&#x27;1 days&#x27;</span>, <span class="hljs-string">&#x27;2 days&#x27;</span>, <span class="hljs-string">&#x27;3 days&#x27;</span>, <span class="hljs-string">&#x27;4 days&#x27;</span>], dtype=<span class="hljs-string">&#x27;timedelta64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)</code></pre><p>closed 参数指定保留哪个端点。默认保留两个端点：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.timedelta_range(start=<span class="hljs-string">&#x27;1 day&#x27;</span>, periods=<span class="hljs-number">4</span>, closed=<span class="hljs-string">&#x27;right&#x27;</span>)TimedeltaIndex([<span class="hljs-string">&#x27;2 days&#x27;</span>, <span class="hljs-string">&#x27;3 days&#x27;</span>, <span class="hljs-string">&#x27;4 days&#x27;</span>], dtype=<span class="hljs-string">&#x27;timedelta64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)</code></pre><p>freq 参数指定 TimedeltaIndex 的频率。只接受固定频率，非固定频率如 <code>'M'</code> 将会报错：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.timedelta_range(start=<span class="hljs-string">&#x27;1 day&#x27;</span>, end=<span class="hljs-string">&#x27;2 days&#x27;</span>, freq=<span class="hljs-string">&#x27;6H&#x27;</span>)TimedeltaIndex([<span class="hljs-string">&#x27;1 days 00:00:00&#x27;</span>, <span class="hljs-string">&#x27;1 days 06:00:00&#x27;</span>, <span class="hljs-string">&#x27;1 days 12:00:00&#x27;</span>,                <span class="hljs-string">&#x27;1 days 18:00:00&#x27;</span>, <span class="hljs-string">&#x27;2 days 00:00:00&#x27;</span>],               dtype=<span class="hljs-string">&#x27;timedelta64[ns]&#x27;</span>, freq=<span class="hljs-string">&#x27;6H&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.timedelta_range(start=<span class="hljs-string">&#x27;1 day&#x27;</span>, end=<span class="hljs-string">&#x27;2 days&#x27;</span>, freq=<span class="hljs-string">&#x27;M&#x27;</span>)Traceback (most recent call last):...ValueError: &lt;MonthEnd&gt; <span class="hljs-keyword">is</span> a non-fixed frequency</code></pre><h2><span id="05x00-chong-cai-yang-ji-pin-lu-zhuan-huan"><font color="#FF0000">【05x00】重采样及频率转换</font></span></h2><p>重采样（resampling）指的是将时间序列从一个频率转换到另一个频率的处理过程。将高频率数据聚合到低频率称为降采样（downsampling），而将低频率数据转换到高频率则称为升采样（upsampling）。并不是所有的重采样都能被划分到这两个大类中。例如，将 W-WED（每周三）转换为 W-FRI 既不是降采样也不是升采样。</p><p>Pandas 中提供了 resample 方法来帮助我们实现重采样。Pandas 对象都带有一个 resample 方法，它是各种频率转换工作的主力函数。</p><p>基本语法：</p><pre><code class="hljs python">Series.resample(self, rule, axis=<span class="hljs-number">0</span>,                 closed: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, NoneType] = <span class="hljs-literal">None</span>,                 label: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, NoneType] = <span class="hljs-literal">None</span>,                 convention: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;start&#x27;</span>,                 kind: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, NoneType] = <span class="hljs-literal">None</span>,                 loffset=<span class="hljs-literal">None</span>, base: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span>,                 on=<span class="hljs-literal">None</span>, level=<span class="hljs-literal">None</span>)</code></pre><pre><code class="hljs python">DataFrame.resample(self, rule, axis=<span class="hljs-number">0</span>,                    closed: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, NoneType] = <span class="hljs-literal">None</span>,                    label: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, NoneType] = <span class="hljs-literal">None</span>,                    convention: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;start&#x27;</span>,                    kind: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, NoneType] = <span class="hljs-literal">None</span>,                    loffset=<span class="hljs-literal">None</span>, base: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span>,                    on=<span class="hljs-literal">None</span>, level=<span class="hljs-literal">None</span>)</code></pre><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>rule</td><td></td></tr><tr><td>axis</td><td>重采样的轴，默认 0</td></tr><tr><td>closed</td><td>在重采样中，各时间段的哪一端是闭合（即包含）的，<br>除 <code>'M'</code>、<code>'A'</code>、<code>'Q'</code>、<code>'BM'</code>、<code>'BA'</code>、<code>'BQ'</code> 和 <code>'W'</code> 默认值为 ‘right’ 外，其他默认值为 'left‘</td></tr><tr><td>label</td><td>在重采样中，如何设置聚合值的标签， right 或 left，默认为 None，<br>例如，9:30 到 9:35 之间的这 5 分钟会被标记为 9:30 或 9:35</td></tr><tr><td>convention</td><td>仅用于 PeriodIndex（固定时期），对周期进行重采样，<code>'start'</code> or <code>'s'</code>，<code>'end'</code> or <code>'e'</code></td></tr><tr><td>on</td><td>对于 DataFrame 对象，可用该参数指定重采样后的数据的 index（行索引） 为原数据中的某列</td></tr><tr><td>level</td><td>对于具有层级索引（MultiIndex）的 DataFrame 对象，可以使用该参数来指定需要在哪个级别上进行重新采样</td></tr></tbody></table><p>将序列重采样到三分钟的频率，并将每个频率的值相加：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">9</span>, freq=<span class="hljs-string">&#x27;T&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>series = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>), index=index)<span class="hljs-meta">&gt;&gt;&gt; </span>series<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">00</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:02:<span class="hljs-number">00</span>    <span class="hljs-number">2</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>    <span class="hljs-number">3</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:04:<span class="hljs-number">00</span>    <span class="hljs-number">4</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:05:<span class="hljs-number">00</span>    <span class="hljs-number">5</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">6</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:07:<span class="hljs-number">00</span>    <span class="hljs-number">7</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:08:<span class="hljs-number">00</span>    <span class="hljs-number">8</span>Freq: T, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>series.resample(<span class="hljs-string">&#x27;3T&#x27;</span>).<span class="hljs-built_in">sum</span>()<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>     <span class="hljs-number">3</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>    <span class="hljs-number">12</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">21</span>Freq: 3T, dtype: int64</code></pre><p>设置 <code>label='right'</code>，即每个索引 index 会使用靠右侧（较大值）的标签：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">9</span>, freq=<span class="hljs-string">&#x27;T&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>series = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>), index=index)<span class="hljs-meta">&gt;&gt;&gt; </span>series<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">00</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:02:<span class="hljs-number">00</span>    <span class="hljs-number">2</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>    <span class="hljs-number">3</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:04:<span class="hljs-number">00</span>    <span class="hljs-number">4</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:05:<span class="hljs-number">00</span>    <span class="hljs-number">5</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">6</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:07:<span class="hljs-number">00</span>    <span class="hljs-number">7</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:08:<span class="hljs-number">00</span>    <span class="hljs-number">8</span>Freq: T, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>series.resample(<span class="hljs-string">&#x27;3T&#x27;</span>, label=<span class="hljs-string">&#x27;right&#x27;</span>).<span class="hljs-built_in">sum</span>()<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>     <span class="hljs-number">3</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">12</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:09:<span class="hljs-number">00</span>    <span class="hljs-number">21</span>Freq: 3T, dtype: int64</code></pre><p>设置 <code>closed='right'</code>，即结果中会包含原数据中最右侧（较大）的值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">9</span>, freq=<span class="hljs-string">&#x27;T&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>series = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>), index=index)<span class="hljs-meta">&gt;&gt;&gt; </span>series<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">00</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:02:<span class="hljs-number">00</span>    <span class="hljs-number">2</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>    <span class="hljs-number">3</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:04:<span class="hljs-number">00</span>    <span class="hljs-number">4</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:05:<span class="hljs-number">00</span>    <span class="hljs-number">5</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">6</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:07:<span class="hljs-number">00</span>    <span class="hljs-number">7</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:08:<span class="hljs-number">00</span>    <span class="hljs-number">8</span>Freq: T, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>series.resample(<span class="hljs-string">&#x27;3T&#x27;</span>, label=<span class="hljs-string">&#x27;right&#x27;</span>, closed=<span class="hljs-string">&#x27;right&#x27;</span>).<span class="hljs-built_in">sum</span>()<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>     <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>     <span class="hljs-number">6</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">15</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:09:<span class="hljs-number">00</span>    <span class="hljs-number">15</span>Freq: 3T, dtype: int64</code></pre><p>以下示例将序列重采样到30秒的频率，<code>asfreq()[0:5]</code> 用于选择前5行数据：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">9</span>, freq=<span class="hljs-string">&#x27;T&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>series = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>), index=index)<span class="hljs-meta">&gt;&gt;&gt; </span>series<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">00</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:02:<span class="hljs-number">00</span>    <span class="hljs-number">2</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>    <span class="hljs-number">3</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:04:<span class="hljs-number">00</span>    <span class="hljs-number">4</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:05:<span class="hljs-number">00</span>    <span class="hljs-number">5</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">6</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:07:<span class="hljs-number">00</span>    <span class="hljs-number">7</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:08:<span class="hljs-number">00</span>    <span class="hljs-number">8</span>Freq: T, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>series.resample(<span class="hljs-string">&#x27;30S&#x27;</span>).asfreq()[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">30</span>    NaN<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">00</span>    <span class="hljs-number">1.0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">30</span>    NaN<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:02:<span class="hljs-number">00</span>    <span class="hljs-number">2.0</span>Freq: 30S, dtype: float64</code></pre><p>使用 <code>pad</code> 方法向后填充缺失值（NaN）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">9</span>, freq=<span class="hljs-string">&#x27;T&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>series = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>), index=index)<span class="hljs-meta">&gt;&gt;&gt; </span>series<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">00</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:02:<span class="hljs-number">00</span>    <span class="hljs-number">2</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>    <span class="hljs-number">3</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:04:<span class="hljs-number">00</span>    <span class="hljs-number">4</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:05:<span class="hljs-number">00</span>    <span class="hljs-number">5</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">6</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:07:<span class="hljs-number">00</span>    <span class="hljs-number">7</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:08:<span class="hljs-number">00</span>    <span class="hljs-number">8</span>Freq: T, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>series.resample(<span class="hljs-string">&#x27;30S&#x27;</span>).pad()[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">30</span>    <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">00</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">30</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:02:<span class="hljs-number">00</span>    <span class="hljs-number">2</span>Freq: 30S, dtype: int64</code></pre><p>使用 <code>bfill</code> 方法向前填充缺失值（NaN）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">9</span>, freq=<span class="hljs-string">&#x27;T&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>series = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>), index=index)<span class="hljs-meta">&gt;&gt;&gt; </span>series<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">00</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:02:<span class="hljs-number">00</span>    <span class="hljs-number">2</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>    <span class="hljs-number">3</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:04:<span class="hljs-number">00</span>    <span class="hljs-number">4</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:05:<span class="hljs-number">00</span>    <span class="hljs-number">5</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">6</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:07:<span class="hljs-number">00</span>    <span class="hljs-number">7</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:08:<span class="hljs-number">00</span>    <span class="hljs-number">8</span>Freq: T, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>series.resample(<span class="hljs-string">&#x27;30S&#x27;</span>).bfill()[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">30</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">00</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">30</span>    <span class="hljs-number">2</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:02:<span class="hljs-number">00</span>    <span class="hljs-number">2</span>Freq: 30S, dtype: int64</code></pre><p>通过 <code>apply</code> 方法传递自定义函数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">9</span>, freq=<span class="hljs-string">&#x27;T&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>series = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>), index=index)<span class="hljs-meta">&gt;&gt;&gt; </span>series<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:01:<span class="hljs-number">00</span>    <span class="hljs-number">1</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:02:<span class="hljs-number">00</span>    <span class="hljs-number">2</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>    <span class="hljs-number">3</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:04:<span class="hljs-number">00</span>    <span class="hljs-number">4</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:05:<span class="hljs-number">00</span>    <span class="hljs-number">5</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">6</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:07:<span class="hljs-number">00</span>    <span class="hljs-number">7</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:08:<span class="hljs-number">00</span>    <span class="hljs-number">8</span>Freq: T, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">custom_resampler</span>(<span class="hljs-params">array_like</span>):</span>    <span class="hljs-keyword">return</span> np.<span class="hljs-built_in">sum</span>(array_like) + <span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span>series.resample(<span class="hljs-string">&#x27;3T&#x27;</span>).apply(custom_resampler)<span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>     <span class="hljs-number">8</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:03:<span class="hljs-number">00</span>    <span class="hljs-number">17</span><span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:06:<span class="hljs-number">00</span>    <span class="hljs-number">26</span>Freq: 3T, dtype: int64</code></pre><p>convention 参数的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], index=pd.period_range(<span class="hljs-string">&#x27;2012-01-01&#x27;</span>, freq=<span class="hljs-string">&#x27;A&#x27;</span>, periods=<span class="hljs-number">2</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>s<span class="hljs-number">2012</span>    <span class="hljs-number">1</span><span class="hljs-number">2013</span>    <span class="hljs-number">2</span>Freq: A-DEC, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>s.resample(<span class="hljs-string">&#x27;Q&#x27;</span>, convention=<span class="hljs-string">&#x27;start&#x27;</span>).asfreq()2012Q1    <span class="hljs-number">1.0</span>2012Q2    NaN2012Q3    NaN2012Q4    NaN2013Q1    <span class="hljs-number">2.0</span>2013Q2    NaN2013Q3    NaN2013Q4    NaNFreq: Q-DEC, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>s.resample(<span class="hljs-string">&#x27;Q&#x27;</span>, convention=<span class="hljs-string">&#x27;end&#x27;</span>).asfreq()2012Q4    <span class="hljs-number">1.0</span>2013Q1    NaN2013Q2    NaN2013Q3    NaN2013Q4    <span class="hljs-number">2.0</span>Freq: Q-DEC, dtype: float64</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>q = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], index=pd.period_range(<span class="hljs-string">&#x27;2018-01-01&#x27;</span>, freq=<span class="hljs-string">&#x27;Q&#x27;</span>, periods=<span class="hljs-number">4</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>q2018Q1    <span class="hljs-number">1</span>2018Q2    <span class="hljs-number">2</span>2018Q3    <span class="hljs-number">3</span>2018Q4    <span class="hljs-number">4</span>Freq: Q-DEC, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>q.resample(<span class="hljs-string">&#x27;M&#x27;</span>, convention=<span class="hljs-string">&#x27;end&#x27;</span>).asfreq()<span class="hljs-number">2018</span>-03    <span class="hljs-number">1.0</span><span class="hljs-number">2018</span>-04    NaN<span class="hljs-number">2018</span>-05    NaN<span class="hljs-number">2018</span>-06    <span class="hljs-number">2.0</span><span class="hljs-number">2018</span>-07    NaN<span class="hljs-number">2018</span>-08    NaN<span class="hljs-number">2018</span>-09    <span class="hljs-number">3.0</span><span class="hljs-number">2018</span>-<span class="hljs-number">10</span>    NaN<span class="hljs-number">2018</span>-<span class="hljs-number">11</span>    NaN<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>    <span class="hljs-number">4.0</span>Freq: M, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>q.resample(<span class="hljs-string">&#x27;M&#x27;</span>, convention=<span class="hljs-string">&#x27;start&#x27;</span>).asfreq()<span class="hljs-number">2018</span>-01    <span class="hljs-number">1.0</span><span class="hljs-number">2018</span>-02    NaN<span class="hljs-number">2018</span>-03    NaN<span class="hljs-number">2018</span>-04    <span class="hljs-number">2.0</span><span class="hljs-number">2018</span>-05    NaN<span class="hljs-number">2018</span>-06    NaN<span class="hljs-number">2018</span>-07    <span class="hljs-number">3.0</span><span class="hljs-number">2018</span>-08    NaN<span class="hljs-number">2018</span>-09    NaN<span class="hljs-number">2018</span>-<span class="hljs-number">10</span>    <span class="hljs-number">4.0</span><span class="hljs-number">2018</span>-<span class="hljs-number">11</span>    NaN<span class="hljs-number">2018</span>-<span class="hljs-number">12</span>    NaNFreq: M, dtype: float64</code></pre><p>对于 DataFrame 对象，可以使用关键字 on 来指定原数据中的某列为重采样后数据的行索引：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>d = <span class="hljs-built_in">dict</span>(&#123;<span class="hljs-string">&#x27;price&#x27;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">18</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>],            <span class="hljs-string">&#x27;volume&#x27;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">60</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame(d)<span class="hljs-meta">&gt;&gt;&gt; </span>df[<span class="hljs-string">&#x27;week_starting&#x27;</span>] = pd.date_range(<span class="hljs-string">&#x27;01/01/2018&#x27;</span>, periods=<span class="hljs-number">8</span>, freq=<span class="hljs-string">&#x27;W&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>df   price  volume week_starting<span class="hljs-number">0</span>     <span class="hljs-number">10</span>      <span class="hljs-number">50</span>    <span class="hljs-number">2018</span>-01-07<span class="hljs-number">1</span>     <span class="hljs-number">11</span>      <span class="hljs-number">60</span>    <span class="hljs-number">2018</span>-01-<span class="hljs-number">14</span><span class="hljs-number">2</span>      <span class="hljs-number">9</span>      <span class="hljs-number">40</span>    <span class="hljs-number">2018</span>-01-<span class="hljs-number">21</span><span class="hljs-number">3</span>     <span class="hljs-number">13</span>     <span class="hljs-number">100</span>    <span class="hljs-number">2018</span>-01-<span class="hljs-number">28</span><span class="hljs-number">4</span>     <span class="hljs-number">14</span>      <span class="hljs-number">50</span>    <span class="hljs-number">2018</span>-02-04<span class="hljs-number">5</span>     <span class="hljs-number">18</span>     <span class="hljs-number">100</span>    <span class="hljs-number">2018</span>-02-<span class="hljs-number">11</span><span class="hljs-number">6</span>     <span class="hljs-number">17</span>      <span class="hljs-number">40</span>    <span class="hljs-number">2018</span>-02-<span class="hljs-number">18</span><span class="hljs-number">7</span>     <span class="hljs-number">19</span>      <span class="hljs-number">50</span>    <span class="hljs-number">2018</span>-02-<span class="hljs-number">25</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>df.resample(<span class="hljs-string">&#x27;M&#x27;</span>, on=<span class="hljs-string">&#x27;week_starting&#x27;</span>).mean()               price  volumeweek_starting               <span class="hljs-number">2018</span>-01-<span class="hljs-number">31</span>     <span class="hljs-number">10.75</span>    <span class="hljs-number">62.5</span><span class="hljs-number">2018</span>-02-<span class="hljs-number">28</span>     <span class="hljs-number">17.00</span>    <span class="hljs-number">60.0</span></code></pre><p>对于具有层级索引（MultiIndex）的 DataFrame 对象，可以使用关键字 <code>level</code> 来指定需要在哪个级别上进行重新采样：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>days = pd.date_range(<span class="hljs-string">&#x27;1/1/2000&#x27;</span>, periods=<span class="hljs-number">4</span>, freq=<span class="hljs-string">&#x27;D&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = <span class="hljs-built_in">dict</span>(&#123;<span class="hljs-string">&#x27;price&#x27;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">18</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>],              <span class="hljs-string">&#x27;volume&#x27;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">60</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>df2 = pd.DataFrame(d2, index=pd.MultiIndex.from_product([days, [<span class="hljs-string">&#x27;morning&#x27;</span>, <span class="hljs-string">&#x27;afternoon&#x27;</span>]]))<span class="hljs-meta">&gt;&gt;&gt; </span>df2                      price  volume<span class="hljs-number">2000</span>-01-01 morning       <span class="hljs-number">10</span>      <span class="hljs-number">50</span>           afternoon     <span class="hljs-number">11</span>      <span class="hljs-number">60</span><span class="hljs-number">2000</span>-01-02 morning        <span class="hljs-number">9</span>      <span class="hljs-number">40</span>           afternoon     <span class="hljs-number">13</span>     <span class="hljs-number">100</span><span class="hljs-number">2000</span>-01-03 morning       <span class="hljs-number">14</span>      <span class="hljs-number">50</span>           afternoon     <span class="hljs-number">18</span>     <span class="hljs-number">100</span><span class="hljs-number">2000</span>-01-04 morning       <span class="hljs-number">17</span>      <span class="hljs-number">40</span>           afternoon     <span class="hljs-number">19</span>      <span class="hljs-number">50</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>df2.resample(<span class="hljs-string">&#x27;D&#x27;</span>, level=<span class="hljs-number">0</span>).<span class="hljs-built_in">sum</span>()            price  volume<span class="hljs-number">2000</span>-01-01     <span class="hljs-number">21</span>     <span class="hljs-number">110</span><span class="hljs-number">2000</span>-01-02     <span class="hljs-number">22</span>     <span class="hljs-number">140</span><span class="hljs-number">2000</span>-01-03     <span class="hljs-number">32</span>     <span class="hljs-number">150</span><span class="hljs-number">2000</span>-01-04     <span class="hljs-number">36</span>      <span class="hljs-number">90</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106947061</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Pandas（八）：数据重塑/重复数据处理/数据替换</title>
      <link href="/article/032/"/>
      <url>/article/032/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01x00-shu-ju-chong-su-font"><font color="#FF0000">【01x00】数据重塑</font></a><ul><li><a href="#font-color-4876ff-01x01-stack-font"><font color="#4876FF">【01x01】stack</font></a></li><li><a href="#font-color-4876ff-01x02-unstack-font"><font color="#4876FF">【01x02】unstack</font></a></li></ul></li><li><a href="#font-color-ff0000-02x00-chong-fu-shu-ju-chu-li-font"><font color="#FF0000">【02x00】重复数据处理</font></a><ul><li><a href="#font-color-4876ff-02x01-duplicated-font"><font color="#4876FF">【02x01】duplicated</font></a></li><li><a href="#font-color-4876ff-02x02-drop-duplicates-font"><font color="#4876FF">【02x02】drop_duplicates</font></a></li></ul></li><li><a href="#font-color-ff0000-03x00-shu-ju-ti-huan-font"><font color="#FF0000">【03x00】数据替换</font></a><ul><li><a href="#font-color-4876ff-03x01-replace-font"><font color="#4876FF">【03x01】replace</font></a></li><li><a href="#font-color-4876ff-03x02-where-font"><font color="#4876FF">【03x02】where</font></a></li><li><a href="#font-color-4876ff-03x03-mask-font"><font color="#4876FF">【03x03】mask</font></a></li></ul></li></ul><!-- tocstop --><hr><p>Pandas 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/025/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itbob.cn/article/026/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itbob.cn/article/027/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itbob.cn/article/028/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itbob.cn/article/029/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itbob.cn/article/030/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itbob.cn/article/031/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itbob.cn/article/032/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itbob.cn/article/033/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itbob.cn/article/034/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106900748</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01x00-shu-ju-chong-su"><font color="#FF0000">【01x00】数据重塑</font></span></h2><p>有许多用于重新排列表格型数据的基础运算。这些函数也称作重塑（reshape）或轴向旋转（pivot）运算。重塑层次化索引主要有以下两个方法：</p><ul><li><p><code>stack</code>：将数据的列转换成行；</p></li><li><p><code>unstack</code>：将数据的行转换成列。</p></li></ul><h3><span id="01x01-stack"><font color="#4876FF">【01x01】stack</font></span></h3><p><code>stack</code> 方法用于将数据的列转换成为行；</p><p>基本语法：<code>DataFrame.stack(self, level=-1, dropna=True)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>level</td><td>从列转换到行，指定不同层级的列索引或列标签、由列索引或列标签组成的数组，默认-1</td></tr><tr><td>dropna</td><td>bool 类型，是否删除重塑后数据中所有值为 NaN 的行，默认 True</td></tr></tbody></table><p>单层列（Single level columns）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]], index=[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>], columns=[<span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-string">&#x27;height&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj     weight  heightcat       <span class="hljs-number">0</span>       <span class="hljs-number">1</span>dog       <span class="hljs-number">2</span>       <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.stack()cat  weight    <span class="hljs-number">0</span>     height    <span class="hljs-number">1</span>dog  weight    <span class="hljs-number">2</span>     height    <span class="hljs-number">3</span>dtype: int64</code></pre><p>多层列（Multi level columns）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>multicol = pd.MultiIndex.from_tuples([(<span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-string">&#x27;kg&#x27;</span>), (<span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-string">&#x27;pounds&#x27;</span>)])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>]], index=[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>], columns=multicol)<span class="hljs-meta">&gt;&gt;&gt; </span>obj    weight               kg poundscat      <span class="hljs-number">1</span>      <span class="hljs-number">2</span>dog      <span class="hljs-number">2</span>      <span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.stack()            weightcat kg           <span class="hljs-number">1</span>    pounds       <span class="hljs-number">2</span>dog kg           <span class="hljs-number">2</span>    pounds       <span class="hljs-number">4</span></code></pre><p>缺失值填充：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>multicol = pd.MultiIndex.from_tuples([(<span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-string">&#x27;kg&#x27;</span>), (<span class="hljs-string">&#x27;height&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>)])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>], [<span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>]], index=[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>], columns=multicol)<span class="hljs-meta">&gt;&gt;&gt; </span>obj    weight height        kg      mcat    <span class="hljs-number">1.0</span>    <span class="hljs-number">2.0</span>dog    <span class="hljs-number">3.0</span>    <span class="hljs-number">4.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.stack()        height  weightcat kg     NaN     <span class="hljs-number">1.0</span>    m      <span class="hljs-number">2.0</span>     NaNdog kg     NaN     <span class="hljs-number">3.0</span>    m      <span class="hljs-number">4.0</span>     NaN</code></pre><p>通过 <code>level</code> 参数指定不同层级的轴进行重塑：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>multicol = pd.MultiIndex.from_tuples([(<span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-string">&#x27;kg&#x27;</span>), (<span class="hljs-string">&#x27;height&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>)])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>], [<span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>]], index=[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>], columns=multicol)<span class="hljs-meta">&gt;&gt;&gt; </span>obj    weight height        kg      mcat    <span class="hljs-number">1.0</span>    <span class="hljs-number">2.0</span>dog    <span class="hljs-number">3.0</span>    <span class="hljs-number">4.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.stack(level=<span class="hljs-number">0</span>)             kg    mcat height  NaN  <span class="hljs-number">2.0</span>    weight  <span class="hljs-number">1.0</span>  NaNdog height  NaN  <span class="hljs-number">4.0</span>    weight  <span class="hljs-number">3.0</span>  NaN<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.stack(level=<span class="hljs-number">1</span>)        height  weightcat kg     NaN     <span class="hljs-number">1.0</span>    m      <span class="hljs-number">2.0</span>     NaNdog kg     NaN     <span class="hljs-number">3.0</span>    m      <span class="hljs-number">4.0</span>     NaN&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.stack(level=[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])cat  height  m     <span class="hljs-number">2.0</span>     weight  kg    <span class="hljs-number">1.0</span>dog  height  m     <span class="hljs-number">4.0</span>     weight  kg    <span class="hljs-number">3.0</span>dtype: float64</code></pre><p>对于重塑后的数据，若有一行的值均为 NaN，则默认会被删除，可以设置 <code>dropna=False</code> 来保留缺失值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>multicol = pd.MultiIndex.from_tuples([(<span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-string">&#x27;kg&#x27;</span>), (<span class="hljs-string">&#x27;height&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>)])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-literal">None</span>, <span class="hljs-number">1.0</span>], [<span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>]], index=[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>], columns=multicol)<span class="hljs-meta">&gt;&gt;&gt; </span>obj    weight height        kg      mcat    NaN    <span class="hljs-number">1.0</span>dog    <span class="hljs-number">2.0</span>    <span class="hljs-number">3.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.stack(dropna=<span class="hljs-literal">False</span>)        height  weightcat kg     NaN     NaN    m      <span class="hljs-number">1.0</span>     NaNdog kg     NaN     <span class="hljs-number">2.0</span>    m      <span class="hljs-number">3.0</span>     NaN<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.stack(dropna=<span class="hljs-literal">True</span>)        height  weightcat m      <span class="hljs-number">1.0</span>     NaNdog kg     NaN     <span class="hljs-number">2.0</span>    m      <span class="hljs-number">3.0</span>     NaN</code></pre><h3><span id="01x02-unstack"><font color="#4876FF">【01x02】unstack</font></span></h3><p><code>unstack</code>：将数据的行转换成列。</p><p>基本语法：</p><ul><li><p><code>Series.unstack(self, level=-1, fill_value=None)</code></p></li><li><p><code>DataFrame.unstack(self, level=-1, fill_value=None)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.unstack.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.unstack.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.unstack.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.unstack.html</a></p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>level</td><td>从行转换到列，指定不同层级的行索引，默认-1</td></tr><tr><td>fill_value</td><td>用于替换 NaN 的值</td></tr></tbody></table><p>在 Series 对象中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], index=pd.MultiIndex.from_product([[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>], [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]]))<span class="hljs-meta">&gt;&gt;&gt; </span>objone  a    <span class="hljs-number">1</span>     b    <span class="hljs-number">2</span>two  a    <span class="hljs-number">3</span>     b    <span class="hljs-number">4</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.unstack()     a  bone  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>two  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.unstack(level=<span class="hljs-number">0</span>)   one  twoa    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>b    <span class="hljs-number">2</span>    <span class="hljs-number">4</span></code></pre><p>和 <code>stack</code> 方法类似，如果值不存在将会引入缺失值（NaN）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], index=[<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj3 = pd.concat([obj1, obj2], keys=[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj3one  a    <span class="hljs-number">0</span>     b    <span class="hljs-number">1</span>     c    <span class="hljs-number">2</span>     d    <span class="hljs-number">3</span>two  c    <span class="hljs-number">4</span>     d    <span class="hljs-number">5</span>     e    <span class="hljs-number">6</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj3.unstack()       a    b    c    d    eone  <span class="hljs-number">0.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span>  NaNtwo  NaN  NaN  <span class="hljs-number">4.0</span>  <span class="hljs-number">5.0</span>  <span class="hljs-number">6.0</span></code></pre><p>在 DataFrame 对象中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="hljs-number">6</span>).reshape((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)),               index=pd.Index([<span class="hljs-string">&#x27;Ohio&#x27;</span>,<span class="hljs-string">&#x27;Colorado&#x27;</span>], name=<span class="hljs-string">&#x27;state&#x27;</span>),               columns=pd.Index([<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],               name=<span class="hljs-string">&#x27;number&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>objnumber    one  two  threestate                    Ohio        <span class="hljs-number">0</span>    <span class="hljs-number">1</span>      <span class="hljs-number">2</span>Colorado    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>      <span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = obj.stack()<span class="hljs-meta">&gt;&gt;&gt; </span>obj2state     numberOhio      one       <span class="hljs-number">0</span>          two       <span class="hljs-number">1</span>          three     <span class="hljs-number">2</span>Colorado  one       <span class="hljs-number">3</span>          two       <span class="hljs-number">4</span>          three     <span class="hljs-number">5</span>dtype: int32<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj3 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;left&#x27;</span>: obj2, <span class="hljs-string">&#x27;right&#x27;</span>: obj2 + <span class="hljs-number">5</span>&#125;,            columns=pd.Index([<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-string">&#x27;right&#x27;</span>], name=<span class="hljs-string">&#x27;side&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj3side             left  rightstate    number             Ohio     one        <span class="hljs-number">0</span>      <span class="hljs-number">5</span>         two        <span class="hljs-number">1</span>      <span class="hljs-number">6</span>         three      <span class="hljs-number">2</span>      <span class="hljs-number">7</span>Colorado one        <span class="hljs-number">3</span>      <span class="hljs-number">8</span>         two        <span class="hljs-number">4</span>      <span class="hljs-number">9</span>         three      <span class="hljs-number">5</span>     <span class="hljs-number">10</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj3.unstack(<span class="hljs-string">&#x27;state&#x27;</span>)side   left          right         state  Ohio Colorado  Ohio Coloradonumber                             one       <span class="hljs-number">0</span>        <span class="hljs-number">3</span>     <span class="hljs-number">5</span>        <span class="hljs-number">8</span>two       <span class="hljs-number">1</span>        <span class="hljs-number">4</span>     <span class="hljs-number">6</span>        <span class="hljs-number">9</span>three     <span class="hljs-number">2</span>        <span class="hljs-number">5</span>     <span class="hljs-number">7</span>       <span class="hljs-number">10</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj3.unstack(<span class="hljs-string">&#x27;state&#x27;</span>).stack(<span class="hljs-string">&#x27;side&#x27;</span>)state         Colorado  Ohionumber side                 one    left          <span class="hljs-number">3</span>     <span class="hljs-number">0</span>       right         <span class="hljs-number">8</span>     <span class="hljs-number">5</span>two    left          <span class="hljs-number">4</span>     <span class="hljs-number">1</span>       right         <span class="hljs-number">9</span>     <span class="hljs-number">6</span>three  left          <span class="hljs-number">5</span>     <span class="hljs-number">2</span>       right        <span class="hljs-number">10</span>     <span class="hljs-number">7</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106900748</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="02x00-chong-fu-shu-ju-chu-li"><font color="#FF0000">【02x00】重复数据处理</font></span></h2><ul><li><p><code>duplicated</code>：判断是否为重复值；</p></li><li><p><code>drop_duplicates</code>：删除重复值。</p></li></ul><h3><span id="02x01-duplicated"><font color="#4876FF">【02x01】duplicated</font></span></h3><p><code>duplicated</code> 方法可以判断值是否为重复数据。</p><p>基本语法：</p><ul><li><p><code>Series.duplicated(self, keep='first')</code></p></li><li><p><code>DataFrame.duplicated(self, subset: Union[Hashable, Sequence[Hashable], NoneType] = None, keep: Union[str, bool] = 'first') → ’Series’</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.duplicated.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.duplicated.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.duplicated.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.duplicated.html</a></p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>keep</td><td>标记重复项的方法，默认 <code>'first'</code><br><code>'first'</code>：将非重复项和第一个重复项标记为 False，其他重复项标记为 True<br><code>'last'</code>：将非重复项和最后一个重复项标记为 False，其他重复项标记为 True<br><code>False</code>：将所有重复项标记为 True，非重复项标记为 False</td></tr><tr><td>subset</td><td>列标签或标签序列，在 DataFrame 对象中才有此参数，<br>用于指定某列，仅标记该列的重复项，默认情况下将考虑所有列</td></tr></tbody></table><p>默认情况下，对于每组重复的值，第一个出现的重复值标记为 False，其他重复项标记为 True，非重复项标记为 False，相当于 <code>keep='first'</code>：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;cow&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;beetle&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>      lama<span class="hljs-number">1</span>       cow<span class="hljs-number">2</span>      lama<span class="hljs-number">3</span>    beetle<span class="hljs-number">4</span>      lamadtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.duplicated()<span class="hljs-number">0</span>    <span class="hljs-literal">False</span><span class="hljs-number">1</span>    <span class="hljs-literal">False</span><span class="hljs-number">2</span>     <span class="hljs-literal">True</span><span class="hljs-number">3</span>    <span class="hljs-literal">False</span><span class="hljs-number">4</span>     <span class="hljs-literal">True</span>dtype: <span class="hljs-built_in">bool</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.duplicated(keep=<span class="hljs-string">&#x27;first&#x27;</span>)<span class="hljs-number">0</span>    <span class="hljs-literal">False</span><span class="hljs-number">1</span>    <span class="hljs-literal">False</span><span class="hljs-number">2</span>     <span class="hljs-literal">True</span><span class="hljs-number">3</span>    <span class="hljs-literal">False</span><span class="hljs-number">4</span>     <span class="hljs-literal">True</span>dtype: <span class="hljs-built_in">bool</span></code></pre><p>设置 <code>keep='last'</code>，将每组非重复项和最后一次出现的重复项标记为 False，其他重复项标记为 True，设置 <code>keep=False</code>，则所有重复项均为 True，其他值为 False：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;cow&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;beetle&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>      lama<span class="hljs-number">1</span>       cow<span class="hljs-number">2</span>      lama<span class="hljs-number">3</span>    beetle<span class="hljs-number">4</span>      lamadtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.duplicated(keep=<span class="hljs-string">&#x27;last&#x27;</span>)<span class="hljs-number">0</span>     <span class="hljs-literal">True</span><span class="hljs-number">1</span>    <span class="hljs-literal">False</span><span class="hljs-number">2</span>     <span class="hljs-literal">True</span><span class="hljs-number">3</span>    <span class="hljs-literal">False</span><span class="hljs-number">4</span>    <span class="hljs-literal">False</span>dtype: <span class="hljs-built_in">bool</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.duplicated(keep=<span class="hljs-literal">False</span>)<span class="hljs-number">0</span>     <span class="hljs-literal">True</span><span class="hljs-number">1</span>    <span class="hljs-literal">False</span><span class="hljs-number">2</span>     <span class="hljs-literal">True</span><span class="hljs-number">3</span>    <span class="hljs-literal">False</span><span class="hljs-number">4</span>     <span class="hljs-literal">True</span>dtype: <span class="hljs-built_in">bool</span></code></pre><p>在 DataFrame 对象中，subset 参数用于指定某列，仅标记该列的重复项，默认情况下将考虑所有列：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;data1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>] * <span class="hljs-number">4</span> + [<span class="hljs-string">&#x27;b&#x27;</span>] * <span class="hljs-number">4</span>,                       <span class="hljs-string">&#x27;data2&#x27;</span> : np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  data1  data2<span class="hljs-number">0</span>     a      <span class="hljs-number">0</span><span class="hljs-number">1</span>     a      <span class="hljs-number">0</span><span class="hljs-number">2</span>     a      <span class="hljs-number">0</span><span class="hljs-number">3</span>     a      <span class="hljs-number">3</span><span class="hljs-number">4</span>     b      <span class="hljs-number">3</span><span class="hljs-number">5</span>     b      <span class="hljs-number">3</span><span class="hljs-number">6</span>     b      <span class="hljs-number">0</span><span class="hljs-number">7</span>     b      <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.duplicated()<span class="hljs-number">0</span>    <span class="hljs-literal">False</span><span class="hljs-number">1</span>     <span class="hljs-literal">True</span><span class="hljs-number">2</span>     <span class="hljs-literal">True</span><span class="hljs-number">3</span>    <span class="hljs-literal">False</span><span class="hljs-number">4</span>    <span class="hljs-literal">False</span><span class="hljs-number">5</span>     <span class="hljs-literal">True</span><span class="hljs-number">6</span>    <span class="hljs-literal">False</span><span class="hljs-number">7</span>    <span class="hljs-literal">False</span>dtype: <span class="hljs-built_in">bool</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.duplicated(subset=<span class="hljs-string">&#x27;data1&#x27;</span>)<span class="hljs-number">0</span>    <span class="hljs-literal">False</span><span class="hljs-number">1</span>     <span class="hljs-literal">True</span><span class="hljs-number">2</span>     <span class="hljs-literal">True</span><span class="hljs-number">3</span>     <span class="hljs-literal">True</span><span class="hljs-number">4</span>    <span class="hljs-literal">False</span><span class="hljs-number">5</span>     <span class="hljs-literal">True</span><span class="hljs-number">6</span>     <span class="hljs-literal">True</span><span class="hljs-number">7</span>     <span class="hljs-literal">True</span>dtype: <span class="hljs-built_in">bool</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.duplicated(subset=<span class="hljs-string">&#x27;data2&#x27;</span>, keep=<span class="hljs-string">&#x27;last&#x27;</span>)<span class="hljs-number">0</span>     <span class="hljs-literal">True</span><span class="hljs-number">1</span>     <span class="hljs-literal">True</span><span class="hljs-number">2</span>     <span class="hljs-literal">True</span><span class="hljs-number">3</span>     <span class="hljs-literal">True</span><span class="hljs-number">4</span>     <span class="hljs-literal">True</span><span class="hljs-number">5</span>    <span class="hljs-literal">False</span><span class="hljs-number">6</span>    <span class="hljs-literal">False</span><span class="hljs-number">7</span>    <span class="hljs-literal">False</span>dtype: <span class="hljs-built_in">bool</span></code></pre><h3><span id="02x02-drop-duplicates"><font color="#4876FF">【02x02】drop_duplicates</font></span></h3><p><code>drop_duplicates</code> 方法会返回一个删除了重复值的序列。</p><p>基本语法：</p><pre><code class="hljs python">Series.drop_duplicates(self, keep=<span class="hljs-string">&#x27;first&#x27;</span>, inplace=<span class="hljs-literal">False</span>)</code></pre><pre><code class="hljs python">DataFrame.drop_duplicates(self,                          subset: <span class="hljs-type">Union</span>[Hashable, <span class="hljs-type">Sequence</span>[Hashable], NoneType] = <span class="hljs-literal">None</span>,                          keep: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">bool</span>] = <span class="hljs-string">&#x27;first&#x27;</span>,                          inplace: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,                          ignore_index: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>) → <span class="hljs-type">Union</span>[ForwardRef(‘DataFrame’), NoneType]</code></pre><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.drop_duplicates.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.drop_duplicates.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop_duplicates.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop_duplicates.html</a></p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>keep</td><td>删除重复项的方法，默认 <code>'first'</code><br><code>'first'</code>：保留非重复项和第一个重复项，其他重复项标记均删除<br><code>'last'</code>：保留非重复项和最后一个重复项，其他重复项删除<br><code>False</code>：将所有重复项删除，非重复项保留</td></tr><tr><td>inplace</td><td>是否返回删除重复项后的值，默认 False，若设置为 True，则不返回值，直接改变原数据</td></tr><tr><td>subset</td><td>列标签或标签序列，在 DataFrame 对象中才有此参数，<br>用于指定某列，仅标记该列的重复项，默认情况下将考虑所有列</td></tr><tr><td>ignore_index</td><td>bool 类型，在 DataFrame 对象中才有此参数，是否忽略原对象的轴标记，<br>默认 False，如果为 True，则新对象的索引将是 0, 1, 2, …, n-1</td></tr></tbody></table><p>keep 参数的使用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;cow&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;beetle&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;hippo&#x27;</span>], name=<span class="hljs-string">&#x27;animal&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>      lama<span class="hljs-number">1</span>       cow<span class="hljs-number">2</span>      lama<span class="hljs-number">3</span>    beetle<span class="hljs-number">4</span>      lama<span class="hljs-number">5</span>     hippoName: animal, dtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.drop_duplicates()<span class="hljs-number">0</span>      lama<span class="hljs-number">1</span>       cow<span class="hljs-number">3</span>    beetle<span class="hljs-number">5</span>     hippoName: animal, dtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.drop_duplicates(keep=<span class="hljs-string">&#x27;last&#x27;</span>)<span class="hljs-number">1</span>       cow<span class="hljs-number">3</span>    beetle<span class="hljs-number">4</span>      lama<span class="hljs-number">5</span>     hippoName: animal, dtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.drop_duplicates(keep=<span class="hljs-literal">False</span>)<span class="hljs-number">1</span>       cow<span class="hljs-number">3</span>    beetle<span class="hljs-number">5</span>     hippoName: animal, dtype: <span class="hljs-built_in">object</span></code></pre><p>如果设置 <code>inplace=True</code>，则不会返回任何值，但原对象的值已被改变：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;cow&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;beetle&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;hippo&#x27;</span>], name=<span class="hljs-string">&#x27;animal&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj1<span class="hljs-number">0</span>      lama<span class="hljs-number">1</span>       cow<span class="hljs-number">2</span>      lama<span class="hljs-number">3</span>    beetle<span class="hljs-number">4</span>      lama<span class="hljs-number">5</span>     hippoName: animal, dtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = obj1.drop_duplicates()<span class="hljs-meta">&gt;&gt;&gt; </span>obj2          <span class="hljs-comment"># 有返回值</span><span class="hljs-number">0</span>      lama<span class="hljs-number">1</span>       cow<span class="hljs-number">3</span>    beetle<span class="hljs-number">5</span>     hippoName: animal, dtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj3 = obj1.drop_duplicates(inplace=<span class="hljs-literal">True</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj3         <span class="hljs-comment"># 无返回值</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj1         <span class="hljs-comment"># 原对象的值已改变</span><span class="hljs-number">0</span>      lama<span class="hljs-number">1</span>       cow<span class="hljs-number">3</span>    beetle<span class="hljs-number">5</span>     hippoName: animal, dtype: <span class="hljs-built_in">object</span></code></pre><p>在 DataFrame 对象中的使用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;data1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>] * <span class="hljs-number">4</span> + [<span class="hljs-string">&#x27;b&#x27;</span>] * <span class="hljs-number">4</span>,                       <span class="hljs-string">&#x27;data2&#x27;</span> : np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  data1  data2<span class="hljs-number">0</span>     a      <span class="hljs-number">2</span><span class="hljs-number">1</span>     a      <span class="hljs-number">1</span><span class="hljs-number">2</span>     a      <span class="hljs-number">1</span><span class="hljs-number">3</span>     a      <span class="hljs-number">2</span><span class="hljs-number">4</span>     b      <span class="hljs-number">1</span><span class="hljs-number">5</span>     b      <span class="hljs-number">2</span><span class="hljs-number">6</span>     b      <span class="hljs-number">0</span><span class="hljs-number">7</span>     b      <span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.drop_duplicates()  data1  data2<span class="hljs-number">0</span>     a      <span class="hljs-number">2</span><span class="hljs-number">1</span>     a      <span class="hljs-number">1</span><span class="hljs-number">4</span>     b      <span class="hljs-number">1</span><span class="hljs-number">5</span>     b      <span class="hljs-number">2</span><span class="hljs-number">6</span>     b      <span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.drop_duplicates(subset=<span class="hljs-string">&#x27;data2&#x27;</span>)  data1  data2<span class="hljs-number">0</span>     a      <span class="hljs-number">2</span><span class="hljs-number">1</span>     a      <span class="hljs-number">1</span><span class="hljs-number">6</span>     b      <span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.drop_duplicates(subset=<span class="hljs-string">&#x27;data2&#x27;</span>, ignore_index=<span class="hljs-literal">True</span>)  data1  data2<span class="hljs-number">0</span>     a      <span class="hljs-number">2</span><span class="hljs-number">1</span>     a      <span class="hljs-number">1</span><span class="hljs-number">2</span>     b      <span class="hljs-number">0</span></code></pre><h2><span id="03x00-shu-ju-ti-huan"><font color="#FF0000">【03x00】数据替换</font></span></h2><h3><span id="03x01-replace"><font color="#4876FF">【03x01】replace</font></span></h3><p><code>replace</code> 方法可以根据值的内容进行替换。</p><p>基本语法：</p><ul><li><p><code>Series.replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')</code></p></li><li><p><code>DataFrame.replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.replace.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.replace.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html</a></p></li></ul><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>to_replace</td><td>找到要替换值的方法，可以是：字符串、正则表达式、列表、字典、整数、浮点数、Series 对象或者 None<br>使用不同参数的区别参见官方文档</td></tr><tr><td>value</td><td>用于替换匹配项的值， 对于 DataFrame，可以使用字典的值来指定每列要使用的值，<br>还允许使用此类对象的正则表达式，字符串和列表或字典</td></tr><tr><td>inplace</td><td>bool 类型，是否直接改变原数据且不返回值，默认 False</td></tr><tr><td>regex</td><td>bool 类型或者与 to_replace 相同的类型，<br>当 to_replace 参数为正则表达式时，regex 应为 True，或者直接使用该参数代替 to_replace</td></tr></tbody></table><p><code>to_replace</code> 和 <code>value</code> 参数只传入一个值，单个值替换单个值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">3</span><span class="hljs-number">4</span>    <span class="hljs-number">4</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<span class="hljs-number">0</span>    <span class="hljs-number">5</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">3</span><span class="hljs-number">4</span>    <span class="hljs-number">4</span>dtype: int64</code></pre><p><code>to_replace</code> 传入多个值，<code>value</code> 传入一个值，多个值替换一个值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">3</span><span class="hljs-number">4</span>    <span class="hljs-number">4</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">4</span>)<span class="hljs-number">0</span>    <span class="hljs-number">4</span><span class="hljs-number">1</span>    <span class="hljs-number">4</span><span class="hljs-number">2</span>    <span class="hljs-number">4</span><span class="hljs-number">3</span>    <span class="hljs-number">4</span><span class="hljs-number">4</span>    <span class="hljs-number">4</span>dtype: int64</code></pre><p><code>to_replace</code> 和 <code>value</code> 参数都传入多个值，多个值替换多个值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">3</span><span class="hljs-number">4</span>    <span class="hljs-number">4</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<span class="hljs-number">0</span>    <span class="hljs-number">4</span><span class="hljs-number">1</span>    <span class="hljs-number">3</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">1</span><span class="hljs-number">4</span>    <span class="hljs-number">4</span>dtype: int64</code></pre><p><code>to_replace</code> 传入字典：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],            <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],            <span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj   A  B  C<span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">5</span>  a<span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">6</span>  b<span class="hljs-number">2</span>  <span class="hljs-number">2</span>  <span class="hljs-number">7</span>  c<span class="hljs-number">3</span>  <span class="hljs-number">3</span>  <span class="hljs-number">8</span>  d<span class="hljs-number">4</span>  <span class="hljs-number">4</span>  <span class="hljs-number">9</span>  e<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)   A  B  C<span class="hljs-number">0</span>  <span class="hljs-number">5</span>  <span class="hljs-number">5</span>  a<span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">6</span>  b<span class="hljs-number">2</span>  <span class="hljs-number">2</span>  <span class="hljs-number">7</span>  c<span class="hljs-number">3</span>  <span class="hljs-number">3</span>  <span class="hljs-number">8</span>  d<span class="hljs-number">4</span>  <span class="hljs-number">4</span>  <span class="hljs-number">9</span>  e<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace(&#123;<span class="hljs-number">0</span>: <span class="hljs-number">10</span>, <span class="hljs-number">1</span>: <span class="hljs-number">100</span>&#125;)     A  B  C<span class="hljs-number">0</span>   <span class="hljs-number">10</span>  <span class="hljs-number">5</span>  a<span class="hljs-number">1</span>  <span class="hljs-number">100</span>  <span class="hljs-number">6</span>  b<span class="hljs-number">2</span>    <span class="hljs-number">2</span>  <span class="hljs-number">7</span>  c<span class="hljs-number">3</span>    <span class="hljs-number">3</span>  <span class="hljs-number">8</span>  d<span class="hljs-number">4</span>    <span class="hljs-number">4</span>  <span class="hljs-number">9</span>  e<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-number">5</span>&#125;, <span class="hljs-number">100</span>)     A    B  C<span class="hljs-number">0</span>  <span class="hljs-number">100</span>  <span class="hljs-number">100</span>  a<span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">6</span>  b<span class="hljs-number">2</span>    <span class="hljs-number">2</span>    <span class="hljs-number">7</span>  c<span class="hljs-number">3</span>    <span class="hljs-number">3</span>    <span class="hljs-number">8</span>  d<span class="hljs-number">4</span>    <span class="hljs-number">4</span>    <span class="hljs-number">9</span>  e<span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: &#123;<span class="hljs-number">0</span>: <span class="hljs-number">100</span>, <span class="hljs-number">4</span>: <span class="hljs-number">400</span>&#125;&#125;)     A  B  C<span class="hljs-number">0</span>  <span class="hljs-number">100</span>  <span class="hljs-number">5</span>  a<span class="hljs-number">1</span>    <span class="hljs-number">1</span>  <span class="hljs-number">6</span>  b<span class="hljs-number">2</span>    <span class="hljs-number">2</span>  <span class="hljs-number">7</span>  c<span class="hljs-number">3</span>    <span class="hljs-number">3</span>  <span class="hljs-number">8</span>  d<span class="hljs-number">4</span>  <span class="hljs-number">400</span>  <span class="hljs-number">9</span>  e</code></pre><p><code>to_replace</code> 传入正则表达式：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;bat&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bait&#x27;</span>],            <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;xyz&#x27;</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj      A    B<span class="hljs-number">0</span>   bat  abc<span class="hljs-number">1</span>   foo  bar<span class="hljs-number">2</span>  bait  xyz<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace(to_replace=<span class="hljs-string">r&#x27;^ba.$&#x27;</span>, value=<span class="hljs-string">&#x27;new&#x27;</span>, regex=<span class="hljs-literal">True</span>)      A    B<span class="hljs-number">0</span>   new  abc<span class="hljs-number">1</span>   foo  new<span class="hljs-number">2</span>  bait  xyz<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-string">r&#x27;^ba.$&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-string">&#x27;new&#x27;</span>&#125;, regex=<span class="hljs-literal">True</span>)      A    B<span class="hljs-number">0</span>   new  abc<span class="hljs-number">1</span>   foo  bar<span class="hljs-number">2</span>  bait  xyz<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace(regex=<span class="hljs-string">r&#x27;^ba.$&#x27;</span>, value=<span class="hljs-string">&#x27;new&#x27;</span>)      A    B<span class="hljs-number">0</span>   new  abc<span class="hljs-number">1</span>   foo  new<span class="hljs-number">2</span>  bait  xyz<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace(regex=&#123;<span class="hljs-string">r&#x27;^ba.$&#x27;</span>: <span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-string">&#x27;xyz&#x27;</span>&#125;)      A    B<span class="hljs-number">0</span>   new  abc<span class="hljs-number">1</span>   xyz  new<span class="hljs-number">2</span>  bait  xyz<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.replace(regex=[<span class="hljs-string">r&#x27;^ba.$&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>], value=<span class="hljs-string">&#x27;new&#x27;</span>)      A    B<span class="hljs-number">0</span>   new  abc<span class="hljs-number">1</span>   new  new<span class="hljs-number">2</span>  bait  xyz</code></pre><h3><span id="03x02-where"><font color="#4876FF">【03x02】where</font></span></h3><p><code>where</code> 方法用于替换条件为 False 的值。</p><p>基本语法：</p><ul><li><p><code>Series.where(self, cond, other=nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)</code></p></li><li><p><code>DataFrame.where(self, cond, other=nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.where.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.where.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.where.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.where.html</a></p></li></ul><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>cond</td><td>替换条件，如果 cond 为 True，则保留原始值。如果为 False，则替换为来自 other 的相应值</td></tr><tr><td>other</td><td>替换值，如果 cond 为 False，则替换为来自该参数的相应值</td></tr><tr><td>inplace</td><td>bool 类型，是否直接改变原数据且不返回值，默认 False</td></tr></tbody></table><p>在 Series 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">3</span><span class="hljs-number">4</span>    <span class="hljs-number">4</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.where(obj &gt; <span class="hljs-number">0</span>)<span class="hljs-number">0</span>    NaN<span class="hljs-number">1</span>    <span class="hljs-number">1.0</span><span class="hljs-number">2</span>    <span class="hljs-number">2.0</span><span class="hljs-number">3</span>    <span class="hljs-number">3.0</span><span class="hljs-number">4</span>    <span class="hljs-number">4.0</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.where(obj &gt; <span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<span class="hljs-number">0</span>    <span class="hljs-number">10</span><span class="hljs-number">1</span>    <span class="hljs-number">10</span><span class="hljs-number">2</span>     <span class="hljs-number">2</span><span class="hljs-number">3</span>     <span class="hljs-number">3</span><span class="hljs-number">4</span>     <span class="hljs-number">4</span>dtype: int64</code></pre><p>在 DataFrame 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="hljs-number">10</span>).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), columns=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj   A  B<span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span><span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span><span class="hljs-number">2</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><span class="hljs-number">3</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span><span class="hljs-number">4</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>m = obj % <span class="hljs-number">3</span> == <span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.where(m, -obj)   A  B<span class="hljs-number">0</span>  <span class="hljs-number">0</span> -<span class="hljs-number">1</span><span class="hljs-number">1</span> -<span class="hljs-number">2</span>  <span class="hljs-number">3</span><span class="hljs-number">2</span> -<span class="hljs-number">4</span> -<span class="hljs-number">5</span><span class="hljs-number">3</span>  <span class="hljs-number">6</span> -<span class="hljs-number">7</span><span class="hljs-number">4</span> -<span class="hljs-number">8</span>  <span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.where(m, -obj) == np.where(m, obj, -obj)      A     B<span class="hljs-number">0</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span><span class="hljs-number">1</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span><span class="hljs-number">2</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span><span class="hljs-number">3</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span><span class="hljs-number">4</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span></code></pre><h3><span id="03x03-mask"><font color="#4876FF">【03x03】mask</font></span></h3><p><code>mask</code> 方法与 <code>where</code> 方法相反，<code>mask</code> 用于替换条件为 False 的值。</p><p>基本语法：</p><ul><li><p><code>Series.mask(self, cond, other=nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)</code></p></li><li><p><code>DataFrame.mask(self, cond, other=nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.mask.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.mask.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mask.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mask.html</a></p></li></ul><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>cond</td><td>替换条件，如果 cond 为 False，则保留原始值。如果为 True，则替换为来自 other 的相应值</td></tr><tr><td>other</td><td>替换值，如果 cond 为 False，则替换为来自该参数的相应值</td></tr><tr><td>inplace</td><td>bool 类型，是否直接改变原数据且不返回值，默认 False</td></tr></tbody></table><p>在 Series 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">2</span><span class="hljs-number">3</span>    <span class="hljs-number">3</span><span class="hljs-number">4</span>    <span class="hljs-number">4</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.mask(obj &gt; <span class="hljs-number">0</span>)<span class="hljs-number">0</span>    <span class="hljs-number">0.0</span><span class="hljs-number">1</span>    NaN<span class="hljs-number">2</span>    NaN<span class="hljs-number">3</span>    NaN<span class="hljs-number">4</span>    NaNdtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.mask(obj &gt; <span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<span class="hljs-number">0</span>     <span class="hljs-number">0</span><span class="hljs-number">1</span>     <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">10</span><span class="hljs-number">3</span>    <span class="hljs-number">10</span><span class="hljs-number">4</span>    <span class="hljs-number">10</span>dtype: int64</code></pre><p>在 DataFrame 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="hljs-number">10</span>).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), columns=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj   A  B<span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span><span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span><span class="hljs-number">2</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><span class="hljs-number">3</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span><span class="hljs-number">4</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>m = obj % <span class="hljs-number">3</span> == <span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.mask(m, -obj)   A  B<span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span><span class="hljs-number">1</span>  <span class="hljs-number">2</span> -<span class="hljs-number">3</span><span class="hljs-number">2</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span><span class="hljs-number">3</span> -<span class="hljs-number">6</span>  <span class="hljs-number">7</span><span class="hljs-number">4</span>  <span class="hljs-number">8</span> -<span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.where(m, -obj) == obj.mask(~m, -obj)      A     B<span class="hljs-number">0</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span><span class="hljs-number">1</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span><span class="hljs-number">2</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span><span class="hljs-number">3</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span><span class="hljs-number">4</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106900748</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Pandas（七）：合并数据集</title>
      <link href="/article/031/"/>
      <url>/article/031/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01x00-concat-font"><font color="#FF0000">【01x00】concat</font></a></li><li><a href="#font-color-ff0000-02x00-append-font"><font color="#FF0000">【02x00】append</font></a></li><li><a href="#font-color-ff0000-03x00-merge-font"><font color="#FF0000">【03x00】merge</font></a><ul><li><a href="#font-color-4876ff-03x01-yi-dui-yi-lian-jie-font"><font color="#4876FF">【03x01】一对一连接</font></a></li><li><a href="#font-color-4876ff-03x02-duo-dui-yi-lian-jie-font"><font color="#4876FF">【03x02】多对一连接</font></a></li><li><a href="#font-color-4876ff-03x03-duo-dui-duo-lian-jie-font"><font color="#4876FF">【03x03】多对多连接</font></a></li><li><a href="#font-color-4876ff-03x04-can-shu-on-left-on-right-on-font"><font color="#4876FF">【03x04】参数 on / left_on / right_on</font></a></li><li><a href="#font-color-4876ff-03x05-can-shu-how-font"><font color="#4876FF">【03x05】参数 how</font></a></li><li><a href="#font-color-4876ff-03x06-can-shu-suffixes-font"><font color="#4876FF">【03x06】参数 suffixes</font></a></li><li><a href="#font-color-4876ff-03x07-can-shu-left-index-right-index-font"><font color="#4876FF">【03x07】参数 left_index / right_index</font></a></li></ul></li><li><a href="#font-color-ff0000-04x00-join-font"><font color="#FF0000">【04x00】join</font></a></li><li><a href="#font-color-ff0000-05x00-si-chong-fang-fa-de-qu-bie-font"><font color="#FF0000">【05x00】四种方法的区别</font></a></li></ul><!-- tocstop --><hr><p>Pandas 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/025/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itbob.cn/article/026/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itbob.cn/article/027/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itbob.cn/article/028/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itbob.cn/article/029/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itbob.cn/article/030/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itbob.cn/article/031/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itbob.cn/article/032/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itbob.cn/article/033/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itbob.cn/article/034/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106830112</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01x00-concat"><font color="#FF0000">【01x00】concat</font></span></h2><p><code>pandas.concat</code> 可以沿着指定轴将多个对象堆叠到一起。</p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.concat.html">https://pandas.pydata.org/docs/reference/api/pandas.concat.html</a></p><p>基本语法：</p><pre><code class="hljs python">pandas.concat(objs: <span class="hljs-type">Union</span>[Iterable[‘DataFrame’], Mapping[<span class="hljs-type">Optional</span>[Hashable], ‘DataFrame’]],              axis=<span class="hljs-string">&#x27;0&#x27;</span>,              join: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;&#x27;outer&#x27;&quot;</span>,              ignore_index: <span class="hljs-built_in">bool</span> = <span class="hljs-string">&#x27;False&#x27;</span>,              keys=<span class="hljs-string">&#x27;None&#x27;</span>,              levels=<span class="hljs-string">&#x27;None&#x27;</span>,              names=<span class="hljs-string">&#x27;None&#x27;</span>,              verify_integrity: <span class="hljs-built_in">bool</span> = <span class="hljs-string">&#x27;False&#x27;</span>,              sort: <span class="hljs-built_in">bool</span> = <span class="hljs-string">&#x27;False&#x27;</span>,              copy: <span class="hljs-built_in">bool</span> = <span class="hljs-string">&#x27;True&#x27;</span>) → ’DataFrame’</code></pre><pre><code class="hljs python">pandas.concat(objs: <span class="hljs-type">Union</span>[Iterable[FrameOrSeriesUnion], Mapping[<span class="hljs-type">Optional</span>[Hashable], FrameOrSeriesUnion]],              axis=<span class="hljs-string">&#x27;0&#x27;</span>,              join: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;&#x27;outer&#x27;&quot;</span>,              ignore_index: <span class="hljs-built_in">bool</span> = <span class="hljs-string">&#x27;False&#x27;</span>,              keys=<span class="hljs-string">&#x27;None&#x27;</span>,              levels=<span class="hljs-string">&#x27;None&#x27;</span>,              names=<span class="hljs-string">&#x27;None&#x27;</span>,              verify_integrity: <span class="hljs-built_in">bool</span> = <span class="hljs-string">&#x27;False&#x27;</span>,              sort: <span class="hljs-built_in">bool</span> = <span class="hljs-string">&#x27;False&#x27;</span>,              copy: <span class="hljs-built_in">bool</span> = <span class="hljs-string">&#x27;True&#x27;</span>) → FrameOrSeriesUnion</code></pre><p>常用参数描述：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>objs</td><td>Series 或 DataFrame 对象的序列或映射，要合并的对象</td></tr><tr><td>axis</td><td>沿指定轴合并，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>join</td><td>如何处理其他轴（或多个轴）上的索引，可取值：<code>‘inner’</code>，<code>‘outer’</code>（默认值）<br><code>‘outer’</code>：当 axis = 0 时，列名相同的列会合并，其余列都保留（并集），空值填充；<br><code>‘inner’</code>：当 axis = 0 时，列名相同的列会合并，其余列都舍弃（交集）</td></tr><tr><td>ignore_index</td><td>bool 类型，连接后的值是否使用原索引值，如果为 True，则索引将会是 0, 1, …, n-1</td></tr><tr><td>keys</td><td>序列形式，默认 None，传递 keys 后，会构造一个层次索引，即 MultiIndex 对象，keys 为最外层索引</td></tr><tr><td>levels</td><td>用于构造 MultiIndex 的特定级别（唯一值）。未指定则将从键中推断出来</td></tr><tr><td>names</td><td>列表类型，为索引添加标签</td></tr><tr><td>verify_integrity</td><td>bool 类型，是否检查合并后的索引有无重复项，设置为 <code>True</code> 若有重复项则会报错</td></tr><tr><td>sort</td><td>当 <code>join='outer'</code> 时对列索引进行排序。当 <code>join='inner'</code> 时此操作无效</td></tr></tbody></table><p>合并两个 Series 对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2])<span class="hljs-number">0</span>    a<span class="hljs-number">1</span>    b<span class="hljs-number">0</span>    c<span class="hljs-number">1</span>    ddtype: <span class="hljs-built_in">object</span></code></pre><p>设置 <code>ignore_index=True</code>，放弃原有的索引值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], ignore_index=<span class="hljs-literal">True</span>)<span class="hljs-number">0</span>    a<span class="hljs-number">1</span>    b<span class="hljs-number">2</span>    c<span class="hljs-number">3</span>    ddtype: <span class="hljs-built_in">object</span></code></pre><p>设置 <code>keys</code> 参数，添加最外层的索引：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], keys=[<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;s2&#x27;</span>])s1  <span class="hljs-number">0</span>    a    <span class="hljs-number">1</span>    bs2  <span class="hljs-number">0</span>    c    <span class="hljs-number">1</span>    ddtype: <span class="hljs-built_in">object</span></code></pre><p>设置 <code>names</code> 参数，为索引添加标签：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], keys=[<span class="hljs-string">&#x27;s1&#x27;</span>, <span class="hljs-string">&#x27;s2&#x27;</span>], names=[<span class="hljs-string">&#x27;Series name&#x27;</span>, <span class="hljs-string">&#x27;Row ID&#x27;</span>])Series name  Row IDs1           <span class="hljs-number">0</span>         a             <span class="hljs-number">1</span>         bs2           <span class="hljs-number">0</span>         c             <span class="hljs-number">1</span>         ddtype: <span class="hljs-built_in">object</span></code></pre><p>合并 <code>DataFrame</code> 对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>]], columns=[<span class="hljs-string">&#x27;letter&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>], [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>]], columns=[<span class="hljs-string">&#x27;letter&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  letter  number<span class="hljs-number">0</span>      a       <span class="hljs-number">1</span><span class="hljs-number">1</span>      b       <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2  letter  number<span class="hljs-number">0</span>      c       <span class="hljs-number">3</span><span class="hljs-number">1</span>      d       <span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2])  letter  number<span class="hljs-number">0</span>      a       <span class="hljs-number">1</span><span class="hljs-number">1</span>      b       <span class="hljs-number">2</span><span class="hljs-number">0</span>      c       <span class="hljs-number">3</span><span class="hljs-number">1</span>      d       <span class="hljs-number">4</span></code></pre><p>合并 <code>DataFrame</code> 对象，不存在的值将会被 NaN 填充：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>]], columns=[<span class="hljs-string">&#x27;letter&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;cat&#x27;</span>], [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;dog&#x27;</span>]], columns=[<span class="hljs-string">&#x27;letter&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;animal&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  letter  number<span class="hljs-number">0</span>      a       <span class="hljs-number">1</span><span class="hljs-number">1</span>      b       <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2  letter  number animal<span class="hljs-number">0</span>      c       <span class="hljs-number">3</span>    cat<span class="hljs-number">1</span>      d       <span class="hljs-number">4</span>    dog<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2])  letter  number animal<span class="hljs-number">0</span>      a       <span class="hljs-number">1</span>    NaN<span class="hljs-number">1</span>      b       <span class="hljs-number">2</span>    NaN<span class="hljs-number">0</span>      c       <span class="hljs-number">3</span>    cat<span class="hljs-number">1</span>      d       <span class="hljs-number">4</span>    dog</code></pre><p>合并 <code>DataFrame</code> 对象，设置 <code>join=&quot;inner&quot;</code> 不存在的列将会舍弃：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>]], columns=[<span class="hljs-string">&#x27;letter&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;cat&#x27;</span>], [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;dog&#x27;</span>]], columns=[<span class="hljs-string">&#x27;letter&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;animal&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  letter  number<span class="hljs-number">0</span>      a       <span class="hljs-number">1</span><span class="hljs-number">1</span>      b       <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2  letter  number animal<span class="hljs-number">0</span>      c       <span class="hljs-number">3</span>    cat<span class="hljs-number">1</span>      d       <span class="hljs-number">4</span>    dog<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], join=<span class="hljs-string">&quot;inner&quot;</span>)  letter  number<span class="hljs-number">0</span>      a       <span class="hljs-number">1</span><span class="hljs-number">1</span>      b       <span class="hljs-number">2</span><span class="hljs-number">0</span>      c       <span class="hljs-number">3</span><span class="hljs-number">1</span>      d       <span class="hljs-number">4</span></code></pre><p>合并 <code>DataFrame</code> 对象，设置 <code>axis=1</code> 沿 y 轴合并（增加列）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>]], columns=[<span class="hljs-string">&#x27;letter&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="hljs-string">&#x27;bird&#x27;</span>, <span class="hljs-string">&#x27;polly&#x27;</span>], [<span class="hljs-string">&#x27;monkey&#x27;</span>, <span class="hljs-string">&#x27;george&#x27;</span>]], columns=[<span class="hljs-string">&#x27;animal&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  letter  number<span class="hljs-number">0</span>      a       <span class="hljs-number">1</span><span class="hljs-number">1</span>      b       <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2   animal    name<span class="hljs-number">0</span>    bird   polly<span class="hljs-number">1</span>  monkey  george<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], axis=<span class="hljs-number">1</span>)  letter  number  animal    name<span class="hljs-number">0</span>      a       <span class="hljs-number">1</span>    bird   polly<span class="hljs-number">1</span>      b       <span class="hljs-number">2</span>  monkey  george</code></pre><p>设置 <code>verify_integrity=True</code> ，检查新的索引是否有重复项，有重复项会报错：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([<span class="hljs-number">1</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([<span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj1   <span class="hljs-number">0</span>a  <span class="hljs-number">1</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2   <span class="hljs-number">0</span>a  <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], verify_integrity=<span class="hljs-literal">True</span>)Traceback (most recent call last):    ...ValueError: Indexes have overlapping values: [<span class="hljs-string">&#x27;a&#x27;</span>]</code></pre><p>设置 <code>sort=True</code>，会对列索引进行排序输出：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">3</span>], [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">2</span>]], columns=[<span class="hljs-string">&#x27;letter&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;cat&#x27;</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;dog&#x27;</span>]], columns=[<span class="hljs-string">&#x27;letter&#x27;</span>, <span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;animal&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  letter  number<span class="hljs-number">0</span>      a       <span class="hljs-number">3</span><span class="hljs-number">1</span>      d       <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2  letter  number animal<span class="hljs-number">0</span>      c       <span class="hljs-number">1</span>    cat<span class="hljs-number">1</span>      b       <span class="hljs-number">4</span>    dog<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], sort=<span class="hljs-literal">True</span>)  animal letter  number<span class="hljs-number">0</span>    NaN      a       <span class="hljs-number">3</span><span class="hljs-number">1</span>    NaN      d       <span class="hljs-number">2</span><span class="hljs-number">0</span>    cat      c       <span class="hljs-number">1</span><span class="hljs-number">1</span>    dog      b       <span class="hljs-number">4</span></code></pre><h2><span id="02x00-append"><font color="#FF0000">【02x00】append</font></span></h2><p>Append 方法事实上是在一个 Series / DataFrame 对象后最追加另一个 Series / DataFrame 对象并返回一个新对象，不改变原对象的值。</p><p>基本语法：</p><ul><li><p><code>Series.append(self, to_append, ignore_index=False, verify_integrity=False)</code></p></li><li><p><code>DataFrame.append(self, other, ignore_index=False, verify_integrity=False, sort=False)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.append.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.append.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.append.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.append.html</a></p></li></ul><p>参数描述：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>to_append / other</td><td>要追加的数据</td></tr><tr><td>ignore_index</td><td>bool 类型，连接后的值是否使用原索引值，如果为 True，则索引将会是 0, 1, …, n-1</td></tr><tr><td>verify_integrity</td><td>bool 类型，是否检查合并后的索引有无重复项，设置为 <code>True</code> 若有重复项则会报错</td></tr><tr><td>sort</td><td>bool 类型，是否对列索引（columns）进行排序，默认 False</td></tr></tbody></table><p>合并 Series 对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj3 = pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], index=[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj1<span class="hljs-number">0</span>    <span class="hljs-number">1</span><span class="hljs-number">1</span>    <span class="hljs-number">2</span><span class="hljs-number">2</span>    <span class="hljs-number">3</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2<span class="hljs-number">0</span>    <span class="hljs-number">4</span><span class="hljs-number">1</span>    <span class="hljs-number">5</span><span class="hljs-number">2</span>    <span class="hljs-number">6</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj3<span class="hljs-number">3</span>    <span class="hljs-number">4</span><span class="hljs-number">4</span>    <span class="hljs-number">5</span><span class="hljs-number">5</span>    <span class="hljs-number">6</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1.append(obj2)<span class="hljs-number">0</span>    <span class="hljs-number">1</span><span class="hljs-number">1</span>    <span class="hljs-number">2</span><span class="hljs-number">2</span>    <span class="hljs-number">3</span><span class="hljs-number">0</span>    <span class="hljs-number">4</span><span class="hljs-number">1</span>    <span class="hljs-number">5</span><span class="hljs-number">2</span>    <span class="hljs-number">6</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1.append(obj3)<span class="hljs-number">0</span>    <span class="hljs-number">1</span><span class="hljs-number">1</span>    <span class="hljs-number">2</span><span class="hljs-number">2</span>    <span class="hljs-number">3</span><span class="hljs-number">3</span>    <span class="hljs-number">4</span><span class="hljs-number">4</span>    <span class="hljs-number">5</span><span class="hljs-number">5</span>    <span class="hljs-number">6</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1.append(obj2, ignore_index=<span class="hljs-literal">True</span>)<span class="hljs-number">0</span>    <span class="hljs-number">1</span><span class="hljs-number">1</span>    <span class="hljs-number">2</span><span class="hljs-number">2</span>    <span class="hljs-number">3</span><span class="hljs-number">3</span>    <span class="hljs-number">4</span><span class="hljs-number">4</span>    <span class="hljs-number">5</span><span class="hljs-number">5</span>    <span class="hljs-number">6</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1.append(obj2, verify_integrity=<span class="hljs-literal">True</span>)Traceback (most recent call last):...ValueError: Indexes have overlapping values: Int64Index([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)</code></pre><p>合并 DataFrame 对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;AB&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]], columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;AB&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1   A  B<span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><span class="hljs-number">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2   A  B<span class="hljs-number">0</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span><span class="hljs-number">1</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1.append(obj2)   A  B<span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><span class="hljs-number">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><span class="hljs-number">0</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span><span class="hljs-number">1</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1.append(obj2, ignore_index=<span class="hljs-literal">True</span>)   A  B<span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><span class="hljs-number">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span><span class="hljs-number">2</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span><span class="hljs-number">3</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span></code></pre><p>以下虽然不是生成 DataFrames 的推荐方法，但演示了从多个数据源生成 DataFrames 的两种方法：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(columns=[<span class="hljs-string">&#x27;A&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):    obj = obj.append(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: i&#125;, ignore_index=<span class="hljs-literal">True</span>)    <span class="hljs-meta">&gt;&gt;&gt; </span>obj   A<span class="hljs-number">0</span>  <span class="hljs-number">0</span><span class="hljs-number">1</span>  <span class="hljs-number">1</span><span class="hljs-number">2</span>  <span class="hljs-number">2</span><span class="hljs-number">3</span>  <span class="hljs-number">3</span><span class="hljs-number">4</span>  <span class="hljs-number">4</span></code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.concat([pd.DataFrame([i], columns=[<span class="hljs-string">&#x27;A&#x27;</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)], ignore_index=<span class="hljs-literal">True</span>)   A<span class="hljs-number">0</span>  <span class="hljs-number">0</span><span class="hljs-number">1</span>  <span class="hljs-number">1</span><span class="hljs-number">2</span>  <span class="hljs-number">2</span><span class="hljs-number">3</span>  <span class="hljs-number">3</span><span class="hljs-number">4</span>  <span class="hljs-number">4</span></code></pre><h2><span id="03x00-merge"><font color="#FF0000">【03x00】merge</font></span></h2><p>将不同的数据源进行合并是数据科学中常见的操作，这既包括将两个不同的数据集非常简单地拼接在一起，也包括用数据库那样的连接（join）与合并（merge）操作处理有重叠字段的数据集。Series 与DataFrame 都具备这类操作，Pandas 的函数与方法让数据合并变得快速简单。</p><p>数据集的合并（merge）或连接（join）运算是通过一个或多个键将行连接起来的。这些运算是关系型数据库（基于SQL）的核心。Pandas 的 merge 函数是对数据应用这些算法的主要切入点。</p><p><font color="#FF0000"> <strong><code>pandas.merge</code> 可根据一个或多个连接键将不同 DataFrame 中的行连接起来。</strong></font></p><p>基本语法：</p><pre><code class="hljs python">pandas.merge(left,             right,             how: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;inner&#x27;</span>,             on=<span class="hljs-literal">None</span>,             left_on=<span class="hljs-literal">None</span>,             right_on=<span class="hljs-literal">None</span>,             left_index: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,             right_index: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,             sort: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,             suffixes=<span class="hljs-string">&#x27;_x&#x27;</span>, <span class="hljs-string">&#x27;_y&#x27;</span>,             copy: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,             indicator: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,             validate=<span class="hljs-literal">None</span>) → ’DataFrame’</code></pre><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.merge.html">https://pandas.pydata.org/docs/reference/api/pandas.merge.html</a></p><p>常见参数描述：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>参与合并的左侧 DataFrame 对象</td></tr><tr><td>right</td><td>参与合并的右侧 DataFrame 对象</td></tr><tr><td>how</td><td>合并方式，默认 <code>'inner'</code><br><code>'inner'</code>：内连接，即使用两个对象中<font color="#FF0000"><strong>都有</strong></font>的键（交集）；<br><code>'outer'</code>：外连接，即使用两个对象中<font color="#FF0000"><strong>所有</strong></font>的键（并集）；<br><code>'left'</code>：左连接，即使用<font color="#FF0000"><strong>左</strong></font>对象中所有的键；<br><code>'right'</code>：右连接，即使用<font color="#FF0000"><strong>右</strong></font>对象中所有的键；</td></tr><tr><td>on</td><td>用于连接的列名。必须存在于左右两个 Dataframe对象中<br>如果未指定，且其他连接键也未指定，则以 left 和 right 列名的交集作为连接键</td></tr><tr><td>left_on</td><td>左侧 DataFrame 对象中用作连接键的列</td></tr><tr><td>right_on</td><td>右侧 DataFrame 对象中用作连接键的列</td></tr><tr><td>left_index</td><td>bool 类型，是否使用左侧 DataFrame 对象中的索引（index）作为连接键，默认 False</td></tr><tr><td>right_index</td><td>bool 类型，是否使用右侧 DataFrame 对象中的索引（index）作为连接键，默认 False</td></tr><tr><td>sort</td><td>bool 类型，是否在结果中按顺序对连接键排序，默认 False。<br>如果为 False，则连接键的顺序取决于联接类型（how 关键字）</td></tr><tr><td>suffixes</td><td>字符串值元组，用于追加到重叠列名的末尾，默认为 <code>('_x', '_y')</code>。<br>例如，如果左右两个 DataFrame 对象都有 <code>data</code> 列时，则结果中就会出现 <code>data_x</code> 和 <code>data_y</code></td></tr></tbody></table><h3><span id="03x01-yi-dui-yi-lian-jie"><font color="#4876FF">【03x01】一对一连接</font></span></h3><p><font color="#FF0000"><strong>一对一连接是指两个 DataFrame 对象的列的值没有重复值。</strong></font></p><p>如果不指定任何参数，调用 <code>merge</code> 方法，<code>merge</code> 就会将重叠的列的列名当做键来合并。</p><p>在下面的示例中，两个 DataFrame 对象都有一个列名为 <code>key</code> 的列，未指定按照哪一列来合并，<code>merge</code> 就会默认按照 <code>key</code> 来合并：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-string">&#x27;data1&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], <span class="hljs-string">&#x27;data2&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  key  data1<span class="hljs-number">0</span>   b      <span class="hljs-number">0</span><span class="hljs-number">1</span>   a      <span class="hljs-number">1</span><span class="hljs-number">2</span>   c      <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2  key  data2<span class="hljs-number">0</span>   a      <span class="hljs-number">0</span><span class="hljs-number">1</span>   c      <span class="hljs-number">1</span><span class="hljs-number">2</span>   b      <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2)  key  data1  data2<span class="hljs-number">0</span>   b      <span class="hljs-number">0</span>      <span class="hljs-number">2</span><span class="hljs-number">1</span>   a      <span class="hljs-number">1</span>      <span class="hljs-number">0</span><span class="hljs-number">2</span>   c      <span class="hljs-number">2</span>      <span class="hljs-number">1</span></code></pre><h3><span id="03x02-duo-dui-yi-lian-jie"><font color="#4876FF">【03x02】多对一连接</font></span></h3><p><font color="#FF0000"><strong>多对一连接是指两个 DataFrame 对象中，有一个的列的值有重复值。</strong></font>通过多对一连接获得的结果，DataFrame  将会保留重复值。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], <span class="hljs-string">&#x27;data1&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], <span class="hljs-string">&#x27;data2&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1  key  data1<span class="hljs-number">0</span>   b      <span class="hljs-number">0</span><span class="hljs-number">1</span>   b      <span class="hljs-number">1</span><span class="hljs-number">2</span>   a      <span class="hljs-number">2</span><span class="hljs-number">3</span>   c      <span class="hljs-number">3</span><span class="hljs-number">4</span>   a      <span class="hljs-number">4</span><span class="hljs-number">5</span>   a      <span class="hljs-number">5</span><span class="hljs-number">6</span>   b      <span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2  key  data2<span class="hljs-number">0</span>   a      <span class="hljs-number">0</span><span class="hljs-number">1</span>   b      <span class="hljs-number">1</span><span class="hljs-number">2</span>   d      <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2)  key  data1  data2<span class="hljs-number">0</span>   b      <span class="hljs-number">0</span>      <span class="hljs-number">1</span><span class="hljs-number">1</span>   b      <span class="hljs-number">1</span>      <span class="hljs-number">1</span><span class="hljs-number">2</span>   b      <span class="hljs-number">6</span>      <span class="hljs-number">1</span><span class="hljs-number">3</span>   a      <span class="hljs-number">2</span>      <span class="hljs-number">0</span><span class="hljs-number">4</span>   a      <span class="hljs-number">4</span>      <span class="hljs-number">0</span><span class="hljs-number">5</span>   a      <span class="hljs-number">5</span>      <span class="hljs-number">0</span></code></pre><h3><span id="03x03-duo-dui-duo-lian-jie"><font color="#4876FF">【03x03】多对多连接</font></span></h3><p><font color="#FF0000"><strong>多对多连接是指两个 DataFrame 对象中的列的值都有重复值。</strong></font></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-string">&#x27;data1&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-string">&#x27;data2&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  key  data1<span class="hljs-number">0</span>   a      <span class="hljs-number">0</span><span class="hljs-number">1</span>   b      <span class="hljs-number">1</span><span class="hljs-number">2</span>   b      <span class="hljs-number">2</span><span class="hljs-number">3</span>   c      <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2  key  data2<span class="hljs-number">0</span>   a      <span class="hljs-number">0</span><span class="hljs-number">1</span>   a      <span class="hljs-number">1</span><span class="hljs-number">2</span>   b      <span class="hljs-number">2</span><span class="hljs-number">3</span>   b      <span class="hljs-number">3</span><span class="hljs-number">4</span>   c      <span class="hljs-number">4</span><span class="hljs-number">5</span>   c      <span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2)  key  data1  data2<span class="hljs-number">0</span>   a      <span class="hljs-number">0</span>      <span class="hljs-number">0</span><span class="hljs-number">1</span>   a      <span class="hljs-number">0</span>      <span class="hljs-number">1</span><span class="hljs-number">2</span>   b      <span class="hljs-number">1</span>      <span class="hljs-number">2</span><span class="hljs-number">3</span>   b      <span class="hljs-number">1</span>      <span class="hljs-number">3</span><span class="hljs-number">4</span>   b      <span class="hljs-number">2</span>      <span class="hljs-number">2</span><span class="hljs-number">5</span>   b      <span class="hljs-number">2</span>      <span class="hljs-number">3</span><span class="hljs-number">6</span>   c      <span class="hljs-number">3</span>      <span class="hljs-number">4</span><span class="hljs-number">7</span>   c      <span class="hljs-number">3</span>      <span class="hljs-number">5</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106830112</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h3><span id="03x04-can-shu-on-left-on-right-on"><font color="#4876FF">【03x04】参数 on / left_on / right_on</font></span></h3><p>参数 <code>on</code> 用于指定按照某一列来进行合并，若不指定该参数，则会默认按照重叠的列的列名当做键来合并：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-string">&#x27;data1&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], <span class="hljs-string">&#x27;data2&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  key  data1<span class="hljs-number">0</span>   b      <span class="hljs-number">0</span><span class="hljs-number">1</span>   a      <span class="hljs-number">1</span><span class="hljs-number">2</span>   c      <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2  key  data2<span class="hljs-number">0</span>   a      <span class="hljs-number">0</span><span class="hljs-number">1</span>   c      <span class="hljs-number">1</span><span class="hljs-number">2</span>   b      <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, on=<span class="hljs-string">&#x27;key&#x27;</span>)  key  data1  data2<span class="hljs-number">0</span>   b      <span class="hljs-number">0</span>      <span class="hljs-number">2</span><span class="hljs-number">1</span>   a      <span class="hljs-number">1</span>      <span class="hljs-number">0</span><span class="hljs-number">2</span>   c      <span class="hljs-number">2</span>      <span class="hljs-number">1</span></code></pre><p>如果要根据多个键进行合并，传入一个由列名组成的列表即可：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>left = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>],             <span class="hljs-string">&#x27;key2&#x27;</span>: [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>],             <span class="hljs-string">&#x27;lval&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>right = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>],              <span class="hljs-string">&#x27;key2&#x27;</span>: [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>],              <span class="hljs-string">&#x27;rval&#x27;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>left  key1 key2  lval<span class="hljs-number">0</span>  foo  one     <span class="hljs-number">1</span><span class="hljs-number">1</span>  foo  two     <span class="hljs-number">2</span><span class="hljs-number">2</span>  bar  one     <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>right  key1 key2  rval<span class="hljs-number">0</span>  foo  one     <span class="hljs-number">4</span><span class="hljs-number">1</span>  foo  one     <span class="hljs-number">5</span><span class="hljs-number">2</span>  bar  one     <span class="hljs-number">6</span><span class="hljs-number">3</span>  bar  two     <span class="hljs-number">7</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(left, right, on=[<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>])  key1 key2  lval  rval<span class="hljs-number">0</span>  foo  one     <span class="hljs-number">1</span>     <span class="hljs-number">4</span><span class="hljs-number">1</span>  foo  one     <span class="hljs-number">1</span>     <span class="hljs-number">5</span><span class="hljs-number">2</span>  bar  one     <span class="hljs-number">3</span>     <span class="hljs-number">6</span></code></pre><p>如果两个对象的列名不同，就可以使用 <code>left_on</code>、<code>right_on</code> 参数分别进行指定：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;lkey&#x27;</span>: [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], <span class="hljs-string">&#x27;data1&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;rkey&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], <span class="hljs-string">&#x27;data2&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  lkey  data1<span class="hljs-number">0</span>    b      <span class="hljs-number">0</span><span class="hljs-number">1</span>    b      <span class="hljs-number">1</span><span class="hljs-number">2</span>    a      <span class="hljs-number">2</span><span class="hljs-number">3</span>    c      <span class="hljs-number">3</span><span class="hljs-number">4</span>    a      <span class="hljs-number">4</span><span class="hljs-number">5</span>    a      <span class="hljs-number">5</span><span class="hljs-number">6</span>    b      <span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2  rkey  data2<span class="hljs-number">0</span>    a      <span class="hljs-number">0</span><span class="hljs-number">1</span>    b      <span class="hljs-number">1</span><span class="hljs-number">2</span>    d      <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, left_on=<span class="hljs-string">&#x27;lkey&#x27;</span>, right_on=<span class="hljs-string">&#x27;rkey&#x27;</span>)  lkey  data1 rkey  data2<span class="hljs-number">0</span>    b      <span class="hljs-number">0</span>    b      <span class="hljs-number">1</span><span class="hljs-number">1</span>    b      <span class="hljs-number">1</span>    b      <span class="hljs-number">1</span><span class="hljs-number">2</span>    b      <span class="hljs-number">6</span>    b      <span class="hljs-number">1</span><span class="hljs-number">3</span>    a      <span class="hljs-number">2</span>    a      <span class="hljs-number">0</span><span class="hljs-number">4</span>    a      <span class="hljs-number">4</span>    a      <span class="hljs-number">0</span><span class="hljs-number">5</span>    a      <span class="hljs-number">5</span>    a      <span class="hljs-number">0</span></code></pre><h3><span id="03x05-can-shu-how"><font color="#4876FF">【03x05】参数 how</font></span></h3><p>在前面的示例中，结果里面 c 和 d 以及与之相关的数据消失了。默认情况下，<code>merge</code> 做的是内连接（<code>'inner'</code>），结果中的键是交集。其他方式还有：<code>'left'</code>、<code>'right'</code>、<code>'outer'</code>，含义如下：</p><ul><li><code>'inner'</code>：内连接，即使用两个对象中<font color="#FF0000"><strong>都有</strong></font>的键（交集）；</li><li><code>'outer'</code>：外连接，即使用两个对象中<font color="#FF0000"><strong>所有</strong></font>的键（并集）；</li><li><code>'left'</code>：左连接，即使用<font color="#FF0000"><strong>左</strong></font>对象中所有的键；</li><li><code>'right'</code>：右连接，即使用<font color="#FF0000"><strong>右</strong></font>对象中所有的键；</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], <span class="hljs-string">&#x27;data1&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], <span class="hljs-string">&#x27;data2&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj1  key  data1<span class="hljs-number">0</span>   b      <span class="hljs-number">0</span><span class="hljs-number">1</span>   b      <span class="hljs-number">1</span><span class="hljs-number">2</span>   a      <span class="hljs-number">2</span><span class="hljs-number">3</span>   c      <span class="hljs-number">3</span><span class="hljs-number">4</span>   a      <span class="hljs-number">4</span><span class="hljs-number">5</span>   a      <span class="hljs-number">5</span><span class="hljs-number">6</span>   b      <span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2  key  data2<span class="hljs-number">0</span>   a      <span class="hljs-number">0</span><span class="hljs-number">1</span>   b      <span class="hljs-number">1</span><span class="hljs-number">2</span>   d      <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, on=<span class="hljs-string">&#x27;key&#x27;</span>, how=<span class="hljs-string">&#x27;inner&#x27;</span>)  key  data1  data2<span class="hljs-number">0</span>   b      <span class="hljs-number">0</span>      <span class="hljs-number">1</span><span class="hljs-number">1</span>   b      <span class="hljs-number">1</span>      <span class="hljs-number">1</span><span class="hljs-number">2</span>   b      <span class="hljs-number">6</span>      <span class="hljs-number">1</span><span class="hljs-number">3</span>   a      <span class="hljs-number">2</span>      <span class="hljs-number">0</span><span class="hljs-number">4</span>   a      <span class="hljs-number">4</span>      <span class="hljs-number">0</span><span class="hljs-number">5</span>   a      <span class="hljs-number">5</span>      <span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, on=<span class="hljs-string">&#x27;key&#x27;</span>, how=<span class="hljs-string">&#x27;outer&#x27;</span>)  key  data1  data2<span class="hljs-number">0</span>   b    <span class="hljs-number">0.0</span>    <span class="hljs-number">1.0</span><span class="hljs-number">1</span>   b    <span class="hljs-number">1.0</span>    <span class="hljs-number">1.0</span><span class="hljs-number">2</span>   b    <span class="hljs-number">6.0</span>    <span class="hljs-number">1.0</span><span class="hljs-number">3</span>   a    <span class="hljs-number">2.0</span>    <span class="hljs-number">0.0</span><span class="hljs-number">4</span>   a    <span class="hljs-number">4.0</span>    <span class="hljs-number">0.0</span><span class="hljs-number">5</span>   a    <span class="hljs-number">5.0</span>    <span class="hljs-number">0.0</span><span class="hljs-number">6</span>   c    <span class="hljs-number">3.0</span>    NaN<span class="hljs-number">7</span>   d    NaN    <span class="hljs-number">2.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, on=<span class="hljs-string">&#x27;key&#x27;</span>, how=<span class="hljs-string">&#x27;left&#x27;</span>)  key  data1  data2<span class="hljs-number">0</span>   b      <span class="hljs-number">0</span>    <span class="hljs-number">1.0</span><span class="hljs-number">1</span>   b      <span class="hljs-number">1</span>    <span class="hljs-number">1.0</span><span class="hljs-number">2</span>   a      <span class="hljs-number">2</span>    <span class="hljs-number">0.0</span><span class="hljs-number">3</span>   c      <span class="hljs-number">3</span>    NaN<span class="hljs-number">4</span>   a      <span class="hljs-number">4</span>    <span class="hljs-number">0.0</span><span class="hljs-number">5</span>   a      <span class="hljs-number">5</span>    <span class="hljs-number">0.0</span><span class="hljs-number">6</span>   b      <span class="hljs-number">6</span>    <span class="hljs-number">1.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, on=<span class="hljs-string">&#x27;key&#x27;</span>, how=<span class="hljs-string">&#x27;right&#x27;</span>)  key  data1  data2<span class="hljs-number">0</span>   b    <span class="hljs-number">0.0</span>      <span class="hljs-number">1</span><span class="hljs-number">1</span>   b    <span class="hljs-number">1.0</span>      <span class="hljs-number">1</span><span class="hljs-number">2</span>   b    <span class="hljs-number">6.0</span>      <span class="hljs-number">1</span><span class="hljs-number">3</span>   a    <span class="hljs-number">2.0</span>      <span class="hljs-number">0</span><span class="hljs-number">4</span>   a    <span class="hljs-number">4.0</span>      <span class="hljs-number">0</span><span class="hljs-number">5</span>   a    <span class="hljs-number">5.0</span>      <span class="hljs-number">0</span><span class="hljs-number">6</span>   d    NaN      <span class="hljs-number">2</span></code></pre><h3><span id="03x06-can-shu-suffixes"><font color="#4876FF">【03x06】参数 suffixes</font></span></h3><p><code>suffixes</code> 参数用于指定附加到左右两个 DataFrame 对象的重叠列名上的字符串：</p><p>在以下示例中，选择按照 <code>key1</code> 进行合并，而两个 DataFrame 对象都包含 <code>key2</code> 列，如果未指定 <code>suffixes</code> 参数，则默认会为两个对象的 <code>key2</code> 加上 <code>_x</code> 和 <code>_y</code>，以便区分它们，如果指定了 <code>suffixes</code> 参数，就会按照添加指定的后缀：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>left = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>],             <span class="hljs-string">&#x27;key2&#x27;</span>: [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>],             <span class="hljs-string">&#x27;lval&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>right = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>],              <span class="hljs-string">&#x27;key2&#x27;</span>: [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>],              <span class="hljs-string">&#x27;rval&#x27;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>left  key1 key2  lval<span class="hljs-number">0</span>  foo  one     <span class="hljs-number">1</span><span class="hljs-number">1</span>  foo  two     <span class="hljs-number">2</span><span class="hljs-number">2</span>  bar  one     <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>right  key1 key2  rval<span class="hljs-number">0</span>  foo  one     <span class="hljs-number">4</span><span class="hljs-number">1</span>  foo  one     <span class="hljs-number">5</span><span class="hljs-number">2</span>  bar  one     <span class="hljs-number">6</span><span class="hljs-number">3</span>  bar  two     <span class="hljs-number">7</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(left, right, on=<span class="hljs-string">&#x27;key1&#x27;</span>)  key1 key2_x  lval key2_y  rval<span class="hljs-number">0</span>  foo    one     <span class="hljs-number">1</span>    one     <span class="hljs-number">4</span><span class="hljs-number">1</span>  foo    one     <span class="hljs-number">1</span>    one     <span class="hljs-number">5</span><span class="hljs-number">2</span>  foo    two     <span class="hljs-number">2</span>    one     <span class="hljs-number">4</span><span class="hljs-number">3</span>  foo    two     <span class="hljs-number">2</span>    one     <span class="hljs-number">5</span><span class="hljs-number">4</span>  bar    one     <span class="hljs-number">3</span>    one     <span class="hljs-number">6</span><span class="hljs-number">5</span>  bar    one     <span class="hljs-number">3</span>    two     <span class="hljs-number">7</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(left, right, on=<span class="hljs-string">&#x27;key1&#x27;</span>, suffixes=(<span class="hljs-string">&#x27;_left&#x27;</span>, <span class="hljs-string">&#x27;_right&#x27;</span>))  key1 key2_left  lval key2_right  rval<span class="hljs-number">0</span>  foo       one     <span class="hljs-number">1</span>        one     <span class="hljs-number">4</span><span class="hljs-number">1</span>  foo       one     <span class="hljs-number">1</span>        one     <span class="hljs-number">5</span><span class="hljs-number">2</span>  foo       two     <span class="hljs-number">2</span>        one     <span class="hljs-number">4</span><span class="hljs-number">3</span>  foo       two     <span class="hljs-number">2</span>        one     <span class="hljs-number">5</span><span class="hljs-number">4</span>  bar       one     <span class="hljs-number">3</span>        one     <span class="hljs-number">6</span><span class="hljs-number">5</span>  bar       one     <span class="hljs-number">3</span>        two     <span class="hljs-number">7</span></code></pre><h3><span id="03x07-can-shu-left-index-right-index"><font color="#4876FF">【03x07】参数 left_index / right_index</font></span></h3><p>有时候，DataFrame 中的连接键位于其索引中。在这种情况下，可以使用 <code>left_index=True</code> 或<code>right_index=True</code>（或两个都传）以说明索引应该被用作连接键。这种方法称为按索引连接，在 Pandas 中还有个 <code>join</code> 方法可以实现这个功能。</p><p>在以下示例中，按照 left 的 key 列进行连接，而 right 对象的连接键位于其索引中，因此要指定 <code>right_index=True</code>：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>left = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>right = pd.DataFrame(&#123;<span class="hljs-string">&#x27;group_val&#x27;</span>: [<span class="hljs-number">3.5</span>, <span class="hljs-number">7</span>]&#125;, index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>left  key  value<span class="hljs-number">0</span>   a      <span class="hljs-number">0</span><span class="hljs-number">1</span>   b      <span class="hljs-number">1</span><span class="hljs-number">2</span>   a      <span class="hljs-number">2</span><span class="hljs-number">3</span>   a      <span class="hljs-number">3</span><span class="hljs-number">4</span>   b      <span class="hljs-number">4</span><span class="hljs-number">5</span>   c      <span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>right   group_vala        <span class="hljs-number">3.5</span>b        <span class="hljs-number">7.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.merge(left, right, left_on=<span class="hljs-string">&#x27;key&#x27;</span>, right_index=<span class="hljs-literal">True</span>)  key  value  group_val<span class="hljs-number">0</span>   a      <span class="hljs-number">0</span>        <span class="hljs-number">3.5</span><span class="hljs-number">2</span>   a      <span class="hljs-number">2</span>        <span class="hljs-number">3.5</span><span class="hljs-number">3</span>   a      <span class="hljs-number">3</span>        <span class="hljs-number">3.5</span><span class="hljs-number">1</span>   b      <span class="hljs-number">1</span>        <span class="hljs-number">7.0</span><span class="hljs-number">4</span>   b      <span class="hljs-number">4</span>        <span class="hljs-number">7.0</span></code></pre><h2><span id="04x00-join"><font color="#FF0000">【04x00】join</font></span></h2><p>join 方法只适用于 DataFrame 对象，Series 对象没有该方法，该方法用于连接另一个 DataFrame 对象的列（columns）。</p><p>基本语法：<code>DataFrame.join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False) → ’DataFrame’</code></p><p>参数描述：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>other</td><td>另一个 DataFrame、Series 或 DataFrame 列表对象</td></tr><tr><td>on</td><td>列名称，或者列名称组成的列表、元组，连接的列</td></tr><tr><td>how</td><td>合并方式，默认 <code>'left'</code><br><code>'inner'</code>：内连接，即使用两个对象中<font color="#FF0000"><strong>都有</strong></font>的键（交集）；<br><code>'outer'</code>：外连接，即使用两个对象中<font color="#FF0000"><strong>所有</strong></font>的键（并集）；<br><code>'left'</code>：左连接，即使用<font color="#FF0000"><strong>左</strong></font>对象中所有的键；<br><code>'right'</code>：右连接，即使用<font color="#FF0000"><strong>右</strong></font>对象中所有的键；</td></tr><tr><td>lsuffix</td><td>当两个对象有相同的列名时，合并后左边数据列名的后缀</td></tr><tr><td>rsuffix</td><td>当两个对象有相同的列名时，合并后右边数据列名的后缀</td></tr><tr><td>sort</td><td>bool 类型，是否在结果中按顺序对连接键排序，默认 False。<br>如果为 False，则连接键的顺序取决于联接类型（how 关键字）</td></tr></tbody></table><p>使用 <code>lsuffix</code> 和 <code>rsuffix</code> 参数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K2&#x27;</span>, <span class="hljs-string">&#x27;K3&#x27;</span>, <span class="hljs-string">&#x27;K4&#x27;</span>, <span class="hljs-string">&#x27;K5&#x27;</span>],            <span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;A0&#x27;</span>, <span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>, <span class="hljs-string">&#x27;A3&#x27;</span>, <span class="hljs-string">&#x27;A4&#x27;</span>, <span class="hljs-string">&#x27;A5&#x27;</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>other = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K2&#x27;</span>],              <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;B0&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key   A<span class="hljs-number">0</span>  K0  A0<span class="hljs-number">1</span>  K1  A1<span class="hljs-number">2</span>  K2  A2<span class="hljs-number">3</span>  K3  A3<span class="hljs-number">4</span>  K4  A4<span class="hljs-number">5</span>  K5  A5<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>other  key   B<span class="hljs-number">0</span>  K0  B0<span class="hljs-number">1</span>  K1  B1<span class="hljs-number">2</span>  K2  B2<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.join(other, lsuffix=<span class="hljs-string">&#x27;_1&#x27;</span>, rsuffix=<span class="hljs-string">&#x27;_2&#x27;</span>)  key_1   A key_2    B<span class="hljs-number">0</span>    K0  A0    K0   B0<span class="hljs-number">1</span>    K1  A1    K1   B1<span class="hljs-number">2</span>    K2  A2    K2   B2<span class="hljs-number">3</span>    K3  A3   NaN  NaN<span class="hljs-number">4</span>    K4  A4   NaN  NaN<span class="hljs-number">5</span>    K5  A5   NaN  NaN</code></pre><p>如果右表的索引是左表的某一列的值，这时可以将右表的索引和左表的列对齐合并这样的灵活方式进行合并：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;A0&#x27;</span>, <span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>, <span class="hljs-string">&#x27;A3&#x27;</span>], <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;B0&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>, <span class="hljs-string">&#x27;B3&#x27;</span>],<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>other = pd.DataFrame(&#123;<span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-string">&#x27;C0&#x27;</span>, <span class="hljs-string">&#x27;C1&#x27;</span>],<span class="hljs-string">&#x27;D&#x27;</span>: [<span class="hljs-string">&#x27;D0&#x27;</span>, <span class="hljs-string">&#x27;D1&#x27;</span>]&#125;,index=[<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj    A   B key<span class="hljs-number">0</span>  A0  B0  K0<span class="hljs-number">1</span>  A1  B1  K1<span class="hljs-number">2</span>  A2  B2  K0<span class="hljs-number">3</span>  A3  B3  K1<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>other     C   DK0  C0  D0K1  C1  D1<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.join(other, on=<span class="hljs-string">&#x27;key&#x27;</span>)    A   B key   C   D<span class="hljs-number">0</span>  A0  B0  K0  C0  D0<span class="hljs-number">1</span>  A1  B1  K1  C1  D1<span class="hljs-number">2</span>  A2  B2  K0  C0  D0<span class="hljs-number">3</span>  A3  B3  K1  C1  D1</code></pre><h2><span id="05x00-si-chong-fang-fa-de-qu-bie"><font color="#FF0000">【05x00】四种方法的区别</font></span></h2><ul><li><p><code>concat</code>：可用于两个或多个 Series 或 DataFrame 对象间，通过 <code>axis</code> 参数指定按照行方向（增加行）或列方向（增加列）进合并操作，默认行合并（增加行），取并集；</p></li><li><p><code>append</code>：在一个 Series 或 DataFrame 对象后最追加另一个 Series 或 DataFrame 对象并返回一个新对象，不改变原对象的值。只能按行合并（增加行）。</p></li><li><p><code>merge</code>：只能对两个 DataFrame 对象进行合并，一般按照列方向（增加列）进行合并操作，按照行方向合并一般用 join 方法代替，默认列合并（增加列），取交集；</p></li><li><p><code>join</code>：只能对两个 DataFrame 对象进行合并，按照列方向（增加列）进行合并操作，默认左连接。</p></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106830112</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂/应用/合并</title>
      <link href="/article/030/"/>
      <url>/article/030/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01x00-groupby-ji-zhi-font"><font color="#FF0000">【01x00】GroupBy 机制</font></a></li><li><a href="#font-color-ff0000-02x00-groupby-dui-xiang-font"><font color="#FF0000">【02x00】GroupBy 对象</font></a></li><li><a href="#font-color-ff0000-03x00-groupby-split-shu-ju-fen-lie-font"><font color="#FF0000">【03x00】GroupBy Split 数据分裂</font></a><ul><li><a href="#font-color-4876ff-03x01-fen-zu-yun-suan-font"><font color="#4876FF">【03x01】分组运算</font></a></li><li><a href="#font-color-4876ff-03x02-an-lei-xing-an-lie-fen-zu-font"><font color="#4876FF">【03x02】按类型按列分组</font></a></li><li><a href="#font-color-4876ff-03x03-zi-ding-yi-fen-zu-font"><font color="#4876FF">【03x03】自定义分组</font></a><ul><li><a href="#font-color-ffa500-03x03x01-zi-dian-fen-zu-font"><font color="#FFA500">【03x03x01】字典分组</font></a></li><li><a href="#font-color-ffa500-03x03x02-han-shu-fen-zu-font"><font color="#FFA500">【03x03x02】函数分组</font></a></li><li><a href="#font-color-ffa500-03x03x03-suo-yin-ceng-ji-fen-zu-font"><font color="#FFA500">【03x03x03】索引层级分组</font></a></li></ul></li><li><a href="#font-color-4876ff-03x04-fen-zu-die-dai-font"><font color="#4876FF">【03x04】分组迭代</font></a></li><li><a href="#font-color-4876ff-03x05-dui-xiang-zhuan-huan-font"><font color="#4876FF">【03x05】对象转换</font></a></li></ul></li><li><a href="#font-color-ff0000-04x00-groupby-apply-shu-ju-ying-yong-font"><font color="#FF0000">【04x00】GroupBy Apply 数据应用</font></a><ul><li><a href="#font-color-4876ff-04x01-ju-he-han-shu-font"><font color="#4876FF">【04x01】聚合函数</font></a></li><li><a href="#font-color-4876ff-04x02-zi-ding-yi-han-shu-font"><font color="#4876FF">【04x02】自定义函数</font></a></li><li><a href="#font-color-4876ff-04x03-dui-bu-tong-lie-zuo-yong-bu-tong-han-shu-font"><font color="#4876FF">【04x03】对不同列作用不同函数</font></a></li><li><a href="#font-color-4876ff-04x04-groupby-apply-font"><font color="#4876FF">【04x04】GroupBy.apply()</font></a></li></ul></li></ul><!-- tocstop --><hr><p>Pandas 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/025/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itbob.cn/article/026/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itbob.cn/article/027/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itbob.cn/article/028/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itbob.cn/article/029/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itbob.cn/article/030/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itbob.cn/article/031/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itbob.cn/article/032/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itbob.cn/article/033/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itbob.cn/article/034/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106804881</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01x00-groupby-ji-zhi"><font color="#FF0000">【01x00】GroupBy 机制</font></span></h2><p>对数据集进行分组并对各组应用一个函数（无论是聚合还是转换），通常是数据分析工作中的重要环节。在将数据集加载、融合、准备好之后，通常就是计算分组统计或生成透视表。Pandas 提供了一个灵活高效的 GroupBy 功能，虽然“分组”（group by）这个名字是借用 SQL 数据库语言的命令，但其理念引用发明 R 语言 frame 的 Hadley Wickham 的观点可能更合适：分裂（Split）、应用（Apply）和组合（Combine）。</p><p>分组运算过程：Split —&gt; Apply —&gt; Combine</p><ul><li>分裂（Split）：根据某些标准将数据分组；</li><li>应用（Apply）：对每个组独立应用一个函数；</li><li>合并（Combine）：把每个分组的计算结果合并起来。</li></ul><p>官方介绍：<a href="https://pandas.pydata.org/docs/user_guide/groupby.html">https://pandas.pydata.org/docs/user_guide/groupby.html</a></p><p><img src="https://cdn.itbob.cn/img/article/030/01.png" alt="01"></p><h2><span id="02x00-groupby-dui-xiang"><font color="#FF0000">【02x00】GroupBy 对象</font></span></h2><p>常见的 GroupBy 对象：Series.groupby、DataFrame.groupby，基本语法如下：</p><pre><code class="hljs python">Series.groupby(self,               by=<span class="hljs-literal">None</span>,               axis=<span class="hljs-number">0</span>,               level=<span class="hljs-literal">None</span>,               as_index: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,               sort: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,               group_keys: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,               squeeze: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,               observed: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>) → ’groupby_generic.SeriesGroupBy’</code></pre><pre><code class="hljs python">DataFrame.groupby(self,                  by=<span class="hljs-literal">None</span>,                  axis=<span class="hljs-number">0</span>,                  level=<span class="hljs-literal">None</span>,                  as_index: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,                  sort: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,                  group_keys: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,                  squeeze: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,                  observed: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>) → ’groupby_generic.DataFrameGroupBy’</code></pre><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.groupby.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.groupby.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html</a></p></li></ul><p>常用参数解释如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>by</td><td>映射、函数、标签或标签列表，用于确定分组依据的分组。如果 by 是函数，则会在对象索引的每个值上调用它。 <br>如果传递了 dict 或 Series，则将使用 Series 或 dict 的值来确定组（将 Series 的值首先对齐；请参见.align() 方法）。<br> 如果传递了 ndarray，则按原样使用这些值来确定组。标签或标签列表可以按自身中的列传递给分组。 注意，元组被解释为（单个）键</td></tr><tr><td>axis</td><td>沿指定轴拆分，默认 <code>0</code>，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>level</td><td>如果轴是  MultiIndex（层次结构），则按特定层级进行分组，默认 None</td></tr><tr><td>as_index</td><td>bool 类型，默认 True，对于聚合输出，返回以组标签为索引的对象。仅与 DataFrame 输入相关。<br><code>as_index=False</code> 实际上是“SQL样式”分组输出</td></tr><tr><td>sort</td><td>bool 类型，默认 True，对组键排序。关闭此选项可获得更好的性能。注：这不影响每组的观察顺序。Groupby 保留每个组中行的顺序</td></tr><tr><td>group_keys</td><td>bool 类型，默认 True，调用 apply 方法时，是否将组键（keys）添加到索引（ index）以标识块</td></tr><tr><td>squeeze</td><td>bool 类型，默认 False，如果可能，减少返回类型的维度，否则返回一致的类型</td></tr></tbody></table><p>groupby() 进行分组，GroupBy 对象没有进行实际运算，只是包含分组的中间数据，示例如下：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>),    <span class="hljs-string">&#x27;data2&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>)&#125;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1   key2     data1     data2<span class="hljs-number">0</span>    a    one -<span class="hljs-number">0.804160</span> -<span class="hljs-number">0.868905</span><span class="hljs-number">1</span>    b    one -<span class="hljs-number">0.086990</span>  <span class="hljs-number">0.325741</span><span class="hljs-number">2</span>    a    two  <span class="hljs-number">0.757992</span>  <span class="hljs-number">0.541101</span><span class="hljs-number">3</span>    b  three -<span class="hljs-number">0.281435</span>  <span class="hljs-number">0.097841</span><span class="hljs-number">4</span>    a    two  <span class="hljs-number">0.817757</span> -<span class="hljs-number">0.643699</span><span class="hljs-number">5</span>    b    two -<span class="hljs-number">0.462760</span> -<span class="hljs-number">0.321196</span><span class="hljs-number">6</span>    a    one -<span class="hljs-number">0.403699</span>  <span class="hljs-number">0.602138</span><span class="hljs-number">7</span>    a  three  <span class="hljs-number">0.883940</span> -<span class="hljs-number">0.850526</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>)&lt;pandas.core.groupby.generic.DataFrameGroupBy <span class="hljs-built_in">object</span> at <span class="hljs-number">0x03CDB7C0</span>&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;data1&#x27;</span>].groupby(obj[<span class="hljs-string">&#x27;key1&#x27;</span>])&lt;pandas.core.groupby.generic.SeriesGroupBy <span class="hljs-built_in">object</span> at <span class="hljs-number">0x03CDB748</span>&gt;</code></pre><h2><span id="03x00-groupby-split-shu-ju-fen-lie"><font color="#FF0000">【03x00】GroupBy Split 数据分裂</font></span></h2><h3><span id="03x01-fen-zu-yun-suan"><font color="#4876FF">【03x01】分组运算</font></span></h3><p>前面通过 <code>groupby()</code> 方法获得了一个 GroupBy 对象，它实际上还没有进行任何计算，只是含有一些有关分组键 <code>obj['key1']</code> 的中间数据而已。换句话说，该对象已经有了接下来对各分组执行运算所需的一切信息。例如，我们可以调用 GroupBy 的 <code>mean()</code> 方法来计算分组平均值，<code>size()</code> 方法返回每个分组的元素个数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>),    <span class="hljs-string">&#x27;data2&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>)&#125;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1   key2     data1     data2<span class="hljs-number">0</span>    a    one -<span class="hljs-number">0.544099</span> -<span class="hljs-number">0.614079</span><span class="hljs-number">1</span>    b    one  <span class="hljs-number">2.193712</span>  <span class="hljs-number">0.101005</span><span class="hljs-number">2</span>    a    two -<span class="hljs-number">0.004683</span>  <span class="hljs-number">0.882770</span><span class="hljs-number">3</span>    b  three  <span class="hljs-number">0.312858</span>  <span class="hljs-number">1.732105</span><span class="hljs-number">4</span>    a    two  <span class="hljs-number">0.011089</span>  <span class="hljs-number">0.089587</span><span class="hljs-number">5</span>    b    two  <span class="hljs-number">0.292165</span>  <span class="hljs-number">1.327638</span><span class="hljs-number">6</span>    a    one -<span class="hljs-number">1.433291</span> -<span class="hljs-number">0.238971</span><span class="hljs-number">7</span>    a  three -<span class="hljs-number">0.004724</span> -<span class="hljs-number">2.117326</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>grouped1 = obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>grouped2 = obj[<span class="hljs-string">&#x27;data1&#x27;</span>].groupby(obj[<span class="hljs-string">&#x27;key1&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>grouped1.mean()         data1     data2key1                    a    -<span class="hljs-number">0.395142</span> -<span class="hljs-number">0.399604</span>b     <span class="hljs-number">0.932912</span>  <span class="hljs-number">1.053583</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>grouped2.mean()key1a   -<span class="hljs-number">0.395142</span>b    <span class="hljs-number">0.932912</span>Name: data1, dtype: float64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>grouped1.size()key1a    <span class="hljs-number">5</span>b    <span class="hljs-number">3</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>grouped2.size()key1a    <span class="hljs-number">5</span>b    <span class="hljs-number">3</span>Name: data1, dtype: int64</code></pre><h3><span id="03x02-an-lei-xing-an-lie-fen-zu"><font color="#4876FF">【03x02】按类型按列分组</font></span></h3><p><code>groupby()</code> 方法 <code>axis</code> 参数默认是 0，通过设置也可以在其他任何轴上进行分组，也支持按照类型（dtype）进行分组：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>),    <span class="hljs-string">&#x27;data2&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>)&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1   key2     data1     data2<span class="hljs-number">0</span>    a    one -<span class="hljs-number">0.607009</span>  <span class="hljs-number">1.948301</span><span class="hljs-number">1</span>    b    one  <span class="hljs-number">0.150818</span> -<span class="hljs-number">0.025095</span><span class="hljs-number">2</span>    a    two -<span class="hljs-number">2.086024</span>  <span class="hljs-number">0.358164</span><span class="hljs-number">3</span>    b  three  <span class="hljs-number">0.446061</span>  <span class="hljs-number">1.708797</span><span class="hljs-number">4</span>    a    two  <span class="hljs-number">0.745457</span> -<span class="hljs-number">0.980948</span><span class="hljs-number">5</span>    b    two  <span class="hljs-number">0.981877</span>  <span class="hljs-number">2.159327</span><span class="hljs-number">6</span>    a    one  <span class="hljs-number">0.804480</span> -<span class="hljs-number">0.499661</span><span class="hljs-number">7</span>    a  three  <span class="hljs-number">0.112884</span>  <span class="hljs-number">0.004367</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.dtypeskey1      <span class="hljs-built_in">object</span>key2      <span class="hljs-built_in">object</span>data1    float64data2    float64dtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(obj.dtypes, axis=<span class="hljs-number">1</span>).size()float64    <span class="hljs-number">2</span><span class="hljs-built_in">object</span>     <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(obj.dtypes, axis=<span class="hljs-number">1</span>).<span class="hljs-built_in">sum</span>()    float64  <span class="hljs-built_in">object</span><span class="hljs-number">0</span>  <span class="hljs-number">1.341291</span>    aone<span class="hljs-number">1</span>  <span class="hljs-number">0.125723</span>    bone<span class="hljs-number">2</span> -<span class="hljs-number">1.727860</span>    atwo<span class="hljs-number">3</span>  <span class="hljs-number">2.154858</span>  bthree<span class="hljs-number">4</span> -<span class="hljs-number">0.235491</span>    atwo<span class="hljs-number">5</span>  <span class="hljs-number">3.141203</span>    btwo<span class="hljs-number">6</span>  <span class="hljs-number">0.304819</span>    aone<span class="hljs-number">7</span>  <span class="hljs-number">0.117251</span>  athree</code></pre><h3><span id="03x03-zi-ding-yi-fen-zu"><font color="#4876FF">【03x03】自定义分组</font></span></h3><p><code>groupby()</code> 方法中可以一次传入多个数组的列表，也可以自定义一组分组键。也可以通过一个字典、一个函数，或者按照索引层级进行分组。</p><p>传入多个数组的列表：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>),    <span class="hljs-string">&#x27;data2&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>)&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1   key2     data1     data2<span class="hljs-number">0</span>    a    one -<span class="hljs-number">0.841652</span>  <span class="hljs-number">0.688055</span><span class="hljs-number">1</span>    b    one  <span class="hljs-number">0.510042</span> -<span class="hljs-number">0.561171</span><span class="hljs-number">2</span>    a    two -<span class="hljs-number">0.418862</span> -<span class="hljs-number">0.145983</span><span class="hljs-number">3</span>    b  three -<span class="hljs-number">1.104698</span>  <span class="hljs-number">0.563158</span><span class="hljs-number">4</span>    a    two  <span class="hljs-number">0.329527</span> -<span class="hljs-number">0.893108</span><span class="hljs-number">5</span>    b    two  <span class="hljs-number">0.753653</span> -<span class="hljs-number">0.342520</span><span class="hljs-number">6</span>    a    one -<span class="hljs-number">0.882527</span> -<span class="hljs-number">1.121329</span><span class="hljs-number">7</span>    a  three  <span class="hljs-number">1.726794</span>  <span class="hljs-number">0.160244</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>means = obj[<span class="hljs-string">&#x27;data1&#x27;</span>].groupby([obj[<span class="hljs-string">&#x27;key1&#x27;</span>], obj[<span class="hljs-string">&#x27;key2&#x27;</span>]]).mean()<span class="hljs-meta">&gt;&gt;&gt; </span>meanskey1  key2 a     one     -<span class="hljs-number">0.862090</span>      three    <span class="hljs-number">1.726794</span>      two     -<span class="hljs-number">0.044667</span>b     one      <span class="hljs-number">0.510042</span>      three   -<span class="hljs-number">1.104698</span>      two      <span class="hljs-number">0.753653</span>Name: data1, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>means.unstack()key2       one     three       twokey1                              a    -<span class="hljs-number">0.862090</span>  <span class="hljs-number">1.726794</span> -<span class="hljs-number">0.044667</span>b     <span class="hljs-number">0.510042</span> -<span class="hljs-number">1.104698</span>  <span class="hljs-number">0.753653</span></code></pre><p>自定义分组键：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span> : np.random.randn(<span class="hljs-number">5</span>),    <span class="hljs-string">&#x27;data2&#x27;</span> : np.random.randn(<span class="hljs-number">5</span>)&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1 key2     data1     data2<span class="hljs-number">0</span>    a  one -<span class="hljs-number">0.024003</span>  <span class="hljs-number">0.350480</span><span class="hljs-number">1</span>    a  two -<span class="hljs-number">0.767534</span> -<span class="hljs-number">0.100426</span><span class="hljs-number">2</span>    b  one -<span class="hljs-number">0.594983</span> -<span class="hljs-number">1.945580</span><span class="hljs-number">3</span>    b  two -<span class="hljs-number">0.374482</span>  <span class="hljs-number">0.817592</span><span class="hljs-number">4</span>    a  one  <span class="hljs-number">0.755452</span> -<span class="hljs-number">0.137759</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>states = np.array([<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>years = np.array([<span class="hljs-number">2005</span>, <span class="hljs-number">2005</span>, <span class="hljs-number">2006</span>, <span class="hljs-number">2005</span>, <span class="hljs-number">2006</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;data1&#x27;</span>].groupby([states, years]).mean()Beijing  <span class="hljs-number">2005</span>   -<span class="hljs-number">0.767534</span>         <span class="hljs-number">2006</span>   -<span class="hljs-number">0.594983</span>Wuhan    <span class="hljs-number">2005</span>   -<span class="hljs-number">0.199242</span>         <span class="hljs-number">2006</span>    <span class="hljs-number">0.755452</span>Name: data1, dtype: float64</code></pre><h4><span id="03x03x01-zi-dian-fen-zu"><font color="#FFA500">【03x03x01】字典分组</font></span></h4><p>通过字典进行分组：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, (<span class="hljs-number">5</span>,<span class="hljs-number">5</span>)),    columns=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>],    index=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj   a  b  c  d  eA  <span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">7</span>  <span class="hljs-number">1</span>  <span class="hljs-number">9</span>B  <span class="hljs-number">8</span>  <span class="hljs-number">2</span>  <span class="hljs-number">4</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>C  <span class="hljs-number">9</span>  <span class="hljs-number">8</span>  <span class="hljs-number">2</span>  <span class="hljs-number">5</span>  <span class="hljs-number">1</span>D  <span class="hljs-number">2</span>  <span class="hljs-number">4</span>  <span class="hljs-number">2</span>  <span class="hljs-number">8</span>  <span class="hljs-number">3</span>E  <span class="hljs-number">7</span>  <span class="hljs-number">5</span>  <span class="hljs-number">7</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj_dict = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>:<span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>:<span class="hljs-string">&#x27;Java&#x27;</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(obj_dict, axis=<span class="hljs-number">1</span>).size()C++       <span class="hljs-number">1</span>Java      <span class="hljs-number">2</span>Python    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(obj_dict, axis=<span class="hljs-number">1</span>).count()   C++  Java  PythonA    <span class="hljs-number">1</span>     <span class="hljs-number">2</span>       <span class="hljs-number">2</span>B    <span class="hljs-number">1</span>     <span class="hljs-number">2</span>       <span class="hljs-number">2</span>C    <span class="hljs-number">1</span>     <span class="hljs-number">2</span>       <span class="hljs-number">2</span>D    <span class="hljs-number">1</span>     <span class="hljs-number">2</span>       <span class="hljs-number">2</span>E    <span class="hljs-number">1</span>     <span class="hljs-number">2</span>       <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(obj_dict, axis=<span class="hljs-number">1</span>).<span class="hljs-built_in">sum</span>()   C++  Java  PythonA    <span class="hljs-number">1</span>    <span class="hljs-number">16</span>       <span class="hljs-number">5</span>B    <span class="hljs-number">7</span>    <span class="hljs-number">12</span>      <span class="hljs-number">10</span>C    <span class="hljs-number">5</span>     <span class="hljs-number">3</span>      <span class="hljs-number">17</span>D    <span class="hljs-number">8</span>     <span class="hljs-number">5</span>       <span class="hljs-number">6</span>E    <span class="hljs-number">2</span>    <span class="hljs-number">10</span>      <span class="hljs-number">12</span></code></pre><h4><span id="03x03x02-han-shu-fen-zu"><font color="#FFA500">【03x03x02】函数分组</font></span></h4><p>通过函数进行分组：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, (<span class="hljs-number">5</span>,<span class="hljs-number">5</span>)),        columns=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>],        index=[<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;BBB&#x27;</span>, <span class="hljs-string">&#x27;CC&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;EE&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj     a  b  c  d  eAA   <span class="hljs-number">3</span>  <span class="hljs-number">9</span>  <span class="hljs-number">5</span>  <span class="hljs-number">8</span>  <span class="hljs-number">2</span>BBB  <span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">2</span>  <span class="hljs-number">2</span>  <span class="hljs-number">6</span>CC   <span class="hljs-number">9</span>  <span class="hljs-number">2</span>  <span class="hljs-number">4</span>  <span class="hljs-number">7</span>  <span class="hljs-number">6</span>D    <span class="hljs-number">2</span>  <span class="hljs-number">5</span>  <span class="hljs-number">5</span>  <span class="hljs-number">7</span>  <span class="hljs-number">1</span>EE   <span class="hljs-number">8</span>  <span class="hljs-number">8</span>  <span class="hljs-number">8</span>  <span class="hljs-number">2</span>  <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">group_key</span>(<span class="hljs-params">idx</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        idx 为列索引或行索引</span><span class="hljs-string">    &quot;&quot;&quot;</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(idx)<span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(group_key).size()    <span class="hljs-comment"># 等价于 obj.groupby(len).size()</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">2</span>    <span class="hljs-number">3</span><span class="hljs-number">3</span>    <span class="hljs-number">1</span>dtype: int64</code></pre><h4><span id="03x03x03-suo-yin-ceng-ji-fen-zu"><font color="#FFA500">【03x03x03】索引层级分组</font></span></h4><p>通过不同索引层级进行分组：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>columns = pd.MultiIndex.from_arrays([[<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>],    [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>]], names=[<span class="hljs-string">&#x27;language&#x27;</span>, <span class="hljs-string">&#x27;index&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>)), columns=columns)<span class="hljs-meta">&gt;&gt;&gt; </span>objlanguage Python Java Python Java Pythonindex         A    A      B    C      B<span class="hljs-number">0</span>             <span class="hljs-number">7</span>    <span class="hljs-number">1</span>      <span class="hljs-number">9</span>    <span class="hljs-number">8</span>      <span class="hljs-number">5</span><span class="hljs-number">1</span>             <span class="hljs-number">4</span>    <span class="hljs-number">5</span>      <span class="hljs-number">4</span>    <span class="hljs-number">5</span>      <span class="hljs-number">6</span><span class="hljs-number">2</span>             <span class="hljs-number">4</span>    <span class="hljs-number">3</span>      <span class="hljs-number">1</span>    <span class="hljs-number">9</span>      <span class="hljs-number">5</span><span class="hljs-number">3</span>             <span class="hljs-number">6</span>    <span class="hljs-number">6</span>      <span class="hljs-number">3</span>    <span class="hljs-number">8</span>      <span class="hljs-number">1</span><span class="hljs-number">4</span>             <span class="hljs-number">7</span>    <span class="hljs-number">9</span>      <span class="hljs-number">2</span>    <span class="hljs-number">8</span>      <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(level=<span class="hljs-string">&#x27;language&#x27;</span>, axis=<span class="hljs-number">1</span>).<span class="hljs-built_in">sum</span>()language  Java  Python<span class="hljs-number">0</span>            <span class="hljs-number">9</span>      <span class="hljs-number">21</span><span class="hljs-number">1</span>           <span class="hljs-number">10</span>      <span class="hljs-number">14</span><span class="hljs-number">2</span>           <span class="hljs-number">12</span>      <span class="hljs-number">10</span><span class="hljs-number">3</span>           <span class="hljs-number">14</span>      <span class="hljs-number">10</span><span class="hljs-number">4</span>           <span class="hljs-number">17</span>      <span class="hljs-number">11</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(level=<span class="hljs-string">&#x27;index&#x27;</span>, axis=<span class="hljs-number">1</span>).<span class="hljs-built_in">sum</span>()index   A   B  C<span class="hljs-number">0</span>       <span class="hljs-number">8</span>  <span class="hljs-number">14</span>  <span class="hljs-number">8</span><span class="hljs-number">1</span>       <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">5</span><span class="hljs-number">2</span>       <span class="hljs-number">7</span>   <span class="hljs-number">6</span>  <span class="hljs-number">9</span><span class="hljs-number">3</span>      <span class="hljs-number">12</span>   <span class="hljs-number">4</span>  <span class="hljs-number">8</span><span class="hljs-number">4</span>      <span class="hljs-number">16</span>   <span class="hljs-number">4</span>  <span class="hljs-number">8</span></code></pre><h3><span id="03x04-fen-zu-die-dai"><font color="#4876FF">【03x04】分组迭代</font></span></h3><p>GroupBy 对象支持迭代，对于单层分组，可以产生一组二元元组，由分组名和数据块组成：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>),    <span class="hljs-string">&#x27;data2&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>)&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1   key2     data1     data2<span class="hljs-number">0</span>    a    one -<span class="hljs-number">1.088762</span>  <span class="hljs-number">0.668504</span><span class="hljs-number">1</span>    b    one  <span class="hljs-number">0.275500</span>  <span class="hljs-number">0.787844</span><span class="hljs-number">2</span>    a    two -<span class="hljs-number">0.108417</span> -<span class="hljs-number">0.491296</span><span class="hljs-number">3</span>    b  three  <span class="hljs-number">0.019524</span> -<span class="hljs-number">0.363390</span><span class="hljs-number">4</span>    a    two  <span class="hljs-number">0.453612</span>  <span class="hljs-number">0.796999</span><span class="hljs-number">5</span>    b    two  <span class="hljs-number">1.982858</span>  <span class="hljs-number">1.501877</span><span class="hljs-number">6</span>    a    one  <span class="hljs-number">1.101132</span> -<span class="hljs-number">1.928362</span><span class="hljs-number">7</span>    a  three  <span class="hljs-number">0.524775</span> -<span class="hljs-number">1.205842</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> group_name, group_data <span class="hljs-keyword">in</span> obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>):    <span class="hljs-built_in">print</span>(group_name)    <span class="hljs-built_in">print</span>(group_data)    a  key1   key2     data1     data2<span class="hljs-number">0</span>    a    one -<span class="hljs-number">1.088762</span>  <span class="hljs-number">0.668504</span><span class="hljs-number">2</span>    a    two -<span class="hljs-number">0.108417</span> -<span class="hljs-number">0.491296</span><span class="hljs-number">4</span>    a    two  <span class="hljs-number">0.453612</span>  <span class="hljs-number">0.796999</span><span class="hljs-number">6</span>    a    one  <span class="hljs-number">1.101132</span> -<span class="hljs-number">1.928362</span><span class="hljs-number">7</span>    a  three  <span class="hljs-number">0.524775</span> -<span class="hljs-number">1.205842</span>b  key1   key2     data1     data2<span class="hljs-number">1</span>    b    one  <span class="hljs-number">0.275500</span>  <span class="hljs-number">0.787844</span><span class="hljs-number">3</span>    b  three  <span class="hljs-number">0.019524</span> -<span class="hljs-number">0.363390</span><span class="hljs-number">5</span>    b    two  <span class="hljs-number">1.982858</span>  <span class="hljs-number">1.501877</span></code></pre><p>对于多层分组，元组的第一个元素将会是由键值组成的元组，第二个元素为数据块：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>),    <span class="hljs-string">&#x27;data2&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>)&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1   key2     data1     data2<span class="hljs-number">0</span>    a    one -<span class="hljs-number">1.088762</span>  <span class="hljs-number">0.668504</span><span class="hljs-number">1</span>    b    one  <span class="hljs-number">0.275500</span>  <span class="hljs-number">0.787844</span><span class="hljs-number">2</span>    a    two -<span class="hljs-number">0.108417</span> -<span class="hljs-number">0.491296</span><span class="hljs-number">3</span>    b  three  <span class="hljs-number">0.019524</span> -<span class="hljs-number">0.363390</span><span class="hljs-number">4</span>    a    two  <span class="hljs-number">0.453612</span>  <span class="hljs-number">0.796999</span><span class="hljs-number">5</span>    b    two  <span class="hljs-number">1.982858</span>  <span class="hljs-number">1.501877</span><span class="hljs-number">6</span>    a    one  <span class="hljs-number">1.101132</span> -<span class="hljs-number">1.928362</span><span class="hljs-number">7</span>    a  three  <span class="hljs-number">0.524775</span> -<span class="hljs-number">1.205842</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> group_name, group_data <span class="hljs-keyword">in</span> obj.groupby([<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>]):    <span class="hljs-built_in">print</span>(group_name)    <span class="hljs-built_in">print</span>(group_data)    (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>)  key1 key2     data1     data2<span class="hljs-number">0</span>    a  one -<span class="hljs-number">1.088762</span>  <span class="hljs-number">0.668504</span><span class="hljs-number">6</span>    a  one  <span class="hljs-number">1.101132</span> -<span class="hljs-number">1.928362</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>)  key1   key2     data1     data2<span class="hljs-number">7</span>    a  three  <span class="hljs-number">0.524775</span> -<span class="hljs-number">1.205842</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>)  key1 key2     data1     data2<span class="hljs-number">2</span>    a  two -<span class="hljs-number">0.108417</span> -<span class="hljs-number">0.491296</span><span class="hljs-number">4</span>    a  two  <span class="hljs-number">0.453612</span>  <span class="hljs-number">0.796999</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>)  key1 key2   data1     data2<span class="hljs-number">1</span>    b  one  <span class="hljs-number">0.2755</span>  <span class="hljs-number">0.787844</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>)  key1   key2     data1    data2<span class="hljs-number">3</span>    b  three  <span class="hljs-number">0.019524</span> -<span class="hljs-number">0.36339</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>)  key1 key2     data1     data2<span class="hljs-number">5</span>    b  two  <span class="hljs-number">1.982858</span>  <span class="hljs-number">1.501877</span></code></pre><h3><span id="03x05-dui-xiang-zhuan-huan"><font color="#4876FF">【03x05】对象转换</font></span></h3><p>GroupBy 对象支持转换成列表或字典：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>),    <span class="hljs-string">&#x27;data2&#x27;</span>: np.random.randn(<span class="hljs-number">8</span>)&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1   key2     data1     data2<span class="hljs-number">0</span>    a    one -<span class="hljs-number">0.607009</span>  <span class="hljs-number">1.948301</span><span class="hljs-number">1</span>    b    one  <span class="hljs-number">0.150818</span> -<span class="hljs-number">0.025095</span><span class="hljs-number">2</span>    a    two -<span class="hljs-number">2.086024</span>  <span class="hljs-number">0.358164</span><span class="hljs-number">3</span>    b  three  <span class="hljs-number">0.446061</span>  <span class="hljs-number">1.708797</span><span class="hljs-number">4</span>    a    two  <span class="hljs-number">0.745457</span> -<span class="hljs-number">0.980948</span><span class="hljs-number">5</span>    b    two  <span class="hljs-number">0.981877</span>  <span class="hljs-number">2.159327</span><span class="hljs-number">6</span>    a    one  <span class="hljs-number">0.804480</span> -<span class="hljs-number">0.499661</span><span class="hljs-number">7</span>    a  three  <span class="hljs-number">0.112884</span>  <span class="hljs-number">0.004367</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>grouped = obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(grouped)[(<span class="hljs-string">&#x27;a&#x27;</span>,   key1   key2     data1     data2<span class="hljs-number">0</span>    a    one -<span class="hljs-number">0.607009</span>  <span class="hljs-number">1.948301</span><span class="hljs-number">2</span>    a    two -<span class="hljs-number">2.086024</span>  <span class="hljs-number">0.358164</span><span class="hljs-number">4</span>    a    two  <span class="hljs-number">0.745457</span> -<span class="hljs-number">0.980948</span><span class="hljs-number">6</span>    a    one  <span class="hljs-number">0.804480</span> -<span class="hljs-number">0.499661</span><span class="hljs-number">7</span>    a  three  <span class="hljs-number">0.112884</span>  <span class="hljs-number">0.004367</span>),(<span class="hljs-string">&#x27;b&#x27;</span>,   key1   key2     data1     data2<span class="hljs-number">1</span>    b    one  <span class="hljs-number">0.150818</span> -<span class="hljs-number">0.025095</span><span class="hljs-number">3</span>    b  three  <span class="hljs-number">0.446061</span>  <span class="hljs-number">1.708797</span><span class="hljs-number">5</span>    b    two  <span class="hljs-number">0.981877</span>  <span class="hljs-number">2.159327</span>)]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span>(<span class="hljs-built_in">list</span>(grouped))&#123;<span class="hljs-string">&#x27;a&#x27;</span>:   key1   key2     data1     data2<span class="hljs-number">0</span>    a    one -<span class="hljs-number">0.607009</span>  <span class="hljs-number">1.948301</span><span class="hljs-number">2</span>    a    two -<span class="hljs-number">2.086024</span>  <span class="hljs-number">0.358164</span><span class="hljs-number">4</span>    a    two  <span class="hljs-number">0.745457</span> -<span class="hljs-number">0.980948</span><span class="hljs-number">6</span>    a    one  <span class="hljs-number">0.804480</span> -<span class="hljs-number">0.499661</span><span class="hljs-number">7</span>    a  three  <span class="hljs-number">0.112884</span>  <span class="hljs-number">0.004367</span>,<span class="hljs-string">&#x27;b&#x27;</span>:   key1   key2     data1     data2<span class="hljs-number">1</span>    b    one  <span class="hljs-number">0.150818</span> -<span class="hljs-number">0.025095</span><span class="hljs-number">3</span>    b  three  <span class="hljs-number">0.446061</span>  <span class="hljs-number">1.708797</span><span class="hljs-number">5</span>    b    two  <span class="hljs-number">0.981877</span>  <span class="hljs-number">2.159327</span>&#125;</code></pre><h2><span id="04x00-groupby-apply-shu-ju-ying-yong"><font color="#FF0000">【04x00】GroupBy Apply 数据应用</font></span></h2><p>聚合指的是任何能够从数组产生标量值的数据转换过程，常用于对分组后的数据进行计算</p><h3><span id="04x01-ju-he-han-shu"><font color="#4876FF">【04x01】聚合函数</font></span></h3><p>之前的例子已经用过一些内置的聚合函数，比如 mean、count、min 以及 sum 等。常见的聚合运算如下表所示：</p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/groupby.html">https://pandas.pydata.org/docs/reference/groupby.html</a></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>count</td><td>非NA值的数量</td></tr><tr><td>describe</td><td>针对Series或各DataFrame列计算汇总统计</td></tr><tr><td>min</td><td>计算最小值</td></tr><tr><td>max</td><td>计算最大值</td></tr><tr><td>argmin</td><td>计算能够获取到最小值的索引位置（整数）</td></tr><tr><td>argmax</td><td>计算能够获取到最大值的索引位置（整数）</td></tr><tr><td>idxmin</td><td>计算能够获取到最小值的索引值</td></tr><tr><td>idxmax</td><td>计算能够获取到最大值的索引值</td></tr><tr><td>quantile</td><td>计算样本的分位数（0到1）</td></tr><tr><td>sum</td><td>值的总和</td></tr><tr><td>mean</td><td>值的平均数</td></tr><tr><td>median</td><td>值的算术中位数（50%分位数）</td></tr><tr><td>mad</td><td>根据平均值计算平均绝对离差</td></tr><tr><td>var</td><td>样本值的方差</td></tr><tr><td>std</td><td>样本值的标准差</td></tr></tbody></table><p>应用示例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = &#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span>: np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>, <span class="hljs-number">8</span>),    <span class="hljs-string">&#x27;data2&#x27;</span>: np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>, <span class="hljs-number">8</span>)&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(obj)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1   key2  data1  data2<span class="hljs-number">0</span>    a    one      <span class="hljs-number">9</span>      <span class="hljs-number">7</span><span class="hljs-number">1</span>    b    one      <span class="hljs-number">5</span>      <span class="hljs-number">9</span><span class="hljs-number">2</span>    a    two      <span class="hljs-number">2</span>      <span class="hljs-number">4</span><span class="hljs-number">3</span>    b  three      <span class="hljs-number">3</span>      <span class="hljs-number">4</span><span class="hljs-number">4</span>    a    two      <span class="hljs-number">5</span>      <span class="hljs-number">1</span><span class="hljs-number">5</span>    b    two      <span class="hljs-number">5</span>      <span class="hljs-number">9</span><span class="hljs-number">6</span>    a    one      <span class="hljs-number">1</span>      <span class="hljs-number">8</span><span class="hljs-number">7</span>    a  three      <span class="hljs-number">2</span>      <span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).<span class="hljs-built_in">sum</span>()      data1  data2key1              a        <span class="hljs-number">19</span>     <span class="hljs-number">24</span>b        <span class="hljs-number">13</span>     <span class="hljs-number">22</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).<span class="hljs-built_in">max</span>()     key2  data1  data2key1                   a     two      <span class="hljs-number">9</span>      <span class="hljs-number">8</span>b     two      <span class="hljs-number">5</span>      <span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).<span class="hljs-built_in">min</span>()     key2  data1  data2key1                   a     one      <span class="hljs-number">1</span>      <span class="hljs-number">1</span>b     one      <span class="hljs-number">3</span>      <span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).mean()         data1     data2key1                    a     <span class="hljs-number">3.800000</span>  <span class="hljs-number">4.800000</span>b     <span class="hljs-number">4.333333</span>  <span class="hljs-number">7.333333</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).size()key1a    <span class="hljs-number">5</span>b    <span class="hljs-number">3</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).count()      key2  data1  data2key1                    a        <span class="hljs-number">5</span>      <span class="hljs-number">5</span>      <span class="hljs-number">5</span>b        <span class="hljs-number">3</span>      <span class="hljs-number">3</span>      <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).describe()     data1                                ... data2                         count      mean       std  <span class="hljs-built_in">min</span>  <span class="hljs-number">25</span>%  ...   <span class="hljs-built_in">min</span>  <span class="hljs-number">25</span>%  <span class="hljs-number">50</span>%  <span class="hljs-number">75</span>%  <span class="hljs-built_in">max</span>key1                                      ...                          a      <span class="hljs-number">5.0</span>  <span class="hljs-number">3.800000</span>  <span class="hljs-number">3.271085</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">2.0</span>  ...   <span class="hljs-number">1.0</span>  <span class="hljs-number">4.0</span>  <span class="hljs-number">4.0</span>  <span class="hljs-number">7.0</span>  <span class="hljs-number">8.0</span>b      <span class="hljs-number">3.0</span>  <span class="hljs-number">4.333333</span>  <span class="hljs-number">1.154701</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">4.0</span>  ...   <span class="hljs-number">4.0</span>  <span class="hljs-number">6.5</span>  <span class="hljs-number">9.0</span>  <span class="hljs-number">9.0</span>  <span class="hljs-number">9.0</span>[<span class="hljs-number">2</span> rows x <span class="hljs-number">16</span> columns]</code></pre><h3><span id="04x02-zi-ding-yi-han-shu"><font color="#4876FF">【04x02】自定义函数</font></span></h3><p>如果自带的内置函数满足不了我们的要求，则可以自定义一个聚合函数，然后传入 <code>GroupBy.agg(func)</code> 或 <code>GroupBy.aggregate(func) </code> 方法中即可。func 的参数为 groupby 索引对应的记录。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = &#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span>: np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>, <span class="hljs-number">8</span>),    <span class="hljs-string">&#x27;data2&#x27;</span>: np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>, <span class="hljs-number">8</span>)&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(obj)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1   key2  data1  data2<span class="hljs-number">0</span>    a    one      <span class="hljs-number">9</span>      <span class="hljs-number">7</span><span class="hljs-number">1</span>    b    one      <span class="hljs-number">5</span>      <span class="hljs-number">9</span><span class="hljs-number">2</span>    a    two      <span class="hljs-number">2</span>      <span class="hljs-number">4</span><span class="hljs-number">3</span>    b  three      <span class="hljs-number">3</span>      <span class="hljs-number">4</span><span class="hljs-number">4</span>    a    two      <span class="hljs-number">5</span>      <span class="hljs-number">1</span><span class="hljs-number">5</span>    b    two      <span class="hljs-number">5</span>      <span class="hljs-number">9</span><span class="hljs-number">6</span>    a    one      <span class="hljs-number">1</span>      <span class="hljs-number">8</span><span class="hljs-number">7</span>    a  three      <span class="hljs-number">2</span>      <span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">peak_range</span>(<span class="hljs-params">df</span>):</span>    <span class="hljs-keyword">return</span> df.<span class="hljs-built_in">max</span>() - df.<span class="hljs-built_in">min</span>()<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).agg(peak_range)      data1  data2key1              a         <span class="hljs-number">8</span>      <span class="hljs-number">7</span>b         <span class="hljs-number">2</span>      <span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).agg(<span class="hljs-keyword">lambda</span> df : df.<span class="hljs-built_in">max</span>() - df.<span class="hljs-built_in">min</span>())      data1  data2key1              a         <span class="hljs-number">8</span>      <span class="hljs-number">7</span>b         <span class="hljs-number">2</span>      <span class="hljs-number">5</span></code></pre><h3><span id="04x03-dui-bu-tong-lie-zuo-yong-bu-tong-han-shu"><font color="#4876FF">【04x03】对不同列作用不同函数</font></span></h3><p>使用字典可以对不同列作用不同的聚合函数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = &#123;<span class="hljs-string">&#x27;key1&#x27;</span> : [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>],    <span class="hljs-string">&#x27;key2&#x27;</span> : [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>],    <span class="hljs-string">&#x27;data1&#x27;</span>: np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>, <span class="hljs-number">8</span>),    <span class="hljs-string">&#x27;data2&#x27;</span>: np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>, <span class="hljs-number">8</span>)&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(obj)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  key1   key2  data1  data2<span class="hljs-number">0</span>    a    one      <span class="hljs-number">9</span>      <span class="hljs-number">7</span><span class="hljs-number">1</span>    b    one      <span class="hljs-number">5</span>      <span class="hljs-number">9</span><span class="hljs-number">2</span>    a    two      <span class="hljs-number">2</span>      <span class="hljs-number">4</span><span class="hljs-number">3</span>    b  three      <span class="hljs-number">3</span>      <span class="hljs-number">4</span><span class="hljs-number">4</span>    a    two      <span class="hljs-number">5</span>      <span class="hljs-number">1</span><span class="hljs-number">5</span>    b    two      <span class="hljs-number">5</span>      <span class="hljs-number">9</span><span class="hljs-number">6</span>    a    one      <span class="hljs-number">1</span>      <span class="hljs-number">8</span><span class="hljs-number">7</span>    a  three      <span class="hljs-number">2</span>      <span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>dict1 = &#123;<span class="hljs-string">&#x27;data1&#x27;</span>:<span class="hljs-string">&#x27;mean&#x27;</span>, <span class="hljs-string">&#x27;data2&#x27;</span>:<span class="hljs-string">&#x27;sum&#x27;</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>dict2 = &#123;<span class="hljs-string">&#x27;data1&#x27;</span>:[<span class="hljs-string">&#x27;mean&#x27;</span>,<span class="hljs-string">&#x27;max&#x27;</span>], <span class="hljs-string">&#x27;data2&#x27;</span>:<span class="hljs-string">&#x27;sum&#x27;</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).agg(dict1)         data1  data2key1                 a     <span class="hljs-number">3.800000</span>     <span class="hljs-number">24</span>b     <span class="hljs-number">4.333333</span>     <span class="hljs-number">22</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.groupby(<span class="hljs-string">&#x27;key1&#x27;</span>).agg(dict2)         data1     data2          mean <span class="hljs-built_in">max</span>   <span class="hljs-built_in">sum</span>key1                    a     <span class="hljs-number">3.800000</span>   <span class="hljs-number">9</span>    <span class="hljs-number">24</span>b     <span class="hljs-number">4.333333</span>   <span class="hljs-number">5</span>    <span class="hljs-number">22</span></code></pre><h3><span id="04x04-groupby-apply"><font color="#4876FF">【04x04】GroupBy.apply()</font></span></h3><p><code>apply()</code> 方法会将待处理的对象拆分成多个片段，然后对各片段调用传入的函数，最后尝试将各片段组合到一起。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>:[<span class="hljs-string">&#x27;bob&#x27;</span>,<span class="hljs-string">&#x27;sos&#x27;</span>,<span class="hljs-string">&#x27;bob&#x27;</span>,<span class="hljs-string">&#x27;sos&#x27;</span>,<span class="hljs-string">&#x27;bob&#x27;</span>,<span class="hljs-string">&#x27;sos&#x27;</span>,<span class="hljs-string">&#x27;bob&#x27;</span>,<span class="hljs-string">&#x27;bob&#x27;</span>],              <span class="hljs-string">&#x27;B&#x27;</span>:[<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;two&#x27;</span>,<span class="hljs-string">&#x27;one&#x27;</span>,<span class="hljs-string">&#x27;three&#x27;</span>],              <span class="hljs-string">&#x27;C&#x27;</span>:[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>],              <span class="hljs-string">&#x27;D&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj     A      B  C  D<span class="hljs-number">0</span>  bob    one  <span class="hljs-number">3</span>  <span class="hljs-number">1</span><span class="hljs-number">1</span>  sos    one  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><span class="hljs-number">2</span>  bob    two  <span class="hljs-number">4</span>  <span class="hljs-number">3</span><span class="hljs-number">3</span>  sos  three  <span class="hljs-number">1</span>  <span class="hljs-number">4</span><span class="hljs-number">4</span>  bob    two  <span class="hljs-number">5</span>  <span class="hljs-number">5</span><span class="hljs-number">5</span>  sos    two  <span class="hljs-number">9</span>  <span class="hljs-number">6</span><span class="hljs-number">6</span>  bob    one  <span class="hljs-number">2</span>  <span class="hljs-number">7</span><span class="hljs-number">7</span>  bob  three  <span class="hljs-number">6</span>  <span class="hljs-number">8</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>grouped = obj.groupby(<span class="hljs-string">&#x27;A&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> name, group <span class="hljs-keyword">in</span> grouped:    <span class="hljs-built_in">print</span>(name)    <span class="hljs-built_in">print</span>(group)    bob     A      B  C  D<span class="hljs-number">0</span>  bob    one  <span class="hljs-number">3</span>  <span class="hljs-number">1</span><span class="hljs-number">2</span>  bob    two  <span class="hljs-number">4</span>  <span class="hljs-number">3</span><span class="hljs-number">4</span>  bob    two  <span class="hljs-number">5</span>  <span class="hljs-number">5</span><span class="hljs-number">6</span>  bob    one  <span class="hljs-number">2</span>  <span class="hljs-number">7</span><span class="hljs-number">7</span>  bob  three  <span class="hljs-number">6</span>  <span class="hljs-number">8</span>sos     A      B  C  D<span class="hljs-number">1</span>  sos    one  <span class="hljs-number">1</span>  <span class="hljs-number">2</span><span class="hljs-number">3</span>  sos  three  <span class="hljs-number">1</span>  <span class="hljs-number">4</span><span class="hljs-number">5</span>  sos    two  <span class="hljs-number">9</span>  <span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>grouped.apply(<span class="hljs-keyword">lambda</span> x:x.describe())  <span class="hljs-comment"># 对 bob 和 sos 两组数据使用 describe 方法</span>                  C         DA                            bob count  <span class="hljs-number">5.000000</span>  <span class="hljs-number">5.000000</span>    mean   <span class="hljs-number">4.000000</span>  <span class="hljs-number">4.800000</span>    std    <span class="hljs-number">1.581139</span>  <span class="hljs-number">2.863564</span>    <span class="hljs-built_in">min</span>    <span class="hljs-number">2.000000</span>  <span class="hljs-number">1.000000</span>    <span class="hljs-number">25</span>%    <span class="hljs-number">3.000000</span>  <span class="hljs-number">3.000000</span>    <span class="hljs-number">50</span>%    <span class="hljs-number">4.000000</span>  <span class="hljs-number">5.000000</span>    <span class="hljs-number">75</span>%    <span class="hljs-number">5.000000</span>  <span class="hljs-number">7.000000</span>    <span class="hljs-built_in">max</span>    <span class="hljs-number">6.000000</span>  <span class="hljs-number">8.000000</span>sos count  <span class="hljs-number">3.000000</span>  <span class="hljs-number">3.000000</span>    mean   <span class="hljs-number">3.666667</span>  <span class="hljs-number">4.000000</span>    std    <span class="hljs-number">4.618802</span>  <span class="hljs-number">2.000000</span>    <span class="hljs-built_in">min</span>    <span class="hljs-number">1.000000</span>  <span class="hljs-number">2.000000</span>    <span class="hljs-number">25</span>%    <span class="hljs-number">1.000000</span>  <span class="hljs-number">3.000000</span>    <span class="hljs-number">50</span>%    <span class="hljs-number">1.000000</span>  <span class="hljs-number">4.000000</span>    <span class="hljs-number">75</span>%    <span class="hljs-number">5.000000</span>  <span class="hljs-number">5.000000</span>    <span class="hljs-built_in">max</span>    <span class="hljs-number">9.000000</span>  <span class="hljs-number">6.000000</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>grouped.apply(<span class="hljs-keyword">lambda</span> x:x.<span class="hljs-built_in">min</span>())  <span class="hljs-comment"># # 对 bob 和 sos 两组数据使用 min 方法</span>       A    B  C  DA                  bob  bob  one  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>sos  sos  one  <span class="hljs-number">1</span>  <span class="hljs-number">2</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106804881</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</title>
      <link href="/article/029/"/>
      <url>/article/029/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01x00-tong-ji-ji-suan-font"><font color="#FF0000">【01x00】统计计算</font></a><ul><li><a href="#font-color-4876ff-01x01-sum-qiu-he-font"><font color="#4876FF">【01x01】sum() 求和</font></a></li><li><a href="#font-color-4876ff-01x02-min-zui-xiao-zhi-font"><font color="#4876FF">【01x02】min() 最小值</font></a></li><li><a href="#font-color-4876ff-01x03-max-zui-da-zhi-font"><font color="#4876FF">【01x03】max() 最大值</font></a></li><li><a href="#font-color-4876ff-01x04-mean-ping-jun-zhi-font"><font color="#4876FF">【01x04】mean() 平均值</font></a></li><li><a href="#font-color-4876ff-01x05-idxmin-zui-xiao-zhi-suo-yin-font"><font color="#4876FF">【01x05】idxmin() 最小值索引</font></a></li><li><a href="#font-color-4876ff-01x06-idxmax-zui-da-zhi-suo-yin-font"><font color="#4876FF">【01x06】idxmax() 最大值索引</font></a></li></ul></li><li><a href="#font-color-ff0000-02x00-tong-ji-miao-shu-font"><font color="#FF0000">【02x00】统计描述</font></a></li><li><a href="#font-color-ff0000-03x00-chang-yong-tong-ji-fang-fa-font"><font color="#FF0000">【03x00】常用统计方法</font></a></li></ul><!-- tocstop --><hr><p>Pandas 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/025/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itbob.cn/article/026/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itbob.cn/article/027/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itbob.cn/article/028/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itbob.cn/article/029/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itbob.cn/article/030/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itbob.cn/article/031/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itbob.cn/article/032/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itbob.cn/article/033/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itbob.cn/article/034/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106788501</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01x00-tong-ji-ji-suan"><font color="#FF0000">【01x00】统计计算</font></span></h2><p>Pandas 对象拥有一组常用的数学和统计方法。它们大部分都属于约简和汇总统计，用于从 Series 中提取单个值（如 sum 或 mean）或从 DataFrame 的行或列中提取一个 Series。跟对应的 NumPy 数组方法相比，它们都是基于没有缺失数据的假设而构建的。</p><h3><span id="01x01-sum-qiu-he"><font color="#4876FF">【01x01】sum() 求和</font></span></h3><p><code>sum()</code> 方法用于返回指定轴的和，相当于 <code>numpy.sum()</code>。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.sum(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)</code></p></li><li><p><code>DataFrame.sum(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.sum.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.sum.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴求和，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，求和时是否排除缺失值（NA/null），默认 True</td></tr><tr><td>level</td><td>如果轴是 MultiIndex（层次结构），则沿指定层次求和</td></tr></tbody></table><p>在 Series 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([    [<span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>],    [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;falcon&#x27;</span>, <span class="hljs-string">&#x27;fish&#x27;</span>, <span class="hljs-string">&#x27;spider&#x27;</span>]],    names=[<span class="hljs-string">&#x27;blooded&#x27;</span>, <span class="hljs-string">&#x27;animal&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>], name=<span class="hljs-string">&#x27;legs&#x27;</span>, index=idx)<span class="hljs-meta">&gt;&gt;&gt; </span>objblooded  animalwarm     dog       <span class="hljs-number">4</span>         falcon    <span class="hljs-number">2</span>cold     fish      <span class="hljs-number">0</span>         spider    <span class="hljs-number">8</span>Name: legs, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">sum</span>()<span class="hljs-number">14</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">sum</span>(level=<span class="hljs-string">&#x27;blooded&#x27;</span>)bloodedwarm    <span class="hljs-number">6</span>cold    <span class="hljs-number">8</span>Name: legs, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">sum</span>(level=<span class="hljs-number">0</span>)bloodedwarm    <span class="hljs-number">6</span>cold    <span class="hljs-number">8</span>Name: legs, dtype: int64</code></pre><p>在 DataFrame 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1.4</span>, np.nan], [<span class="hljs-number">7.1</span>, -<span class="hljs-number">4.5</span>],    [np.nan, np.nan], [<span class="hljs-number">0.75</span>, -<span class="hljs-number">1.3</span>]],    index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>],    columns=[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj    one  twoa  <span class="hljs-number">1.40</span>  NaNb  <span class="hljs-number">7.10</span> -<span class="hljs-number">4.5</span>c   NaN  NaNd  <span class="hljs-number">0.75</span> -<span class="hljs-number">1.3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">sum</span>()one    <span class="hljs-number">9.25</span>two   -<span class="hljs-number">5.80</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)a    <span class="hljs-number">1.40</span>b    <span class="hljs-number">2.60</span>c    <span class="hljs-number">0.00</span>d   -<span class="hljs-number">0.55</span>dtype: float64</code></pre><h3><span id="01x02-min-zui-xiao-zhi"><font color="#4876FF">【01x02】min() 最小值</font></span></h3><p><code>min()</code> 方法用于返回指定轴的最小值。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.min(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li><li><p><code>DataFrame.min(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.min.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.min.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.min.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.min.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴求最小值，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，求最小值时是否排除缺失值（NA/null），默认 True</td></tr><tr><td>level</td><td>如果轴是 MultiIndex（层次结构），则沿指定层次求最小值</td></tr></tbody></table><p>在 Series 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([    [<span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>],    [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;falcon&#x27;</span>, <span class="hljs-string">&#x27;fish&#x27;</span>, <span class="hljs-string">&#x27;spider&#x27;</span>]],    names=[<span class="hljs-string">&#x27;blooded&#x27;</span>, <span class="hljs-string">&#x27;animal&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>], name=<span class="hljs-string">&#x27;legs&#x27;</span>, index=idx)<span class="hljs-meta">&gt;&gt;&gt; </span>objblooded  animalwarm     dog       <span class="hljs-number">4</span>         falcon    <span class="hljs-number">2</span>cold     fish      <span class="hljs-number">0</span>         spider    <span class="hljs-number">8</span>Name: legs, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">min</span>()<span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">min</span>(level=<span class="hljs-string">&#x27;blooded&#x27;</span>)bloodedwarm    <span class="hljs-number">2</span>cold    <span class="hljs-number">0</span>Name: legs, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">min</span>(level=<span class="hljs-number">0</span>)bloodedwarm    <span class="hljs-number">2</span>cold    <span class="hljs-number">0</span>Name: legs, dtype: int64</code></pre><p>在 DataFrame 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1.4</span>, np.nan], [<span class="hljs-number">7.1</span>, -<span class="hljs-number">4.5</span>],    [np.nan, np.nan], [<span class="hljs-number">0.75</span>, -<span class="hljs-number">1.3</span>]],    index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>],columns=[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj    one  twoa  <span class="hljs-number">1.40</span>  NaNb  <span class="hljs-number">7.10</span> -<span class="hljs-number">4.5</span>c   NaN  NaNd  <span class="hljs-number">0.75</span> -<span class="hljs-number">1.3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">min</span>()one    <span class="hljs-number">0.75</span>two   -<span class="hljs-number">4.50</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">1</span>)a    <span class="hljs-number">1.4</span>b   -<span class="hljs-number">4.5</span>c    NaNd   -<span class="hljs-number">1.3</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">min</span>(axis=<span class="hljs-string">&#x27;columns&#x27;</span>, skipna=<span class="hljs-literal">False</span>)a    NaNb   -<span class="hljs-number">4.5</span>c    NaNd   -<span class="hljs-number">1.3</span>dtype: float64</code></pre><h3><span id="01x03-max-zui-da-zhi"><font color="#4876FF">【01x03】max() 最大值</font></span></h3><p><code>max()</code> 方法用于返回指定轴的最大值。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.max(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li><li><p><code>DataFrame.max(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.max.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.max.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.max.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.max.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴求最大值，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，求最大值时是否排除缺失值（NA/null），默认 True</td></tr><tr><td>level</td><td>如果轴是 MultiIndex（层次结构），则沿指定层次求最大值</td></tr></tbody></table><p>在 Series 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([    [<span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>],    [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;falcon&#x27;</span>, <span class="hljs-string">&#x27;fish&#x27;</span>, <span class="hljs-string">&#x27;spider&#x27;</span>]],    names=[<span class="hljs-string">&#x27;blooded&#x27;</span>, <span class="hljs-string">&#x27;animal&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>], name=<span class="hljs-string">&#x27;legs&#x27;</span>, index=idx)<span class="hljs-meta">&gt;&gt;&gt; </span>objblooded  animalwarm     dog       <span class="hljs-number">4</span>         falcon    <span class="hljs-number">2</span>cold     fish      <span class="hljs-number">0</span>         spider    <span class="hljs-number">8</span>Name: legs, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">max</span>()<span class="hljs-number">8</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">max</span>(level=<span class="hljs-string">&#x27;blooded&#x27;</span>)bloodedwarm    <span class="hljs-number">4</span>cold    <span class="hljs-number">8</span>Name: legs, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">max</span>(level=<span class="hljs-number">0</span>)bloodedwarm    <span class="hljs-number">4</span>cold    <span class="hljs-number">8</span>Name: legs, dtype: int64</code></pre><p>在 DataFrame 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1.4</span>, np.nan], [<span class="hljs-number">7.1</span>, -<span class="hljs-number">4.5</span>],    [np.nan, np.nan], [<span class="hljs-number">0.75</span>, -<span class="hljs-number">1.3</span>]],    index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>],columns=[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj    one  twoa  <span class="hljs-number">1.40</span>  NaNb  <span class="hljs-number">7.10</span> -<span class="hljs-number">4.5</span>c   NaN  NaNd  <span class="hljs-number">0.75</span> -<span class="hljs-number">1.3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">max</span>()one    <span class="hljs-number">7.1</span>two   -<span class="hljs-number">1.3</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">1</span>)a    <span class="hljs-number">1.40</span>b    <span class="hljs-number">7.10</span>c     NaNd    <span class="hljs-number">0.75</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.<span class="hljs-built_in">max</span>(axis=<span class="hljs-string">&#x27;columns&#x27;</span>, skipna=<span class="hljs-literal">False</span>)a     NaNb    <span class="hljs-number">7.10</span>c     NaNd    <span class="hljs-number">0.75</span>dtype: float64</code></pre><h3><span id="01x04-mean-ping-jun-zhi"><font color="#4876FF">【01x04】mean() 平均值</font></span></h3><p><code>mean()</code> 方法用于返回指定轴的平均值。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.mean(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li><li><p><code>DataFrame.mean(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.mean.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.mean.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mean.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mean.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴求平均值，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，求平均值时是否排除缺失值（NA/null），默认 True</td></tr><tr><td>level</td><td>如果轴是 MultiIndex（层次结构），则沿指定层次求平均值</td></tr></tbody></table><p>在 Series 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([    [<span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>],    [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;falcon&#x27;</span>, <span class="hljs-string">&#x27;fish&#x27;</span>, <span class="hljs-string">&#x27;spider&#x27;</span>]],    names=[<span class="hljs-string">&#x27;blooded&#x27;</span>, <span class="hljs-string">&#x27;animal&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>], name=<span class="hljs-string">&#x27;legs&#x27;</span>, index=idx)<span class="hljs-meta">&gt;&gt;&gt; </span>objblooded  animalwarm     dog       <span class="hljs-number">4</span>         falcon    <span class="hljs-number">2</span>cold     fish      <span class="hljs-number">0</span>         spider    <span class="hljs-number">8</span>Name: legs, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.mean()<span class="hljs-number">3.5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.mean(level=<span class="hljs-string">&#x27;blooded&#x27;</span>)bloodedwarm    <span class="hljs-number">3</span>cold    <span class="hljs-number">4</span>Name: legs, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.mean(level=<span class="hljs-number">0</span>)bloodedwarm    <span class="hljs-number">3</span>cold    <span class="hljs-number">4</span>Name: legs, dtype: int64</code></pre><p>在 DataFrame 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1.4</span>, np.nan], [<span class="hljs-number">7.1</span>, -<span class="hljs-number">4.5</span>],    [np.nan, np.nan], [<span class="hljs-number">0.75</span>, -<span class="hljs-number">1.3</span>]],    index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>],columns=[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj    one  twoa  <span class="hljs-number">1.40</span>  NaNb  <span class="hljs-number">7.10</span> -<span class="hljs-number">4.5</span>c   NaN  NaNd  <span class="hljs-number">0.75</span> -<span class="hljs-number">1.3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.mean()one    <span class="hljs-number">3.083333</span>two   -<span class="hljs-number">2.900000</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.mean(axis=<span class="hljs-number">1</span>)a    <span class="hljs-number">1.400</span>b    <span class="hljs-number">1.300</span>c      NaNd   -<span class="hljs-number">0.275</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.mean(axis=<span class="hljs-string">&#x27;columns&#x27;</span>, skipna=<span class="hljs-literal">False</span>)a      NaNb    <span class="hljs-number">1.300</span>c      NaNd   -<span class="hljs-number">0.275</span>dtype: float64</code></pre><h3><span id="01x05-idxmin-zui-xiao-zhi-suo-yin"><font color="#4876FF">【01x05】idxmin() 最小值索引</font></span></h3><p><code>idxmin()</code> 方法用于返回最小值的索引。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.idxmin(self, axis=0, skipna=True, *args, **kwargs)</code></p></li><li><p><code>DataFrame.idxmin(self, axis=0, skipna=True)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmin.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmin.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmin.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmin.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，是否排除缺失值（NA/null），默认 True</td></tr></tbody></table><p>在 Series 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([    [<span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>],    [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;falcon&#x27;</span>, <span class="hljs-string">&#x27;fish&#x27;</span>, <span class="hljs-string">&#x27;spider&#x27;</span>]],    names=[<span class="hljs-string">&#x27;blooded&#x27;</span>, <span class="hljs-string">&#x27;animal&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>], name=<span class="hljs-string">&#x27;legs&#x27;</span>, index=idx)<span class="hljs-meta">&gt;&gt;&gt; </span>objblooded  animalwarm     dog       <span class="hljs-number">4</span>         falcon    <span class="hljs-number">2</span>cold     fish      <span class="hljs-number">0</span>         spider    <span class="hljs-number">8</span>Name: legs, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.idxmin()(<span class="hljs-string">&#x27;cold&#x27;</span>, <span class="hljs-string">&#x27;fish&#x27;</span>)</code></pre><p>在 DataFrame 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1.4</span>, np.nan], [<span class="hljs-number">7.1</span>, -<span class="hljs-number">4.5</span>],    [np.nan, np.nan], [<span class="hljs-number">0.75</span>, -<span class="hljs-number">1.3</span>]],    index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>],columns=[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj    one  twoa  <span class="hljs-number">1.40</span>  NaNb  <span class="hljs-number">7.10</span> -<span class="hljs-number">4.5</span>c   NaN  NaNd  <span class="hljs-number">0.75</span> -<span class="hljs-number">1.3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.idxmin()one    dtwo    bdtype: <span class="hljs-built_in">object</span></code></pre><h3><span id="01x06-idxmax-zui-da-zhi-suo-yin"><font color="#4876FF">【01x06】idxmax() 最大值索引</font></span></h3><p><code>idxmax()</code> 方法用于返回最大值的索引。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.idxmax(self, axis=0, skipna=True, *args, **kwargs)</code></p></li><li><p><code>DataFrame.idxmax(self, axis=0, skipna=True)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmax.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmax.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmax.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmax.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，是否排除缺失值（NA/null），默认 True</td></tr></tbody></table><p>在 Series 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([    [<span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;warm&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>],    [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;falcon&#x27;</span>, <span class="hljs-string">&#x27;fish&#x27;</span>, <span class="hljs-string">&#x27;spider&#x27;</span>]],    names=[<span class="hljs-string">&#x27;blooded&#x27;</span>, <span class="hljs-string">&#x27;animal&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>], name=<span class="hljs-string">&#x27;legs&#x27;</span>, index=idx)<span class="hljs-meta">&gt;&gt;&gt; </span>objblooded  animalwarm     dog       <span class="hljs-number">4</span>         falcon    <span class="hljs-number">2</span>cold     fish      <span class="hljs-number">0</span>         spider    <span class="hljs-number">8</span>Name: legs, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.idxmax()(<span class="hljs-string">&#x27;cold&#x27;</span>, <span class="hljs-string">&#x27;spider&#x27;</span>)</code></pre><p>在 DataFrame 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1.4</span>, np.nan], [<span class="hljs-number">7.1</span>, -<span class="hljs-number">4.5</span>],    [np.nan, np.nan], [<span class="hljs-number">0.75</span>, -<span class="hljs-number">1.3</span>]],    index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>],columns=[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj    one  twoa  <span class="hljs-number">1.40</span>  NaNb  <span class="hljs-number">7.10</span> -<span class="hljs-number">4.5</span>c   NaN  NaNd  <span class="hljs-number">0.75</span> -<span class="hljs-number">1.3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.idxmax()one    btwo    ddtype: <span class="hljs-built_in">object</span></code></pre><h2><span id="02x00-tong-ji-miao-shu"><font color="#FF0000">【02x00】统计描述</font></span></h2><p><code>describe()</code> 方法用于快速综合统计结果：计数、均值、标准差、最大最小值、四分位数等。还可以通过参数来设置需要忽略或者包含的统计选项。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.describe(self: ~ FrameOrSeries, percentiles=None, include=None, exclude=None)</code></p></li><li><p><code>DataFrame.describe(self: ~ FrameOrSeries, percentiles=None, include=None, exclude=None) </code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.describe.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.describe.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html</a></p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>percentiles</td><td>数字列表，可选项，要包含在输出中的百分比。所有值都应介于 0 和 1 之间。默认值为 [.25、.5、.75]，即返回第 25、50 和 75 个百分点</td></tr><tr><td>include</td><td>要包含在结果中的数据类型，数据类型列表，默认 None，具体取值类型参见官方文档</td></tr><tr><td>exclude</td><td>要从结果中忽略的数据类型，数据类型列表，默认 None，具体取值类型参见官方文档</td></tr></tbody></table><p>描述数字形式的 Series 对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    <span class="hljs-number">1</span><span class="hljs-number">1</span>    <span class="hljs-number">2</span><span class="hljs-number">2</span>    <span class="hljs-number">3</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.describe()count    <span class="hljs-number">3.0</span>mean     <span class="hljs-number">2.0</span>std      <span class="hljs-number">1.0</span><span class="hljs-built_in">min</span>      <span class="hljs-number">1.0</span><span class="hljs-number">25</span>%      <span class="hljs-number">1.5</span><span class="hljs-number">50</span>%      <span class="hljs-number">2.0</span><span class="hljs-number">75</span>%      <span class="hljs-number">2.5</span><span class="hljs-built_in">max</span>      <span class="hljs-number">3.0</span>dtype: float64</code></pre><p>分类描述：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    a<span class="hljs-number">1</span>    a<span class="hljs-number">2</span>    b<span class="hljs-number">3</span>    cdtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.describe()count     <span class="hljs-number">4</span>unique    <span class="hljs-number">3</span>top       afreq      <span class="hljs-number">2</span>dtype: <span class="hljs-built_in">object</span></code></pre><p>描述时间戳：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj  = pd.Series([    np.datetime64(<span class="hljs-string">&quot;2000-01-01&quot;</span>),    np.datetime64(<span class="hljs-string">&quot;2010-01-01&quot;</span>),    np.datetime64(<span class="hljs-string">&quot;2010-01-01&quot;</span>)    ])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>   <span class="hljs-number">2000</span>-01-01<span class="hljs-number">1</span>   <span class="hljs-number">2010</span>-01-01<span class="hljs-number">2</span>   <span class="hljs-number">2010</span>-01-01dtype: datetime64[ns]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.describe()count                       <span class="hljs-number">3</span>unique                      <span class="hljs-number">2</span>top       <span class="hljs-number">2010</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>freq                        <span class="hljs-number">2</span>first     <span class="hljs-number">2000</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>last      <span class="hljs-number">2010</span>-01-01 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>dtype: <span class="hljs-built_in">object</span></code></pre><p>描述 DataFrame 对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;categorical&#x27;</span>: pd.Categorical([<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]), <span class="hljs-string">&#x27;numeric&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;object&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  categorical  numeric <span class="hljs-built_in">object</span><span class="hljs-number">0</span>           d        <span class="hljs-number">1</span>      a<span class="hljs-number">1</span>           e        <span class="hljs-number">2</span>      b<span class="hljs-number">2</span>           f        <span class="hljs-number">3</span>      c<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.describe()       numericcount      <span class="hljs-number">3.0</span>mean       <span class="hljs-number">2.0</span>std        <span class="hljs-number">1.0</span><span class="hljs-built_in">min</span>        <span class="hljs-number">1.0</span><span class="hljs-number">25</span>%        <span class="hljs-number">1.5</span><span class="hljs-number">50</span>%        <span class="hljs-number">2.0</span><span class="hljs-number">75</span>%        <span class="hljs-number">2.5</span><span class="hljs-built_in">max</span>        <span class="hljs-number">3.0</span></code></pre><p>不考虑数据类型，显示所有描述：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;categorical&#x27;</span>: pd.Categorical([<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]), <span class="hljs-string">&#x27;numeric&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;object&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  categorical  numeric <span class="hljs-built_in">object</span><span class="hljs-number">0</span>           d        <span class="hljs-number">1</span>      a<span class="hljs-number">1</span>           e        <span class="hljs-number">2</span>      b<span class="hljs-number">2</span>           f        <span class="hljs-number">3</span>      c<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.describe(include=<span class="hljs-string">&#x27;all&#x27;</span>)       categorical  numeric <span class="hljs-built_in">object</span>count            <span class="hljs-number">3</span>      <span class="hljs-number">3.0</span>      <span class="hljs-number">3</span>unique           <span class="hljs-number">3</span>      NaN      <span class="hljs-number">3</span>top              f      NaN      cfreq             <span class="hljs-number">1</span>      NaN      <span class="hljs-number">1</span>mean           NaN      <span class="hljs-number">2.0</span>    NaNstd            NaN      <span class="hljs-number">1.0</span>    NaN<span class="hljs-built_in">min</span>            NaN      <span class="hljs-number">1.0</span>    NaN<span class="hljs-number">25</span>%            NaN      <span class="hljs-number">1.5</span>    NaN<span class="hljs-number">50</span>%            NaN      <span class="hljs-number">2.0</span>    NaN<span class="hljs-number">75</span>%            NaN      <span class="hljs-number">2.5</span>    NaN<span class="hljs-built_in">max</span>            NaN      <span class="hljs-number">3.0</span>    NaN</code></pre><p>仅包含 category 列：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;categorical&#x27;</span>: pd.Categorical([<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]), <span class="hljs-string">&#x27;numeric&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;object&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj  categorical  numeric <span class="hljs-built_in">object</span><span class="hljs-number">0</span>           d        <span class="hljs-number">1</span>      a<span class="hljs-number">1</span>           e        <span class="hljs-number">2</span>      b<span class="hljs-number">2</span>           f        <span class="hljs-number">3</span>      c<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.describe(include=[<span class="hljs-string">&#x27;category&#x27;</span>])       categoricalcount            <span class="hljs-number">3</span>unique           <span class="hljs-number">3</span>top              ffreq             <span class="hljs-number">1</span></code></pre><h2><span id="03x00-chang-yong-tong-ji-fang-fa"><font color="#FF0000">【03x00】常用统计方法</font></span></h2><p>其他常用统计方法参见下表：</p><table><thead><tr><th>方法</th><th>描述</th><th>官方文档</th></tr></thead><tbody><tr><td>count</td><td>非NA值的数量</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.count.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.count.html">DataFrame</a></td></tr><tr><td>describe</td><td>针对Series或各DataFrame列计算汇总统计</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.describe.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html">DataFrame</a></td></tr><tr><td>min</td><td>计算最小值</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.min.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.min.html">DataFrame</a></td></tr><tr><td>max</td><td>计算最大值</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.max.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.max.html">DataFrame</a></td></tr><tr><td>argmin</td><td>计算能够获取到最小值的索引位置（整数）</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.argmin.html">Series</a></td></tr><tr><td>argmax</td><td>计算能够获取到最大值的索引位置（整数）</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.argmax.html">Series</a></td></tr><tr><td>idxmin</td><td>计算能够获取到最小值的索引值</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmin.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmin.html">DataFrame</a></td></tr><tr><td>idxmax</td><td>计算能够获取到最大值的索引值</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmax.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmax.html">DataFrame</a></td></tr><tr><td>quantile</td><td>计算样本的分位数（0到1）</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.quantile.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.quantile.html">DataFrame</a></td></tr><tr><td>sum</td><td>值的总和</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.sum.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html">DataFrame</a></td></tr><tr><td>mean</td><td>值的平均数</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.mean.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mean.html">DataFrame</a></td></tr><tr><td>median</td><td>值的算术中位数（50%分位数）</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.median.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.median.html">DataFrame</a></td></tr><tr><td>mad</td><td>根据平均值计算平均绝对离差</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.mad.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mad.html">DataFrame</a></td></tr><tr><td>var</td><td>样本值的方差</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.var.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.var.html">DataFrame</a></td></tr><tr><td>std</td><td>样本值的标准差</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.std.html">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.std.html">DataFrame</a></td></tr></tbody></table><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106788501</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Pandas（四）：函数应用/映射/排序和层级索引</title>
      <link href="/article/028/"/>
      <url>/article/028/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01x00-han-shu-ying-yong-he-ying-she-font"><font color="#FF0000">【01x00】函数应用和映射</font></a></li><li><a href="#font-color-ff0000-02x00-pai-xu-font"><font color="#FF0000">【02x00】排序</font></a><ul><li><a href="#font-color-4876ff-02x01-sort-index-suo-yin-pai-xu-font"><font color="#4876FF">【02x01】sort_index() 索引排序</font></a></li><li><a href="#font-color-4876ff-02x02-sort-values-an-zhi-pai-xu-font"><font color="#4876FF">【02x02】sort_values() 按值排序</font></a></li><li><a href="#font-color-4876ff-02x03-rank-fan-hui-pai-xu-hou-yuan-su-suo-yin-font"><font color="#4876FF">【02x03】rank() 返回排序后元素索引</font></a></li></ul></li><li><a href="#font-color-ff0000-03x00-ceng-ji-suo-yin-font"><font color="#FF0000">【03x00】层级索引</font></a><ul><li><a href="#font-color-4876ff-03x01-ren-shi-ceng-ji-suo-yin-font"><font color="#4876FF">【03x01】认识层级索引</font></a></li><li><a href="#font-color-4876ff-03x02-multiindex-suo-yin-dui-xiang-font"><font color="#4876FF">【03x02】MultiIndex 索引对象</font></a></li><li><a href="#font-color-4876ff-03x03-ti-qu-zhi-font"><font color="#4876FF">【03x03】提取值</font></a></li><li><a href="#font-color-4876ff-03x04-jiao-huan-fen-ceng-yu-pai-xu-font"><font color="#4876FF">【03x04】交换分层与排序</font></a></li></ul></li></ul><!-- tocstop --><hr><p>Pandas 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/025/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itbob.cn/article/026/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itbob.cn/article/027/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itbob.cn/article/028/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itbob.cn/article/029/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itbob.cn/article/030/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itbob.cn/article/031/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itbob.cn/article/032/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itbob.cn/article/033/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itbob.cn/article/034/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106758103</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01x00-han-shu-ying-yong-he-ying-she"><font color="#FF0000">【01x00】函数应用和映射</font></span></h2><p>Pandas 可直接使用 NumPy 的 ufunc（元素级数组方法） 函数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randn(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>) - <span class="hljs-number">1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj          <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         <span class="hljs-number">3</span><span class="hljs-number">0</span> -<span class="hljs-number">0.228107</span>  <span class="hljs-number">1.377709</span> -<span class="hljs-number">1.096528</span> -<span class="hljs-number">2.051001</span><span class="hljs-number">1</span> -<span class="hljs-number">2.477144</span> -<span class="hljs-number">0.500013</span> -<span class="hljs-number">0.040695</span> -<span class="hljs-number">0.267452</span><span class="hljs-number">2</span> -<span class="hljs-number">0.485999</span> -<span class="hljs-number">1.232930</span> -<span class="hljs-number">0.390701</span> -<span class="hljs-number">1.947984</span><span class="hljs-number">3</span> -<span class="hljs-number">0.839161</span> -<span class="hljs-number">0.702802</span> -<span class="hljs-number">1.756359</span> -<span class="hljs-number">1.873149</span><span class="hljs-number">4</span>  <span class="hljs-number">0.853121</span> -<span class="hljs-number">1.540105</span>  <span class="hljs-number">0.621614</span> -<span class="hljs-number">0.583360</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>np.<span class="hljs-built_in">abs</span>(obj)          <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         <span class="hljs-number">3</span><span class="hljs-number">0</span>  <span class="hljs-number">0.228107</span>  <span class="hljs-number">1.377709</span>  <span class="hljs-number">1.096528</span>  <span class="hljs-number">2.051001</span><span class="hljs-number">1</span>  <span class="hljs-number">2.477144</span>  <span class="hljs-number">0.500013</span>  <span class="hljs-number">0.040695</span>  <span class="hljs-number">0.267452</span><span class="hljs-number">2</span>  <span class="hljs-number">0.485999</span>  <span class="hljs-number">1.232930</span>  <span class="hljs-number">0.390701</span>  <span class="hljs-number">1.947984</span><span class="hljs-number">3</span>  <span class="hljs-number">0.839161</span>  <span class="hljs-number">0.702802</span>  <span class="hljs-number">1.756359</span>  <span class="hljs-number">1.873149</span><span class="hljs-number">4</span>  <span class="hljs-number">0.853121</span>  <span class="hljs-number">1.540105</span>  <span class="hljs-number">0.621614</span>  <span class="hljs-number">0.583360</span></code></pre><p>函数映射：在 Pandas 中 <code>apply</code> 方法可以将函数应用到列或行上，可以通过设置 axis 参数来指定行或列，默认 axis = 0，即按列映射：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randn(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>) - <span class="hljs-number">1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj          <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         <span class="hljs-number">3</span><span class="hljs-number">0</span> -<span class="hljs-number">0.707028</span> -<span class="hljs-number">0.755552</span> -<span class="hljs-number">2.196480</span> -<span class="hljs-number">0.529676</span><span class="hljs-number">1</span> -<span class="hljs-number">0.772668</span>  <span class="hljs-number">0.127485</span> -<span class="hljs-number">2.015699</span> -<span class="hljs-number">0.283654</span><span class="hljs-number">2</span>  <span class="hljs-number">0.248200</span> -<span class="hljs-number">1.940189</span> -<span class="hljs-number">1.068028</span> -<span class="hljs-number">1.751737</span><span class="hljs-number">3</span> -<span class="hljs-number">0.872904</span> -<span class="hljs-number">0.465371</span> -<span class="hljs-number">1.327951</span> -<span class="hljs-number">2.883160</span><span class="hljs-number">4</span> -<span class="hljs-number">0.092664</span>  <span class="hljs-number">0.258351</span> -<span class="hljs-number">1.010747</span> -<span class="hljs-number">2.313039</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.apply(<span class="hljs-keyword">lambda</span> x : x.<span class="hljs-built_in">max</span>())<span class="hljs-number">0</span>    <span class="hljs-number">0.248200</span><span class="hljs-number">1</span>    <span class="hljs-number">0.258351</span><span class="hljs-number">2</span>   -<span class="hljs-number">1.010747</span><span class="hljs-number">3</span>   -<span class="hljs-number">0.283654</span>dtype: float64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.apply(<span class="hljs-keyword">lambda</span> x : x.<span class="hljs-built_in">max</span>(), axis=<span class="hljs-number">1</span>)<span class="hljs-number">0</span>   -<span class="hljs-number">0.529676</span><span class="hljs-number">1</span>    <span class="hljs-number">0.127485</span><span class="hljs-number">2</span>    <span class="hljs-number">0.248200</span><span class="hljs-number">3</span>   -<span class="hljs-number">0.465371</span><span class="hljs-number">4</span>    <span class="hljs-number">0.258351</span>dtype: float64</code></pre><p>另外还可以通过 <code>applymap</code> 将函数映射到每个数据上：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randn(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>) - <span class="hljs-number">1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj          <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>         <span class="hljs-number">3</span><span class="hljs-number">0</span> -<span class="hljs-number">0.772463</span> -<span class="hljs-number">1.597008</span> -<span class="hljs-number">3.196100</span> -<span class="hljs-number">1.948486</span><span class="hljs-number">1</span> -<span class="hljs-number">1.765108</span> -<span class="hljs-number">1.646421</span> -<span class="hljs-number">0.687175</span> -<span class="hljs-number">0.401782</span><span class="hljs-number">2</span>  <span class="hljs-number">0.275699</span> -<span class="hljs-number">3.115184</span> -<span class="hljs-number">1.429063</span> -<span class="hljs-number">1.075610</span><span class="hljs-number">3</span> -<span class="hljs-number">0.251734</span> -<span class="hljs-number">0.448399</span> -<span class="hljs-number">3.077677</span> -<span class="hljs-number">0.294674</span><span class="hljs-number">4</span> -<span class="hljs-number">1.495896</span> -<span class="hljs-number">1.689729</span> -<span class="hljs-number">0.560376</span> -<span class="hljs-number">1.808794</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.applymap(<span class="hljs-keyword">lambda</span> x : <span class="hljs-string">&#x27;%.2f&#x27;</span> % x)       <span class="hljs-number">0</span>      <span class="hljs-number">1</span>      <span class="hljs-number">2</span>      <span class="hljs-number">3</span><span class="hljs-number">0</span>  -<span class="hljs-number">0.77</span>  -<span class="hljs-number">1.60</span>  -<span class="hljs-number">3.20</span>  -<span class="hljs-number">1.95</span><span class="hljs-number">1</span>  -<span class="hljs-number">1.77</span>  -<span class="hljs-number">1.65</span>  -<span class="hljs-number">0.69</span>  -<span class="hljs-number">0.40</span><span class="hljs-number">2</span>   <span class="hljs-number">0.28</span>  -<span class="hljs-number">3.12</span>  -<span class="hljs-number">1.43</span>  -<span class="hljs-number">1.08</span><span class="hljs-number">3</span>  -<span class="hljs-number">0.25</span>  -<span class="hljs-number">0.45</span>  -<span class="hljs-number">3.08</span>  -<span class="hljs-number">0.29</span><span class="hljs-number">4</span>  -<span class="hljs-number">1.50</span>  -<span class="hljs-number">1.69</span>  -<span class="hljs-number">0.56</span>  -<span class="hljs-number">1.81</span></code></pre><h2><span id="02x00-pai-xu"><font color="#FF0000">【02x00】排序</font></span></h2><h3><span id="02x01-sort-index-suo-yin-pai-xu"><font color="#4876FF">【02x01】sort_index() 索引排序</font></span></h3><p>根据条件对数据集排序（sorting）也是一种重要的内置运算。要对行或列索引进行排序（按字典顺序），可使用 <code>sort_index</code> 方法，它将返回一个已排序的新对象。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><pre><code class="hljs python">Series.sort_index(self,                  axis=<span class="hljs-number">0</span>,                  level=<span class="hljs-literal">None</span>,                  ascending=<span class="hljs-literal">True</span>,                  inplace=<span class="hljs-literal">False</span>,                  kind=<span class="hljs-string">&#x27;quicksort&#x27;</span>,                  na_position=<span class="hljs-string">&#x27;last&#x27;</span>,                  sort_remaining=<span class="hljs-literal">True</span>,                  ignore_index: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>)</code></pre><pre><code class="hljs python">DataFrame.sort_index(self,                     axis=<span class="hljs-number">0</span>,                     level=<span class="hljs-literal">None</span>,                     ascending=<span class="hljs-literal">True</span>,                     inplace=<span class="hljs-literal">False</span>,                     kind=<span class="hljs-string">&#x27;quicksort&#x27;</span>,                     na_position=<span class="hljs-string">&#x27;last&#x27;</span>,                     sort_remaining=<span class="hljs-literal">True</span>,                     ignore_index: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>)</code></pre><p>官方文档：</p><ul><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.sort_index.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.sort_index.html</a></li><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_index.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_index.html</a></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴排序，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>ascending</td><td>为 <code>True</code>时升序排序（默认），为 <code>False</code>时降序排序</td></tr><tr><td>kind</td><td>排序方法，<code>quicksort</code>：快速排序（默认）；<code>'mergesort’</code>：归并排序；<code>'heapsort'</code>：堆排序；具体可参见 <a href="https://numpy.org/doc/stable/reference/generated/numpy.sort.html">numpy.sort()</a></td></tr></tbody></table><p>在 Series 中的应用（按照索引 index 排序）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>), index=[<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>objd    <span class="hljs-number">0</span>a    <span class="hljs-number">1</span>b    <span class="hljs-number">2</span>c    <span class="hljs-number">3</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.sort_index()a    <span class="hljs-number">1</span>b    <span class="hljs-number">2</span>c    <span class="hljs-number">3</span>d    <span class="hljs-number">0</span>dtype: int64</code></pre><p>在 DataFrame 中的应用（可按照索引 index 或列标签 columns 排序）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="hljs-number">8</span>).reshape((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)), index=[<span class="hljs-string">&#x27;three&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>], columns=[<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj       d  a  b  cthree  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>one    <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.sort_index()       d  a  b  cone    <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>three  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.sort_index(axis=<span class="hljs-number">1</span>)       a  b  c  dthree  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">0</span>one    <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.sort_index(axis=<span class="hljs-number">1</span>, ascending=<span class="hljs-literal">False</span>)       d  c  b  athree  <span class="hljs-number">0</span>  <span class="hljs-number">3</span>  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>one    <span class="hljs-number">4</span>  <span class="hljs-number">7</span>  <span class="hljs-number">6</span>  <span class="hljs-number">5</span></code></pre><h3><span id="02x02-sort-values-an-zhi-pai-xu"><font color="#4876FF">【02x02】sort_values() 按值排序</font></span></h3><p>在 Series 和 DataFrame 中的基本语法如下：</p><pre><code class="hljs python">Series.sort_values(self,                   axis=<span class="hljs-number">0</span>,                   ascending=<span class="hljs-literal">True</span>,                   inplace=<span class="hljs-literal">False</span>,                   kind=<span class="hljs-string">&#x27;quicksort&#x27;</span>,                   na_position=<span class="hljs-string">&#x27;last&#x27;</span>,                   ignore_index=<span class="hljs-literal">False</span>)</code></pre><pre><code class="hljs python">DataFrame.sort_values(self,                      by,                      axis=<span class="hljs-number">0</span>,                      ascending=<span class="hljs-literal">True</span>,                      inplace=<span class="hljs-literal">False</span>,                      kind=<span class="hljs-string">&#x27;quicksort&#x27;</span>,                      na_position=<span class="hljs-string">&#x27;last&#x27;</span>,                      ignore_index=<span class="hljs-literal">False</span>)</code></pre><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.sort_values.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.sort_values.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>by</td><td>DataFrame 中的必须参数，指定列的值进行排序，Series 中没有此参数</td></tr><tr><td>axis</td><td>指定轴排序，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>ascending</td><td>为 <code>True</code>时升序排序（默认），为 <code>False</code>时降序排序</td></tr><tr><td>kind</td><td>排序方法，<code>quicksort</code>：快速排序（默认）；<code>'mergesort’</code>：归并排序；<code>'heapsort'</code>：堆排序；具体可参见 <a href="https://numpy.org/doc/stable/reference/generated/numpy.sort.html">numpy.sort()</a></td></tr></tbody></table><p>在 Series 中的应用，按照值排序，如果有缺失值，默认都会被放到 Series 的末尾：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    <span class="hljs-number">4</span><span class="hljs-number">1</span>    <span class="hljs-number">7</span><span class="hljs-number">2</span>   -<span class="hljs-number">3</span><span class="hljs-number">3</span>    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.sort_values()<span class="hljs-number">2</span>   -<span class="hljs-number">3</span><span class="hljs-number">3</span>    <span class="hljs-number">2</span><span class="hljs-number">0</span>    <span class="hljs-number">4</span><span class="hljs-number">1</span>    <span class="hljs-number">7</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">4</span>, np.nan, <span class="hljs-number">7</span>, np.nan, -<span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    <span class="hljs-number">4.0</span><span class="hljs-number">1</span>    NaN<span class="hljs-number">2</span>    <span class="hljs-number">7.0</span><span class="hljs-number">3</span>    NaN<span class="hljs-number">4</span>   -<span class="hljs-number">3.0</span><span class="hljs-number">5</span>    <span class="hljs-number">2.0</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.sort_values()<span class="hljs-number">4</span>   -<span class="hljs-number">3.0</span><span class="hljs-number">5</span>    <span class="hljs-number">2.0</span><span class="hljs-number">0</span>    <span class="hljs-number">4.0</span><span class="hljs-number">2</span>    <span class="hljs-number">7.0</span><span class="hljs-number">1</span>    NaN<span class="hljs-number">3</span>    NaNdtype: float64</code></pre><p>在 DataFrame 中的应用，有时候可能希望根据一个或多个列中的值进行排序。将一个或多个列的名字传递给 <code>sort_values()</code> 的 <code>by</code> 参数即可达到该目的，当传递多个列时，首先会对第一列进行排序，若第一列有相同的值，再根据第二列进行排序，依次类推：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">2</span>], <span class="hljs-string">&#x27;b&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;c&#x27;</span>: [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj   a  b  c<span class="hljs-number">0</span>  <span class="hljs-number">4</span>  <span class="hljs-number">0</span>  <span class="hljs-number">6</span><span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">1</span>  <span class="hljs-number">4</span><span class="hljs-number">2</span> -<span class="hljs-number">3</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span><span class="hljs-number">3</span>  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>  <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.sort_values(by=<span class="hljs-string">&#x27;c&#x27;</span>)   a  b  c<span class="hljs-number">2</span> -<span class="hljs-number">3</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span><span class="hljs-number">3</span>  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>  <span class="hljs-number">3</span><span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">1</span>  <span class="hljs-number">4</span><span class="hljs-number">0</span>  <span class="hljs-number">4</span>  <span class="hljs-number">0</span>  <span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.sort_values(by=<span class="hljs-string">&#x27;c&#x27;</span>, ascending=<span class="hljs-literal">False</span>)   a  b  c<span class="hljs-number">0</span>  <span class="hljs-number">4</span>  <span class="hljs-number">0</span>  <span class="hljs-number">6</span><span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">1</span>  <span class="hljs-number">4</span><span class="hljs-number">3</span>  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>  <span class="hljs-number">3</span><span class="hljs-number">2</span> -<span class="hljs-number">3</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.sort_values(by=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])   a  b  c<span class="hljs-number">2</span> -<span class="hljs-number">3</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span><span class="hljs-number">3</span>  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>  <span class="hljs-number">3</span><span class="hljs-number">0</span>  <span class="hljs-number">4</span>  <span class="hljs-number">0</span>  <span class="hljs-number">6</span><span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">1</span>  <span class="hljs-number">4</span></code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">2</span>], <span class="hljs-string">&#x27;b&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;c&#x27;</span>: [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]&#125;, index=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj   a  b  cA  <span class="hljs-number">4</span>  <span class="hljs-number">0</span>  <span class="hljs-number">6</span>B  <span class="hljs-number">4</span>  <span class="hljs-number">1</span>  <span class="hljs-number">4</span>C -<span class="hljs-number">3</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>D  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>  <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.sort_values(by=<span class="hljs-string">&#x27;B&#x27;</span>, axis=<span class="hljs-number">1</span>)   b  a  cA  <span class="hljs-number">0</span>  <span class="hljs-number">4</span>  <span class="hljs-number">6</span>B  <span class="hljs-number">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">4</span>C  <span class="hljs-number">0</span> -<span class="hljs-number">3</span>  <span class="hljs-number">1</span>D  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span></code></pre><h3><span id="02x03-rank-fan-hui-pai-xu-hou-yuan-su-suo-yin"><font color="#4876FF">【02x03】rank() 返回排序后元素索引</font></span></h3><p>rank() 函数会返回一个对象，对象的值是原对象经过排序后的索引值，即下标。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><pre><code class="hljs python">Series.rank(self: ~ FrameOrSeries,            axis=<span class="hljs-number">0</span>,            method: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;average&#x27;</span>,            numeric_only: <span class="hljs-type">Union</span>[<span class="hljs-built_in">bool</span>, NoneType] = <span class="hljs-literal">None</span>,            na_option: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;keep&#x27;</span>,            ascending: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,            pct: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>)</code></pre><pre><code class="hljs python">DataFrame.rank(self: ~ FrameOrSeries,               axis=<span class="hljs-number">0</span>,               method: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;average&#x27;</span>,               numeric_only: <span class="hljs-type">Union</span>[<span class="hljs-built_in">bool</span>, NoneType] = <span class="hljs-literal">None</span>,               na_option: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;keep&#x27;</span>,               ascending: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>,               pct: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>)</code></pre><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.rank.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.rank.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rank.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rank.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴排序，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>'columns’</code></td></tr><tr><td>method</td><td>有相同值时，如何处理：<br><code>‘average’</code>：默认值，去两个相同索引的平均值；<code>‘min’</code>：取两个相同索引的最小值；<br><code>‘max’</code>：取两个相同索引的最大值；<code>‘first’</code>：按照出现的先后顺序；<br><code>‘dense’</code>：和 <code>'min'</code> 差不多，但是各组之间总是+1的，不太好解释，可以看后面的示例</td></tr><tr><td>ascending</td><td>为 <code>True</code>时升序排序（默认），为 <code>False</code>时降序排序</td></tr></tbody></table><p>在 Series 中的应用，按照值排序，如果有缺失值，默认都会被放到 Series 的末尾：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">7</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    <span class="hljs-number">7</span><span class="hljs-number">1</span>   -<span class="hljs-number">5</span><span class="hljs-number">2</span>    <span class="hljs-number">7</span><span class="hljs-number">3</span>    <span class="hljs-number">4</span><span class="hljs-number">4</span>    <span class="hljs-number">2</span><span class="hljs-number">5</span>    <span class="hljs-number">0</span><span class="hljs-number">6</span>    <span class="hljs-number">4</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.rank()<span class="hljs-number">0</span>    <span class="hljs-number">6.5</span>  <span class="hljs-comment"># 第 0 个和第 2 个值从小到大排名分别为 6 和 7，默认取平均值，即 6.5</span><span class="hljs-number">1</span>    <span class="hljs-number">1.0</span><span class="hljs-number">2</span>    <span class="hljs-number">6.5</span><span class="hljs-number">3</span>    <span class="hljs-number">4.5</span>  <span class="hljs-comment"># 第 3 个和第 6 个值从小到大排名分别为 4 和 5，默认取平均值，即 4.5</span><span class="hljs-number">4</span>    <span class="hljs-number">3.0</span><span class="hljs-number">5</span>    <span class="hljs-number">2.0</span><span class="hljs-number">6</span>    <span class="hljs-number">4.5</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.rank(method=<span class="hljs-string">&#x27;first&#x27;</span>)<span class="hljs-number">0</span>    <span class="hljs-number">6.0</span>  <span class="hljs-comment"># 第 0 个和第 2 个值从小到大排名分别为 6 和 7，按照第一次出现排序，分别为 6 和 7</span><span class="hljs-number">1</span>    <span class="hljs-number">1.0</span><span class="hljs-number">2</span>    <span class="hljs-number">7.0</span><span class="hljs-number">3</span>    <span class="hljs-number">4.0</span>  <span class="hljs-comment"># 第 3 个和第 6 个值从小到大排名分别为 4 和 5，按照第一次出现排序，分别为 4 和 5</span><span class="hljs-number">4</span>    <span class="hljs-number">3.0</span><span class="hljs-number">5</span>    <span class="hljs-number">2.0</span><span class="hljs-number">6</span>    <span class="hljs-number">5.0</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.rank(method=<span class="hljs-string">&#x27;dense&#x27;</span>)<span class="hljs-number">0</span>    <span class="hljs-number">5.0</span>  <span class="hljs-comment"># 第 0 个和第 2 个值从小到大排名分别为 6 和 7，按照最小值排序，但 dense 规定间隔为 1 所以为 5</span><span class="hljs-number">1</span>    <span class="hljs-number">1.0</span><span class="hljs-number">2</span>    <span class="hljs-number">5.0</span><span class="hljs-number">3</span>    <span class="hljs-number">4.0</span>  <span class="hljs-comment"># 第 3 个和第 6 个值从小到大排名分别为 4 和 5，按照最小值排序，即 4</span><span class="hljs-number">4</span>    <span class="hljs-number">3.0</span><span class="hljs-number">5</span>    <span class="hljs-number">2.0</span><span class="hljs-number">6</span>    <span class="hljs-number">4.0</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.rank(method=<span class="hljs-string">&#x27;min&#x27;</span>)<span class="hljs-number">0</span>    <span class="hljs-number">6.0</span>  <span class="hljs-comment"># 第 0 个和第 2 个值从小到大排名分别为 6 和 7，按照最小值排序，即 6</span><span class="hljs-number">1</span>    <span class="hljs-number">1.0</span><span class="hljs-number">2</span>    <span class="hljs-number">6.0</span><span class="hljs-number">3</span>    <span class="hljs-number">4.0</span>  <span class="hljs-comment"># 第 3 个和第 6 个值从小到大排名分别为 4 和 5，按照最小值排序，即 4</span><span class="hljs-number">4</span>    <span class="hljs-number">3.0</span><span class="hljs-number">5</span>    <span class="hljs-number">2.0</span><span class="hljs-number">6</span>    <span class="hljs-number">4.0</span>dtype: float64</code></pre><p>在 DataFrame 中可以使用 axis 参数来指定轴：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="hljs-string">&#x27;b&#x27;</span>: [<span class="hljs-number">4.3</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">2</span>], <span class="hljs-string">&#x27;a&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;c&#x27;</span>: [-<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, -<span class="hljs-number">2.5</span>]&#125;)<span class="hljs-meta">&gt;&gt;&gt; </span>obj     b  a    c<span class="hljs-number">0</span>  <span class="hljs-number">4.3</span>  <span class="hljs-number">0</span> -<span class="hljs-number">2.0</span><span class="hljs-number">1</span>  <span class="hljs-number">7.0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">5.0</span><span class="hljs-number">2</span> -<span class="hljs-number">3.0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">8.0</span><span class="hljs-number">3</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">1</span> -<span class="hljs-number">2.5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.rank()     b    a    c<span class="hljs-number">0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">1.5</span>  <span class="hljs-number">2.0</span><span class="hljs-number">1</span>  <span class="hljs-number">4.0</span>  <span class="hljs-number">3.5</span>  <span class="hljs-number">3.0</span><span class="hljs-number">2</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.5</span>  <span class="hljs-number">4.0</span><span class="hljs-number">3</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.5</span>  <span class="hljs-number">1.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.rank(axis=<span class="hljs-string">&#x27;columns&#x27;</span>)     b    a    c<span class="hljs-number">0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">1.0</span><span class="hljs-number">1</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">2.0</span><span class="hljs-number">2</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span><span class="hljs-number">3</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">1.0</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106758103</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="03x00-ceng-ji-suo-yin"><font color="#FF0000">【03x00】层级索引</font></span></h2><h3><span id="03x01-ren-shi-ceng-ji-suo-yin"><font color="#4876FF">【03x01】认识层级索引</font></span></h3><p>以下示例将创建一个 Series 对象， 索引 Index 由两个子 list 组成，第一个子 list 是外层索引，第二个 list 是内层索引：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">12</span>),index=[[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>obja  <span class="hljs-number">0</span>   -<span class="hljs-number">0.201536</span>   <span class="hljs-number">1</span>   -<span class="hljs-number">0.629058</span>   <span class="hljs-number">2</span>    <span class="hljs-number">0.766716</span>b  <span class="hljs-number">0</span>   -<span class="hljs-number">1.255831</span>   <span class="hljs-number">1</span>   -<span class="hljs-number">0.483727</span>   <span class="hljs-number">2</span>   -<span class="hljs-number">0.018653</span>c  <span class="hljs-number">0</span>    <span class="hljs-number">0.788787</span>   <span class="hljs-number">1</span>    <span class="hljs-number">1.010097</span>   <span class="hljs-number">2</span>   -<span class="hljs-number">0.187258</span>d  <span class="hljs-number">0</span>    <span class="hljs-number">1.242363</span>   <span class="hljs-number">1</span>   -<span class="hljs-number">0.822011</span>   <span class="hljs-number">2</span>   -<span class="hljs-number">0.085682</span>dtype: float64</code></pre><h3><span id="03x02-multiindex-suo-yin-dui-xiang"><font color="#4876FF">【03x02】MultiIndex 索引对象</font></span></h3><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.MultiIndex.html">https://pandas.pydata.org/docs/reference/api/pandas.MultiIndex.html</a></p><p>尝试打印上面示例中 Series 的索引类型，会得到一个 MultiIndex 对象，MultiIndex 对象的 <font color="#FF0000">levels</font> 属性表示两个层级中分别有那些标签，<font color="#FF0000">codes</font> 属性表示每个位置分别是什么标签，如下所示：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">12</span>),index=[[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>obja  <span class="hljs-number">0</span>    <span class="hljs-number">0.035946</span>   <span class="hljs-number">1</span>   -<span class="hljs-number">0.867215</span>   <span class="hljs-number">2</span>   -<span class="hljs-number">0.053355</span>b  <span class="hljs-number">0</span>   -<span class="hljs-number">0.986616</span>   <span class="hljs-number">1</span>    <span class="hljs-number">0.026071</span>   <span class="hljs-number">2</span>   -<span class="hljs-number">0.048394</span>c  <span class="hljs-number">0</span>    <span class="hljs-number">0.251274</span>   <span class="hljs-number">1</span>    <span class="hljs-number">0.217790</span>   <span class="hljs-number">2</span>    <span class="hljs-number">1.137674</span>d  <span class="hljs-number">0</span>   -<span class="hljs-number">1.245178</span>   <span class="hljs-number">1</span>    <span class="hljs-number">1.234972</span>   <span class="hljs-number">2</span>   -<span class="hljs-number">0.035624</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(obj.index)&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">indexes</span>.<span class="hljs-title">multi</span>.<span class="hljs-title">MultiIndex</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt; </span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">obj</span>.<span class="hljs-title">index</span></span><span class="hljs-class"><span class="hljs-title">MultiIndex</span>(<span class="hljs-params">[(<span class="hljs-params"><span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">0</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">0</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">1</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">0</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">2</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">0</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">1</span></span>),</span></span><span class="hljs-params"><span class="hljs-class">            (<span class="hljs-params"><span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">2</span></span>)],</span></span><span class="hljs-params"><span class="hljs-class">           </span>)</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">obj</span>.<span class="hljs-title">index</span>.<span class="hljs-title">levels</span></span><span class="hljs-class"><span class="hljs-title">FrozenList</span>(<span class="hljs-params">[[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]]</span>)</span><span class="hljs-class">&gt;&gt;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">obj</span>.<span class="hljs-title">index</span>.<span class="hljs-title">codes</span></span><span class="hljs-class"><span class="hljs-title">FrozenList</span>(<span class="hljs-params">[[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]]</span>)</span></code></pre><p>通常可以使用 <code>from_arrays()</code> 方法来将数组对象转换为 MultiIndex 索引对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arrays = [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>pd.MultiIndex.from_arrays(arrays, names=(<span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>))MultiIndex([(<span class="hljs-number">1</span>,  <span class="hljs-string">&#x27;red&#x27;</span>),            (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;blue&#x27;</span>),            (<span class="hljs-number">2</span>,  <span class="hljs-string">&#x27;red&#x27;</span>),            (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;blue&#x27;</span>)],           names=[<span class="hljs-string">&#x27;number&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>])</code></pre><p>其他常用方法见下表（更多方法参见官方文档）：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>from_arrays(arrays[, sortorder, names])</td><td>将数组转换为 MultiIndex</td></tr><tr><td>from_tuples(tuples[, sortorder, names])</td><td>将元组列表转换为 MultiIndex</td></tr><tr><td>from_product(iterables[, sortorder, names])</td><td>将多个可迭代的笛卡尔积转换成 MultiIndex</td></tr><tr><td>from_frame(df[, sortorder, names])</td><td>将 DataFrame 对象转换为 MultiIndex</td></tr><tr><td>set_levels(self, levels[, level, inplace, …])</td><td>为 MultiIndex 设置新的 levels</td></tr><tr><td>set_codes(self, codes[, level, inplace, …])</td><td>为 MultiIndex 设置新的 codes</td></tr><tr><td>sortlevel(self[, level, ascending, …])</td><td>根据 level 进行排序</td></tr><tr><td>droplevel(self[, level])</td><td>删除指定的 level</td></tr><tr><td>swaplevel(self[, i, j])</td><td>交换 level i 与 level i，即交换外层索引与内层索引</td></tr></tbody></table><h3><span id="03x03-ti-qu-zhi"><font color="#4876FF">【03x03】提取值</font></span></h3><p>对于这种有多层索引的对象，如果只传入一个参数，则会对外层索引进行提取，其中包含对应所有的内层索引，如果传入两个参数，则第一个参数表示外层索引，第二个参数表示内层索引，示例如下：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">12</span>),index=[[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>obja  <span class="hljs-number">0</span>    <span class="hljs-number">0.550202</span>   <span class="hljs-number">1</span>    <span class="hljs-number">0.328784</span>   <span class="hljs-number">2</span>    <span class="hljs-number">1.422690</span>b  <span class="hljs-number">0</span>   -<span class="hljs-number">1.333477</span>   <span class="hljs-number">1</span>   -<span class="hljs-number">0.933809</span>   <span class="hljs-number">2</span>   -<span class="hljs-number">0.326541</span>c  <span class="hljs-number">0</span>    <span class="hljs-number">0.663686</span>   <span class="hljs-number">1</span>    <span class="hljs-number">0.943393</span>   <span class="hljs-number">2</span>    <span class="hljs-number">0.273106</span>d  <span class="hljs-number">0</span>    <span class="hljs-number">1.354037</span>   <span class="hljs-number">1</span>   -<span class="hljs-number">2.312847</span>   <span class="hljs-number">2</span>   -<span class="hljs-number">2.343777</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;b&#x27;</span>]<span class="hljs-number">0</span>   -<span class="hljs-number">1.333477</span><span class="hljs-number">1</span>   -<span class="hljs-number">0.933809</span><span class="hljs-number">2</span>   -<span class="hljs-number">0.326541</span>dtype: float64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">1</span>]-<span class="hljs-number">0.9338094811708413</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[:, <span class="hljs-number">2</span>]a    <span class="hljs-number">1.422690</span>b   -<span class="hljs-number">0.326541</span>c    <span class="hljs-number">0.273106</span>d   -<span class="hljs-number">2.343777</span>dtype: float64</code></pre><h3><span id="03x04-jiao-huan-fen-ceng-yu-pai-xu"><font color="#4876FF">【03x04】交换分层与排序</font></span></h3><p>MultiIndex 对象的 <code>swaplevel()</code> 方法可以交换外层与内层索引，<code>sortlevel()</code> 方法会先对外层索引进行排序，再对内层索引进行排序，默认是升序，如果设置 <code>ascending</code> 参数为 False 则会降序排列，示例如下：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">12</span>),index=[[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>obja  <span class="hljs-number">0</span>   -<span class="hljs-number">0.110215</span>   <span class="hljs-number">1</span>    <span class="hljs-number">0.193075</span>   <span class="hljs-number">2</span>   -<span class="hljs-number">1.101706</span>b  <span class="hljs-number">0</span>   -<span class="hljs-number">1.325743</span>   <span class="hljs-number">1</span>    <span class="hljs-number">0.528418</span>   <span class="hljs-number">2</span>   -<span class="hljs-number">0.127081</span>c  <span class="hljs-number">0</span>   -<span class="hljs-number">0.733822</span>   <span class="hljs-number">1</span>    <span class="hljs-number">1.665262</span>   <span class="hljs-number">2</span>    <span class="hljs-number">0.127073</span>d  <span class="hljs-number">0</span>    <span class="hljs-number">1.262022</span>   <span class="hljs-number">1</span>   -<span class="hljs-number">1.170518</span>   <span class="hljs-number">2</span>    <span class="hljs-number">0.966334</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.swaplevel()<span class="hljs-number">0</span>  a   -<span class="hljs-number">0.110215</span><span class="hljs-number">1</span>  a    <span class="hljs-number">0.193075</span><span class="hljs-number">2</span>  a   -<span class="hljs-number">1.101706</span><span class="hljs-number">0</span>  b   -<span class="hljs-number">1.325743</span><span class="hljs-number">1</span>  b    <span class="hljs-number">0.528418</span><span class="hljs-number">2</span>  b   -<span class="hljs-number">0.127081</span><span class="hljs-number">0</span>  c   -<span class="hljs-number">0.733822</span><span class="hljs-number">1</span>  c    <span class="hljs-number">1.665262</span><span class="hljs-number">2</span>  c    <span class="hljs-number">0.127073</span><span class="hljs-number">0</span>  d    <span class="hljs-number">1.262022</span><span class="hljs-number">1</span>  d   -<span class="hljs-number">1.170518</span><span class="hljs-number">2</span>  d    <span class="hljs-number">0.966334</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.swaplevel().index.sortlevel()(MultiIndex([(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;a&#x27;</span>),            (<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;b&#x27;</span>),            (<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;c&#x27;</span>),            (<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;d&#x27;</span>),            (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>),            (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>),            (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;c&#x27;</span>),            (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;d&#x27;</span>),            (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;a&#x27;</span>),            (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>),            (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>),            (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span>)],           ), array([ <span class="hljs-number">0</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">10</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">11</span>], dtype=int32))</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106758103</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</title>
      <link href="/article/027/"/>
      <url>/article/027/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01x00-pandas-suan-zhu-yun-suan-font"><font color="#FF0000">【01x00】Pandas 算术运算</font></a><ul><li><a href="#font-color-4876ff-01x01-shi-yong-numpy-tong-yong-han-shu-font"><font color="#4876FF">【01x01】使用 NumPy 通用函数</font></a></li><li><a href="#font-color-4876ff-01x02-shu-ju-dui-qi-font"><font color="#4876FF">【01x02】数据对齐</font></a></li><li><a href="#font-color-4876ff-01x03-dataframe-yu-series-zhi-jian-de-yun-suan-font"><font color="#4876FF">【01x03】DataFrame 与 Series 之间的运算</font></a></li><li><a href="#font-color-4876ff-01x04-pandas-suan-zhu-fang-fa-font"><font color="#4876FF">【01x04】Pandas 算术方法</font></a></li></ul></li><li><a href="#font-color-ff0000-02x00-chu-li-que-shi-zhi-font"><font color="#FF0000">【02x00】处理缺失值</font></a><ul><li><a href="#font-color-4876ff-02x01-fill-value-zhi-ding-zhi-yu-que-shi-zhi-jin-xing-yun-suan-font"><font color="#4876FF">【02x01】fill_value() 指定值与缺失值进行运算</font></a></li><li><a href="#font-color-4876ff-02x02-isnull-notnull-pan-duan-que-shi-zhi-font"><font color="#4876FF">【02x02】isnull() / notnull() 判断缺失值</font></a></li><li><a href="#font-color-4876ff-02x03-dropna-shan-chu-que-shi-zhi-font"><font color="#4876FF">【02x03】dropna() 删除缺失值</font></a></li><li><a href="#font-color-4876ff-02x04-fillna-tian-chong-que-shi-zhi-font"><font color="#4876FF">【02x04】fillna() 填充缺失值</font></a></li></ul></li></ul><!-- tocstop --><hr><p>Pandas 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/025/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itbob.cn/article/026/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itbob.cn/article/027/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itbob.cn/article/028/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itbob.cn/article/029/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itbob.cn/article/030/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itbob.cn/article/031/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itbob.cn/article/032/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itbob.cn/article/033/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itbob.cn/article/034/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106743778</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01x00-pandas-suan-zhu-yun-suan"><font color="#FF0000">【01x00】Pandas 算术运算</font></span></h2><p>Pandas 继承了 NumPy 的功能，NumPy 的基本能力之一是快速对每个元素进行运算，既包括基本算术运算（加、减、乘、除），也包括更复杂的运算（三角函数、指数函数和对数函数等）。具体可以参考 NumPy 系列文章。</p><h3><span id="01x01-shi-yong-numpy-tong-yong-han-shu"><font color="#4876FF">【01x01】使用 NumPy 通用函数</font></span></h3><p>因为 Pandas 是建立在 NumPy 基础之上的，所以 NumPy 的通用函数同样适用于 Pandas 的 Series 和 DataFrame 对象，如下所示：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>rng = np.random.RandomState(<span class="hljs-number">42</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>ser = pd.Series(rng.randint(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>ser<span class="hljs-number">0</span>    <span class="hljs-number">6</span><span class="hljs-number">1</span>    <span class="hljs-number">3</span><span class="hljs-number">2</span>    <span class="hljs-number">7</span><span class="hljs-number">3</span>    <span class="hljs-number">4</span>dtype: int32<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(rng.randint(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)), columns=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj   A  B  C  D<span class="hljs-number">0</span>  <span class="hljs-number">6</span>  <span class="hljs-number">9</span>  <span class="hljs-number">2</span>  <span class="hljs-number">6</span><span class="hljs-number">1</span>  <span class="hljs-number">7</span>  <span class="hljs-number">4</span>  <span class="hljs-number">3</span>  <span class="hljs-number">7</span><span class="hljs-number">2</span>  <span class="hljs-number">7</span>  <span class="hljs-number">2</span>  <span class="hljs-number">5</span>  <span class="hljs-number">4</span></code></pre><p>使用 NumPy 通用函数，生成的结果是另一个保留索引的 Pandas 对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>rng = np.random.RandomState(<span class="hljs-number">42</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>ser = pd.Series(rng.randint(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>ser<span class="hljs-number">0</span>    <span class="hljs-number">6</span><span class="hljs-number">1</span>    <span class="hljs-number">3</span><span class="hljs-number">2</span>    <span class="hljs-number">7</span><span class="hljs-number">3</span>    <span class="hljs-number">4</span>dtype: int32<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>np.exp(ser)<span class="hljs-number">0</span>     <span class="hljs-number">403.428793</span><span class="hljs-number">1</span>      <span class="hljs-number">20.085537</span><span class="hljs-number">2</span>    <span class="hljs-number">1096.633158</span><span class="hljs-number">3</span>      <span class="hljs-number">54.598150</span>dtype: float64</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(rng.randint(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)), columns=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>np.sin(obj * np.pi / <span class="hljs-number">4</span>)          A             B         C             D<span class="hljs-number">0</span> -<span class="hljs-number">1.000000</span>  <span class="hljs-number">7.071068e-01</span>  <span class="hljs-number">1.000000</span> -<span class="hljs-number">1.000000e+00</span><span class="hljs-number">1</span> -<span class="hljs-number">0.707107</span>  <span class="hljs-number">1.224647e-16</span>  <span class="hljs-number">0.707107</span> -<span class="hljs-number">7.071068e-01</span><span class="hljs-number">2</span> -<span class="hljs-number">0.707107</span>  <span class="hljs-number">1.000000e+00</span> -<span class="hljs-number">0.707107</span>  <span class="hljs-number">1.224647e-16</span></code></pre><h3><span id="01x02-shu-ju-dui-qi"><font color="#4876FF">【01x02】数据对齐</font></span></h3><p>Pandas 最重要的一个功能是，它可以对不同索引的对象进行算术运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是该索引对的并集。自动的数据对齐操作会在不重叠的索引处引入缺失值，即 <font color="#FF0000">NaN</font>，缺失值会在算术运算过程中传播。</p><p>Series 对象的数据对齐操作：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="hljs-number">7.3</span>, -<span class="hljs-number">2.5</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">1.5</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.Series([-<span class="hljs-number">2.1</span>, <span class="hljs-number">3.6</span>, -<span class="hljs-number">1.5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3.1</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj1a    <span class="hljs-number">7.3</span>c   -<span class="hljs-number">2.5</span>d    <span class="hljs-number">3.4</span>e    <span class="hljs-number">1.5</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2a   -<span class="hljs-number">2.1</span>c    <span class="hljs-number">3.6</span>e   -<span class="hljs-number">1.5</span>f    <span class="hljs-number">4.0</span>g    <span class="hljs-number">3.1</span>dtype: float64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 + obj2a    <span class="hljs-number">5.2</span>c    <span class="hljs-number">1.1</span>d    NaNe    <span class="hljs-number">0.0</span>f    NaNg    NaNdtype: float64</code></pre><p>DataFrame 对象的数据对齐操作会同时发生在行和列上：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(np.arange(<span class="hljs-number">9.</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)), columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;bcd&#x27;</span>), index=[<span class="hljs-string">&#x27;Ohio&#x27;</span>, <span class="hljs-string">&#x27;Texas&#x27;</span>, <span class="hljs-string">&#x27;Colorado&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(np.arange(<span class="hljs-number">12.</span>).reshape((<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)), columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;bde&#x27;</span>), index=[<span class="hljs-string">&#x27;Utah&#x27;</span>, <span class="hljs-string">&#x27;Ohio&#x27;</span>, <span class="hljs-string">&#x27;Texas&#x27;</span>, <span class="hljs-string">&#x27;Oregon&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj1            b    c    dOhio      <span class="hljs-number">0.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">2.0</span>Texas     <span class="hljs-number">3.0</span>  <span class="hljs-number">4.0</span>  <span class="hljs-number">5.0</span>Colorado  <span class="hljs-number">6.0</span>  <span class="hljs-number">7.0</span>  <span class="hljs-number">8.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2          b     d     eUtah    <span class="hljs-number">0.0</span>   <span class="hljs-number">1.0</span>   <span class="hljs-number">2.0</span>Ohio    <span class="hljs-number">3.0</span>   <span class="hljs-number">4.0</span>   <span class="hljs-number">5.0</span>Texas   <span class="hljs-number">6.0</span>   <span class="hljs-number">7.0</span>   <span class="hljs-number">8.0</span>Oregon  <span class="hljs-number">9.0</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">11.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1 + obj2            b   c     d   eColorado  NaN NaN   NaN NaNOhio      <span class="hljs-number">3.0</span> NaN   <span class="hljs-number">6.0</span> NaNOregon    NaN NaN   NaN NaNTexas     <span class="hljs-number">9.0</span> NaN  <span class="hljs-number">12.0</span> NaNUtah      NaN NaN   NaN NaN</code></pre><h3><span id="01x03-dataframe-yu-series-zhi-jian-de-yun-suan"><font color="#4876FF">【01x03】DataFrame 与 Series 之间的运算</font></span></h3><p>首先回忆 NumPy 中的广播（参见：<a href="https://itrhx.blog.csdn.net/article/details/104988137">《Python 数据分析三剑客之 NumPy（二）：数组索引 / 切片 / 广播 / 拼接 / 分割》</a>），跟不同维度的 NumPy 数组一样，DataFrame 和 Series 之间算术运算也是有明确规定的。首先回忆一下 NumPy 中不同维度的数组之间的运算：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>arr = np.arange(<span class="hljs-number">12.</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>arrarray([[ <span class="hljs-number">0.</span>,  <span class="hljs-number">1.</span>,  <span class="hljs-number">2.</span>,  <span class="hljs-number">3.</span>],       [ <span class="hljs-number">4.</span>,  <span class="hljs-number">5.</span>,  <span class="hljs-number">6.</span>,  <span class="hljs-number">7.</span>],       [ <span class="hljs-number">8.</span>,  <span class="hljs-number">9.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">11.</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>arr[<span class="hljs-number">0</span>]array([<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>arr - arr[<span class="hljs-number">0</span>]array([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],       [<span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>],       [<span class="hljs-number">8.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">8.</span>]])</code></pre><p>可以看到每一行都进行了减法运算，这正是 NumPy 中的广播，而 DataFrame 与 Series 之间的运算也类似，默认情况下，DataFrame 和 Series 之间的算术运算会将 Series 的索引匹配到 DataFrame 的列，然后沿着行一直向下广播：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>frame = pd.DataFrame(np.arange(<span class="hljs-number">12.</span>).reshape((<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)), columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;bde&#x27;</span>), index=[<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;BB&#x27;</span>, <span class="hljs-string">&#x27;CC&#x27;</span>, <span class="hljs-string">&#x27;DD&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>frame      b     d     eAA  <span class="hljs-number">0.0</span>   <span class="hljs-number">1.0</span>   <span class="hljs-number">2.0</span>BB  <span class="hljs-number">3.0</span>   <span class="hljs-number">4.0</span>   <span class="hljs-number">5.0</span>CC  <span class="hljs-number">6.0</span>   <span class="hljs-number">7.0</span>   <span class="hljs-number">8.0</span>DD  <span class="hljs-number">9.0</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">11.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>series = frame.iloc[<span class="hljs-number">0</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>seriesb    <span class="hljs-number">0.0</span>d    <span class="hljs-number">1.0</span>e    <span class="hljs-number">2.0</span>Name: AA, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>frame - series      b    d    eAA  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>BB  <span class="hljs-number">3.0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">3.0</span>CC  <span class="hljs-number">6.0</span>  <span class="hljs-number">6.0</span>  <span class="hljs-number">6.0</span>DD  <span class="hljs-number">9.0</span>  <span class="hljs-number">9.0</span>  <span class="hljs-number">9.0</span></code></pre><p>如果某个索引值在 DataFrame 的列或 Series 的索引中找不到，则参与运算的两个对象就会被重新索引以形成并集：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>frame = pd.DataFrame(np.arange(<span class="hljs-number">12.</span>).reshape((<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)), columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;bde&#x27;</span>), index=[<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;BB&#x27;</span>, <span class="hljs-string">&#x27;CC&#x27;</span>, <span class="hljs-string">&#x27;DD&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>frame      b     d     eAA  <span class="hljs-number">0.0</span>   <span class="hljs-number">1.0</span>   <span class="hljs-number">2.0</span>BB  <span class="hljs-number">3.0</span>   <span class="hljs-number">4.0</span>   <span class="hljs-number">5.0</span>CC  <span class="hljs-number">6.0</span>   <span class="hljs-number">7.0</span>   <span class="hljs-number">8.0</span>DD  <span class="hljs-number">9.0</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">11.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>series = pd.Series(<span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>), index=[<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>seriesb    <span class="hljs-number">0</span>e    <span class="hljs-number">1</span>f    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>frame + series      b   d     e   fAA  <span class="hljs-number">0.0</span> NaN   <span class="hljs-number">3.0</span> NaNBB  <span class="hljs-number">3.0</span> NaN   <span class="hljs-number">6.0</span> NaNCC  <span class="hljs-number">6.0</span> NaN   <span class="hljs-number">9.0</span> NaNDD  <span class="hljs-number">9.0</span> NaN  <span class="hljs-number">12.0</span> NaN</code></pre><p>如果希望匹配行且在列上广播，则必须使用算术运算方法，在方法中传入的轴（axis）就是希望匹配的轴。在下例中，我们的目的是匹配 DataFrame 的行索引（axis=‘index’ or axis=0）并进行广播：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>frame = pd.DataFrame(np.arange(<span class="hljs-number">12.</span>).reshape((<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)), columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;bde&#x27;</span>), index=[<span class="hljs-string">&#x27;AA&#x27;</span>, <span class="hljs-string">&#x27;BB&#x27;</span>, <span class="hljs-string">&#x27;CC&#x27;</span>, <span class="hljs-string">&#x27;DD&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>frame      b     d     eAA  <span class="hljs-number">0.0</span>   <span class="hljs-number">1.0</span>   <span class="hljs-number">2.0</span>BB  <span class="hljs-number">3.0</span>   <span class="hljs-number">4.0</span>   <span class="hljs-number">5.0</span>CC  <span class="hljs-number">6.0</span>   <span class="hljs-number">7.0</span>   <span class="hljs-number">8.0</span>DD  <span class="hljs-number">9.0</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">11.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>series = frame[<span class="hljs-string">&#x27;d&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>seriesAA     <span class="hljs-number">1.0</span>BB     <span class="hljs-number">4.0</span>CC     <span class="hljs-number">7.0</span>DD    <span class="hljs-number">10.0</span>Name: d, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>frame.sub(series, axis=<span class="hljs-string">&#x27;index&#x27;</span>)      b    d    eAA -<span class="hljs-number">1.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">1.0</span>BB -<span class="hljs-number">1.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">1.0</span>CC -<span class="hljs-number">1.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">1.0</span>DD -<span class="hljs-number">1.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">1.0</span></code></pre><h3><span id="01x04-pandas-suan-zhu-fang-fa"><font color="#4876FF">【01x04】Pandas 算术方法</font></span></h3><p>完整的 Pandas 算术方法见下表：</p><table><thead><tr><th>方法</th><th>副本</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>radd()</td><td>加法（+）</td></tr><tr><td>sub()、subtract()</td><td>rsub()</td><td>减法（-）</td></tr><tr><td>mul()、multiply()</td><td>rmul()</td><td>乘法（*）</td></tr><tr><td>pow()</td><td>rpow()</td><td>指数（**）</td></tr><tr><td>truediv()、div()、divide()</td><td>rdiv()</td><td>除法（/）</td></tr><tr><td>floordiv()</td><td>rfloordiv()</td><td>底除（//）</td></tr><tr><td>mod()</td><td>rmod()</td><td>求余（%）</td></tr></tbody></table><p>副本均为原方法前加了个 <code>r</code>，它会翻转参数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="hljs-number">12.</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)), columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj     a    b     c     d<span class="hljs-number">0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">1.0</span>   <span class="hljs-number">2.0</span>   <span class="hljs-number">3.0</span><span class="hljs-number">1</span>  <span class="hljs-number">4.0</span>  <span class="hljs-number">5.0</span>   <span class="hljs-number">6.0</span>   <span class="hljs-number">7.0</span><span class="hljs-number">2</span>  <span class="hljs-number">8.0</span>  <span class="hljs-number">9.0</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">11.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">1</span> / obj       a         b         c         d<span class="hljs-number">0</span>    inf  <span class="hljs-number">1.000000</span>  <span class="hljs-number">0.500000</span>  <span class="hljs-number">0.333333</span><span class="hljs-number">1</span>  <span class="hljs-number">0.250</span>  <span class="hljs-number">0.200000</span>  <span class="hljs-number">0.166667</span>  <span class="hljs-number">0.142857</span><span class="hljs-number">2</span>  <span class="hljs-number">0.125</span>  <span class="hljs-number">0.111111</span>  <span class="hljs-number">0.100000</span>  <span class="hljs-number">0.090909</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.rdiv(<span class="hljs-number">1</span>)       a         b         c         d<span class="hljs-number">0</span>    inf  <span class="hljs-number">1.000000</span>  <span class="hljs-number">0.500000</span>  <span class="hljs-number">0.333333</span><span class="hljs-number">1</span>  <span class="hljs-number">0.250</span>  <span class="hljs-number">0.200000</span>  <span class="hljs-number">0.166667</span>  <span class="hljs-number">0.142857</span><span class="hljs-number">2</span>  <span class="hljs-number">0.125</span>  <span class="hljs-number">0.111111</span>  <span class="hljs-number">0.100000</span>  <span class="hljs-number">0.090909</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106743778</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="02x00-chu-li-que-shi-zhi"><font color="#FF0000">【02x00】处理缺失值</font></span></h2><p>在现实中遇到的数据很少是干净整齐的，许多数据集都会有数据缺失的现象，缺失值主要有三种形式：null、NaN（NAN，nan） 或 NA。</p><h3><span id="02x01-fill-value-zhi-ding-zhi-yu-que-shi-zhi-jin-xing-yun-suan"><font color="#4876FF">【02x01】fill_value() 指定值与缺失值进行运算</font></span></h3><p>使用 <code>add</code>, <code>sub</code>, <code>div</code>, <code>mul</code> 等算术方法时，通过 <code>fill_value</code> 指定填充值，未对齐的数据将和填充值做运算。</p><p>Series 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1<span class="hljs-number">0</span>    <span class="hljs-number">1</span><span class="hljs-number">1</span>    <span class="hljs-number">2</span><span class="hljs-number">2</span>    <span class="hljs-number">3</span><span class="hljs-number">3</span>    <span class="hljs-number">4</span><span class="hljs-number">4</span>    <span class="hljs-number">5</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2<span class="hljs-number">0</span>    <span class="hljs-number">6</span><span class="hljs-number">1</span>    <span class="hljs-number">7</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1.add(obj2)<span class="hljs-number">0</span>    <span class="hljs-number">7.0</span><span class="hljs-number">1</span>    <span class="hljs-number">9.0</span><span class="hljs-number">2</span>    NaN<span class="hljs-number">3</span>    NaN<span class="hljs-number">4</span>    NaNdtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1.add(obj2, fill_value=-<span class="hljs-number">1</span>)<span class="hljs-number">0</span>    <span class="hljs-number">7.0</span><span class="hljs-number">1</span>    <span class="hljs-number">9.0</span><span class="hljs-number">2</span>    <span class="hljs-number">2.0</span><span class="hljs-number">3</span>    <span class="hljs-number">3.0</span><span class="hljs-number">4</span>    <span class="hljs-number">4.0</span>dtype: float64</code></pre><p>DataFrame 中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(np.arange(<span class="hljs-number">12.</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)), columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcd&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(np.arange(<span class="hljs-number">20.</span>).reshape((<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)), columns=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcde&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2.loc[<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>] = np.nan<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1     a    b     c     d<span class="hljs-number">0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">1.0</span>   <span class="hljs-number">2.0</span>   <span class="hljs-number">3.0</span><span class="hljs-number">1</span>  <span class="hljs-number">4.0</span>  <span class="hljs-number">5.0</span>   <span class="hljs-number">6.0</span>   <span class="hljs-number">7.0</span><span class="hljs-number">2</span>  <span class="hljs-number">8.0</span>  <span class="hljs-number">9.0</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">11.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2      a     b     c     d     e<span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">1.0</span>   <span class="hljs-number">2.0</span>   <span class="hljs-number">3.0</span>   <span class="hljs-number">4.0</span><span class="hljs-number">1</span>   <span class="hljs-number">5.0</span>   NaN   <span class="hljs-number">7.0</span>   <span class="hljs-number">8.0</span>   <span class="hljs-number">9.0</span><span class="hljs-number">2</span>  <span class="hljs-number">10.0</span>  <span class="hljs-number">11.0</span>  <span class="hljs-number">12.0</span>  <span class="hljs-number">13.0</span>  <span class="hljs-number">14.0</span><span class="hljs-number">3</span>  <span class="hljs-number">15.0</span>  <span class="hljs-number">16.0</span>  <span class="hljs-number">17.0</span>  <span class="hljs-number">18.0</span>  <span class="hljs-number">19.0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1 + obj2      a     b     c     d   e<span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">2.0</span>   <span class="hljs-number">4.0</span>   <span class="hljs-number">6.0</span> NaN<span class="hljs-number">1</span>   <span class="hljs-number">9.0</span>   NaN  <span class="hljs-number">13.0</span>  <span class="hljs-number">15.0</span> NaN<span class="hljs-number">2</span>  <span class="hljs-number">18.0</span>  <span class="hljs-number">20.0</span>  <span class="hljs-number">22.0</span>  <span class="hljs-number">24.0</span> NaN<span class="hljs-number">3</span>   NaN   NaN   NaN   NaN NaN<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj1.add(obj2, fill_value=<span class="hljs-number">10</span>)      a     b     c     d     e<span class="hljs-number">0</span>   <span class="hljs-number">0.0</span>   <span class="hljs-number">2.0</span>   <span class="hljs-number">4.0</span>   <span class="hljs-number">6.0</span>  <span class="hljs-number">14.0</span><span class="hljs-number">1</span>   <span class="hljs-number">9.0</span>  <span class="hljs-number">15.0</span>  <span class="hljs-number">13.0</span>  <span class="hljs-number">15.0</span>  <span class="hljs-number">19.0</span><span class="hljs-number">2</span>  <span class="hljs-number">18.0</span>  <span class="hljs-number">20.0</span>  <span class="hljs-number">22.0</span>  <span class="hljs-number">24.0</span>  <span class="hljs-number">24.0</span><span class="hljs-number">3</span>  <span class="hljs-number">25.0</span>  <span class="hljs-number">26.0</span>  <span class="hljs-number">27.0</span>  <span class="hljs-number">28.0</span>  <span class="hljs-number">29.0</span></code></pre><h3><span id="02x02-isnull-notnull-pan-duan-que-shi-zhi"><font color="#4876FF">【02x02】isnull() / notnull() 判断缺失值</font></span></h3><p><code>isnull()</code>：为缺失值时为 <code>True</code>，否则为 <code>False</code>；</p><p><code>notnull()</code> 为缺失值时为 <code>False</code>，否则为 <code>True</code>。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, np.nan, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-literal">None</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>        <span class="hljs-number">1</span><span class="hljs-number">1</span>      NaN<span class="hljs-number">2</span>    hello<span class="hljs-number">3</span>     <span class="hljs-literal">None</span>dtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.isnull()<span class="hljs-number">0</span>    <span class="hljs-literal">False</span><span class="hljs-number">1</span>     <span class="hljs-literal">True</span><span class="hljs-number">2</span>    <span class="hljs-literal">False</span><span class="hljs-number">3</span>     <span class="hljs-literal">True</span>dtype: <span class="hljs-built_in">bool</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.notnull()<span class="hljs-number">0</span>     <span class="hljs-literal">True</span><span class="hljs-number">1</span>    <span class="hljs-literal">False</span><span class="hljs-number">2</span>     <span class="hljs-literal">True</span><span class="hljs-number">3</span>    <span class="hljs-literal">False</span>dtype: <span class="hljs-built_in">bool</span></code></pre><h3><span id="02x03-dropna-shan-chu-que-shi-zhi"><font color="#4876FF">【02x03】dropna() 删除缺失值</font></span></h3><p><code>dropna()</code> 方法用于返回一个删除了缺失值的新 Series 或 DataFrame 对象。</p><p>在 Series 对象当中，<code>dropna()</code> 方法的语法如下（其他参数用法可参考在 DataFrame 中的应用）：</p><p><code>Series.dropna(self, axis=0, inplace=False, how=None)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.dropna.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.dropna.html</a></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, np.nan, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-literal">None</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>        <span class="hljs-number">1</span><span class="hljs-number">1</span>      NaN<span class="hljs-number">2</span>    hello<span class="hljs-number">3</span>     <span class="hljs-literal">None</span>dtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.dropna()<span class="hljs-number">0</span>        <span class="hljs-number">1</span><span class="hljs-number">2</span>    hellodtype: <span class="hljs-built_in">object</span></code></pre><p>在 DataFrame 对象中，<code>dropna()</code> 方法的语法如下：</p><p><code>DataFrame.dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>确定是否删除包含缺失值的行或列<br><code>0</code> 或 <code>'index'</code>：删除包含缺失值的行。<code>1</code> 或 <code>'columns'</code>：删除包含缺失值的列</td></tr><tr><td>how</td><td><code>'any'</code>：如果存在任何NA值，则删除该行或列。<code>'all'</code>：如果所有值都是NA，则删除该行或列</td></tr><tr><td>thresh</td><td>设置行或列中<strong>非缺失值</strong>的最小数量</td></tr></tbody></table><p>不传递任何参数，将会删除任何包含缺失值的整行数据：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1</span>, np.nan, <span class="hljs-number">2</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>], [np.nan, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>obj     <span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">2</span><span class="hljs-number">0</span>  <span class="hljs-number">1.0</span>  NaN  <span class="hljs-number">2</span><span class="hljs-number">1</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5</span><span class="hljs-number">2</span>  NaN  <span class="hljs-number">4.0</span>  <span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.dropna()     <span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">2</span><span class="hljs-number">1</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5</span></code></pre><p>指定 axis 参数，删除包含缺失值的行或列：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1</span>, np.nan, <span class="hljs-number">2</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>], [np.nan, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>obj     <span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">2</span><span class="hljs-number">0</span>  <span class="hljs-number">1.0</span>  NaN  <span class="hljs-number">2</span><span class="hljs-number">1</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5</span><span class="hljs-number">2</span>  NaN  <span class="hljs-number">4.0</span>  <span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.dropna(axis=<span class="hljs-string">&#x27;columns&#x27;</span>)   <span class="hljs-number">2</span><span class="hljs-number">0</span>  <span class="hljs-number">2</span><span class="hljs-number">1</span>  <span class="hljs-number">5</span><span class="hljs-number">2</span>  <span class="hljs-number">6</span></code></pre><p>指定 how 参数，<code>'any'</code>：如果存在任何NA值，则删除该行或列。<code>'all'</code>：如果所有值都是NA，则删除该行或列：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1</span>, np.nan, <span class="hljs-number">2</span>, np.nan], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, np.nan], [np.nan, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, np.nan]])<span class="hljs-meta">&gt;&gt;&gt; </span>obj     <span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">2</span>   <span class="hljs-number">3</span><span class="hljs-number">0</span>  <span class="hljs-number">1.0</span>  NaN  <span class="hljs-number">2</span> NaN<span class="hljs-number">1</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5</span> NaN<span class="hljs-number">2</span>  NaN  <span class="hljs-number">4.0</span>  <span class="hljs-number">6</span> NaN<span class="hljs-meta">&gt;&gt;&gt; </span>obj.dropna(axis=<span class="hljs-string">&#x27;columns&#x27;</span>, how=<span class="hljs-string">&#x27;all&#x27;</span>)     <span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">2</span><span class="hljs-number">0</span>  <span class="hljs-number">1.0</span>  NaN  <span class="hljs-number">2</span><span class="hljs-number">1</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5</span><span class="hljs-number">2</span>  NaN  <span class="hljs-number">4.0</span>  <span class="hljs-number">6</span></code></pre><p>指定 thresh 参数，设置行或列中<font color="#FF0000"><strong>非缺失值</strong></font>的最小数量，以下示例中，第一行和第三行只有两个非缺失值，所以会被删除：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1</span>, np.nan, <span class="hljs-number">2</span>, np.nan], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, np.nan], [np.nan, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, np.nan]])<span class="hljs-meta">&gt;&gt;&gt; </span>obj     <span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">2</span>   <span class="hljs-number">3</span><span class="hljs-number">0</span>  <span class="hljs-number">1.0</span>  NaN  <span class="hljs-number">2</span> NaN<span class="hljs-number">1</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5</span> NaN<span class="hljs-number">2</span>  NaN  <span class="hljs-number">4.0</span>  <span class="hljs-number">6</span> NaN&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.dropna(axis=<span class="hljs-string">&#x27;rows&#x27;</span>, thresh=<span class="hljs-number">3</span>)     <span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">2</span>   <span class="hljs-number">3</span><span class="hljs-number">1</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5</span> NaN</code></pre><h3><span id="02x04-fillna-tian-chong-que-shi-zhi"><font color="#4876FF">【02x04】fillna() 填充缺失值</font></span></h3><p><code>fillna()</code> 方法可以将缺失值替换成有效的数值。</p><p>在 Series 对象中，<code>fillna()</code> 方法的语法如下：</p><p><code>Series.fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.fillna.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.fillna.html</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>用于填充的值（例如 0），或者是一个 dict / Series / DataFrame 值<br>指定要用于每个 index（对于 Series）或column（对于 DataFrame）的值<br>不在dict / Series / DataFrame中的值将不被填充。此值不能是列表</td></tr><tr><td>method</td><td>填充方法：<code>None</code><br><code>‘pad’</code> / <code>‘ffill’</code>：将上一个有效观测值向前传播到下一个有效观测值<br><code>‘backfill’</code> / <code>‘bfill’</code>：使用下一个有效观察值来填补空白</td></tr><tr><td>axis</td><td><code>0</code> or <code>‘index’</code>，要填充缺失值的轴</td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, np.nan, <span class="hljs-number">2</span>, <span class="hljs-literal">None</span>, <span class="hljs-number">3</span>], index=<span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;abcde&#x27;</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obja    <span class="hljs-number">1.0</span>b    NaNc    <span class="hljs-number">2.0</span>d    NaNe    <span class="hljs-number">3.0</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.fillna(<span class="hljs-number">0</span>)a    <span class="hljs-number">1.0</span>b    <span class="hljs-number">0.0</span>c    <span class="hljs-number">2.0</span>d    <span class="hljs-number">0.0</span>e    <span class="hljs-number">3.0</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.fillna(method=<span class="hljs-string">&#x27;ffill&#x27;</span>)a    <span class="hljs-number">1.0</span>b    <span class="hljs-number">1.0</span>c    <span class="hljs-number">2.0</span>d    <span class="hljs-number">2.0</span>e    <span class="hljs-number">3.0</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.fillna(method=<span class="hljs-string">&#x27;bfill&#x27;</span>)a    <span class="hljs-number">1.0</span>b    <span class="hljs-number">2.0</span>c    <span class="hljs-number">2.0</span>d    <span class="hljs-number">3.0</span>e    <span class="hljs-number">3.0</span>dtype: float64</code></pre><p>在 DataFrame 对象中，<code>fillna()</code> 方法的语法如下：</p><p><code>DataFrame.fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>用于填充的值（例如 0），或者是一个 dict / Series / DataFrame 值<br>指定要用于每个 index（对于 Series）或column（对于 DataFrame）的值<br>不在dict / Series / DataFrame中的值将不被填充。此值不能是列表</td></tr><tr><td>method</td><td>填充方法：<code>None</code><br><code>‘pad’</code> / <code>‘ffill’</code>：将上一个有效观测值向前传播到下一个有效观测值<br><code>‘backfill’</code> / <code>‘bfill’</code>：使用下一个有效观察值来填补空白</td></tr><tr><td>axis</td><td><code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，要填充缺失值的轴</td></tr></tbody></table><p>在 DataFrame 对象中的用法和在 Series 对象中的用法大同小异，只不过 axis 参数多了一个选择：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1</span>, np.nan, <span class="hljs-number">2</span>, np.nan], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, np.nan], [np.nan, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, np.nan]])<span class="hljs-meta">&gt;&gt;&gt; </span>obj     <span class="hljs-number">0</span>    <span class="hljs-number">1</span>  <span class="hljs-number">2</span>   <span class="hljs-number">3</span><span class="hljs-number">0</span>  <span class="hljs-number">1.0</span>  NaN  <span class="hljs-number">2</span> NaN<span class="hljs-number">1</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5</span> NaN<span class="hljs-number">2</span>  NaN  <span class="hljs-number">4.0</span>  <span class="hljs-number">6</span> NaN<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.fillna(method=<span class="hljs-string">&#x27;ffill&#x27;</span>, axis=<span class="hljs-number">1</span>)     <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span><span class="hljs-number">0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span><span class="hljs-number">1</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">5.0</span>  <span class="hljs-number">5.0</span><span class="hljs-number">2</span>  NaN  <span class="hljs-number">4.0</span>  <span class="hljs-number">6.0</span>  <span class="hljs-number">6.0</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106743778</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</title>
      <link href="/article/026/"/>
      <url>/article/026/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1-index-suo-yin-dui-xiang-font"><font color="#FF0000">【1】Index 索引对象</font></a></li><li><a href="#font-color-ff0000-2-pandas-yi-ban-suo-yin-font"><font color="#FF0000">【2】Pandas 一般索引</font></a><ul><li><a href="#font-color-4876ff-2-1-series-suo-yin-font"><font color="#4876FF">【2.1】Series 索引</font></a><ul><li><a href="#font-color-ffa500-2-1-1-head-tail-font"><font color="#FFA500">【2.1.1】head() / tail()</font></a></li><li><a href="#font-color-ffa500-2-1-2-xing-suo-yin-font"><font color="#FFA500">【2.1.2】行索引</font></a></li><li><a href="#font-color-ffa500-2-1-3-qie-pian-suo-yin-font"><font color="#FFA500">【2.1.3】切片索引</font></a></li><li><a href="#font-color-ffa500-2-1-4-hua-shi-suo-yin-font"><font color="#FFA500">【2.1.4】花式索引</font></a></li><li><a href="#font-color-ffa500-2-1-5-bu-er-suo-yin-font"><font color="#FFA500">【2.1.5】布尔索引</font></a></li></ul></li><li><a href="#font-color-4876ff-2-2-dataframe-suo-yin-font"><font color="#4876FF">【2.2】DataFrame 索引</font></a><ul><li><a href="#font-color-ffa500-2-2-1-head-tail-font"><font color="#FFA500">【2.2.1】head() / tail()</font></a></li><li><a href="#font-color-ffa500-2-2-2-lie-suo-yin-font"><font color="#FFA500">【2.2.2】列索引</font></a></li><li><a href="#font-color-ffa500-2-2-3-qie-pian-suo-yin-font"><font color="#FFA500">【2.2.3】切片索引</font></a></li><li><a href="#font-color-ffa500-2-2-4-hua-shi-suo-yin-font"><font color="#FFA500">【2.2.4】花式索引</font></a></li><li><a href="#font-color-ffa500-2-2-5-bu-er-suo-yin-font"><font color="#FFA500">【2.2.5】布尔索引</font></a></li></ul></li></ul></li><li><a href="#font-color-ff0000-3-suo-yin-qi-loc-he-iloc-font"><font color="#FF0000">【3】索引器：loc 和 iloc</font></a><ul><li><a href="#font-color-4876ff-3-1-loc-biao-qian-suo-yin-font"><font color="#4876FF">【3.1】loc 标签索引</font></a><ul><li><a href="#font-color-ffa500-3-1-1-series-loc-font"><font color="#FFA500">【3.1.1】Series.loc</font></a></li><li><a href="#font-color-ffa500-3-1-2-dataframe-loc-font"><font color="#FFA500">【3.1.2】DataFrame.loc</font></a></li></ul></li><li><a href="#font-color-4876ff-3-2-iloc-wei-zhi-suo-yin-font"><font color="#4876FF">【3.2】iloc 位置索引</font></a><ul><li><a href="#font-color-ffa500-3-2-1-series-iloc-font"><font color="#FFA500">【3.2.1】Series.iloc</font></a></li><li><a href="#font-color-ffa500-3-2-2-dataframe-iloc-font"><font color="#FFA500">【3.2.2】DataFrame.iloc</font></a></li></ul></li></ul></li><li><a href="#font-color-ff0000-4-pandas-chong-xin-suo-yin-font"><font color="#FF0000">【4】Pandas 重新索引</font></a></li></ul><!-- tocstop --><hr><p>Pandas 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/025/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itbob.cn/article/026/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itbob.cn/article/027/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itbob.cn/article/028/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itbob.cn/article/029/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itbob.cn/article/030/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itbob.cn/article/031/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itbob.cn/article/032/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itbob.cn/article/033/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itbob.cn/article/034/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106698307</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h1><span id="1-index-suo-yin-dui-xiang"><font color="#FF0000">【1】Index 索引对象</font></span></h1><p>Series 和 DataFrame 中的索引都是 Index 对象，为了保证数据的安全，索引对象是不可变的，如果尝试更改索引就会报错；常见的 Index 种类有：索引（Index），整数索引（Int64Index），层级索引（MultiIndex），时间戳类型（DatetimeIndex）。</p><p>一下代码演示了 Index 索引对象和其不可变的性质：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj.indexIndex([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(obj.index)&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">indexes</span>.<span class="hljs-title">base</span>.<span class="hljs-title">Index</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">obj</span>.<span class="hljs-title">index</span>[0] = &#x27;<span class="hljs-title">e</span>&#x27;</span><span class="hljs-class"><span class="hljs-title">Traceback</span> (<span class="hljs-params">most recent call last</span>):</span>  File <span class="hljs-string">&quot;&lt;pyshell#28&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;    obj.index[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;e&#x27;</span>  File <span class="hljs-string">&quot;C:\Users\...\base.py&quot;</span>, line <span class="hljs-number">3909</span>, <span class="hljs-keyword">in</span> __setitem__    <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;Index does not support mutable operations&quot;</span>)TypeError: Index does <span class="hljs-keyword">not</span> support mutable operations</code></pre><table><tr><td bgcolor="#FFA500"><font size="5" color="#fff">index 索引对象常用属性</font></td></tr></table><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.html">https://pandas.pydata.org/docs/reference/api/pandas.Index.html</a></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>T</td><td>转置</td></tr><tr><td>array</td><td>index 的数组形式，常见<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.array.html">官方文档</a></td></tr><tr><td>dtype</td><td>返回基础数据的 dtype 对象</td></tr><tr><td>hasnans</td><td>是否有 NaN（缺失值）</td></tr><tr><td>inferred_type</td><td>返回一个字符串，表示 index 的类型</td></tr><tr><td>is_monotonic</td><td>判断 index 是否是递增的</td></tr><tr><td>is_monotonic_decreasing</td><td>判断 index 是否单调递减</td></tr><tr><td>is_monotonic_increasing</td><td>判断 index 是否单调递增</td></tr><tr><td>is_unique</td><td>index 是否没有重复值</td></tr><tr><td>nbytes</td><td>返回 index 中的字节数</td></tr><tr><td>ndim</td><td>index 的维度</td></tr><tr><td>nlevels</td><td>Number of levels.</td></tr><tr><td>shape</td><td>返回一个元组，表示 index 的形状</td></tr><tr><td>size</td><td>index 的大小</td></tr><tr><td>values</td><td>返回 index 中的值 / 数组</td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj.indexIndex([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.array&lt;PandasArray&gt;[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]Length: <span class="hljs-number">4</span>, dtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.dtypedtype(<span class="hljs-string">&#x27;O&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.hasnans<span class="hljs-literal">False</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.inferred_type<span class="hljs-string">&#x27;string&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.is_monotonic<span class="hljs-literal">True</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.is_monotonic_decreasing<span class="hljs-literal">False</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.is_monotonic_increasing<span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.is_unique<span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.nbytes<span class="hljs-number">16</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.ndim<span class="hljs-number">1</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.nlevels<span class="hljs-number">1</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.shape(<span class="hljs-number">4</span>,)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.size<span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.valuesarray([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], dtype=<span class="hljs-built_in">object</span>)</code></pre><table><tr><td bgcolor="#FFA500"><font size="5" color="#fff">index 索引对象常用方法</font></td></tr></table><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.html">https://pandas.pydata.org/docs/reference/api/pandas.Index.html</a></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>all(self, *args, **kwargs)</td><td>判断所有元素是否为真，有 0 会被视为 False</td></tr><tr><td>any(self, *args, **kwargs)</td><td>判断是否至少有一个元素为真，均为 0 会被视为 False</td></tr><tr><td>append(self, other)</td><td>连接另一个 index，产生一个新的 index</td></tr><tr><td>argmax(self[, axis, skipna])</td><td>返回 index 中最大值的索引值</td></tr><tr><td>argmin(self[, axis, skipna])</td><td>返回 index 中最小值的索引值</td></tr><tr><td>argsort(self, *args, **kwargs)</td><td>对 index 从小到大排序，返回排序后的元素在原 index 中的索引值</td></tr><tr><td>delete(self, loc)</td><td>删除指定索引位置的元素，返回删除后的新 index</td></tr><tr><td>difference(self, other[, sort])</td><td>在第一个 index 中删除第二个 index 中的元素，即差集</td></tr><tr><td>drop(self, labels[, errors])</td><td>在原 index 中删除传入的值</td></tr><tr><td>drop_duplicates(self[, keep])</td><td>删除重复值，keep 参数可选值如下：<br><code>‘first’</code>：保留第一次出现的重复项；<br><code>‘last’</code>：保留最后一次出现的重复项；<br><code>False</code>：不保留重复项</td></tr><tr><td>duplicated(self[, keep])</td><td>判断是否为重复值，keep 参数可选值如下：<br><code>‘first’</code>：第一次重复的为 False，其他为 True；<br><code>‘last’</code>：最后一次重复的为 False，其他为 True；<br><code>False</code>：所有重复的均为 True</td></tr><tr><td>dropna(self[, how])</td><td>删除缺失值，即 NaN</td></tr><tr><td>fillna(self[, value, downcast])</td><td>用指定值填充缺失值，即 NaN</td></tr><tr><td>equals(self, other)</td><td>判断两个  index 是否相同</td></tr><tr><td>insert(self, loc, item)</td><td>将元素插入到指定索引处，返回新的 index</td></tr><tr><td>intersection(self, other[, sort])</td><td>返回两个 index 的交集</td></tr><tr><td>isna(self)</td><td>检测 index 元素是否为缺失值，即 NaN</td></tr><tr><td>isnull(self)</td><td>检测 index 元素是否为缺失值，即 NaN</td></tr><tr><td>max(self[, axis, skipna])</td><td>返回 index 的最大值</td></tr><tr><td>min(self[, axis, skipna])</td><td>返回 index 的最小值</td></tr><tr><td>union(self, other[, sort])</td><td>返回两个 index 的并集</td></tr><tr><td>unique(self[, level])</td><td>返回 index 中的唯一值，相当于去除重复值</td></tr></tbody></table><ul><li><code>all(self, *args, **kwargs)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.all.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).<span class="hljs-built_in">all</span>()<span class="hljs-literal">True</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]).<span class="hljs-built_in">all</span>()<span class="hljs-literal">False</span></code></pre><ul><li><code>any(self, *args, **kwargs)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.any.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]).<span class="hljs-built_in">any</span>()<span class="hljs-literal">True</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]).<span class="hljs-built_in">any</span>()<span class="hljs-literal">False</span></code></pre><ul><li><code>append(self, other)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.append.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]).append(pd.Index([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))Index([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)</code></pre><ul><li><code>argmax(self[, axis, skipna])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.argmax.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>]).argmax()<span class="hljs-number">3</span></code></pre><ul><li><code>argmin(self[, axis, skipna])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.argmin.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>]).argmin()<span class="hljs-number">4</span></code></pre><ul><li><code>argsort(self, *args, **kwargs)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.argsort.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>]).argsort()array([<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>], dtype=int32)</code></pre><ul><li><code>delete(self, loc)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.delete.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>]).delete(<span class="hljs-number">0</span>)Int64Index([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>], dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)</code></pre><ul><li><code>difference(self, other[, sort])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.difference.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx1 = pd.Index([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx2 = pd.Index([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx1.difference(idx2)Int64Index([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>idx1.difference(idx2, sort=<span class="hljs-literal">False</span>)Int64Index([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>], dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)</code></pre><ul><li><code>drop(self, labels[, errors])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.drop.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>]).drop([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>])Int64Index([<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>], dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)</code></pre><ul><li><code>drop_duplicates(self[, keep])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.drop_duplicates.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx = pd.Index([<span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;cow&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;beetle&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;hippo&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx.drop_duplicates(keep=<span class="hljs-string">&#x27;first&#x27;</span>)Index([<span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;cow&#x27;</span>, <span class="hljs-string">&#x27;beetle&#x27;</span>, <span class="hljs-string">&#x27;hippo&#x27;</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>idx.drop_duplicates(keep=<span class="hljs-string">&#x27;last&#x27;</span>)Index([<span class="hljs-string">&#x27;cow&#x27;</span>, <span class="hljs-string">&#x27;beetle&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;hippo&#x27;</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>idx.drop_duplicates(keep=<span class="hljs-literal">False</span>)Index([<span class="hljs-string">&#x27;cow&#x27;</span>, <span class="hljs-string">&#x27;beetle&#x27;</span>, <span class="hljs-string">&#x27;hippo&#x27;</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)</code></pre><ul><li>duplicated(self[, keep]) 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.duplicated.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx = pd.Index([<span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;cow&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>, <span class="hljs-string">&#x27;beetle&#x27;</span>, <span class="hljs-string">&#x27;lama&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx.duplicated()array([<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx.duplicated(keep=<span class="hljs-string">&#x27;first&#x27;</span>)array([<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx.duplicated(keep=<span class="hljs-string">&#x27;last&#x27;</span>)array([ <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx.duplicated(keep=<span class="hljs-literal">False</span>)array([ <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>])</code></pre><ul><li><code>dropna(self[, how])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.dropna.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, np.NaN, <span class="hljs-number">6</span>, np.NaN, np.NaN]).dropna()Float64Index([<span class="hljs-number">2.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>], dtype=<span class="hljs-string">&#x27;float64&#x27;</span>)</code></pre><ul><li><code>fillna(self[, value, downcast])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.fillna.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, np.NaN, <span class="hljs-number">6</span>, np.NaN, np.NaN]).fillna(<span class="hljs-number">5</span>)Float64Index([<span class="hljs-number">2.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">5.0</span>], dtype=<span class="hljs-string">&#x27;float64&#x27;</span>)</code></pre><ul><li><code>equals(self, other)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.equals.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx1 = pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx2 = pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx1.equals(idx2)<span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>idx1 = pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx2 = pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx1.equals(idx2)<span class="hljs-literal">False</span></code></pre><ul><li><code>intersection(self, other[, sort])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.intersection.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx1 = pd.Index([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx2 = pd.Index([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx1.intersection(idx2)Int64Index([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)</code></pre><ul><li><code>insert(self, loc, item)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.insert.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>]).insert(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;A&#x27;</span>)Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)</code></pre><ul><li><code>isna(self)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.isna.html">官方文档</a>】、<code>isnull(self)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.isnull.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, np.NaN, <span class="hljs-number">6</span>, np.NaN, np.NaN]).isna()array([<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, np.NaN, <span class="hljs-number">6</span>, np.NaN, np.NaN]).isnull()array([<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>])</code></pre><ul><li><code>max(self[, axis, skipna])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.max.html">官方文档</a>】、<code>min(self[, axis, skipna])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.min.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>]).<span class="hljs-built_in">max</span>()<span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>]).<span class="hljs-built_in">min</span>()<span class="hljs-number">1</span></code></pre><ul><li><code>union(self, other[, sort])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.union.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>idx1 = pd.Index([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx2 = pd.Index([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>idx1.union(idx2)Int64Index([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)</code></pre><ul><li><code>unique(self[, level])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.unique.html">官方文档</a>】</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>pd.Index([<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>]).unique()Int64Index([<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>], dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)</code></pre><h1><span id="2-pandas-yi-ban-suo-yin"><font color="#FF0000">【2】Pandas 一般索引</font></span></h1><p>由于在 Pandas 中，由于有一些更高级的索引操作，比如重新索引，层级索引等，因此将一般的切片索引、花式索引、布尔索引等归纳为一般索引。</p><h2><span id="2-1-series-suo-yin"><font color="#4876FF">【2.1】Series 索引</font></span></h2><h3><span id="2-1-1-head-tail"><font color="#FFA500">【2.1.1】head() / tail()</font></span></h3><p><code>Series.head()</code> 和 <code>Series.tail()</code> 方法可以获取的前五行和后五行数据，如果向 head() / tail() 里面传入参数，则会获取指定行：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="hljs-number">8</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>   -<span class="hljs-number">0.643437</span><span class="hljs-number">1</span>   -<span class="hljs-number">0.365652</span><span class="hljs-number">2</span>   -<span class="hljs-number">0.966554</span><span class="hljs-number">3</span>   -<span class="hljs-number">0.036127</span><span class="hljs-number">4</span>    <span class="hljs-number">1.046095</span><span class="hljs-number">5</span>   -<span class="hljs-number">2.048362</span><span class="hljs-number">6</span>   -<span class="hljs-number">1.865551</span><span class="hljs-number">7</span>    <span class="hljs-number">1.344728</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.head()<span class="hljs-number">0</span>   -<span class="hljs-number">0.643437</span><span class="hljs-number">1</span>   -<span class="hljs-number">0.365652</span><span class="hljs-number">2</span>   -<span class="hljs-number">0.966554</span><span class="hljs-number">3</span>   -<span class="hljs-number">0.036127</span><span class="hljs-number">4</span>    <span class="hljs-number">1.046095</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.head(<span class="hljs-number">3</span>)<span class="hljs-number">0</span>   -<span class="hljs-number">0.643437</span><span class="hljs-number">1</span>   -<span class="hljs-number">0.365652</span><span class="hljs-number">2</span>   -<span class="hljs-number">0.966554</span>dtype: float64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.tail()<span class="hljs-number">3</span>    <span class="hljs-number">1.221221</span><span class="hljs-number">4</span>   -<span class="hljs-number">1.373496</span><span class="hljs-number">5</span>    <span class="hljs-number">1.032843</span><span class="hljs-number">6</span>    <span class="hljs-number">0.029734</span><span class="hljs-number">7</span>   -<span class="hljs-number">1.861485</span>dtype: float64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.tail(<span class="hljs-number">3</span>)<span class="hljs-number">5</span>    <span class="hljs-number">1.032843</span><span class="hljs-number">6</span>    <span class="hljs-number">0.029734</span><span class="hljs-number">7</span>   -<span class="hljs-number">1.861485</span>dtype: float64</code></pre><h3><span id="2-1-2-xing-suo-yin"><font color="#FFA500">【2.1.2】行索引</font></span></h3><p>Pandas 中可以按照位置进行索引，也可以按照索引名（index）进行索引，也可以用 Python 字典的表达式和方法来获取值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obja    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;c&#x27;</span>]-<span class="hljs-number">8</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-number">2</span>]-<span class="hljs-number">8</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-keyword">in</span> obj<span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.keys()Index([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(obj.items())[(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&#x27;c&#x27;</span>, -<span class="hljs-number">8</span>), (<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">2</span>)]</code></pre><h3><span id="2-1-3-qie-pian-suo-yin"><font color="#FFA500">【2.1.3】切片索引</font></span></h3><p>切片的方法有两种：按位置切片和按索引名（index）切片，注意：按位置切片时，<font color="#FF0000"><strong>不包含</strong></font>终止索引；按索引名（index）切片时，<font color="#FF0000"><strong>包含</strong></font>终止索引。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obja    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>dtype: int64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>dtype: int64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>:<span class="hljs-number">2</span>]a    <span class="hljs-number">1</span>c   -<span class="hljs-number">8</span>dtype: int64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-string">&#x27;d&#x27;</span>]b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>dtype: int64</code></pre><h3><span id="2-1-4-hua-shi-suo-yin"><font color="#FFA500">【2.1.4】花式索引</font></span></h3><p>所谓的花式索引，就是间隔索引、不连续的索引，传递一个由索引名（index）或者位置参数组成的<font color="#FF0000"><strong>列表</strong></font>来一次性获得多个元素：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obja    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]]a    <span class="hljs-number">1</span>c   -<span class="hljs-number">8</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]]a    <span class="hljs-number">1</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>dtype: int64</code></pre><h3><span id="2-1-5-bu-er-suo-yin"><font color="#FFA500">【2.1.5】布尔索引</font></span></h3><p>可以通过一个布尔数组来索引目标数组，即通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">3</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obja    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>e   -<span class="hljs-number">3</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[obj &gt; <span class="hljs-number">0</span>]a    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>d    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj &gt; <span class="hljs-number">0</span>a     <span class="hljs-literal">True</span>b     <span class="hljs-literal">True</span>c    <span class="hljs-literal">False</span>d     <span class="hljs-literal">True</span>e    <span class="hljs-literal">False</span>dtype: <span class="hljs-built_in">bool</span></code></pre><h2><span id="2-2-dataframe-suo-yin"><font color="#4876FF">【2.2】DataFrame 索引</font></span></h2><h3><span id="2-2-1-head-tail"><font color="#FFA500">【2.2.1】head() / tail()</font></span></h3><p>和 Series 一样，<code>DataFrame.head()</code> 和 <code>DataFrame.tail()</code> 方法同样可以获取 DataFrame 的前五行和后五行数据，如果向 head() / tail() 里面传入参数，则会获取指定行：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randn(<span class="hljs-number">8</span>,<span class="hljs-number">4</span>), columns = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj          a         b         c         d<span class="hljs-number">0</span> -<span class="hljs-number">1.399390</span>  <span class="hljs-number">0.521596</span> -<span class="hljs-number">0.869613</span>  <span class="hljs-number">0.506621</span><span class="hljs-number">1</span> -<span class="hljs-number">0.748562</span> -<span class="hljs-number">0.364952</span>  <span class="hljs-number">0.188399</span> -<span class="hljs-number">1.402566</span><span class="hljs-number">2</span>  <span class="hljs-number">1.378776</span> -<span class="hljs-number">1.476480</span>  <span class="hljs-number">0.361635</span>  <span class="hljs-number">0.451134</span><span class="hljs-number">3</span> -<span class="hljs-number">0.206405</span> -<span class="hljs-number">1.188609</span>  <span class="hljs-number">3.002599</span>  <span class="hljs-number">0.563650</span><span class="hljs-number">4</span>  <span class="hljs-number">0.993289</span>  <span class="hljs-number">1.133748</span>  <span class="hljs-number">1.177549</span> -<span class="hljs-number">2.562286</span><span class="hljs-number">5</span> -<span class="hljs-number">0.482157</span>  <span class="hljs-number">1.069293</span>  <span class="hljs-number">1.143983</span> -<span class="hljs-number">1.303079</span><span class="hljs-number">6</span> -<span class="hljs-number">1.199154</span>  <span class="hljs-number">0.220360</span>  <span class="hljs-number">0.801838</span> -<span class="hljs-number">0.104533</span><span class="hljs-number">7</span> -<span class="hljs-number">1.359816</span> -<span class="hljs-number">2.092035</span>  <span class="hljs-number">2.003530</span> -<span class="hljs-number">0.151812</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.head()          a         b         c         d<span class="hljs-number">0</span> -<span class="hljs-number">1.399390</span>  <span class="hljs-number">0.521596</span> -<span class="hljs-number">0.869613</span>  <span class="hljs-number">0.506621</span><span class="hljs-number">1</span> -<span class="hljs-number">0.748562</span> -<span class="hljs-number">0.364952</span>  <span class="hljs-number">0.188399</span> -<span class="hljs-number">1.402566</span><span class="hljs-number">2</span>  <span class="hljs-number">1.378776</span> -<span class="hljs-number">1.476480</span>  <span class="hljs-number">0.361635</span>  <span class="hljs-number">0.451134</span><span class="hljs-number">3</span> -<span class="hljs-number">0.206405</span> -<span class="hljs-number">1.188609</span>  <span class="hljs-number">3.002599</span>  <span class="hljs-number">0.563650</span><span class="hljs-number">4</span>  <span class="hljs-number">0.993289</span>  <span class="hljs-number">1.133748</span>  <span class="hljs-number">1.177549</span> -<span class="hljs-number">2.562286</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.head(<span class="hljs-number">3</span>)          a         b         c         d<span class="hljs-number">0</span> -<span class="hljs-number">1.399390</span>  <span class="hljs-number">0.521596</span> -<span class="hljs-number">0.869613</span>  <span class="hljs-number">0.506621</span><span class="hljs-number">1</span> -<span class="hljs-number">0.748562</span> -<span class="hljs-number">0.364952</span>  <span class="hljs-number">0.188399</span> -<span class="hljs-number">1.402566</span><span class="hljs-number">2</span>  <span class="hljs-number">1.378776</span> -<span class="hljs-number">1.476480</span>  <span class="hljs-number">0.361635</span>  <span class="hljs-number">0.451134</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.tail()          a         b         c         d<span class="hljs-number">3</span> -<span class="hljs-number">0.206405</span> -<span class="hljs-number">1.188609</span>  <span class="hljs-number">3.002599</span>  <span class="hljs-number">0.563650</span><span class="hljs-number">4</span>  <span class="hljs-number">0.993289</span>  <span class="hljs-number">1.133748</span>  <span class="hljs-number">1.177549</span> -<span class="hljs-number">2.562286</span><span class="hljs-number">5</span> -<span class="hljs-number">0.482157</span>  <span class="hljs-number">1.069293</span>  <span class="hljs-number">1.143983</span> -<span class="hljs-number">1.303079</span><span class="hljs-number">6</span> -<span class="hljs-number">1.199154</span>  <span class="hljs-number">0.220360</span>  <span class="hljs-number">0.801838</span> -<span class="hljs-number">0.104533</span><span class="hljs-number">7</span> -<span class="hljs-number">1.359816</span> -<span class="hljs-number">2.092035</span>  <span class="hljs-number">2.003530</span> -<span class="hljs-number">0.151812</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.tail(<span class="hljs-number">3</span>)          a         b         c         d<span class="hljs-number">5</span> -<span class="hljs-number">0.482157</span>  <span class="hljs-number">1.069293</span>  <span class="hljs-number">1.143983</span> -<span class="hljs-number">1.303079</span><span class="hljs-number">6</span> -<span class="hljs-number">1.199154</span>  <span class="hljs-number">0.220360</span>  <span class="hljs-number">0.801838</span> -<span class="hljs-number">0.104533</span><span class="hljs-number">7</span> -<span class="hljs-number">1.359816</span> -<span class="hljs-number">2.092035</span>  <span class="hljs-number">2.003530</span> -<span class="hljs-number">0.151812</span></code></pre><h3><span id="2-2-2-lie-suo-yin"><font color="#FFA500">【2.2.2】列索引</font></span></h3><p>DataFrame 可以按照列标签（columns）来进行列索引：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randn(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>), columns = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj          a         b<span class="hljs-number">0</span> -<span class="hljs-number">1.198795</span>  <span class="hljs-number">0.928378</span><span class="hljs-number">1</span> -<span class="hljs-number">2.878230</span>  <span class="hljs-number">0.014650</span><span class="hljs-number">2</span>  <span class="hljs-number">2.267475</span>  <span class="hljs-number">0.370952</span><span class="hljs-number">3</span>  <span class="hljs-number">0.639340</span> -<span class="hljs-number">1.301041</span><span class="hljs-number">4</span> -<span class="hljs-number">1.953444</span>  <span class="hljs-number">0.148934</span><span class="hljs-number">5</span> -<span class="hljs-number">0.445225</span>  <span class="hljs-number">0.459632</span><span class="hljs-number">6</span>  <span class="hljs-number">0.097109</span> -<span class="hljs-number">2.592833</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;a&#x27;</span>]<span class="hljs-number">0</span>   -<span class="hljs-number">1.198795</span><span class="hljs-number">1</span>   -<span class="hljs-number">2.878230</span><span class="hljs-number">2</span>    <span class="hljs-number">2.267475</span><span class="hljs-number">3</span>    <span class="hljs-number">0.639340</span><span class="hljs-number">4</span>   -<span class="hljs-number">1.953444</span><span class="hljs-number">5</span>   -<span class="hljs-number">0.445225</span><span class="hljs-number">6</span>    <span class="hljs-number">0.097109</span>Name: a, dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[[<span class="hljs-string">&#x27;a&#x27;</span>]]          a<span class="hljs-number">0</span> -<span class="hljs-number">1.198795</span><span class="hljs-number">1</span> -<span class="hljs-number">2.878230</span><span class="hljs-number">2</span>  <span class="hljs-number">2.267475</span><span class="hljs-number">3</span>  <span class="hljs-number">0.639340</span><span class="hljs-number">4</span> -<span class="hljs-number">1.953444</span><span class="hljs-number">5</span> -<span class="hljs-number">0.445225</span><span class="hljs-number">6</span>  <span class="hljs-number">0.097109</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(obj[<span class="hljs-string">&#x27;a&#x27;</span>])&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">series</span>.<span class="hljs-title">Series</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">type</span>(<span class="hljs-params">obj[[<span class="hljs-string">&#x27;a&#x27;</span>]]</span>)</span><span class="hljs-class">&lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>&#x27;&gt;</span></code></pre><h3><span id="2-2-3-qie-pian-suo-yin"><font color="#FFA500">【2.2.3】切片索引</font></span></h3><p>DataFrame 中的切片索引是针对行来操作的，切片的方法有两种：按位置切片和按索引名（index）切片，注意：按位置切片时，不包含终止索引；按索引名（index）切片时，包含终止索引。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = np.random.randn(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>index = [<span class="hljs-string">&#x27;I1&#x27;</span>, <span class="hljs-string">&#x27;I2&#x27;</span>, <span class="hljs-string">&#x27;I3&#x27;</span>, <span class="hljs-string">&#x27;I4&#x27;</span>, <span class="hljs-string">&#x27;I5&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>columns = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index, columns)<span class="hljs-meta">&gt;&gt;&gt; </span>obj           a         b         c         dI1  <span class="hljs-number">0.828676</span> -<span class="hljs-number">1.663337</span>  <span class="hljs-number">1.753632</span>  <span class="hljs-number">1.432487</span>I2  <span class="hljs-number">0.368138</span>  <span class="hljs-number">0.222166</span>  <span class="hljs-number">0.902764</span> -<span class="hljs-number">1.436186</span>I3  <span class="hljs-number">2.285615</span> -<span class="hljs-number">2.415175</span> -<span class="hljs-number">1.344456</span> -<span class="hljs-number">0.502214</span>I4  <span class="hljs-number">3.224288</span> -<span class="hljs-number">0.500268</span>  <span class="hljs-number">1.293596</span> -<span class="hljs-number">1.235549</span>I5 -<span class="hljs-number">0.938833</span> -<span class="hljs-number">0.804433</span> -<span class="hljs-number">0.170047</span> -<span class="hljs-number">0.566766</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]           a         b         c         dI1  <span class="hljs-number">0.828676</span> -<span class="hljs-number">1.663337</span>  <span class="hljs-number">1.753632</span>  <span class="hljs-number">1.432487</span>I2  <span class="hljs-number">0.368138</span>  <span class="hljs-number">0.222166</span>  <span class="hljs-number">0.902764</span> -<span class="hljs-number">1.436186</span>I3  <span class="hljs-number">2.285615</span> -<span class="hljs-number">2.415175</span> -<span class="hljs-number">1.344456</span> -<span class="hljs-number">0.502214</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>]           a         b         c         dI1 -<span class="hljs-number">0.042168</span>  <span class="hljs-number">1.437354</span> -<span class="hljs-number">1.114545</span>  <span class="hljs-number">0.830790</span>I3  <span class="hljs-number">0.241506</span>  <span class="hljs-number">0.018984</span> -<span class="hljs-number">0.499151</span> -<span class="hljs-number">1.190143</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;I2&#x27;</span>:<span class="hljs-string">&#x27;I4&#x27;</span>]           a         b         c         dI2  <span class="hljs-number">0.368138</span>  <span class="hljs-number">0.222166</span>  <span class="hljs-number">0.902764</span> -<span class="hljs-number">1.436186</span>I3  <span class="hljs-number">2.285615</span> -<span class="hljs-number">2.415175</span> -<span class="hljs-number">1.344456</span> -<span class="hljs-number">0.502214</span>I4  <span class="hljs-number">3.224288</span> -<span class="hljs-number">0.500268</span>  <span class="hljs-number">1.293596</span> -<span class="hljs-number">1.235549</span></code></pre><h3><span id="2-2-4-hua-shi-suo-yin"><font color="#FFA500">【2.2.4】花式索引</font></span></h3><p>和 Series 一样，所谓的花式索引，就是间隔索引、不连续的索引，传递一个由列名（columns）组成的<font color="#FF0000"><strong>列表</strong></font>来一次性获得多列元素：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = np.random.randn(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>index = [<span class="hljs-string">&#x27;I1&#x27;</span>, <span class="hljs-string">&#x27;I2&#x27;</span>, <span class="hljs-string">&#x27;I3&#x27;</span>, <span class="hljs-string">&#x27;I4&#x27;</span>, <span class="hljs-string">&#x27;I5&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>columns = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index, columns)<span class="hljs-meta">&gt;&gt;&gt; </span>obj           a         b         c         dI1 -<span class="hljs-number">1.083223</span> -<span class="hljs-number">0.182874</span> -<span class="hljs-number">0.348460</span> -<span class="hljs-number">1.572120</span>I2 -<span class="hljs-number">0.205206</span> -<span class="hljs-number">0.251931</span>  <span class="hljs-number">1.180131</span>  <span class="hljs-number">0.847720</span>I3 -<span class="hljs-number">0.980379</span>  <span class="hljs-number">0.325553</span> -<span class="hljs-number">0.847566</span> -<span class="hljs-number">0.882343</span>I4 -<span class="hljs-number">0.638228</span> -<span class="hljs-number">0.282882</span> -<span class="hljs-number">0.624997</span> -<span class="hljs-number">0.245980</span>I5 -<span class="hljs-number">0.229769</span>  <span class="hljs-number">1.002930</span> -<span class="hljs-number">0.226715</span> -<span class="hljs-number">0.916591</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]]           a         dI1 -<span class="hljs-number">1.083223</span> -<span class="hljs-number">1.572120</span>I2 -<span class="hljs-number">0.205206</span>  <span class="hljs-number">0.847720</span>I3 -<span class="hljs-number">0.980379</span> -<span class="hljs-number">0.882343</span>I4 -<span class="hljs-number">0.638228</span> -<span class="hljs-number">0.245980</span>I5 -<span class="hljs-number">0.229769</span> -<span class="hljs-number">0.916591</span></code></pre><h3><span id="2-2-5-bu-er-suo-yin"><font color="#FFA500">【2.2.5】布尔索引</font></span></h3><p>可以通过一个布尔数组来索引目标数组，即通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = np.random.randn(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>index = [<span class="hljs-string">&#x27;I1&#x27;</span>, <span class="hljs-string">&#x27;I2&#x27;</span>, <span class="hljs-string">&#x27;I3&#x27;</span>, <span class="hljs-string">&#x27;I4&#x27;</span>, <span class="hljs-string">&#x27;I5&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>columns = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index, columns)<span class="hljs-meta">&gt;&gt;&gt; </span>obj           a         b         c         dI1 -<span class="hljs-number">0.602984</span> -<span class="hljs-number">0.135716</span>  <span class="hljs-number">0.999689</span> -<span class="hljs-number">0.339786</span>I2  <span class="hljs-number">0.911130</span> -<span class="hljs-number">0.092485</span> -<span class="hljs-number">0.914074</span> -<span class="hljs-number">0.279588</span>I3  <span class="hljs-number">0.849606</span> -<span class="hljs-number">0.420055</span> -<span class="hljs-number">1.240389</span> -<span class="hljs-number">0.179297</span>I4  <span class="hljs-number">0.249986</span> -<span class="hljs-number">1.250668</span>  <span class="hljs-number">0.329416</span> -<span class="hljs-number">1.105774</span>I5 -<span class="hljs-number">0.743816</span>  <span class="hljs-number">0.430647</span> -<span class="hljs-number">0.058126</span> -<span class="hljs-number">0.337319</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[obj &gt; <span class="hljs-number">0</span>]           a         b         c   dI1       NaN       NaN  <span class="hljs-number">0.999689</span> NaNI2  <span class="hljs-number">0.911130</span>       NaN       NaN NaNI3  <span class="hljs-number">0.849606</span>       NaN       NaN NaNI4  <span class="hljs-number">0.249986</span>       NaN  <span class="hljs-number">0.329416</span> NaNI5       NaN  <span class="hljs-number">0.430647</span>       NaN NaN<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj &gt; <span class="hljs-number">0</span>        a      b      c      dI1  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>   <span class="hljs-literal">True</span>  <span class="hljs-literal">False</span>I2   <span class="hljs-literal">True</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>I3   <span class="hljs-literal">True</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span>I4   <span class="hljs-literal">True</span>  <span class="hljs-literal">False</span>   <span class="hljs-literal">True</span>  <span class="hljs-literal">False</span>I5  <span class="hljs-literal">False</span>   <span class="hljs-literal">True</span>  <span class="hljs-literal">False</span>  <span class="hljs-literal">False</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106698307</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h1><span id="3-suo-yin-qi-loc-he-iloc"><font color="#FF0000">【3】索引器：loc 和 iloc</font></span></h1><p>loc 是标签索引、iloc 是位置索引，注意：在 Pandas1.0.0 之前还有 ix 方法（即可按标签也可按位置索引），在 Pandas1.0.0 之后已被移除。</p><h2><span id="3-1-loc-biao-qian-suo-yin"><font color="#4876FF">【3.1】loc 标签索引</font></span></h2><p>loc 标签索引，即根据 index 和 columns 来选择数据。</p><h3><span id="3-1-1-series-loc"><font color="#FFA500">【3.1.1】Series.loc</font></span></h3><p>在 Series 中，允许输入：</p><ul><li>单个标签，例如 <code>5</code> 或 <code>'a'</code>，（注意，<code>5</code> 是 index 的名称，而不是位置索引）；</li><li>标签列表或数组，例如 <code>['a', 'b', 'c']</code>；</li><li>带有标签的切片对象，例如 <code>'a':'f'</code>。</li></ul><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.loc.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.loc.html</a></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obja    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.loc[<span class="hljs-string">&#x27;a&#x27;</span>]<span class="hljs-number">1</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.loc[<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;c&#x27;</span>]a    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>dtype: int64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.loc[[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]]a    <span class="hljs-number">1</span>d    <span class="hljs-number">2</span>dtype: int64</code></pre><h3><span id="3-1-2-dataframe-loc"><font color="#FFA500">【3.1.2】DataFrame.loc</font></span></h3><p>在 DataFrame 中，第一个参数索引<font color="#FF0000"><strong>行</strong></font>，第二个参数是索引<font color="#FF0000"><strong>列</strong></font>，允许输入的格式和 Series 大同小异。</p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html</a></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], columns=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj   A  B  Ca  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>b  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>c  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.loc[<span class="hljs-string">&#x27;a&#x27;</span>]A    <span class="hljs-number">1</span>B    <span class="hljs-number">2</span>C    <span class="hljs-number">3</span>Name: a, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.loc[<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;c&#x27;</span>]   A  B  Ca  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>b  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>c  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.loc[[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]]   A  B  Ca  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>c  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.loc[<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>]<span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.loc[<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-string">&#x27;C&#x27;</span>]A    <span class="hljs-number">4</span>B    <span class="hljs-number">5</span>C    <span class="hljs-number">6</span>Name: b, dtype: int64</code></pre><h2><span id="3-2-iloc-wei-zhi-suo-yin"><font color="#4876FF">【3.2】iloc 位置索引</font></span></h2><p>作用和 loc 一样，不过是基于索引的编号来索引，即根据 index 和 columns 的位置编号来选择数据。</p><h3><span id="3-2-1-series-iloc"><font color="#FFA500">【3.2.1】Series.iloc</font></span></h3><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.iloc.html">https://pandas.pydata.org/docs/reference/api/pandas.Series.iloc.html</a></p><p>在 Series 中，允许输入：</p><ul><li>整数，例如 <code>5</code>；</li><li>整数列表或数组，例如 <code>[4, 3, 0]</code>；</li><li>具有整数的切片对象，例如 <code>1:7</code>。</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obja    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.iloc[<span class="hljs-number">1</span>]<span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.iloc[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]a    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.iloc[[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]]a    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>d    <span class="hljs-number">2</span>dtype: int64</code></pre><h3><span id="3-2-2-dataframe-iloc"><font color="#FFA500">【3.2.2】DataFrame.iloc</font></span></h3><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iloc.html">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iloc.html</a></p><p>在 DataFrame 中，第一个参数索引<font color="#FF0000"><strong>行</strong></font>，第二个参数是索引<font color="#FF0000"><strong>列</strong></font>，允许输入的格式和 Series 大同小异：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], columns=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj   A  B  Ca  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>b  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>c  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.iloc[<span class="hljs-number">1</span>]A    <span class="hljs-number">4</span>B    <span class="hljs-number">5</span>C    <span class="hljs-number">6</span>Name: b, dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.iloc[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]   A  B  Ca  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>b  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.iloc[[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]]   A  B  Ca  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>c  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.iloc[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.iloc[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>:<span class="hljs-number">2</span>]A    <span class="hljs-number">4</span>B    <span class="hljs-number">5</span>Name: b, dtype: int64</code></pre><h1><span id="4-pandas-chong-xin-suo-yin"><font color="#FF0000">【4】Pandas 重新索引</font></span></h1><p>Pandas 对象的一个重要方法是 reindex，其作用是创建一个新对象，它的数据符合新的索引。以 <code>DataFrame.reindex</code> 为例（Series 类似），基本语法如下：</p><p><code>DataFrame.reindex(self, labels=None, index=None, columns=None, axis=None, method=None, copy=True, level=None, fill_value=nan, limit=None, tolerance=None)</code></p><p>部分参数描述如下：（完整参数解释参见<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.reindex.html">官方文档</a>）</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>用作索引的新序列，既可以是 index 实例，也可以是其他序列型的 Python 数据结构</td></tr><tr><td>method</td><td>插值（填充）方式，取值如下：<br><code>None</code>：不填补空白；<br><code>pad / ffill</code>：将上一个有效的观测值向前传播到下一个有效的观测值；<br><code>backfill / bfill</code>：使用下一个有效观察值来填补空白；<br><code>nearest</code>：使用最近的有效观测值来填补空白。</td></tr><tr><td>fill_value</td><td>在重新索引的过程中，需要引入缺失值时使用的替代值</td></tr><tr><td>limit</td><td>前向或后向填充时的最大填充量</td></tr><tr><td>tolerance</td><td>向前或向后填充时，填充不准确匹配项的最大间距（绝对值距离）</td></tr><tr><td>level</td><td>在 Multilndex 的指定级别上匹配简单索引，否则选其子集</td></tr><tr><td>copy</td><td>默认为 True，无论如何都复制；如果为 False，则新旧相等就不复制</td></tr></tbody></table><p>reindex 将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">4.5</span>, <span class="hljs-number">7.2</span>, -<span class="hljs-number">5.3</span>, <span class="hljs-number">3.6</span>], index=[<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>objd    <span class="hljs-number">4.5</span>b    <span class="hljs-number">7.2</span>a   -<span class="hljs-number">5.3</span>c    <span class="hljs-number">3.6</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = obj.reindex([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2a   -<span class="hljs-number">5.3</span>b    <span class="hljs-number">7.2</span>c    <span class="hljs-number">3.6</span>d    <span class="hljs-number">4.5</span>e    NaNdtype: float64</code></pre><p>对于时间序列这样的有序数据，重新索引时可能需要做一些插值处理。method 选项即可达到此目的，例如，使用 ffill 可以实现前向值填充：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>], index=[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>      blue<span class="hljs-number">2</span>    purple<span class="hljs-number">4</span>    yellowdtype: <span class="hljs-built_in">object</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = obj.reindex(<span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>), method=<span class="hljs-string">&#x27;ffill&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj2<span class="hljs-number">0</span>      blue<span class="hljs-number">1</span>      blue<span class="hljs-number">2</span>    purple<span class="hljs-number">3</span>    purple<span class="hljs-number">4</span>    yellow<span class="hljs-number">5</span>    yellowdtype: <span class="hljs-built_in">object</span></code></pre><p>借助 DataFrame，reindex可以修改（行）索引和列。只传递一个序列时，会重新索引结果的行：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="hljs-number">9</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)), index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], columns=[<span class="hljs-string">&#x27;Ohio&#x27;</span>, <span class="hljs-string">&#x27;Texas&#x27;</span>, <span class="hljs-string">&#x27;California&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj   Ohio  Texas  Californiaa     <span class="hljs-number">0</span>      <span class="hljs-number">1</span>           <span class="hljs-number">2</span>c     <span class="hljs-number">3</span>      <span class="hljs-number">4</span>           <span class="hljs-number">5</span>d     <span class="hljs-number">6</span>      <span class="hljs-number">7</span>           <span class="hljs-number">8</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj2 = obj.reindex([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj2   Ohio  Texas  Californiaa   <span class="hljs-number">0.0</span>    <span class="hljs-number">1.0</span>         <span class="hljs-number">2.0</span>b   NaN    NaN         NaNc   <span class="hljs-number">3.0</span>    <span class="hljs-number">4.0</span>         <span class="hljs-number">5.0</span>d   <span class="hljs-number">6.0</span>    <span class="hljs-number">7.0</span>         <span class="hljs-number">8.0</span></code></pre><p>列可以用 columns 关键字重新索引：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="hljs-number">9</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)), index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], columns=[<span class="hljs-string">&#x27;Ohio&#x27;</span>, <span class="hljs-string">&#x27;Texas&#x27;</span>, <span class="hljs-string">&#x27;California&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj   Ohio  Texas  Californiaa     <span class="hljs-number">0</span>      <span class="hljs-number">1</span>           <span class="hljs-number">2</span>c     <span class="hljs-number">3</span>      <span class="hljs-number">4</span>           <span class="hljs-number">5</span>d     <span class="hljs-number">6</span>      <span class="hljs-number">7</span>           <span class="hljs-number">8</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>states = [<span class="hljs-string">&#x27;Texas&#x27;</span>, <span class="hljs-string">&#x27;Utah&#x27;</span>, <span class="hljs-string">&#x27;California&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>obj.reindex(columns=states)   Texas  Utah  Californiaa      <span class="hljs-number">1</span>   NaN           <span class="hljs-number">2</span>c      <span class="hljs-number">4</span>   NaN           <span class="hljs-number">5</span>d      <span class="hljs-number">7</span>   NaN           <span class="hljs-number">8</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106698307</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</title>
      <link href="/article/025/"/>
      <url>/article/025/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01x00-liao-jie-pandas-font"><font color="#FF0000">【01x00】了解 Pandas</font></a></li><li><a href="#font-color-ff0000-02x00-pandas-shu-ju-jie-gou-font"><font color="#FF0000">【02x00】Pandas 数据结构</font></a></li><li><a href="#font-color-ff0000-03x00-series-dui-xiang-font"><font color="#FF0000">【03x00】Series 对象</font></a><ul><li><a href="#font-color-4876ff-03x01-tong-guo-list-gou-jian-series-font"><font color="#4876FF">【03x01】通过 list 构建 Series</font></a></li><li><a href="#font-color-4876ff-03x02-tong-guo-dict-gou-jian-series-font"><font color="#4876FF">【03x02】通过 dict 构建 Series</font></a></li><li><a href="#font-color-4876ff-03x03-huo-qu-qi-shu-ju-he-suo-yin-font"><font color="#4876FF">【03x03】获取其数据和索引</font></a></li><li><a href="#font-color-4876ff-03x04-tong-guo-suo-yin-huo-qu-shu-ju-font"><font color="#4876FF">【03x04】通过索引获取数据</font></a></li><li><a href="#font-color-4876ff-03x05-shi-yong-han-shu-yun-suan-font"><font color="#4876FF">【03x05】使用函数运算</font></a></li><li><a href="#font-color-4876ff-03x06-name-shu-xing-font"><font color="##4876FF">【03x06】name 属性</font></a></li></ul></li><li><a href="#font-color-ff0000-04x00-dataframe-dui-xiang-font"><font color="#FF0000">【04x00】DataFrame 对象</font></a><ul><li><a href="#font-color-4876ff-03x01-tong-guo-ndarray-gou-jian-dataframe-font"><font color="#4876FF">【03x01】通过 ndarray 构建 DataFrame</font></a></li><li><a href="#font-color-4876ff-03x02-tong-guo-dict-gou-jian-dataframe-font"><font color="#4876FF">【03x02】通过 dict 构建 DataFrame</font></a></li><li><a href="#font-color-4876ff-03x03-huo-qu-qi-shu-ju-he-suo-yin-font-1"><font color="#4876FF">【03x03】获取其数据和索引</font></a></li><li><a href="#font-color-4876ff-03x04-tong-guo-suo-yin-huo-qu-shu-ju-font-1"><font color="#4876FF">【03x04】通过索引获取数据</font></a></li><li><a href="#font-color-4876ff-03x05-xiu-gai-lie-de-zhi-font"><font color="#4876FF">【03x05】修改列的值</font></a></li><li><a href="#font-color-4876ff-03x06-zeng-jia-shan-chu-lie-font"><font color="#4876FF">【03x06】增加 / 删除列</font></a></li><li><a href="#font-color-4876ff-03x07-name-shu-xing-font"><font color="##4876FF">【03x07】name 属性</font></a></li></ul></li></ul><!-- tocstop --><hr><p>Pandas 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/025/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itbob.cn/article/026/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itbob.cn/article/027/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itbob.cn/article/028/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itbob.cn/article/029/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itbob.cn/article/030/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itbob.cn/article/031/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itbob.cn/article/032/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itbob.cn/article/033/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itbob.cn/article/034/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106676693</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01x00-liao-jie-pandas"><font color="#FF0000">【01x00】了解 Pandas</font></span></h2><p><a href="https://pandas.pydata.org/">Pandas</a> 是 <a href="https://www.python.org/">Python</a> 的一个数据分析包，是基于 <a href="https://numpy.org/">NumPy</a> 构建的，最初由 <a href="https://www.aqr.com/">AQR Capital Management</a> 于 2008 年 4 月开发，并于 2009 年底开源出来，目前由专注于 <a href="https://www.python.org/">Python</a> 数据包开发的 <a href="https://pydata.org/">PyData</a> 开发团队继续开发和维护，属于 <a href="https://pydata.org/">PyData</a> 项目的一部分。</p><p><a href="https://pandas.pydata.org/">Pandas</a> 最初被作为金融数据分析工具而开发出来，因此，<a href="https://pandas.pydata.org/">Pandas</a> 为时间序列分析提供了很好的支持。<font color="#FFA500"><strong>Pandas 的名称来自于面板数据（panel data）和 Python 数据分析（data analysis）</strong></font>。panel data 是经济学中关于多维数据集的一个术语，在 <a href="https://pandas.pydata.org/">Pandas</a> 中也提供了 panel 的数据类型。</p><p><a href="https://pandas.pydata.org/">Pandas</a> 经常和其它工具一同使用，如数值计算工具 <a href="https://numpy.org/">NumPy</a> 和 <a href="https://www.scipy.org/">SciPy</a>，分析库 <a href="https://www.statsmodels.org/">statsmodels</a> 和 <a href="https://scikit-learn.org/">scikit-learn</a>，数据可视化库 <a href="https://matplotlib.org/">Matplotlib</a> 等，虽然 <a href="https://pandas.pydata.org/">Pandas</a> 采用了大量的 NumPy 编码风格，但二者最大的不同是 <font color="#FFA500"><strong>Pandas 是专门为处理表格和混杂数据设计的。而 NumPy 更适合处理统一的数值数组数据。</strong></font></p><hr><p>【以下对 Pandas 的解释翻译自官方文档：<a href="https://pandas.pydata.org/docs/getting_started/overview.html#package-overview">https://pandas.pydata.org/docs/getting_started/overview.html#package-overview</a>】</p><hr><p>Pandas 是 Python 的核心数据分析支持库，提供了快速、灵活、明确的数据结构，旨在简单、直观地处理关系型、标记型数据。Pandas 的目标是成为 Python 数据分析实践与实战的必备高级工具，其长远目标是成为<strong>最强大、最灵活、可以支持任何语言的开源数据分析工具</strong>。经过多年不懈的努力，Pandas 离这个目标已经越来越近了。</p><p>Pandas 适用于处理以下类型的数据：</p><ul><li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li><li>有序和无序（非固定频率）的时间序列数据;</li><li>带行列标签的矩阵数据，包括同构或异构型数据;</li><li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li></ul><p>Pandas 的主要数据结构是 <a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.html#pandas.Series">Series</a>（一维数据）与 <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a>（二维数据），这两种数据结构足以处理- 金融、统计、社会科学、工程等领域里的大多数典型用例。对于 R 语言用户，<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a> 提供了比 R 语言 <code>data.frame</code> 更丰富的功能。Pandas 基于 <a href="https://www.numpy.org/">NumPy</a> 开发，可以与其它第三方科学计算支持库完美集成。</p><p>Pandas 就像一把万能瑞士军刀，下面仅列出了它的部分优势 ：</p><ul><li>处理浮点与非浮点数据里的<strong>缺失数据</strong>，表示为 NaN；</li><li>大小可变：<strong>插入或删除</strong> DataFrame 等多维对象的列；</li><li>自动、显式<strong>数据对齐</strong>：显式地将对象与一组标签对齐，也可以忽略标签，在 Series、DataFrame 计算时自动与数据对齐；</li><li>强大、灵活的<strong>分组</strong>（group by）功能：<strong>拆分-应用-组合</strong>数据集，聚合、转换数据；</li><li>把 Python 和 NumPy 数据结构里不规则、不同索引的数据<strong>轻松地转换</strong>为 DataFrame 对象；</li><li>基于智能标签，对大型数据集进行<strong>切片、花式索引、子集分解</strong>等操作；</li><li>直观地<strong>合并</strong>和<strong>连接</strong>数据集；</li><li>灵活地<strong>重塑</strong>和<strong>旋转</strong>数据集；</li><li>轴支持<strong>分层</strong>标签（每个刻度可能有多个标签）；</li><li>强大的 IO 工具，读取平面文件（CSV 等支持分隔符的文件）、Excel 文件、数据库等来源的数据，以及从超快 <strong>HDF5 格式</strong>保存 / 加载数据；</li><li><strong>时间序列</strong>：支持日期范围生成、频率转换、移动窗口统计、移动窗口线性回归、日期位移等时间序列功能。</li></ul><p>这些功能主要是为了解决其它编程语言、科研环境的痛点。处理数据一般分为几个阶段：数据整理与清洗、数据分析与建模、数据可视化与制表，Pandas 是处理数据的理想工具。</p><p>其它说明：</p><ul><li>Pandas 速度很快。Pandas 的很多底层算法都用 <a href="https://cython.org/">Cython</a> 优化过。然而，为了保持通用性，必然要牺牲一些性能，如果专注某一功能，完全可以开发出比 Pandas 更快的专用工具。</li><li>Pandas 是 <a href="https://www.statsmodels.org/stable/index.html">statsmodels</a> 的依赖项，因此，Pandas 也是 Python 中统计计算生态系统的重要组成部分。</li><li>Pandas 已广泛应用于金融领域。</li></ul><h2><span id="02x00-pandas-shu-ju-jie-gou"><font color="#FF0000">【02x00】Pandas 数据结构</font></span></h2><p>Pandas 的主要数据结构是 <a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.html#pandas.Series">Series</a>（带标签的一维同构数组）与 <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html#pandas.DataFrame">DataFrame</a>（带标签的，大小可变的二维异构表格）。</p><p>Pandas 数据结构就像是低维数据的容器。比如，DataFrame 是 Series 的容器，Series 则是标量的容器。使用这种方式，可以在容器中以字典的形式插入或删除对象。</p><p>此外，通用 API 函数的默认操作要顾及时间序列与截面数据集的方向。当使用 Ndarray 存储二维或三维数据时，编写函数要注意数据集的方向，这对用户来说是一种负担；如果不考虑 C 或 Fortran 中连续性对性能的影响，一般情况下，不同的轴在程序里其实没有什么区别。Pandas 里，轴的概念主要是为了给数据赋予更直观的语义，即用更恰当的方式表示数据集的方向。这样做可以让用户编写数据转换函数时，少费点脑子。</p><p>处理 DataFrame 等表格数据时，对比 Numpy，<strong>index</strong>（行）或 <strong>columns</strong>（列）比 <strong>axis 0</strong> 和 <strong>axis 1</strong> 更直观。用这种方式迭代 DataFrame 的列，代码更易读易懂：</p><pre><code class="hljs python"><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> df.columns:    series = df[col]    <span class="hljs-comment"># do something with series</span></code></pre><h2><span id="03x00-series-dui-xiang"><font color="#FF0000">【03x00】Series 对象</font></span></h2><p>Series 是带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。轴标签统称为索引。调用 pandas.Series 函数即可创建 Series，基本语法如下：</p><p><code>pandas.Series(data=None[, index=None, dtype=None, name=None, copy=False, fastpath=False])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>数组类型，可迭代的，字典或标量值，存储在序列中的数据</td></tr><tr><td>index</td><td>索引（数据标签），值必须是可哈希的，并且具有与数据相同的长度，<br>允许使用非唯一索引值。如果未提供，将默认为RangeIndex（0，1，2，…，n）</td></tr><tr><td>dtype</td><td>输出系列的数据类型。可选项，如果未指定，则将从数据中推断，具体参考官网 <a href="https://pandas.pydata.org/docs/getting_started/basics.html#dtypes">dtypes</a> 介绍</td></tr><tr><td>name</td><td>str 类型，可选项，给 Series 命名</td></tr><tr><td>copy</td><td>bool 类型，可选项，默认 False，是否复制输入数据</td></tr></tbody></table><p><img src="https://cdn.itbob.cn/img/article/025/01.png" alt="01"></p><h3><span id="03x01-tong-guo-list-gou-jian-series"><font color="#4876FF">【03x01】通过 list 构建 Series</font></span></h3><p>一般情况下我们只会用到 data 和 index 参数，可以通过 list（列表） 构建 Series，示例如下：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj<span class="hljs-number">0</span>    <span class="hljs-number">1</span><span class="hljs-number">1</span>    <span class="hljs-number">5</span><span class="hljs-number">2</span>   -<span class="hljs-number">8</span><span class="hljs-number">3</span>    <span class="hljs-number">2</span>dtype: int64</code></pre><p>由于我们没有为数据指定索引，于是会自动创建一个 0 到 N-1（N 为数据的长度）的整数型索引，左边一列是自动创建的索引（index），右边一列是数据（data）。</p><p>此外，还可以自定义索引（index）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obja    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>dtype: int64</code></pre><p>索引（index）也可以通过赋值的方式就地修改：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obja    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span>obj.index = [<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Steve&#x27;</span>, <span class="hljs-string">&#x27;Jeff&#x27;</span>, <span class="hljs-string">&#x27;Ryan&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>objBob      <span class="hljs-number">1</span>Steve    <span class="hljs-number">5</span>Jeff    -<span class="hljs-number">8</span>Ryan     <span class="hljs-number">2</span>dtype: int64</code></pre><h3><span id="03x02-tong-guo-dict-gou-jian-series"><font color="#4876FF">【03x02】通过 dict 构建 Series</font></span></h3><p>通过 字典（dict） 构建 Series，字典的键（key）会作为索引（index），字典的值（value）会作为数据（data），示例如下：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;Beijing&#x27;</span>: <span class="hljs-number">21530000</span>, <span class="hljs-string">&#x27;Shanghai&#x27;</span>: <span class="hljs-number">24280000</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>: <span class="hljs-number">11210000</span>, <span class="hljs-string">&#x27;Zhejiang&#x27;</span>: <span class="hljs-number">58500000</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(data)<span class="hljs-meta">&gt;&gt;&gt; </span>objBeijing     <span class="hljs-number">21530000</span>Shanghai    <span class="hljs-number">24280000</span>Wuhan       <span class="hljs-number">11210000</span>Zhejiang    <span class="hljs-number">58500000</span>dtype: int64</code></pre><p>如果你想按照某个特定的顺序输出结果，可以传入排好序的字典的键以改变顺序：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;Beijing&#x27;</span>: <span class="hljs-number">21530000</span>, <span class="hljs-string">&#x27;Shanghai&#x27;</span>: <span class="hljs-number">24280000</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>: <span class="hljs-number">11210000</span>, <span class="hljs-string">&#x27;Zhejiang&#x27;</span>: <span class="hljs-number">58500000</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>cities = [<span class="hljs-string">&#x27;Guangzhou&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Zhejiang&#x27;</span>, <span class="hljs-string">&#x27;Shanghai&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(data, index=cities)<span class="hljs-meta">&gt;&gt;&gt; </span>objGuangzhou           NaNWuhan        <span class="hljs-number">11210000.0</span>Zhejiang     <span class="hljs-number">58500000.0</span>Shanghai     <span class="hljs-number">24280000.0</span>dtype: float64</code></pre><p><font color="#FF0000"><strong>注意：data 为字典，且未设置 index 参数时：</strong></font></p><ul><li><font color="#FF0000"><strong>如果 Python &gt;= 3.6 且 Pandas &gt;= 0.23，Series 按字典的插入顺序排序索引。</strong></font></li><li><font color="#FF0000"><strong>如果 Python &lt; 3.6 或 Pandas &lt; 0.23，Series 按字母顺序排序索引。</strong></font></li></ul><h3><span id="03x03-huo-qu-qi-shu-ju-he-suo-yin"><font color="#4876FF">【03x03】获取其数据和索引</font></span></h3><p>我们可以通过 Series 的 values 和 index 属性获取其数据和索引对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj.valuesarray([ <span class="hljs-number">1</span>,  <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>,  <span class="hljs-number">2</span>], dtype=int64)<span class="hljs-meta">&gt;&gt;&gt; </span>obj.indexIndex([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>], dtype=<span class="hljs-string">&#x27;object&#x27;</span>)</code></pre><h3><span id="03x04-tong-guo-suo-yin-huo-qu-shu-ju"><font color="#4876FF">【03x04】通过索引获取数据</font></span></h3><p>与普通 NumPy 数组相比，Pandas 可以通过索引的方式选取 Series 中的单个或一组值，获取一组值时，传入的是一个列表，列表中的元素是索引值，另外还可以通过索引来修改其对应的值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obja    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>d    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;a&#x27;</span>]<span class="hljs-number">1</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]]a    <span class="hljs-number">3</span>b    <span class="hljs-number">5</span>c   -<span class="hljs-number">8</span>dtype: int64</code></pre><h3><span id="03x05-shi-yong-han-shu-yun-suan"><font color="#4876FF">【03x05】使用函数运算</font></span></h3><p>在 Pandas 中可以使用 NumPy 函数或类似 NumPy 的运算（如根据布尔型数组进行过滤、标量乘法、应用数学函数等）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj[obj &gt; <span class="hljs-number">0</span>]a    <span class="hljs-number">1</span>b    <span class="hljs-number">5</span>d    <span class="hljs-number">2</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span>obj * <span class="hljs-number">2</span>a     <span class="hljs-number">2</span>b    <span class="hljs-number">10</span>c   -<span class="hljs-number">16</span>d     <span class="hljs-number">4</span>dtype: int64<span class="hljs-meta">&gt;&gt;&gt; </span>np.exp(obj)a      <span class="hljs-number">2.718282</span>b    <span class="hljs-number">148.413159</span>c      <span class="hljs-number">0.000335</span>d      <span class="hljs-number">7.389056</span>dtype: float64</code></pre><p>除了这些运算函数以外，还可以将 Series 看成是一个定长的有序字典，因为它是索引值到数据值的一个映射。它可以用在许多原本需要字典参数的函数中：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> obj<span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;e&#x27;</span> <span class="hljs-keyword">in</span> obj<span class="hljs-literal">False</span></code></pre><p>和 NumPy 类似，Pandas 中也有 NaN（即非数字，not a number），在 Pandas 中，它用于表示缺失值，Pandas 的 isnull 和 notnull 函数可用于检测缺失数据：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series([np.NaN, <span class="hljs-number">5</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obja    NaNb    <span class="hljs-number">5.0</span>c   -<span class="hljs-number">8.0</span>d    <span class="hljs-number">2.0</span>dtype: float64<span class="hljs-meta">&gt;&gt;&gt; </span>pd.isnull(obj)a     <span class="hljs-literal">True</span>b    <span class="hljs-literal">False</span>c    <span class="hljs-literal">False</span>d    <span class="hljs-literal">False</span>dtype: <span class="hljs-built_in">bool</span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.notnull(obj)a    <span class="hljs-literal">False</span>b     <span class="hljs-literal">True</span>c     <span class="hljs-literal">True</span>d     <span class="hljs-literal">True</span>dtype: <span class="hljs-built_in">bool</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.isnull()a     <span class="hljs-literal">True</span>b    <span class="hljs-literal">False</span>c    <span class="hljs-literal">False</span>d    <span class="hljs-literal">False</span>dtype: <span class="hljs-built_in">bool</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.notnull()a    <span class="hljs-literal">False</span>b     <span class="hljs-literal">True</span>c     <span class="hljs-literal">True</span>d     <span class="hljs-literal">True</span>dtype: <span class="hljs-built_in">bool</span></code></pre><h3><span id="03x06-name-shu-xing"><font color="##4876FF">【03x06】name 属性</font></span></h3><p>可以在 <code>pandas.Series</code> 方法中为 Series 对象指定一个 name：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;Beijing&#x27;</span>: <span class="hljs-number">21530000</span>, <span class="hljs-string">&#x27;Shanghai&#x27;</span>: <span class="hljs-number">24280000</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>: <span class="hljs-number">11210000</span>, <span class="hljs-string">&#x27;Zhejiang&#x27;</span>: <span class="hljs-number">58500000</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(data, name=<span class="hljs-string">&#x27;population&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>objBeijing     <span class="hljs-number">21530000</span>Shanghai    <span class="hljs-number">24280000</span>Wuhan       <span class="hljs-number">11210000</span>Zhejiang    <span class="hljs-number">58500000</span>Name: population, dtype: int64</code></pre><p>也可以通过 name 和 <a href="http://index.name">index.name</a> 属性为 Series 对象和其索引指定 name：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;Beijing&#x27;</span>: <span class="hljs-number">21530000</span>, <span class="hljs-string">&#x27;Shanghai&#x27;</span>: <span class="hljs-number">24280000</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>: <span class="hljs-number">11210000</span>, <span class="hljs-string">&#x27;Zhejiang&#x27;</span>: <span class="hljs-number">58500000</span>&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.Series(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj.name = <span class="hljs-string">&#x27;population&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.name = <span class="hljs-string">&#x27;cities&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>objcitiesBeijing     <span class="hljs-number">21530000</span>Shanghai    <span class="hljs-number">24280000</span>Wuhan       <span class="hljs-number">11210000</span>Zhejiang    <span class="hljs-number">58500000</span>Name: population, dtype: int64</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106676693</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="04x00-dataframe-dui-xiang"><font color="#FF0000">【04x00】DataFrame 对象</font></span></h2><p>DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共用同一个索引）。DataFrame 中的数据是以一个或多个二维块存放的（而不是列表、字典或别的一维数据结构）。</p><ul><li>类似多维数组/表格数据 (如Excel、R 语言中的 data.frame)；</li><li>每列数据可以是不同的类型；</li><li>索引包括列索引和行索引</li></ul><p>基本语法如下：</p><p><code>pandas.DataFrame(data=None, index: Optional[Collection] = None, columns: Optional[Collection] = None, dtype: Union[str, numpy.dtype, ExtensionDtype, None] = None, copy: bool = False)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>ndarray 对象（结构化或同类的）、可迭代的或者字典形式，存储在序列中的数据</td></tr><tr><td>index</td><td>数组类型，索引（数据标签），如果未提供，将默认为 RangeIndex（0，1，2，…，n）</td></tr><tr><td>columns</td><td>列标签。如果未提供，则将默认为 RangeIndex（0、1、2、…、n）</td></tr><tr><td>dtype</td><td>输出系列的数据类型。可选项，如果未指定，则将从数据中推断，具体参考官网 <a href="https://pandas.pydata.org/docs/getting_started/basics.html#dtypes">dtypes</a> 介绍</td></tr><tr><td>copy</td><td>bool 类型，可选项，默认 False，是否复制输入数据，仅影响 DataFrame/2d ndarray 输入</td></tr></tbody></table><p><img src="https://cdn.itbob.cn/img/article/025/02.png" alt="02"></p><h3><span id="03x01-tong-guo-ndarray-gou-jian-dataframe"><font color="#4876FF">【03x01】通过 ndarray 构建 DataFrame</font></span></h3><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = np.random.randn(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>dataarray([[-<span class="hljs-number">2.16231157</span>,  <span class="hljs-number">0.44967198</span>, -<span class="hljs-number">0.73131523</span>],       [ <span class="hljs-number">1.18982913</span>,  <span class="hljs-number">0.94670798</span>,  <span class="hljs-number">0.82973421</span>],       [-<span class="hljs-number">1.57680831</span>, -<span class="hljs-number">0.99732066</span>,  <span class="hljs-number">0.96432</span>   ],       [-<span class="hljs-number">0.77483149</span>, -<span class="hljs-number">1.23802881</span>,  <span class="hljs-number">0.44061227</span>],       [ <span class="hljs-number">1.77666419</span>,  <span class="hljs-number">0.24931983</span>, -<span class="hljs-number">1.12960153</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj          <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">2</span><span class="hljs-number">0</span> -<span class="hljs-number">2.162312</span>  <span class="hljs-number">0.449672</span> -<span class="hljs-number">0.731315</span><span class="hljs-number">1</span>  <span class="hljs-number">1.189829</span>  <span class="hljs-number">0.946708</span>  <span class="hljs-number">0.829734</span><span class="hljs-number">2</span> -<span class="hljs-number">1.576808</span> -<span class="hljs-number">0.997321</span>  <span class="hljs-number">0.964320</span><span class="hljs-number">3</span> -<span class="hljs-number">0.774831</span> -<span class="hljs-number">1.238029</span>  <span class="hljs-number">0.440612</span><span class="hljs-number">4</span>  <span class="hljs-number">1.776664</span>  <span class="hljs-number">0.249320</span> -<span class="hljs-number">1.129602</span></code></pre><p>指定索引（index）和列标签（columns），和 Series 对象类似，可以在构建的时候添加索引和标签，也可以直接通过赋值的方式就地修改：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = np.random.randn(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>index = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>columns = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index, columns)<span class="hljs-meta">&gt;&gt;&gt; </span>obj          A         B         Ca -<span class="hljs-number">1.042909</span> -<span class="hljs-number">0.238236</span> -<span class="hljs-number">1.050308</span>b  <span class="hljs-number">0.587079</span>  <span class="hljs-number">0.739683</span> -<span class="hljs-number">0.233624</span>c -<span class="hljs-number">0.451254</span> -<span class="hljs-number">0.638496</span>  <span class="hljs-number">1.708807</span>d -<span class="hljs-number">0.620158</span> -<span class="hljs-number">1.875929</span> -<span class="hljs-number">0.432382</span>e -<span class="hljs-number">1.093815</span>  <span class="hljs-number">0.396965</span> -<span class="hljs-number">0.759479</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.index = [<span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>, <span class="hljs-string">&#x27;A3&#x27;</span>, <span class="hljs-string">&#x27;A4&#x27;</span>, <span class="hljs-string">&#x27;A5&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>obj.columns = [<span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>, <span class="hljs-string">&#x27;B3&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>obj          B1        B2        B3A1 -<span class="hljs-number">1.042909</span> -<span class="hljs-number">0.238236</span> -<span class="hljs-number">1.050308</span>A2  <span class="hljs-number">0.587079</span>  <span class="hljs-number">0.739683</span> -<span class="hljs-number">0.233624</span>A3 -<span class="hljs-number">0.451254</span> -<span class="hljs-number">0.638496</span>  <span class="hljs-number">1.708807</span>A4 -<span class="hljs-number">0.620158</span> -<span class="hljs-number">1.875929</span> -<span class="hljs-number">0.432382</span>A5 -<span class="hljs-number">1.093815</span>  <span class="hljs-number">0.396965</span> -<span class="hljs-number">0.759479</span></code></pre><h3><span id="03x02-tong-guo-dict-gou-jian-dataframe"><font color="#4876FF">【03x02】通过 dict 构建 DataFrame</font></span></h3><p>通过 字典（dict） 构建 DataFrame，字典的键（key）会作为列标签（columns），字典的值（value）会作为数据（data），示例如下：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: [<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>],        <span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>],        <span class="hljs-string">&#x27;people&#x27;</span>: [<span class="hljs-number">10892900</span>, <span class="hljs-number">11081000</span>, <span class="hljs-number">11212000</span>, <span class="hljs-number">21707000</span>, <span class="hljs-number">21542000</span>, <span class="hljs-number">21536000</span>]&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj      city  year    people<span class="hljs-number">0</span>    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span><span class="hljs-number">1</span>    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span><span class="hljs-number">2</span>    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span><span class="hljs-number">3</span>  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span><span class="hljs-number">4</span>  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span><span class="hljs-number">5</span>  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span></code></pre><p>如果指定了列序列，则 DataFrame 的列就会按照指定顺序进行排列，如果传入的列在数据中找不到，就会在结果中产生缺失值（NaN）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: [<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>],        <span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>],        <span class="hljs-string">&#x27;people&#x27;</span>: [<span class="hljs-number">10892900</span>, <span class="hljs-number">11081000</span>, <span class="hljs-number">11212000</span>, <span class="hljs-number">21707000</span>, <span class="hljs-number">21542000</span>, <span class="hljs-number">21536000</span>]&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>pd.DataFrame(data)      city  year    people<span class="hljs-number">0</span>    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span><span class="hljs-number">1</span>    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span><span class="hljs-number">2</span>    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span><span class="hljs-number">3</span>  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span><span class="hljs-number">4</span>  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span><span class="hljs-number">5</span>  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.DataFrame(data, columns=[<span class="hljs-string">&#x27;year&#x27;</span>, <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-string">&#x27;people&#x27;</span>])   year     city    people<span class="hljs-number">0</span>  <span class="hljs-number">2017</span>    Wuhan  <span class="hljs-number">10892900</span><span class="hljs-number">1</span>  <span class="hljs-number">2018</span>    Wuhan  <span class="hljs-number">11081000</span><span class="hljs-number">2</span>  <span class="hljs-number">2019</span>    Wuhan  <span class="hljs-number">11212000</span><span class="hljs-number">3</span>  <span class="hljs-number">2017</span>  Beijing  <span class="hljs-number">21707000</span><span class="hljs-number">4</span>  <span class="hljs-number">2018</span>  Beijing  <span class="hljs-number">21542000</span><span class="hljs-number">5</span>  <span class="hljs-number">2019</span>  Beijing  <span class="hljs-number">21536000</span><span class="hljs-meta">&gt;&gt;&gt; </span>pd.DataFrame(data, columns=[<span class="hljs-string">&#x27;year&#x27;</span>, <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-string">&#x27;people&#x27;</span>, <span class="hljs-string">&#x27;money&#x27;</span>])   year     city    people money<span class="hljs-number">0</span>  <span class="hljs-number">2017</span>    Wuhan  <span class="hljs-number">10892900</span>   NaN<span class="hljs-number">1</span>  <span class="hljs-number">2018</span>    Wuhan  <span class="hljs-number">11081000</span>   NaN<span class="hljs-number">2</span>  <span class="hljs-number">2019</span>    Wuhan  <span class="hljs-number">11212000</span>   NaN<span class="hljs-number">3</span>  <span class="hljs-number">2017</span>  Beijing  <span class="hljs-number">21707000</span>   NaN<span class="hljs-number">4</span>  <span class="hljs-number">2018</span>  Beijing  <span class="hljs-number">21542000</span>   NaN<span class="hljs-number">5</span>  <span class="hljs-number">2019</span>  Beijing  <span class="hljs-number">21536000</span>   NaN</code></pre><p><font color="#FF0000"><strong>注意：data 为字典，且未设置 columns 参数时：</strong></font></p><ul><li><p><font color="#FF0000"><strong>Python &gt; = 3.6 且 Pandas &gt; = 0.23，DataFrame 的列按字典的插入顺序排序。</strong></font></p></li><li><p><font color="#FF0000"><strong>Python &lt; 3.6 或 Pandas &lt; 0.23，DataFrame 的列按字典键的字母排序。</strong></font></p></li></ul><h3><span id="03x03-huo-qu-qi-shu-ju-he-suo-yin"><font color="#4876FF">【03x03】获取其数据和索引</font></span></h3><p>和 Series 一样，DataFrame 也可以通过其 values 和 index 属性获取其数据和索引对象：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: [<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>],    <span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>],        <span class="hljs-string">&#x27;people&#x27;</span>: [<span class="hljs-number">10892900</span>, <span class="hljs-number">11081000</span>, <span class="hljs-number">11212000</span>, <span class="hljs-number">21707000</span>, <span class="hljs-number">21542000</span>, <span class="hljs-number">21536000</span>]&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj.indexRangeIndex(start=<span class="hljs-number">0</span>, stop=<span class="hljs-number">6</span>, step=<span class="hljs-number">1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj.valuesarray([[<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">10892900</span>],       [<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">11081000</span>],       [<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">11212000</span>],       [<span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">21707000</span>],       [<span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">21542000</span>],       [<span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">21536000</span>]], dtype=<span class="hljs-built_in">object</span>)</code></pre><h3><span id="03x04-tong-guo-suo-yin-huo-qu-shu-ju"><font color="#4876FF">【03x04】通过索引获取数据</font></span></h3><p>通过类似字典标记的方式或属性的方式，可以将 DataFrame 的列获取为一个 Series 对象；</p><p>行也可以通过位置或名称的方式进行获取，比如用 loc 属性；</p><p>对于特别大的 DataFrame，有一个 head 方法可以选取前五行数据。</p><p>用法示例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: [<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>],    <span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>],        <span class="hljs-string">&#x27;people&#x27;</span>: [<span class="hljs-number">10892900</span>, <span class="hljs-number">11081000</span>, <span class="hljs-number">11212000</span>, <span class="hljs-number">21707000</span>, <span class="hljs-number">21542000</span>, <span class="hljs-number">21536000</span>]&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj      city  year    people<span class="hljs-number">0</span>    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span><span class="hljs-number">1</span>    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span><span class="hljs-number">2</span>    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span><span class="hljs-number">3</span>  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span><span class="hljs-number">4</span>  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span><span class="hljs-number">5</span>  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;city&#x27;</span>]<span class="hljs-number">0</span>      Wuhan<span class="hljs-number">1</span>      Wuhan<span class="hljs-number">2</span>      Wuhan<span class="hljs-number">3</span>    Beijing<span class="hljs-number">4</span>    Beijing<span class="hljs-number">5</span>    BeijingName: city, dtype: <span class="hljs-built_in">object</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.year<span class="hljs-number">0</span>    <span class="hljs-number">2017</span><span class="hljs-number">1</span>    <span class="hljs-number">2018</span><span class="hljs-number">2</span>    <span class="hljs-number">2019</span><span class="hljs-number">3</span>    <span class="hljs-number">2017</span><span class="hljs-number">4</span>    <span class="hljs-number">2018</span><span class="hljs-number">5</span>    <span class="hljs-number">2019</span>Name: year, dtype: int64&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(obj.year)&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">series</span>.<span class="hljs-title">Series</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">obj</span>.<span class="hljs-title">loc</span>[2]</span><span class="hljs-class"><span class="hljs-title">city</span>         <span class="hljs-title">Wuhan</span></span><span class="hljs-class"><span class="hljs-title">year</span>          2019</span><span class="hljs-class"><span class="hljs-title">people</span>    11212000</span><span class="hljs-class"><span class="hljs-title">Name</span>:</span> <span class="hljs-number">2</span>, dtype: <span class="hljs-built_in">object</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj.head()      city  year    people<span class="hljs-number">0</span>    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span><span class="hljs-number">1</span>    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span><span class="hljs-number">2</span>    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span><span class="hljs-number">3</span>  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span><span class="hljs-number">4</span>  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span></code></pre><h3><span id="03x05-xiu-gai-lie-de-zhi"><font color="#4876FF">【03x05】修改列的值</font></span></h3><p>列可以通过赋值的方式进行修改。在下面示例中，分别给&quot;money&quot;列赋上一个标量值和一组值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: [<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>],        <span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>],        <span class="hljs-string">&#x27;people&#x27;</span>: [<span class="hljs-number">10892900</span>, <span class="hljs-number">11081000</span>, <span class="hljs-number">11212000</span>, <span class="hljs-number">21707000</span>, <span class="hljs-number">21542000</span>, <span class="hljs-number">21536000</span>],        <span class="hljs-string">&#x27;money&#x27;</span>:[np.NaN, np.NaN, np.NaN, np.NaN, np.NaN, np.NaN]&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj      city  year    people  moneyA    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span>    NaNB    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span>    NaNC    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span>    NaND  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span>    NaNE  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span>    NaNF  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span>    NaN&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;money&#x27;</span>] = <span class="hljs-number">6666666666</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj      city  year    people       moneyA    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span>  <span class="hljs-number">6666666666</span>B    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span>  <span class="hljs-number">6666666666</span>C    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span>  <span class="hljs-number">6666666666</span>D  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span>  <span class="hljs-number">6666666666</span>E  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span>  <span class="hljs-number">6666666666</span>F  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span>  <span class="hljs-number">6666666666</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;money&#x27;</span>] = np.arange(<span class="hljs-number">100000000</span>, <span class="hljs-number">700000000</span>, <span class="hljs-number">100000000</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>obj      city  year    people      moneyA    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span>  <span class="hljs-number">100000000</span>B    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span>  <span class="hljs-number">200000000</span>C    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span>  <span class="hljs-number">300000000</span>D  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span>  <span class="hljs-number">400000000</span>E  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span>  <span class="hljs-number">500000000</span>F  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span>  <span class="hljs-number">600000000</span></code></pre><p>将列表或数组赋值给某个列时，其长度必须跟 DataFrame 的长度相匹配。如果赋值的是一个 Series，就会精确匹配 DataFrame 的索引：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: [<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>],        <span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>],        <span class="hljs-string">&#x27;people&#x27;</span>: [<span class="hljs-number">10892900</span>, <span class="hljs-number">11081000</span>, <span class="hljs-number">11212000</span>, <span class="hljs-number">21707000</span>, <span class="hljs-number">21542000</span>, <span class="hljs-number">21536000</span>],        <span class="hljs-string">&#x27;money&#x27;</span>:[np.NaN, np.NaN, np.NaN, np.NaN, np.NaN, np.NaN]&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj      city  year    people  moneyA    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span>    NaNB    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span>    NaNC    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span>    NaND  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span>    NaNE  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span>    NaNF  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span>    NaN<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>new_data = pd.Series([<span class="hljs-number">5670000000</span>, <span class="hljs-number">6890000000</span>, <span class="hljs-number">7890000000</span>], index=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;money&#x27;</span>] = new_data<span class="hljs-meta">&gt;&gt;&gt; </span>obj      city  year    people         moneyA    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span>  <span class="hljs-number">5.670000e+09</span>B    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span>           NaNC    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span>  <span class="hljs-number">6.890000e+09</span>D  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span>           NaNE  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span>  <span class="hljs-number">7.890000e+09</span>F  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span>           NaN</code></pre><h3><span id="03x06-zeng-jia-shan-chu-lie"><font color="#4876FF">【03x06】增加 / 删除列</font></span></h3><p>为不存在的列赋值会创建出一个新列，关键字 del 用于删除列：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: [<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>],    <span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>],        <span class="hljs-string">&#x27;people&#x27;</span>: [<span class="hljs-number">10892900</span>, <span class="hljs-number">11081000</span>, <span class="hljs-number">11212000</span>, <span class="hljs-number">21707000</span>, <span class="hljs-number">21542000</span>, <span class="hljs-number">21536000</span>]&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj      city  year    people<span class="hljs-number">0</span>    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span><span class="hljs-number">1</span>    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span><span class="hljs-number">2</span>    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span><span class="hljs-number">3</span>  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span><span class="hljs-number">4</span>  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span><span class="hljs-number">5</span>  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>obj[<span class="hljs-string">&#x27;northern&#x27;</span>] = obj[<span class="hljs-string">&#x27;city&#x27;</span>] == <span class="hljs-string">&#x27;Beijing&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj      city  year    people  northern<span class="hljs-number">0</span>    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span>     <span class="hljs-literal">False</span><span class="hljs-number">1</span>    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span>     <span class="hljs-literal">False</span><span class="hljs-number">2</span>    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span>     <span class="hljs-literal">False</span><span class="hljs-number">3</span>  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span>      <span class="hljs-literal">True</span><span class="hljs-number">4</span>  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span>      <span class="hljs-literal">True</span><span class="hljs-number">5</span>  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span>      <span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> obj[<span class="hljs-string">&#x27;northern&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>obj      city  year    people<span class="hljs-number">0</span>    Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span><span class="hljs-number">1</span>    Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span><span class="hljs-number">2</span>    Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span><span class="hljs-number">3</span>  Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span><span class="hljs-number">4</span>  Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span><span class="hljs-number">5</span>  Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span></code></pre><h3><span id="03x07-name-shu-xing"><font color="##4876FF">【03x07】name 属性</font></span></h3><p>可以通过 <a href="http://index.name">index.name</a> 和 <a href="http://columns.name">columns.name</a> 属性设置索引（index）和列标签（columns）的 name，注意 DataFrame 对象是没有 name 属性的：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-meta">&gt;&gt;&gt; </span>data = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: [<span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Wuhan&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>],        <span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>],        <span class="hljs-string">&#x27;people&#x27;</span>: [<span class="hljs-number">10892900</span>, <span class="hljs-number">11081000</span>, <span class="hljs-number">11212000</span>, <span class="hljs-number">21707000</span>, <span class="hljs-number">21542000</span>, <span class="hljs-number">21536000</span>]&#125;<span class="hljs-meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)<span class="hljs-meta">&gt;&gt;&gt; </span>obj.index.name = <span class="hljs-string">&#x27;index&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>obj.columns.name = <span class="hljs-string">&#x27;columns&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>objcolumns     city  year    peopleindex                           <span class="hljs-number">0</span>          Wuhan  <span class="hljs-number">2017</span>  <span class="hljs-number">10892900</span><span class="hljs-number">1</span>          Wuhan  <span class="hljs-number">2018</span>  <span class="hljs-number">11081000</span><span class="hljs-number">2</span>          Wuhan  <span class="hljs-number">2019</span>  <span class="hljs-number">11212000</span><span class="hljs-number">3</span>        Beijing  <span class="hljs-number">2017</span>  <span class="hljs-number">21707000</span><span class="hljs-number">4</span>        Beijing  <span class="hljs-number">2018</span>  <span class="hljs-number">21542000</span><span class="hljs-number">5</span>        Beijing  <span class="hljs-number">2019</span>  <span class="hljs-number">21536000</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106676693</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（十一）：最常用最有价值的 50 个图表【译文】</title>
      <link href="/article/024/"/>
      <url>/article/024/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-jie-shao-introduction-font"><font color="#FF0000">【1x00】介绍（Introduction）</font></a></li><li><a href="#font-color-ff0000-2x00-zhun-bei-gong-zuo-setup-font"><font color="#FF0000">【2x00】准备工作（Setup）</font></a></li><li><a href="#font-color-ff0000-3x00-guan-lian-correlation-font"><font color="#FF0000">【3x00】关联（Correlation） </font></a><ul><li><a href="#font-color-4876ff-01-san-dian-tu-scatter-plot-font"><font color="##4876FF">【01】散点图（Scatter plot）</font></a></li><li><a href="#font-color-4876ff-02-dai-bian-jie-de-qi-pao-tu-bubble-plot-with-encircling-font"><font color="##4876FF">【02】带边界的气泡图（Bubble plot with Encircling）</font></a></li><li><a href="#font-color-4876ff-03-dai-xian-xing-hui-gui-zui-jia-ni-he-xian-de-san-dian-tu-scatter-plot-with-linear-regression-line-of-best-fit-font"><font color="##4876FF">【03】带线性回归最佳拟合线的散点图（Scatter plot with linear regression line of best fit）</font></a></li><li><a href="#font-color-4876ff-04-dou-dong-tu-jittering-with-stripplot-font"><font color="##4876FF">【04】抖动图（Jittering with stripplot）</font></a></li><li><a href="#font-color-4876ff-05-ji-shu-tu-counts-plot-font"><font color="##4876FF">【05】计数图（Counts Plot）</font></a></li><li><a href="#font-color-4876ff-06-bian-yuan-zhi-fang-tu-marginal-histogram-font"><font color="##4876FF">【06】边缘直方图（Marginal Histogram）</font></a></li><li><a href="#font-color-4876ff-07-bian-yuan-xiang-xing-tu-marginal-boxplot-font"><font color="##4876FF">【07】边缘箱形图（Marginal Boxplot）</font></a></li><li><a href="#font-color-4876ff-08-xiang-guan-tu-correllogram-font"><font color="##4876FF">【08】相关图（Correllogram）</font></a></li><li><a href="#font-color-4876ff-09-cheng-dui-tu-pairwise-plot-font"><font color="##4876FF">【09】成对图（Pairwise Plot）</font></a></li></ul></li><li><a href="#font-color-ff0000-4x00-pian-chai-deviation-font"><font color="#FF0000">【4x00】偏差（Deviation）</font></a><ul><li><a href="#font-color-4876ff-10-fa-san-xing-tiao-xing-tu-diverging-bars-font"><font color="##4876FF">【10】发散型条形图（Diverging Bars）</font></a></li><li><a href="#font-color-4876ff-11-fa-san-xing-wen-ben-tu-diverging-texts-font"><font color="##4876FF">【11】发散型文本图（Diverging Texts）</font></a></li><li><a href="#font-color-4876ff-12-fa-san-xing-san-dian-tu-diverging-dot-plot-font"><font color="##4876FF">【12】发散型散点图（Diverging Dot Plot）</font></a></li><li><a href="#font-color-4876ff-13-dai-biao-ji-de-fa-san-xing-bang-bang-tang-tu-diverging-lollipop-chart-with-markers-font"><font color="##4876FF">【13】带标记的发散型棒棒糖图（Diverging Lollipop Chart with Markers）</font></a></li><li><a href="#font-color-4876ff-14-mian-ji-tu-area-chart-font"><font color="##4876FF">【14】面积图（Area Chart）</font></a></li></ul></li><li><a href="#font-color-ff0000-5x00-pai-xu-ranking-font"><font color="#FF0000">【5x00】排序（Ranking）</font></a><ul><li><a href="#font-color-4876ff-15-you-xu-tiao-xing-tu-ordered-bar-chart-font"><font color="##4876FF">【15】有序条形图（Ordered Bar Chart）</font></a></li><li><a href="#font-color-4876ff-16-bang-bang-tang-tu-lollipop-chart-font"><font color="##4876FF">【16】棒棒糖图（Lollipop Chart）</font></a></li><li><a href="#font-color-4876ff-17-dian-tu-dot-plot-font"><font color="##4876FF">【17】点图（Dot Plot）</font></a></li><li><a href="#font-color-4876ff-18-po-du-tu-slope-chart-font"><font color="##4876FF">【18】坡度图（Slope Chart）</font></a></li><li><a href="#font-color-4876ff-19-ya-ling-tu-dumbbell-plot-font"><font color="##4876FF">【19】哑铃图（Dumbbell Plot）</font></a></li></ul></li><li><a href="#font-color-ff0000-6x00-fen-bu-distribution-font"><font color="#FF0000">【6x00】分布（Distribution）</font></a><ul><li><a href="#font-color-4876ff-20-lian-xu-bian-liang-de-zhi-fang-tu-histogram-for-continuous-variable-font"><font color="##4876FF">【20】连续变量的直方图（Histogram for Continuous Variable）</font></a></li><li><a href="#font-color-4876ff-21-fen-lei-bian-liang-de-zhi-fang-tu-histogram-for-categorical-variable-font"><font color="##4876FF">【21】分类变量的直方图（Histogram for Categorical Variable）</font></a></li><li><a href="#font-color-4876ff-22-mi-du-tu-density-plot-font"><font color="##4876FF">【22】密度图（Density Plot）</font></a></li><li><a href="#font-color-4876ff-23-zhi-fang-tu-mi-du-qu-xian-density-curves-with-histogram-font"><font color="##4876FF">【23】直方图密度曲线（Density Curves with Histogram）</font></a></li><li><a href="#font-color-4876ff-24-shan-feng-die-luan-tu-huan-le-tu-joy-plot-font"><font color="##4876FF">【24】山峰叠峦图 / 欢乐图（Joy Plot）</font></a></li><li><a href="#font-color-4876ff-25-fen-bu-shi-dian-tu-distributed-dot-plot-font"><font color="##4876FF">【25】分布式点图（Distributed Dot Plot）</font></a></li><li><a href="#font-color-4876ff-26-xiang-xing-tu-box-plot-font"><font color="##4876FF">【26】箱形图（Box Plot）</font></a></li><li><a href="#font-color-4876ff-27-dian-xiang-xing-tu-dot-box-plot-font"><font color="##4876FF">【27】点 + 箱形图（Dot + Box Plot）</font></a></li><li><a href="#font-color-4876ff-28-xiao-ti-qin-tu-violin-plot-font"><font color="##4876FF">【28】小提琴图（Violin Plot）</font></a></li><li><a href="#font-color-4876ff-29-ren-kou-jin-zi-ta-tu-population-pyramid-font"><font color="##4876FF">【29】人口金字塔图（Population Pyramid）</font></a></li><li><a href="#font-color-4876ff-30-fen-lei-tu-categorical-plots-font"><font color="##4876FF">【30】分类图（Categorical Plots）</font></a></li></ul></li><li><a href="#font-color-ff0000-7x00-zu-cheng-composition-font"><font color="#FF0000">【7x00】组成（Composition）</font></a><ul><li><a href="#font-color-4876ff-31-hua-fu-bing-tu-waffle-chart-font"><font color="##4876FF">【31】华夫饼图（Waffle Chart）</font></a></li><li><a href="#font-color-4876ff-32-bing-tu-pie-chart-font"><font color="##4876FF">【32】饼图（Pie Chart）</font></a></li><li><a href="#font-color-4876ff-33-ju-zhen-shu-xing-tu-treemap-font"><font color="##4876FF">【33】矩阵树形图（Treemap）</font></a></li><li><a href="#font-color-4876ff-34-tiao-xing-tu-bar-chart-font"><font color="##4876FF">【34】条形图（Bar Chart）</font></a></li></ul></li><li><a href="#font-color-ff0000-8x00-bian-hua-change-font"><font color="#FF0000">【8x00】变化（Change）</font></a><ul><li><a href="#font-color-4876ff-35-shi-jian-xu-lie-tu-time-series-plot-font"><font color="##4876FF">【35】时间序列图（Time Series Plot）</font></a></li><li><a href="#font-color-4876ff-36-dai-bo-feng-he-bo-gu-zhu-shi-de-shi-jian-xu-lie-tu-time-series-with-peaks-and-troughs-annotated-font"><font color="##4876FF">【36】带波峰和波谷注释的时间序列图（Time Series with Peaks and Troughs Annotated）</font></a></li><li><a href="#font-color-4876ff-37-zi-xiang-guan-acf-he-bu-fen-zi-xiang-guan-pacf-tu-autocorrelation-acf-and-partial-autocorrelation-pacf-plot-font"><font color="##4876FF">【37】自相关 (ACF) 和部分自相关 (PACF) 图（Autocorrelation (ACF) and Partial Autocorrelation (PACF) Plot）</font></a></li><li><a href="#font-color-4876ff-38-jiao-cha-xiang-guan-tu-cross-correlation-plot-font"><font color="##4876FF">【38】交叉相关图（Cross Correlation plot）</font></a></li><li><a href="#font-color-4876ff-39-shi-jian-xu-lie-fen-jie-tu-time-series-decomposition-plot-font"><font color="##4876FF">【39】时间序列分解图（Time Series Decomposition Plot）</font></a></li><li><a href="#font-color-4876ff-40-duo-chong-shi-jian-xu-lie-multiple-time-series-font"><font color="##4876FF">【40】多重时间序列（Multiple Time Series）</font></a></li><li><a href="#font-color-4876ff-41-shi-yong-ci-yao-de-y-zhou-lai-hui-zhi-bu-tong-fan-wei-de-tu-xing-plotting-with-different-scales-using-secondary-y-axis-font"><font color="##4876FF">【41】使用次要的 Y 轴来绘制不同范围的图形（Plotting with different scales using secondary Y axis）</font></a></li><li><a href="#font-color-4876ff-42-dai-wu-chai-dai-de-shi-jian-xu-lie-time-series-with-error-bands-font"><font color="##4876FF">【42】带误差带的时间序列（Time Series with Error Bands）</font></a></li><li><a href="#font-color-4876ff-43-dui-ji-mian-ji-tu-stacked-area-chart-font"><font color="##4876FF">【43】堆积面积图（Stacked Area Chart）</font></a></li><li><a href="#font-color-4876ff-44-wei-dui-ji-mian-ji-tu-area-chart-unstacked-font"><font color="##4876FF">【44】未堆积面积图（Area Chart UnStacked）</font></a></li><li><a href="#font-color-4876ff-45-ri-li-re-li-tu-calendar-heat-map-font"><font color="##4876FF">【45】日历热力图（Calendar Heat Map）</font></a></li><li><a href="#font-color-4876ff-46-ji-jie-tu-seasonal-plot-font"><font color="##4876FF">【46】季节图（Seasonal Plot）</font></a></li></ul></li><li><a href="#font-color-ff0000-9x00-fen-zu-groups-font"><font color="#FF0000">【9x00】分组（ Groups）</font></a><ul><li><a href="#font-color-4876ff-47-shu-zhuang-tu-dendrogram-font"><font color="##4876FF">【47】树状图（Dendrogram）</font></a></li><li><a href="#font-color-4876ff-48-ju-lei-tu-cluster-plot-font"><font color="##4876FF">【48】聚类图（Cluster Plot）</font></a></li><li><a href="#font-color-4876ff-49-an-de-lu-si-qu-xian-andrews-curve-font"><font color="##4876FF">【49】安德鲁斯曲线（Andrews Curve）</font></a></li><li><a href="#font-color-4876ff-50-ping-xing-zuo-biao-tu-parallel-coordinates-font"><font color="##4876FF">【50】平行坐标图（Parallel Coordinates）</font></a></li></ul></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><blockquote><p>翻译丨<a href="https://itrhx.blog.csdn.net/">TRHX</a><br>作者丨<a href="https://www.machinelearningplus.com/author/selva86/">Selva Prabhakaran</a><br>原文丨<a href="https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/">《Top 50 matplotlib Visualizations – The Master Plots (with full python code)》</a></p></blockquote><hr><blockquote><p>★ 本文中的示例原作者使用的编辑器为 Jupyter Notebook；<br>★ 译者使用 PyCharm 测试原文中有部分代码不太准确，部分已进行修改，对应有注释说明；<br>★ 运行本文代码，需要安装 Matplotlib 和 Seaborn 等可视化库，其他的一些辅助可视化库已在代码部分作标注；<br>★ 示例中用到的数据均储存在作者的 GitHub：<a href="https://github.com/selva86/datasets">https://github.com/selva86/datasets</a>，因此运行程序可能需要FQ；<br>★ 译者英文水平有限，若遇到翻译模糊的词建议参考原文来理解。<br>★ 本文50个示例代码已打包为 .py 文件，可直接下载：<a href="https://download.csdn.net/download/qq_36759224/12507219">https://download.csdn.net/download/qq_36759224/12507219</a></p></blockquote><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本译文首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">Selva</span> <span class="hljs-string">Prabhakaran，译者</span> <span class="hljs-string">TRHX。</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106558131</span><span class="hljs-string">原文链接：https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/</span></code></pre><hr><h2><span id="1x00-jie-shao-introduction"><font color="#FF0000">【1x00】介绍（Introduction）</font></span></h2><p>在数据分析和可视化中最常用的、最有价值的前 50 个 Matplotlib 图表。这些图表会让你懂得在不同情况下合理使用 Python 的 Matplotlib 和 Seaborn 库来达到数据可视化效果。</p><p>这些图表根据可视化目标的 7 个不同情景进行分组。 例如，如果要想象两个变量之间的关系，请查看“关联”部分下的图表。 或者，如果您想要显示值如何随时间变化，请查看“变化”部分，依此类推。</p><p>有效图表的重要特征：</p><ul><li>在不歪曲事实的情况下传达正确和必要的信息；</li><li>设计简单，不必太费力就能理解它；</li><li>从审美角度支持信息而不是掩盖信息；</li><li>信息没有超负荷。</li></ul><h2><span id="2x00-zhun-bei-gong-zuo-setup"><font color="#FF0000">【2x00】准备工作（Setup）</font></span></h2><p>在代码运行前先引入下面的基本设置，当然，个别图表可能会重新定义显示要素。</p><pre><code class="hljs python"><span class="hljs-comment"># !pip install brewer2mpl</span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<span class="hljs-keyword">import</span> warnings; warnings.filterwarnings(action=<span class="hljs-string">&#x27;once&#x27;</span>)large = <span class="hljs-number">22</span>; med = <span class="hljs-number">16</span>; small = <span class="hljs-number">12</span>params = &#123;<span class="hljs-string">&#x27;axes.titlesize&#x27;</span>: large,          <span class="hljs-string">&#x27;legend.fontsize&#x27;</span>: med,          <span class="hljs-string">&#x27;figure.figsize&#x27;</span>: (<span class="hljs-number">16</span>, <span class="hljs-number">10</span>),          <span class="hljs-string">&#x27;axes.labelsize&#x27;</span>: med,          <span class="hljs-string">&#x27;axes.titlesize&#x27;</span>: med,          <span class="hljs-string">&#x27;xtick.labelsize&#x27;</span>: med,          <span class="hljs-string">&#x27;ytick.labelsize&#x27;</span>: med,          <span class="hljs-string">&#x27;figure.titlesize&#x27;</span>: large&#125;plt.rcParams.update(params)plt.style.use(<span class="hljs-string">&#x27;seaborn-whitegrid&#x27;</span>)sns.set_style(<span class="hljs-string">&quot;white&quot;</span>)%matplotlib inline<span class="hljs-comment"># Version</span><span class="hljs-built_in">print</span>(mpl.__version__)  <span class="hljs-comment">#&gt; 3.0.0</span><span class="hljs-built_in">print</span>(sns.__version__)  <span class="hljs-comment">#&gt; 0.9.0</span></code></pre><h2><span id="3x00-guan-lian-correlation"><font color="#FF0000">【3x00】关联（Correlation） </font></span></h2><p>关联图用于可视化两个或多个变量之间的关系。也就是说，一个变量相对于另一个变量如何变化。</p><h3><span id="01-san-dian-tu-scatter-plot"><font color="##4876FF">【01】散点图（Scatter plot）</font></span></h3><p>散点图是研究两个变量之间关系的经典和基本的绘图。如果数据中有多个组，则可能需要以不同的颜色显示每个组。在 Matplotlib 中，您可以使用 <code>plt.scatterplot()</code> 方便地执行此操作。</p><pre><code class="hljs python"><span class="hljs-comment"># Import dataset </span>midwest = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/midwest_filter.csv&quot;</span>)<span class="hljs-comment"># Prepare Data </span><span class="hljs-comment"># Create as many colors as there are unique midwest[&#x27;category&#x27;]</span>categories = np.unique(midwest[<span class="hljs-string">&#x27;category&#x27;</span>])colors = [plt.cm.tab10(i/<span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(categories)-<span class="hljs-number">1</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(categories))]<span class="hljs-comment"># Draw Plot for Each Category</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi= <span class="hljs-number">80</span>, facecolor=<span class="hljs-string">&#x27;w&#x27;</span>, edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>)<span class="hljs-keyword">for</span> i, category <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(categories):    plt.scatter(<span class="hljs-string">&#x27;area&#x27;</span>, <span class="hljs-string">&#x27;poptotal&#x27;</span>,                data=midwest.loc[midwest.category==category, :],                s=<span class="hljs-number">20</span>, cmap=colors[i], label=<span class="hljs-built_in">str</span>(category))<span class="hljs-comment"># 原文 c=colors[i] 已修改为 cmap=colors[i]</span><span class="hljs-comment"># Decorations</span>plt.gca().<span class="hljs-built_in">set</span>(xlim=(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.1</span>), ylim=(<span class="hljs-number">0</span>, <span class="hljs-number">90000</span>),              xlabel=<span class="hljs-string">&#x27;Area&#x27;</span>, ylabel=<span class="hljs-string">&#x27;Population&#x27;</span>)plt.xticks(fontsize=<span class="hljs-number">12</span>); plt.yticks(fontsize=<span class="hljs-number">12</span>)plt.title(<span class="hljs-string">&quot;Scatterplot of Midwest Area vs Population&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.legend(fontsize=<span class="hljs-number">12</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/01.png" alt="01"></p><h3><span id="02-dai-bian-jie-de-qi-pao-tu-bubble-plot-with-encircling"><font color="##4876FF">【02】带边界的气泡图（Bubble plot with Encircling）</font></span></h3><p>有时候您想在一个边界内显示一组点来强调它们的重要性。在本例中，您将从被包围的数据中获取记录，并将其传递给下面的代码中描述的 <code>encircle()</code>。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> patches<span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> ConvexHull<span class="hljs-keyword">import</span> warnings; warnings.simplefilter(<span class="hljs-string">&#x27;ignore&#x27;</span>)sns.set_style(<span class="hljs-string">&quot;white&quot;</span>)<span class="hljs-comment"># Step 1: Prepare Data</span>midwest = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/midwest_filter.csv&quot;</span>)<span class="hljs-comment"># As many colors as there are unique midwest[&#x27;category&#x27;]</span>categories = np.unique(midwest[<span class="hljs-string">&#x27;category&#x27;</span>])colors = [plt.cm.tab10(i/<span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(categories)-<span class="hljs-number">1</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(categories))]<span class="hljs-comment"># Step 2: Draw Scatterplot with unique color for each category</span>fig = plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>, facecolor=<span class="hljs-string">&#x27;w&#x27;</span>, edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>)<span class="hljs-keyword">for</span> i, category <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(categories):    plt.scatter(<span class="hljs-string">&#x27;area&#x27;</span>, <span class="hljs-string">&#x27;poptotal&#x27;</span>, data=midwest.loc[midwest.category == category, :], s=<span class="hljs-string">&#x27;dot_size&#x27;</span>, cmap=colors[i], label=<span class="hljs-built_in">str</span>(category), edgecolors=<span class="hljs-string">&#x27;black&#x27;</span>, linewidths=<span class="hljs-number">.5</span>)<span class="hljs-comment"># 原文 c=colors[i] 已修改为 cmap=colors[i]</span><span class="hljs-comment"># Step 3: Encircling</span><span class="hljs-comment"># https://stackoverflow.com/questions/44575681/how-do-i-encircle-different-data-sets-in-scatter-plot</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encircle</span>(<span class="hljs-params">x,y, ax=<span class="hljs-literal">None</span>, **kw</span>):</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ax: ax = plt.gca()    p = np.c_[x, y]    hull = ConvexHull(p)    poly = plt.Polygon(p[hull.vertices, :], **kw)    ax.add_patch(poly)<span class="hljs-comment"># Select data to be encircled</span>midwest_encircle_data = midwest.loc[midwest.state==<span class="hljs-string">&#x27;IN&#x27;</span>, :]<span class="hljs-comment"># Draw polygon surrounding vertices</span>encircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec=<span class="hljs-string">&quot;k&quot;</span>, fc=<span class="hljs-string">&quot;gold&quot;</span>, alpha=<span class="hljs-number">0.1</span>)encircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec=<span class="hljs-string">&quot;firebrick&quot;</span>, fc=<span class="hljs-string">&quot;none&quot;</span>, linewidth=<span class="hljs-number">1.5</span>)<span class="hljs-comment"># Step 4: Decorations</span>plt.gca().<span class="hljs-built_in">set</span>(xlim=(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.1</span>), ylim=(<span class="hljs-number">0</span>, <span class="hljs-number">90000</span>),              xlabel=<span class="hljs-string">&#x27;Area&#x27;</span>, ylabel=<span class="hljs-string">&#x27;Population&#x27;</span>)plt.xticks(fontsize=<span class="hljs-number">12</span>); plt.yticks(fontsize=<span class="hljs-number">12</span>)plt.title(<span class="hljs-string">&quot;Bubble Plot with Encircling&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.legend(fontsize=<span class="hljs-number">12</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/02.png" alt="02"></p><h3><span id="03-dai-xian-xing-hui-gui-zui-jia-ni-he-xian-de-san-dian-tu-scatter-plot-with-linear-regression-line-of-best-fit"><font color="##4876FF">【03】带线性回归最佳拟合线的散点图（Scatter plot with linear regression line of best fit）</font></span></h3><p>如果你想了解两个变量之间是如何变化的，那么最佳拟合线就是常用的方法。下图显示了数据中不同组之间的最佳拟合线的差异。若要禁用分组并只为整个数据集绘制一条最佳拟合线，请从 <code>sns.lmplot()</code> 方法中删除 <code>hue ='cyl'</code> 参数。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv&quot;</span>)df_select = df.loc[df.cyl.isin([<span class="hljs-number">4</span>, <span class="hljs-number">8</span>]), :]<span class="hljs-comment"># Plot</span>sns.set_style(<span class="hljs-string">&quot;white&quot;</span>)gridobj = sns.lmplot(x=<span class="hljs-string">&quot;displ&quot;</span>, y=<span class="hljs-string">&quot;hwy&quot;</span>, hue=<span class="hljs-string">&quot;cyl&quot;</span>, data=df_select,                     height=<span class="hljs-number">7</span>, aspect=<span class="hljs-number">1.6</span>, robust=<span class="hljs-literal">True</span>, palette=<span class="hljs-string">&#x27;tab10&#x27;</span>,                     scatter_kws=<span class="hljs-built_in">dict</span>(s=<span class="hljs-number">60</span>, linewidths=<span class="hljs-number">.7</span>, edgecolors=<span class="hljs-string">&#x27;black&#x27;</span>))<span class="hljs-comment"># Decorations</span>gridobj.<span class="hljs-built_in">set</span>(xlim=(<span class="hljs-number">0.5</span>, <span class="hljs-number">7.5</span>), ylim=(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>))plt.title(<span class="hljs-string">&quot;Scatterplot with line of best fit grouped by number of cylinders&quot;</span>, fontsize=<span class="hljs-number">20</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/03.png" alt="03"></p><p>针对每一组数据绘制线性回归线（Each regression line in its own column），可以通过在 <code>sns.lmplot()</code> 中设置 <code>col=groupingcolumn</code> 参数来实现，如下：</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv&quot;</span>)df_select = df.loc[df.cyl.isin([<span class="hljs-number">4</span>, <span class="hljs-number">8</span>]), :]<span class="hljs-comment"># Each line in its own column</span>sns.set_style(<span class="hljs-string">&quot;white&quot;</span>)gridobj = sns.lmplot(x=<span class="hljs-string">&quot;displ&quot;</span>, y=<span class="hljs-string">&quot;hwy&quot;</span>,                     data=df_select,                     height=<span class="hljs-number">7</span>,                     robust=<span class="hljs-literal">True</span>,                     palette=<span class="hljs-string">&#x27;Set1&#x27;</span>,                     col=<span class="hljs-string">&quot;cyl&quot;</span>,                     scatter_kws=<span class="hljs-built_in">dict</span>(s=<span class="hljs-number">60</span>, linewidths=<span class="hljs-number">.7</span>, edgecolors=<span class="hljs-string">&#x27;black&#x27;</span>))<span class="hljs-comment"># Decorations</span>gridobj.<span class="hljs-built_in">set</span>(xlim=(<span class="hljs-number">0.5</span>, <span class="hljs-number">7.5</span>), ylim=(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>))plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/04.png" alt="04"></p><h3><span id="04-dou-dong-tu-jittering-with-stripplot"><font color="##4876FF">【04】抖动图（Jittering with stripplot）</font></span></h3><p>通常，多个数据点具有完全相同的 X 和 Y 值。 此时多个点绘制会重叠并隐藏。为避免这种情况，可以将数据点稍微抖动，以便可以直观地看到它们。 使用 <code>seaborn</code> 库的 <code>stripplot()</code> 方法可以很方便的实现这个功能。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Draw Stripplot</span>fig, ax = plt.subplots(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">10</span>), dpi= <span class="hljs-number">80</span>)sns.stripplot(df.cty, df.hwy, jitter=<span class="hljs-number">0.25</span>, size=<span class="hljs-number">8</span>, ax=ax, linewidth=<span class="hljs-number">.5</span>)<span class="hljs-comment"># Decorations</span>plt.title(<span class="hljs-string">&#x27;Use jittered plots to avoid overlapping of points&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/05.png" alt="05"></p><h3><span id="05-ji-shu-tu-counts-plot"><font color="##4876FF">【05】计数图（Counts Plot）</font></span></h3><p>避免点重叠问题的另一个选择是根据点的位置增加点的大小。所以，点的大小越大，它周围的点就越集中。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv&quot;</span>)df_counts = df.groupby([<span class="hljs-string">&#x27;hwy&#x27;</span>, <span class="hljs-string">&#x27;cty&#x27;</span>]).size().reset_index(name=<span class="hljs-string">&#x27;counts&#x27;</span>)<span class="hljs-comment"># Draw Stripplot</span>fig, ax = plt.subplots(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">10</span>), dpi= <span class="hljs-number">80</span>)    <span class="hljs-comment"># 原文代码</span><span class="hljs-comment"># sns.stripplot(df_counts.cty, df_counts.hwy, size=df_counts.counts*2, ax=ax)</span><span class="hljs-comment"># 纠正代码</span>sns.stripplot(df_counts.cty, df_counts.hwy, sizes=df_counts.counts*<span class="hljs-number">2</span>, ax=ax)<span class="hljs-comment"># Decorations</span>plt.title(<span class="hljs-string">&#x27;Counts Plot - Size of circle is bigger as more points overlap&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/06.png" alt="06"></p><h3><span id="06-bian-yuan-zhi-fang-tu-marginal-histogram"><font color="##4876FF">【06】边缘直方图（Marginal Histogram）</font></span></h3><p>边缘直方图是具有沿 X 和 Y 轴变量的直方图。 这用于可视化 X 和 Y 之间的关系以及单独的 X 和 Y 的单变量分布。 这种图经常用于探索性数据分析（EDA）。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Create Fig and gridspec</span>fig = plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi= <span class="hljs-number">80</span>)grid = plt.GridSpec(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, hspace=<span class="hljs-number">0.5</span>, wspace=<span class="hljs-number">0.2</span>)<span class="hljs-comment"># Define the axes</span>ax_main = fig.add_subplot(grid[:-<span class="hljs-number">1</span>, :-<span class="hljs-number">1</span>])ax_right = fig.add_subplot(grid[:-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>], xticklabels=[], yticklabels=[])ax_bottom = fig.add_subplot(grid[-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>:-<span class="hljs-number">1</span>], xticklabels=[], yticklabels=[])<span class="hljs-comment"># Scatterplot on main ax</span>ax_main.scatter(<span class="hljs-string">&#x27;displ&#x27;</span>, <span class="hljs-string">&#x27;hwy&#x27;</span>, s=df.cty*<span class="hljs-number">4</span>, c=df.manufacturer.astype(<span class="hljs-string">&#x27;category&#x27;</span>).cat.codes, alpha=<span class="hljs-number">.9</span>, data=df, cmap=<span class="hljs-string">&quot;tab10&quot;</span>, edgecolors=<span class="hljs-string">&#x27;gray&#x27;</span>, linewidths=<span class="hljs-number">.5</span>)<span class="hljs-comment"># histogram on the right</span>ax_bottom.hist(df.displ, <span class="hljs-number">40</span>, histtype=<span class="hljs-string">&#x27;stepfilled&#x27;</span>, orientation=<span class="hljs-string">&#x27;vertical&#x27;</span>, color=<span class="hljs-string">&#x27;deeppink&#x27;</span>)ax_bottom.invert_yaxis()<span class="hljs-comment"># histogram in the bottom</span>ax_right.hist(df.hwy, <span class="hljs-number">40</span>, histtype=<span class="hljs-string">&#x27;stepfilled&#x27;</span>, orientation=<span class="hljs-string">&#x27;horizontal&#x27;</span>, color=<span class="hljs-string">&#x27;deeppink&#x27;</span>)<span class="hljs-comment"># Decorations</span>ax_main.<span class="hljs-built_in">set</span>(title=<span class="hljs-string">&#x27;Scatterplot with Histograms \n displ vs hwy&#x27;</span>, xlabel=<span class="hljs-string">&#x27;displ&#x27;</span>, ylabel=<span class="hljs-string">&#x27;hwy&#x27;</span>)ax_main.title.set_fontsize(<span class="hljs-number">20</span>)<span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):    item.set_fontsize(<span class="hljs-number">14</span>)xlabels = ax_main.get_xticks().tolist()ax_main.set_xticklabels(xlabels)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/07.png" alt="07"></p><h3><span id="07-bian-yuan-xiang-xing-tu-marginal-boxplot"><font color="##4876FF">【07】边缘箱形图（Marginal Boxplot）</font></span></h3><p>边缘箱形图与边缘直方图具有相似的用途。 然而，箱线图有助于精确定位 X 和 Y 的中位数、第25和第75百分位数。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Create Fig and gridspec</span>fig = plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi= <span class="hljs-number">80</span>)grid = plt.GridSpec(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, hspace=<span class="hljs-number">0.5</span>, wspace=<span class="hljs-number">0.2</span>)<span class="hljs-comment"># Define the axes</span>ax_main = fig.add_subplot(grid[:-<span class="hljs-number">1</span>, :-<span class="hljs-number">1</span>])ax_right = fig.add_subplot(grid[:-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>], xticklabels=[], yticklabels=[])ax_bottom = fig.add_subplot(grid[-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>:-<span class="hljs-number">1</span>], xticklabels=[], yticklabels=[])<span class="hljs-comment"># Scatterplot on main ax</span>ax_main.scatter(<span class="hljs-string">&#x27;displ&#x27;</span>, <span class="hljs-string">&#x27;hwy&#x27;</span>, s=df.cty*<span class="hljs-number">5</span>, c=df.manufacturer.astype(<span class="hljs-string">&#x27;category&#x27;</span>).cat.codes, alpha=<span class="hljs-number">.9</span>, data=df, cmap=<span class="hljs-string">&quot;Set1&quot;</span>, edgecolors=<span class="hljs-string">&#x27;black&#x27;</span>, linewidths=<span class="hljs-number">.5</span>)<span class="hljs-comment"># Add a graph in each part</span>sns.boxplot(df.hwy, ax=ax_right, orient=<span class="hljs-string">&quot;v&quot;</span>)sns.boxplot(df.displ, ax=ax_bottom, orient=<span class="hljs-string">&quot;h&quot;</span>)<span class="hljs-comment"># Decorations ------------------</span><span class="hljs-comment"># Remove x axis name for the boxplot</span>ax_bottom.<span class="hljs-built_in">set</span>(xlabel=<span class="hljs-string">&#x27;&#x27;</span>)ax_right.<span class="hljs-built_in">set</span>(ylabel=<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment"># Main Title, Xlabel and YLabel</span>ax_main.<span class="hljs-built_in">set</span>(title=<span class="hljs-string">&#x27;Scatterplot with Histograms \n displ vs hwy&#x27;</span>, xlabel=<span class="hljs-string">&#x27;displ&#x27;</span>, ylabel=<span class="hljs-string">&#x27;hwy&#x27;</span>)<span class="hljs-comment"># Set font size of different components</span>ax_main.title.set_fontsize(<span class="hljs-number">20</span>)<span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):    item.set_fontsize(<span class="hljs-number">14</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/08.png" alt="08"></p><h3><span id="08-xiang-guan-tu-correllogram"><font color="##4876FF">【08】相关图（Correllogram）</font></span></h3><p>相关图用于直观地查看给定数据帧（或二维数组）中所有可能的数值变量对之间的相关性度量。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Dataset</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mtcars.csv&quot;</span>)<span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)sns.heatmap(df.corr(), xticklabels=df.corr().columns, yticklabels=df.corr().columns, cmap=<span class="hljs-string">&#x27;RdYlGn&#x27;</span>, center=<span class="hljs-number">0</span>, annot=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Decorations</span>plt.title(<span class="hljs-string">&#x27;Correlogram of mtcars&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.xticks(fontsize=<span class="hljs-number">12</span>)plt.yticks(fontsize=<span class="hljs-number">12</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/09.png" alt="09"></p><h3><span id="09-cheng-dui-tu-pairwise-plot"><font color="##4876FF">【09】成对图（Pairwise Plot）</font></span></h3><p>成对图是探索性分析中最受欢迎的一种方法，用来理解所有可能的数值变量对之间的关系。它是二元分析的必备工具。</p><pre><code class="hljs python"><span class="hljs-comment"># Load Dataset</span>df = sns.load_dataset(<span class="hljs-string">&#x27;iris&#x27;</span>)<span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>), dpi=<span class="hljs-number">80</span>)sns.pairplot(df, kind=<span class="hljs-string">&quot;scatter&quot;</span>, hue=<span class="hljs-string">&quot;species&quot;</span>, plot_kws=<span class="hljs-built_in">dict</span>(s=<span class="hljs-number">80</span>, edgecolor=<span class="hljs-string">&quot;white&quot;</span>, linewidth=<span class="hljs-number">2.5</span>))plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/10.png" alt="10"></p><pre><code class="hljs python"><span class="hljs-comment"># Load Dataset</span>df = sns.load_dataset(<span class="hljs-string">&#x27;iris&#x27;</span>)<span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>), dpi=<span class="hljs-number">80</span>)sns.pairplot(df, kind=<span class="hljs-string">&quot;reg&quot;</span>, hue=<span class="hljs-string">&quot;species&quot;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/11.png" alt="11"></p><h2><span id="4x00-pian-chai-deviation"><font color="#FF0000">【4x00】偏差（Deviation）</font></span></h2><h3><span id="10-fa-san-xing-tiao-xing-tu-diverging-bars"><font color="##4876FF">【10】发散型条形图（Diverging Bars）</font></span></h3><p>如果您想根据单个指标查看项目的变化情况，并可视化此差异的顺序和数量，那么散型条形图是一个很好的工具。 它有助于快速区分数据组的性能，并且非常直观，并且可以立即传达这一点。</p><pre><code class="hljs python"><span class="hljs-comment"># Prepare Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mtcars.csv&quot;</span>)x = df.loc[:, [<span class="hljs-string">&#x27;mpg&#x27;</span>]]df[<span class="hljs-string">&#x27;mpg_z&#x27;</span>] = (x - x.mean())/x.std()df[<span class="hljs-string">&#x27;colors&#x27;</span>] = [<span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;green&#x27;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df[<span class="hljs-string">&#x27;mpg_z&#x27;</span>]]df.sort_values(<span class="hljs-string">&#x27;mpg_z&#x27;</span>, inplace=<span class="hljs-literal">True</span>)df.reset_index(inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Draw plot</span>plt.figure(figsize=(<span class="hljs-number">14</span>,<span class="hljs-number">10</span>), dpi= <span class="hljs-number">80</span>)plt.hlines(y=df.index, xmin=<span class="hljs-number">0</span>, xmax=df.mpg_z, color=df.colors, alpha=<span class="hljs-number">0.4</span>, linewidth=<span class="hljs-number">5</span>)<span class="hljs-comment"># Decorations</span>plt.gca().<span class="hljs-built_in">set</span>(ylabel=<span class="hljs-string">&#x27;$Model$&#x27;</span>, xlabel=<span class="hljs-string">&#x27;$Mileage$&#x27;</span>)plt.yticks(df.index, df.cars, fontsize=<span class="hljs-number">12</span>)plt.title(<span class="hljs-string">&#x27;Diverging Bars of Car Mileage&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>:<span class="hljs-number">20</span>&#125;)plt.grid(linestyle=<span class="hljs-string">&#x27;--&#x27;</span>, alpha=<span class="hljs-number">0.5</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/12.png" alt="12"></p><h3><span id="11-fa-san-xing-wen-ben-tu-diverging-texts"><font color="##4876FF">【11】发散型文本图（Diverging Texts）</font></span></h3><p>发散型文本图与发散型条形图相似，如果你希望以一种美观的方式显示图表中每个项目的值，就可以使用这种方法。</p><pre><code class="hljs python"><span class="hljs-comment"># Prepare Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mtcars.csv&quot;</span>)x = df.loc[:, [<span class="hljs-string">&#x27;mpg&#x27;</span>]]df[<span class="hljs-string">&#x27;mpg_z&#x27;</span>] = (x - x.mean())/x.std()df[<span class="hljs-string">&#x27;colors&#x27;</span>] = [<span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;green&#x27;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df[<span class="hljs-string">&#x27;mpg_z&#x27;</span>]]df.sort_values(<span class="hljs-string">&#x27;mpg_z&#x27;</span>, inplace=<span class="hljs-literal">True</span>)df.reset_index(inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Draw plot</span>plt.figure(figsize=(<span class="hljs-number">14</span>, <span class="hljs-number">14</span>), dpi=<span class="hljs-number">80</span>)plt.hlines(y=df.index, xmin=<span class="hljs-number">0</span>, xmax=df.mpg_z)<span class="hljs-keyword">for</span> x, y, tex <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(df.mpg_z, df.index, df.mpg_z):    t = plt.text(x, y, <span class="hljs-built_in">round</span>(tex, <span class="hljs-number">2</span>), horizontalalignment=<span class="hljs-string">&#x27;right&#x27;</span> <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;left&#x27;</span>,                 verticalalignment=<span class="hljs-string">&#x27;center&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;color&#x27;</span>:<span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;size&#x27;</span>:<span class="hljs-number">14</span>&#125;)<span class="hljs-comment"># Decorations</span>plt.yticks(df.index, df.cars, fontsize=<span class="hljs-number">12</span>)plt.title(<span class="hljs-string">&#x27;Diverging Text Bars of Car Mileage&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>:<span class="hljs-number">20</span>&#125;)plt.grid(linestyle=<span class="hljs-string">&#x27;--&#x27;</span>, alpha=<span class="hljs-number">0.5</span>)plt.xlim(-<span class="hljs-number">2.5</span>, <span class="hljs-number">2.5</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/13.png" alt="13"></p><h3><span id="12-fa-san-xing-san-dian-tu-diverging-dot-plot"><font color="##4876FF">【12】发散型散点图（Diverging Dot Plot）</font></span></h3><p>发散型散点图类似于发散型条形图。 但是，与发散型条形图相比，没有条形会减少组之间的对比度和差异。</p><pre><code class="hljs python"><span class="hljs-comment"># Prepare Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mtcars.csv&quot;</span>)x = df.loc[:, [<span class="hljs-string">&#x27;mpg&#x27;</span>]]df[<span class="hljs-string">&#x27;mpg_z&#x27;</span>] = (x - x.mean())/x.std()df[<span class="hljs-string">&#x27;colors&#x27;</span>] = [<span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;darkgreen&#x27;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df[<span class="hljs-string">&#x27;mpg_z&#x27;</span>]]df.sort_values(<span class="hljs-string">&#x27;mpg_z&#x27;</span>, inplace=<span class="hljs-literal">True</span>)df.reset_index(inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Draw plot</span>plt.figure(figsize=(<span class="hljs-number">14</span>, <span class="hljs-number">16</span>), dpi=<span class="hljs-number">80</span>)plt.scatter(df.mpg_z, df.index, s=<span class="hljs-number">450</span>, alpha=<span class="hljs-number">.6</span>, color=df.colors)<span class="hljs-keyword">for</span> x, y, tex <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(df.mpg_z, df.index, df.mpg_z):    t = plt.text(x, y, <span class="hljs-built_in">round</span>(tex, <span class="hljs-number">1</span>), horizontalalignment=<span class="hljs-string">&#x27;center&#x27;</span>,                 verticalalignment=<span class="hljs-string">&#x27;center&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;white&#x27;</span>&#125;)<span class="hljs-comment"># Decorations</span><span class="hljs-comment"># Lighten borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.yticks(df.index, df.cars)plt.title(<span class="hljs-string">&#x27;Diverging Dotplot of Car Mileage&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">20</span>&#125;)plt.xlabel(<span class="hljs-string">&#x27;$Mileage$&#x27;</span>)plt.grid(linestyle=<span class="hljs-string">&#x27;--&#x27;</span>, alpha=<span class="hljs-number">0.5</span>)plt.xlim(-<span class="hljs-number">2.5</span>, <span class="hljs-number">2.5</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/14.png" alt="14"></p><h3><span id="13-dai-biao-ji-de-fa-san-xing-bang-bang-tang-tu-diverging-lollipop-chart-with-markers"><font color="##4876FF">【13】带标记的发散型棒棒糖图（Diverging Lollipop Chart with Markers）</font></span></h3><p>带有标记的棒棒糖提供了一种灵活的方式，强调您想要引起注意的任何重要数据点并在图表中适当地给出推理。</p><pre><code class="hljs python"><span class="hljs-comment"># Prepare Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mtcars.csv&quot;</span>)x = df.loc[:, [<span class="hljs-string">&#x27;mpg&#x27;</span>]]df[<span class="hljs-string">&#x27;mpg_z&#x27;</span>] = (x - x.mean())/x.std()df[<span class="hljs-string">&#x27;colors&#x27;</span>] = <span class="hljs-string">&#x27;black&#x27;</span><span class="hljs-comment"># color fiat differently</span>df.loc[df.cars == <span class="hljs-string">&#x27;Fiat X1-9&#x27;</span>, <span class="hljs-string">&#x27;colors&#x27;</span>] = <span class="hljs-string">&#x27;darkorange&#x27;</span>df.sort_values(<span class="hljs-string">&#x27;mpg_z&#x27;</span>, inplace=<span class="hljs-literal">True</span>)df.reset_index(inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Draw plot</span><span class="hljs-keyword">import</span> matplotlib.patches <span class="hljs-keyword">as</span> patchesplt.figure(figsize=(<span class="hljs-number">14</span>, <span class="hljs-number">16</span>), dpi=<span class="hljs-number">80</span>)plt.hlines(y=df.index, xmin=<span class="hljs-number">0</span>, xmax=df.mpg_z, color=df.colors, alpha=<span class="hljs-number">0.4</span>, linewidth=<span class="hljs-number">1</span>)plt.scatter(df.mpg_z, df.index, color=df.colors, s=[<span class="hljs-number">600</span> <span class="hljs-keyword">if</span> x == <span class="hljs-string">&#x27;Fiat X1-9&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-number">300</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df.cars], alpha=<span class="hljs-number">0.6</span>)plt.yticks(df.index, df.cars)plt.xticks(fontsize=<span class="hljs-number">12</span>)<span class="hljs-comment"># Annotate</span>plt.annotate(<span class="hljs-string">&#x27;Mercedes Models&#x27;</span>, xy=(<span class="hljs-number">0.0</span>, <span class="hljs-number">11.0</span>), xytext=(<span class="hljs-number">1.0</span>, <span class="hljs-number">11</span>), xycoords=<span class="hljs-string">&#x27;data&#x27;</span>,            fontsize=<span class="hljs-number">15</span>, ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;center&#x27;</span>,            bbox=<span class="hljs-built_in">dict</span>(boxstyle=<span class="hljs-string">&#x27;square&#x27;</span>, fc=<span class="hljs-string">&#x27;firebrick&#x27;</span>),            arrowprops=<span class="hljs-built_in">dict</span>(arrowstyle=<span class="hljs-string">&#x27;-[, widthB=2.0, lengthB=1.5&#x27;</span>, lw=<span class="hljs-number">2.0</span>, color=<span class="hljs-string">&#x27;steelblue&#x27;</span>), color=<span class="hljs-string">&#x27;white&#x27;</span>)<span class="hljs-comment"># Add Patches</span>p1 = patches.Rectangle((-<span class="hljs-number">2.0</span>, -<span class="hljs-number">1</span>), width=<span class="hljs-number">.3</span>, height=<span class="hljs-number">3</span>, alpha=<span class="hljs-number">.2</span>, facecolor=<span class="hljs-string">&#x27;red&#x27;</span>)p2 = patches.Rectangle((<span class="hljs-number">1.5</span>, <span class="hljs-number">27</span>), width=<span class="hljs-number">.8</span>, height=<span class="hljs-number">5</span>, alpha=<span class="hljs-number">.2</span>, facecolor=<span class="hljs-string">&#x27;green&#x27;</span>)plt.gca().add_patch(p1)plt.gca().add_patch(p2)<span class="hljs-comment"># Decorate</span>plt.title(<span class="hljs-string">&#x27;Diverging Bars of Car Mileage&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">20</span>&#125;)plt.grid(linestyle=<span class="hljs-string">&#x27;--&#x27;</span>, alpha=<span class="hljs-number">0.5</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/15.png" alt="15"></p><h3><span id="14-mian-ji-tu-area-chart"><font color="##4876FF">【14】面积图（Area Chart）</font></span></h3><p>通过对轴和线之间的区域进行着色，面积图不仅强调波峰和波谷，还强调波峰和波谷的持续时间。 高点持续时间越长，线下面积越大。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-comment"># Prepare Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/economics.csv&quot;</span>, parse_dates=[<span class="hljs-string">&#x27;date&#x27;</span>]).head(<span class="hljs-number">100</span>)x = np.arange(df.shape[<span class="hljs-number">0</span>])y_returns = (df.psavert.diff().fillna(<span class="hljs-number">0</span>)/df.psavert.shift(<span class="hljs-number">1</span>)).fillna(<span class="hljs-number">0</span>) * <span class="hljs-number">100</span><span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)plt.fill_between(x[<span class="hljs-number">1</span>:], y_returns[<span class="hljs-number">1</span>:], <span class="hljs-number">0</span>, where=y_returns[<span class="hljs-number">1</span>:] &gt;= <span class="hljs-number">0</span>, facecolor=<span class="hljs-string">&#x27;green&#x27;</span>, interpolate=<span class="hljs-literal">True</span>, alpha=<span class="hljs-number">0.7</span>)plt.fill_between(x[<span class="hljs-number">1</span>:], y_returns[<span class="hljs-number">1</span>:], <span class="hljs-number">0</span>, where=y_returns[<span class="hljs-number">1</span>:] &lt;= <span class="hljs-number">0</span>, facecolor=<span class="hljs-string">&#x27;red&#x27;</span>, interpolate=<span class="hljs-literal">True</span>, alpha=<span class="hljs-number">0.7</span>)<span class="hljs-comment"># Annotate</span>plt.annotate(<span class="hljs-string">&#x27;Peak \n1975&#x27;</span>, xy=(<span class="hljs-number">94.0</span>, <span class="hljs-number">21.0</span>), xytext=(<span class="hljs-number">88.0</span>, <span class="hljs-number">28</span>),             bbox=<span class="hljs-built_in">dict</span>(boxstyle=<span class="hljs-string">&#x27;square&#x27;</span>, fc=<span class="hljs-string">&#x27;firebrick&#x27;</span>),             arrowprops=<span class="hljs-built_in">dict</span>(facecolor=<span class="hljs-string">&#x27;steelblue&#x27;</span>, shrink=<span class="hljs-number">0.05</span>), fontsize=<span class="hljs-number">15</span>, color=<span class="hljs-string">&#x27;white&#x27;</span>)<span class="hljs-comment"># Decorations</span>xtickvals = [<span class="hljs-built_in">str</span>(m)[:<span class="hljs-number">3</span>].upper()+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-built_in">str</span>(y) <span class="hljs-keyword">for</span> y, m <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(df.date.dt.year, df.date.dt.month_name())]plt.gca().set_xticks(x[::<span class="hljs-number">6</span>])plt.gca().set_xticklabels(xtickvals[::<span class="hljs-number">6</span>], rotation=<span class="hljs-number">90</span>, fontdict=&#123;<span class="hljs-string">&#x27;horizontalalignment&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-string">&#x27;verticalalignment&#x27;</span>: <span class="hljs-string">&#x27;center_baseline&#x27;</span>&#125;)plt.ylim(-<span class="hljs-number">35</span>, <span class="hljs-number">35</span>)plt.xlim(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)plt.title(<span class="hljs-string">&quot;Month Economics Return %&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.ylabel(<span class="hljs-string">&#x27;Monthly returns %&#x27;</span>)plt.grid(alpha=<span class="hljs-number">0.5</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/16.png" alt="16"></p><h2><span id="5x00-pai-xu-ranking"><font color="#FF0000">【5x00】排序（Ranking）</font></span></h2><h3><span id="15-you-xu-tiao-xing-tu-ordered-bar-chart"><font color="##4876FF">【15】有序条形图（Ordered Bar Chart）</font></span></h3><p>有序条形图有效地传达了项目的排序顺序。在图表上方添加度量标准的值，用户就可以从图表本身获得精确的信息。</p><pre><code class="hljs python"><span class="hljs-comment"># Prepare Data</span>df_raw = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)df = df_raw[[<span class="hljs-string">&#x27;cty&#x27;</span>, <span class="hljs-string">&#x27;manufacturer&#x27;</span>]].groupby(<span class="hljs-string">&#x27;manufacturer&#x27;</span>).apply(<span class="hljs-keyword">lambda</span> x: x.mean())df.sort_values(<span class="hljs-string">&#x27;cty&#x27;</span>, inplace=<span class="hljs-literal">True</span>)df.reset_index(inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Draw plot</span><span class="hljs-keyword">import</span> matplotlib.patches <span class="hljs-keyword">as</span> patchesfig, ax = plt.subplots(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">10</span>), facecolor=<span class="hljs-string">&#x27;white&#x27;</span>, dpi= <span class="hljs-number">80</span>)ax.vlines(x=df.index, ymin=<span class="hljs-number">0</span>, ymax=df.cty, color=<span class="hljs-string">&#x27;firebrick&#x27;</span>, alpha=<span class="hljs-number">0.7</span>, linewidth=<span class="hljs-number">20</span>)<span class="hljs-comment"># Annotate Text</span><span class="hljs-keyword">for</span> i, cty <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(df.cty):    ax.text(i, cty+<span class="hljs-number">0.5</span>, <span class="hljs-built_in">round</span>(cty, <span class="hljs-number">1</span>), horizontalalignment=<span class="hljs-string">&#x27;center&#x27;</span>)<span class="hljs-comment"># Title, Label, Ticks and Ylim</span>ax.set_title(<span class="hljs-string">&#x27;Bar Chart for Highway Mileage&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>:<span class="hljs-number">22</span>&#125;)ax.<span class="hljs-built_in">set</span>(ylabel=<span class="hljs-string">&#x27;Miles Per Gallon&#x27;</span>, ylim=(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>))plt.xticks(df.index, df.manufacturer.<span class="hljs-built_in">str</span>.upper(), rotation=<span class="hljs-number">60</span>, horizontalalignment=<span class="hljs-string">&#x27;right&#x27;</span>, fontsize=<span class="hljs-number">12</span>)<span class="hljs-comment"># Add patches to color the X axis labels</span>p1 = patches.Rectangle((<span class="hljs-number">.57</span>, -<span class="hljs-number">0.005</span>), width=<span class="hljs-number">.33</span>, height=<span class="hljs-number">.13</span>, alpha=<span class="hljs-number">.1</span>, facecolor=<span class="hljs-string">&#x27;green&#x27;</span>, transform=fig.transFigure)p2 = patches.Rectangle((<span class="hljs-number">.124</span>, -<span class="hljs-number">0.005</span>), width=<span class="hljs-number">.446</span>, height=<span class="hljs-number">.13</span>, alpha=<span class="hljs-number">.1</span>, facecolor=<span class="hljs-string">&#x27;red&#x27;</span>, transform=fig.transFigure)fig.add_artist(p1)fig.add_artist(p2)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/17.png" alt="17"></p><h3><span id="16-bang-bang-tang-tu-lollipop-chart"><font color="##4876FF">【16】棒棒糖图（Lollipop Chart）</font></span></h3><p>棒棒糖图表以一种视觉上令人愉悦的方式提供与有序条形图类似的目的。</p><pre><code class="hljs python"><span class="hljs-comment"># Prepare Data</span>df_raw = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)df = df_raw[[<span class="hljs-string">&#x27;cty&#x27;</span>, <span class="hljs-string">&#x27;manufacturer&#x27;</span>]].groupby(<span class="hljs-string">&#x27;manufacturer&#x27;</span>).apply(<span class="hljs-keyword">lambda</span> x: x.mean())df.sort_values(<span class="hljs-string">&#x27;cty&#x27;</span>, inplace=<span class="hljs-literal">True</span>)df.reset_index(inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Draw plot</span>fig, ax = plt.subplots(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)ax.vlines(x=df.index, ymin=<span class="hljs-number">0</span>, ymax=df.cty, color=<span class="hljs-string">&#x27;firebrick&#x27;</span>, alpha=<span class="hljs-number">0.7</span>, linewidth=<span class="hljs-number">2</span>)ax.scatter(x=df.index, y=df.cty, s=<span class="hljs-number">75</span>, color=<span class="hljs-string">&#x27;firebrick&#x27;</span>, alpha=<span class="hljs-number">0.7</span>)<span class="hljs-comment"># Title, Label, Ticks and Ylim</span>ax.set_title(<span class="hljs-string">&#x27;Lollipop Chart for Highway Mileage&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">22</span>&#125;)ax.set_ylabel(<span class="hljs-string">&#x27;Miles Per Gallon&#x27;</span>)ax.set_xticks(df.index)ax.set_xticklabels(df.manufacturer.<span class="hljs-built_in">str</span>.upper(), rotation=<span class="hljs-number">60</span>, fontdict=&#123;<span class="hljs-string">&#x27;horizontalalignment&#x27;</span>: <span class="hljs-string">&#x27;right&#x27;</span>, <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">12</span>&#125;)ax.set_ylim(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>)<span class="hljs-comment"># Annotate</span><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> df.itertuples():    ax.text(row.Index, row.cty+<span class="hljs-number">.5</span>, s=<span class="hljs-built_in">round</span>(row.cty, <span class="hljs-number">2</span>), horizontalalignment=<span class="hljs-string">&#x27;center&#x27;</span>, verticalalignment=<span class="hljs-string">&#x27;bottom&#x27;</span>, fontsize=<span class="hljs-number">14</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/18.png" alt="18"></p><h3><span id="17-dian-tu-dot-plot"><font color="##4876FF">【17】点图（Dot Plot）</font></span></h3><p>点图可以表示项目的排名顺序。由于它是沿水平轴对齐的，所以可以更容易地看到点之间的距离。</p><pre><code class="hljs python"><span class="hljs-comment"># Prepare Data</span>df_raw = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)df = df_raw[[<span class="hljs-string">&#x27;cty&#x27;</span>, <span class="hljs-string">&#x27;manufacturer&#x27;</span>]].groupby(<span class="hljs-string">&#x27;manufacturer&#x27;</span>).apply(<span class="hljs-keyword">lambda</span> x: x.mean())df.sort_values(<span class="hljs-string">&#x27;cty&#x27;</span>, inplace=<span class="hljs-literal">True</span>)df.reset_index(inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Draw plot</span>fig, ax = plt.subplots(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)ax.hlines(y=df.index, xmin=<span class="hljs-number">11</span>, xmax=<span class="hljs-number">26</span>, color=<span class="hljs-string">&#x27;gray&#x27;</span>, alpha=<span class="hljs-number">0.7</span>, linewidth=<span class="hljs-number">1</span>, linestyles=<span class="hljs-string">&#x27;dashdot&#x27;</span>)ax.scatter(y=df.index, x=df.cty, s=<span class="hljs-number">75</span>, color=<span class="hljs-string">&#x27;firebrick&#x27;</span>, alpha=<span class="hljs-number">0.7</span>)<span class="hljs-comment"># Title, Label, Ticks and Ylim</span>ax.set_title(<span class="hljs-string">&#x27;Dot Plot for Highway Mileage&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">22</span>&#125;)ax.set_xlabel(<span class="hljs-string">&#x27;Miles Per Gallon&#x27;</span>)ax.set_yticks(df.index)ax.set_yticklabels(df.manufacturer.<span class="hljs-built_in">str</span>.title(), fontdict=&#123;<span class="hljs-string">&#x27;horizontalalignment&#x27;</span>: <span class="hljs-string">&#x27;right&#x27;</span>&#125;)ax.set_xlim(<span class="hljs-number">10</span>, <span class="hljs-number">27</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/19.png" alt="19"></p><h3><span id="18-po-du-tu-slope-chart"><font color="##4876FF">【18】坡度图（Slope Chart）</font></span></h3><p>坡度图最适合比较给定人员/项目的“前”和“后”位置。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.lines <span class="hljs-keyword">as</span> mlines<span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/gdppercap.csv&quot;</span>)left_label = [<span class="hljs-built_in">str</span>(c) + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">round</span>(y)) <span class="hljs-keyword">for</span> c, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(df.continent, df[<span class="hljs-string">&#x27;1952&#x27;</span>])]right_label = [<span class="hljs-built_in">str</span>(c) + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">round</span>(y)) <span class="hljs-keyword">for</span> c, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(df.continent, df[<span class="hljs-string">&#x27;1957&#x27;</span>])]klass = [<span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-keyword">if</span> (y1 - y2) &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;green&#x27;</span> <span class="hljs-keyword">for</span> y1, y2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(df[<span class="hljs-string">&#x27;1952&#x27;</span>], df[<span class="hljs-string">&#x27;1957&#x27;</span>])]<span class="hljs-comment"># draw line</span><span class="hljs-comment"># https://stackoverflow.com/questions/36470343/how-to-draw-a-line-with-matplotlib/36479941</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">newline</span>(<span class="hljs-params">p1, p2, color=<span class="hljs-string">&#x27;black&#x27;</span></span>):</span>    ax = plt.gca()    l = mlines.Line2D([p1[<span class="hljs-number">0</span>], p2[<span class="hljs-number">0</span>]], [p1[<span class="hljs-number">1</span>], p2[<span class="hljs-number">1</span>]], color=<span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-keyword">if</span> p1[<span class="hljs-number">1</span>] - p2[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;green&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>,                      markersize=<span class="hljs-number">6</span>)    ax.add_line(l)    <span class="hljs-keyword">return</span> lfig, ax = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">14</span>, <span class="hljs-number">14</span>), dpi=<span class="hljs-number">80</span>)<span class="hljs-comment"># Vertical Lines</span>ax.vlines(x=<span class="hljs-number">1</span>, ymin=<span class="hljs-number">500</span>, ymax=<span class="hljs-number">13000</span>, color=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">0.7</span>, linewidth=<span class="hljs-number">1</span>, linestyles=<span class="hljs-string">&#x27;dotted&#x27;</span>)ax.vlines(x=<span class="hljs-number">3</span>, ymin=<span class="hljs-number">500</span>, ymax=<span class="hljs-number">13000</span>, color=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">0.7</span>, linewidth=<span class="hljs-number">1</span>, linestyles=<span class="hljs-string">&#x27;dotted&#x27;</span>)<span class="hljs-comment"># Points</span>ax.scatter(y=df[<span class="hljs-string">&#x27;1952&#x27;</span>], x=np.repeat(<span class="hljs-number">1</span>, df.shape[<span class="hljs-number">0</span>]), s=<span class="hljs-number">10</span>, color=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">0.7</span>)ax.scatter(y=df[<span class="hljs-string">&#x27;1957&#x27;</span>], x=np.repeat(<span class="hljs-number">3</span>, df.shape[<span class="hljs-number">0</span>]), s=<span class="hljs-number">10</span>, color=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">0.7</span>)<span class="hljs-comment"># Line Segmentsand Annotation</span><span class="hljs-keyword">for</span> p1, p2, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(df[<span class="hljs-string">&#x27;1952&#x27;</span>], df[<span class="hljs-string">&#x27;1957&#x27;</span>], df[<span class="hljs-string">&#x27;continent&#x27;</span>]):    newline([<span class="hljs-number">1</span>, p1], [<span class="hljs-number">3</span>, p2])    ax.text(<span class="hljs-number">1</span> - <span class="hljs-number">0.05</span>, p1, c + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">round</span>(p1)), horizontalalignment=<span class="hljs-string">&#x27;right&#x27;</span>, verticalalignment=<span class="hljs-string">&#x27;center&#x27;</span>,            fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;)    ax.text(<span class="hljs-number">3</span> + <span class="hljs-number">0.05</span>, p2, c + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">round</span>(p2)), horizontalalignment=<span class="hljs-string">&#x27;left&#x27;</span>, verticalalignment=<span class="hljs-string">&#x27;center&#x27;</span>,            fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;)<span class="hljs-comment"># &#x27;Before&#x27; and &#x27;After&#x27; Annotations</span>ax.text(<span class="hljs-number">1</span> - <span class="hljs-number">0.05</span>, <span class="hljs-number">13000</span>, <span class="hljs-string">&#x27;BEFORE&#x27;</span>, horizontalalignment=<span class="hljs-string">&#x27;right&#x27;</span>, verticalalignment=<span class="hljs-string">&#x27;center&#x27;</span>,        fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">700</span>&#125;)ax.text(<span class="hljs-number">3</span> + <span class="hljs-number">0.05</span>, <span class="hljs-number">13000</span>, <span class="hljs-string">&#x27;AFTER&#x27;</span>, horizontalalignment=<span class="hljs-string">&#x27;left&#x27;</span>, verticalalignment=<span class="hljs-string">&#x27;center&#x27;</span>,        fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-number">700</span>&#125;)<span class="hljs-comment"># Decoration</span>ax.set_title(<span class="hljs-string">&quot;Slopechart: Comparing GDP Per Capita between 1952 vs 1957&quot;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">22</span>&#125;)ax.<span class="hljs-built_in">set</span>(xlim=(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>), ylim=(<span class="hljs-number">0</span>, <span class="hljs-number">14000</span>), ylabel=<span class="hljs-string">&#x27;Mean GDP Per Capita&#x27;</span>)ax.set_xticks([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>])ax.set_xticklabels([<span class="hljs-string">&quot;1952&quot;</span>, <span class="hljs-string">&quot;1957&quot;</span>])plt.yticks(np.arange(<span class="hljs-number">500</span>, <span class="hljs-number">13000</span>, <span class="hljs-number">2000</span>), fontsize=<span class="hljs-number">12</span>)<span class="hljs-comment"># Lighten borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">.0</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">.0</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">.0</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">.0</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/20.png" alt="20"></p><h3><span id="19-ya-ling-tu-dumbbell-plot"><font color="##4876FF">【19】哑铃图（Dumbbell Plot）</font></span></h3><p>哑铃图传达了各种项目的“前”和“后”位置以及项目的等级顺序。如果您希望可视化特定项目/计划对不同对象的影响，那么它非常有用。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.lines <span class="hljs-keyword">as</span> mlines<span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/health.csv&quot;</span>)df.sort_values(<span class="hljs-string">&#x27;pct_2014&#x27;</span>, inplace=<span class="hljs-literal">True</span>)df.reset_index(inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Func to draw line segment</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">newline</span>(<span class="hljs-params">p1, p2, color=<span class="hljs-string">&#x27;black&#x27;</span></span>):</span>    ax = plt.gca()    l = mlines.Line2D([p1[<span class="hljs-number">0</span>], p2[<span class="hljs-number">0</span>]], [p1[<span class="hljs-number">1</span>], p2[<span class="hljs-number">1</span>]], color=<span class="hljs-string">&#x27;skyblue&#x27;</span>)    ax.add_line(l)    <span class="hljs-keyword">return</span> l<span class="hljs-comment"># Figure and Axes</span>fig, ax = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">14</span>, <span class="hljs-number">14</span>), facecolor=<span class="hljs-string">&#x27;#f7f7f7&#x27;</span>, dpi=<span class="hljs-number">80</span>)<span class="hljs-comment"># Vertical Lines</span>ax.vlines(x=<span class="hljs-number">.05</span>, ymin=<span class="hljs-number">0</span>, ymax=<span class="hljs-number">26</span>, color=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">1</span>, linewidth=<span class="hljs-number">1</span>, linestyles=<span class="hljs-string">&#x27;dotted&#x27;</span>)ax.vlines(x=<span class="hljs-number">.10</span>, ymin=<span class="hljs-number">0</span>, ymax=<span class="hljs-number">26</span>, color=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">1</span>, linewidth=<span class="hljs-number">1</span>, linestyles=<span class="hljs-string">&#x27;dotted&#x27;</span>)ax.vlines(x=<span class="hljs-number">.15</span>, ymin=<span class="hljs-number">0</span>, ymax=<span class="hljs-number">26</span>, color=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">1</span>, linewidth=<span class="hljs-number">1</span>, linestyles=<span class="hljs-string">&#x27;dotted&#x27;</span>)ax.vlines(x=<span class="hljs-number">.20</span>, ymin=<span class="hljs-number">0</span>, ymax=<span class="hljs-number">26</span>, color=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">1</span>, linewidth=<span class="hljs-number">1</span>, linestyles=<span class="hljs-string">&#x27;dotted&#x27;</span>)<span class="hljs-comment"># Points</span>ax.scatter(y=df[<span class="hljs-string">&#x27;index&#x27;</span>], x=df[<span class="hljs-string">&#x27;pct_2013&#x27;</span>], s=<span class="hljs-number">50</span>, color=<span class="hljs-string">&#x27;#0e668b&#x27;</span>, alpha=<span class="hljs-number">0.7</span>)ax.scatter(y=df[<span class="hljs-string">&#x27;index&#x27;</span>], x=df[<span class="hljs-string">&#x27;pct_2014&#x27;</span>], s=<span class="hljs-number">50</span>, color=<span class="hljs-string">&#x27;#a3c4dc&#x27;</span>, alpha=<span class="hljs-number">0.7</span>)<span class="hljs-comment"># Line Segments</span><span class="hljs-keyword">for</span> i, p1, p2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(df[<span class="hljs-string">&#x27;index&#x27;</span>], df[<span class="hljs-string">&#x27;pct_2013&#x27;</span>], df[<span class="hljs-string">&#x27;pct_2014&#x27;</span>]):    newline([p1, i], [p2, i])<span class="hljs-comment"># Decoration</span>ax.set_facecolor(<span class="hljs-string">&#x27;#f7f7f7&#x27;</span>)ax.set_title(<span class="hljs-string">&quot;Dumbell Chart: Pct Change - 2013 vs 2014&quot;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">22</span>&#125;)ax.<span class="hljs-built_in">set</span>(xlim=(<span class="hljs-number">0</span>, <span class="hljs-number">.25</span>), ylim=(-<span class="hljs-number">1</span>, <span class="hljs-number">27</span>), ylabel=<span class="hljs-string">&#x27;Mean GDP Per Capita&#x27;</span>)ax.set_xticks([<span class="hljs-number">.05</span>, <span class="hljs-number">.1</span>, <span class="hljs-number">.15</span>, <span class="hljs-number">.20</span>])ax.set_xticklabels([<span class="hljs-string">&#x27;5%&#x27;</span>, <span class="hljs-string">&#x27;15%&#x27;</span>, <span class="hljs-string">&#x27;20%&#x27;</span>, <span class="hljs-string">&#x27;25%&#x27;</span>])ax.set_xticklabels([<span class="hljs-string">&#x27;5%&#x27;</span>, <span class="hljs-string">&#x27;15%&#x27;</span>, <span class="hljs-string">&#x27;20%&#x27;</span>, <span class="hljs-string">&#x27;25%&#x27;</span>])plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/21.png" alt="21"></p><h2><span id="6x00-fen-bu-distribution"><font color="#FF0000">【6x00】分布（Distribution）</font></span></h2><h3><span id="20-lian-xu-bian-liang-de-zhi-fang-tu-histogram-for-continuous-variable"><font color="##4876FF">【20】连续变量的直方图（Histogram for Continuous Variable）</font></span></h3><p>连续变量的直方图显示给定变量的频率分布。下面的图表基于分类变量对频率条进行分组，从而更深入地了解连续变量和分类变量。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Prepare data</span>x_var = <span class="hljs-string">&#x27;displ&#x27;</span>groupby_var = <span class="hljs-string">&#x27;class&#x27;</span>df_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)vals = [df[x_var].values.tolist() <span class="hljs-keyword">for</span> i, df <span class="hljs-keyword">in</span> df_agg]<span class="hljs-comment"># Draw</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), dpi=<span class="hljs-number">80</span>)colors = [plt.cm.Spectral(i / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(vals) - <span class="hljs-number">1</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(vals))]n, bins, patches = plt.hist(vals, <span class="hljs-number">30</span>, stacked=<span class="hljs-literal">True</span>, density=<span class="hljs-literal">False</span>, color=colors[:<span class="hljs-built_in">len</span>(vals)])<span class="hljs-comment"># Decoration</span>plt.legend(&#123;group: col <span class="hljs-keyword">for</span> group, col <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(np.unique(df[groupby_var]).tolist(), colors[:<span class="hljs-built_in">len</span>(vals)])&#125;)plt.title(<span class="hljs-string">f&quot;Stacked Histogram of $<span class="hljs-subst">&#123;x_var&#125;</span>$ colored by $<span class="hljs-subst">&#123;groupby_var&#125;</span>$&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.xlabel(x_var)plt.ylabel(<span class="hljs-string">&quot;Frequency&quot;</span>)plt.ylim(<span class="hljs-number">0</span>, <span class="hljs-number">25</span>)plt.xticks(ticks=bins[::<span class="hljs-number">3</span>], labels=[<span class="hljs-built_in">round</span>(b, <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bins[::<span class="hljs-number">3</span>]])plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/22.png" alt="22"></p><h3><span id="21-fen-lei-bian-liang-de-zhi-fang-tu-histogram-for-categorical-variable"><font color="##4876FF">【21】分类变量的直方图（Histogram for Categorical Variable）</font></span></h3><p>分类变量的直方图显示该变量的频率分布。通过给条形图上色，您可以将分布与表示颜色的另一个类型变量相关联。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Prepare data</span>x_var = <span class="hljs-string">&#x27;manufacturer&#x27;</span>groupby_var = <span class="hljs-string">&#x27;class&#x27;</span>df_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)vals = [df[x_var].values.tolist() <span class="hljs-keyword">for</span> i, df <span class="hljs-keyword">in</span> df_agg]<span class="hljs-comment"># Draw</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), dpi=<span class="hljs-number">80</span>)colors = [plt.cm.Spectral(i / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(vals) - <span class="hljs-number">1</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(vals))]n, bins, patches = plt.hist(vals, df[x_var].unique().__len__(), stacked=<span class="hljs-literal">True</span>, density=<span class="hljs-literal">False</span>, color=colors[:<span class="hljs-built_in">len</span>(vals)])<span class="hljs-comment"># Decoration</span>plt.legend(&#123;group: col <span class="hljs-keyword">for</span> group, col <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(np.unique(df[groupby_var]).tolist(), colors[:<span class="hljs-built_in">len</span>(vals)])&#125;)plt.title(<span class="hljs-string">f&quot;Stacked Histogram of $<span class="hljs-subst">&#123;x_var&#125;</span>$ colored by $<span class="hljs-subst">&#123;groupby_var&#125;</span>$&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.xlabel(x_var)plt.ylabel(<span class="hljs-string">&quot;Frequency&quot;</span>)plt.ylim(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>)plt.xticks(ticks=bins, labels=np.unique(df[x_var]).tolist(), rotation=<span class="hljs-number">90</span>, horizontalalignment=<span class="hljs-string">&#x27;left&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/23.png" alt="23"></p><h3><span id="22-mi-du-tu-density-plot"><font color="##4876FF">【22】密度图（Density Plot）</font></span></h3><p>密度图是连续变量分布可视化的常用工具。通过按“response”变量对它们进行分组，您可以检查 X 和 Y 之间的关系。如果出于代表性目的来描述城市里程分布如何随气缸数而变化，请参见下面的情况。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)sns.kdeplot(df.loc[df[<span class="hljs-string">&#x27;cyl&#x27;</span>] == <span class="hljs-number">4</span>, <span class="hljs-string">&quot;cty&quot;</span>], shade=<span class="hljs-literal">True</span>, color=<span class="hljs-string">&quot;g&quot;</span>, label=<span class="hljs-string">&quot;Cyl=4&quot;</span>, alpha=<span class="hljs-number">.7</span>)sns.kdeplot(df.loc[df[<span class="hljs-string">&#x27;cyl&#x27;</span>] == <span class="hljs-number">5</span>, <span class="hljs-string">&quot;cty&quot;</span>], shade=<span class="hljs-literal">True</span>, color=<span class="hljs-string">&quot;deeppink&quot;</span>, label=<span class="hljs-string">&quot;Cyl=5&quot;</span>, alpha=<span class="hljs-number">.7</span>)sns.kdeplot(df.loc[df[<span class="hljs-string">&#x27;cyl&#x27;</span>] == <span class="hljs-number">6</span>, <span class="hljs-string">&quot;cty&quot;</span>], shade=<span class="hljs-literal">True</span>, color=<span class="hljs-string">&quot;dodgerblue&quot;</span>, label=<span class="hljs-string">&quot;Cyl=6&quot;</span>, alpha=<span class="hljs-number">.7</span>)sns.kdeplot(df.loc[df[<span class="hljs-string">&#x27;cyl&#x27;</span>] == <span class="hljs-number">8</span>, <span class="hljs-string">&quot;cty&quot;</span>], shade=<span class="hljs-literal">True</span>, color=<span class="hljs-string">&quot;orange&quot;</span>, label=<span class="hljs-string">&quot;Cyl=8&quot;</span>, alpha=<span class="hljs-number">.7</span>)<span class="hljs-comment"># Decoration</span>plt.title(<span class="hljs-string">&#x27;Density Plot of City Mileage by n_Cylinders&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/24.png" alt="24"></p><h3><span id="23-zhi-fang-tu-mi-du-qu-xian-density-curves-with-histogram"><font color="##4876FF">【23】直方图密度曲线（Density Curves with Histogram）</font></span></h3><p>具有直方图的密度曲线将两个图所传达的信息集合在一起，因此您可以将它们都放在一个图形中，而不是放在两个图形中。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">13</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)sns.distplot(df.loc[df[<span class="hljs-string">&#x27;class&#x27;</span>] == <span class="hljs-string">&#x27;compact&#x27;</span>, <span class="hljs-string">&quot;cty&quot;</span>], color=<span class="hljs-string">&quot;dodgerblue&quot;</span>, label=<span class="hljs-string">&quot;Compact&quot;</span>, hist_kws=&#123;<span class="hljs-string">&#x27;alpha&#x27;</span>: <span class="hljs-number">.7</span>&#125;,             kde_kws=&#123;<span class="hljs-string">&#x27;linewidth&#x27;</span>: <span class="hljs-number">3</span>&#125;)sns.distplot(df.loc[df[<span class="hljs-string">&#x27;class&#x27;</span>] == <span class="hljs-string">&#x27;suv&#x27;</span>, <span class="hljs-string">&quot;cty&quot;</span>], color=<span class="hljs-string">&quot;orange&quot;</span>, label=<span class="hljs-string">&quot;SUV&quot;</span>, hist_kws=&#123;<span class="hljs-string">&#x27;alpha&#x27;</span>: <span class="hljs-number">.7</span>&#125;,             kde_kws=&#123;<span class="hljs-string">&#x27;linewidth&#x27;</span>: <span class="hljs-number">3</span>&#125;)sns.distplot(df.loc[df[<span class="hljs-string">&#x27;class&#x27;</span>] == <span class="hljs-string">&#x27;minivan&#x27;</span>, <span class="hljs-string">&quot;cty&quot;</span>], color=<span class="hljs-string">&quot;g&quot;</span>, label=<span class="hljs-string">&quot;minivan&quot;</span>, hist_kws=&#123;<span class="hljs-string">&#x27;alpha&#x27;</span>: <span class="hljs-number">.7</span>&#125;,             kde_kws=&#123;<span class="hljs-string">&#x27;linewidth&#x27;</span>: <span class="hljs-number">3</span>&#125;)plt.ylim(<span class="hljs-number">0</span>, <span class="hljs-number">0.35</span>)<span class="hljs-comment"># Decoration</span>plt.title(<span class="hljs-string">&#x27;Density Plot of City Mileage by Vehicle Type&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/25.png" alt="25"></p><h3><span id="24-shan-feng-die-luan-tu-huan-le-tu-joy-plot"><font color="##4876FF">【24】山峰叠峦图 / 欢乐图（Joy Plot）</font></span></h3><p>Joy Plot 允许不同组的密度曲线重叠，这是一种很好的可视化方法，可以直观地显示大量分组之间的关系。它看起来赏心悦目，清楚地传达了正确的信息。它可以使用基于 <code>matplotlib</code> 的 <code>joypy</code> 包轻松构建。</p><p>【译者 TRHX 注：Joy Plot 看起来就像是山峰叠峦，山峦起伏，层次分明，但取名为 Joy，欢乐的意思，所以不太好翻译，在使用该方法时要先安装 joypy 库】</p><pre><code class="hljs python"><span class="hljs-comment"># !pip install joypy</span><span class="hljs-comment"># Import Data</span><span class="hljs-keyword">import</span> joypy<span class="hljs-comment"># 原文没有 import joypy，译者 TRHX 添加</span>mpg = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)fig, axes = joypy.joyplot(mpg, column=[<span class="hljs-string">&#x27;hwy&#x27;</span>, <span class="hljs-string">&#x27;cty&#x27;</span>], by=<span class="hljs-string">&quot;class&quot;</span>, ylim=<span class="hljs-string">&#x27;own&#x27;</span>, figsize=(<span class="hljs-number">14</span>, <span class="hljs-number">10</span>))<span class="hljs-comment"># Decoration</span>plt.title(<span class="hljs-string">&#x27;Joy Plot of City and Highway Mileage by Class&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/26.png" alt="26"></p><h3><span id="25-fen-bu-shi-dian-tu-distributed-dot-plot"><font color="##4876FF">【25】分布式点图（Distributed Dot Plot）</font></span></h3><p>分布点图显示按组分割的点的单变量分布。点越暗，数据点在该区域的集中程度就越高。通过对中值进行不同的着色，这些组的真实位置立即变得明显。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.patches <span class="hljs-keyword">as</span> mpatches<span class="hljs-comment"># Prepare Data</span>df_raw = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)cyl_colors = &#123;<span class="hljs-number">4</span>: <span class="hljs-string">&#x27;tab:red&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;tab:green&#x27;</span>, <span class="hljs-number">6</span>: <span class="hljs-string">&#x27;tab:blue&#x27;</span>, <span class="hljs-number">8</span>: <span class="hljs-string">&#x27;tab:orange&#x27;</span>&#125;df_raw[<span class="hljs-string">&#x27;cyl_color&#x27;</span>] = df_raw.cyl.<span class="hljs-built_in">map</span>(cyl_colors)<span class="hljs-comment"># Mean and Median city mileage by make</span>df = df_raw[[<span class="hljs-string">&#x27;cty&#x27;</span>, <span class="hljs-string">&#x27;manufacturer&#x27;</span>]].groupby(<span class="hljs-string">&#x27;manufacturer&#x27;</span>).apply(<span class="hljs-keyword">lambda</span> x: x.mean())df.sort_values(<span class="hljs-string">&#x27;cty&#x27;</span>, ascending=<span class="hljs-literal">False</span>, inplace=<span class="hljs-literal">True</span>)df.reset_index(inplace=<span class="hljs-literal">True</span>)df_median = df_raw[[<span class="hljs-string">&#x27;cty&#x27;</span>, <span class="hljs-string">&#x27;manufacturer&#x27;</span>]].groupby(<span class="hljs-string">&#x27;manufacturer&#x27;</span>).apply(<span class="hljs-keyword">lambda</span> x: x.median())<span class="hljs-comment"># Draw horizontal lines</span>fig, ax = plt.subplots(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)ax.hlines(y=df.index, xmin=<span class="hljs-number">0</span>, xmax=<span class="hljs-number">40</span>, color=<span class="hljs-string">&#x27;gray&#x27;</span>, alpha=<span class="hljs-number">0.5</span>, linewidth=<span class="hljs-number">.5</span>, linestyles=<span class="hljs-string">&#x27;dashdot&#x27;</span>)<span class="hljs-comment"># Draw the Dots</span><span class="hljs-keyword">for</span> i, make <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(df.manufacturer):    df_make = df_raw.loc[df_raw.manufacturer == make, :]    <span class="hljs-comment"># 原文代码</span>    <span class="hljs-comment"># ax.scatter(y=np.repeat(i, df_make.shape[0]), x=&#x27;cty&#x27;, data=df_make, s=75, edgecolors=&#x27;gray&#x27;, c=&#x27;w&#x27;, alpha=0.5)</span>    <span class="hljs-comment"># 纠正代码</span>    ax.scatter(y=<span class="hljs-built_in">list</span>(np.repeat(i, df_make.shape[<span class="hljs-number">0</span>])), x=<span class="hljs-string">&#x27;cty&#x27;</span>, data=df_make, s=<span class="hljs-number">75</span>, edgecolors=<span class="hljs-string">&#x27;gray&#x27;</span>, c=<span class="hljs-string">&#x27;w&#x27;</span>, alpha=<span class="hljs-number">0.5</span>)    ax.scatter(y=i, x=<span class="hljs-string">&#x27;cty&#x27;</span>, data=df_median.loc[df_median.index == make, :], s=<span class="hljs-number">75</span>, c=<span class="hljs-string">&#x27;firebrick&#x27;</span>)<span class="hljs-comment"># Annotate</span>ax.text(<span class="hljs-number">33</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&quot;$red \; dots \; are \; the \: median$&quot;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">12</span>&#125;, color=<span class="hljs-string">&#x27;firebrick&#x27;</span>)<span class="hljs-comment"># Decorations</span>red_patch = plt.plot([], [], marker=<span class="hljs-string">&quot;o&quot;</span>, ms=<span class="hljs-number">10</span>, ls=<span class="hljs-string">&quot;&quot;</span>, mec=<span class="hljs-literal">None</span>, color=<span class="hljs-string">&#x27;firebrick&#x27;</span>, label=<span class="hljs-string">&quot;Median&quot;</span>)plt.legend(handles=red_patch)ax.set_title(<span class="hljs-string">&#x27;Distribution of City Mileage by Make&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">22</span>&#125;)ax.set_xlabel(<span class="hljs-string">&#x27;Miles Per Gallon (City)&#x27;</span>, alpha=<span class="hljs-number">0.7</span>)ax.set_yticks(df.index)ax.set_yticklabels(df.manufacturer.<span class="hljs-built_in">str</span>.title(), fontdict=&#123;<span class="hljs-string">&#x27;horizontalalignment&#x27;</span>: <span class="hljs-string">&#x27;right&#x27;</span>&#125;, alpha=<span class="hljs-number">0.7</span>)ax.set_xlim(<span class="hljs-number">1</span>, <span class="hljs-number">40</span>)plt.xticks(alpha=<span class="hljs-number">0.7</span>)plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_visible(<span class="hljs-literal">False</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_visible(<span class="hljs-literal">False</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_visible(<span class="hljs-literal">False</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_visible(<span class="hljs-literal">False</span>)plt.grid(axis=<span class="hljs-string">&#x27;both&#x27;</span>, alpha=<span class="hljs-number">.4</span>, linewidth=<span class="hljs-number">.1</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/27.png" alt="27"></p><h3><span id="26-xiang-xing-tu-box-plot"><font color="##4876FF">【26】箱形图（Box Plot）</font></span></h3><p>箱形图是可视化分布的一种好方法，同时牢记中位数，第 25 个第 75 个四分位数和离群值。 但是，在解释方框的大小时需要小心，这可能会扭曲该组中包含的点数。 因此，手动提供每个框中的观察次数可以帮助克服此缺点。</p><p>例如，左侧的前两个框，尽管它们分别具有 5 和 47 个 obs，但是却具有相同大小， 因此，有必要写下该组中的观察数。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">13</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)sns.boxplot(x=<span class="hljs-string">&#x27;class&#x27;</span>, y=<span class="hljs-string">&#x27;hwy&#x27;</span>, data=df, notch=<span class="hljs-literal">False</span>)<span class="hljs-comment"># Add N Obs inside boxplot (optional)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_n_obs</span>(<span class="hljs-params">df, group_col, y</span>):</span>    medians_dict = &#123;grp[<span class="hljs-number">0</span>]: grp[<span class="hljs-number">1</span>][y].median() <span class="hljs-keyword">for</span> grp <span class="hljs-keyword">in</span> df.groupby(group_col)&#125;    xticklabels = [x.get_text() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> plt.gca().get_xticklabels()]    n_obs = df.groupby(group_col)[y].size().values    <span class="hljs-keyword">for</span> (x, xticklabel), n_ob <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<span class="hljs-built_in">enumerate</span>(xticklabels), n_obs):        plt.text(x, medians_dict[xticklabel] * <span class="hljs-number">1.01</span>, <span class="hljs-string">&quot;#obs : &quot;</span> + <span class="hljs-built_in">str</span>(n_ob), horizontalalignment=<span class="hljs-string">&#x27;center&#x27;</span>,                 fontdict=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;, color=<span class="hljs-string">&#x27;white&#x27;</span>)add_n_obs(df, group_col=<span class="hljs-string">&#x27;class&#x27;</span>, y=<span class="hljs-string">&#x27;hwy&#x27;</span>)<span class="hljs-comment"># Decoration</span>plt.title(<span class="hljs-string">&#x27;Box Plot of Highway Mileage by Vehicle Class&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.ylim(<span class="hljs-number">10</span>, <span class="hljs-number">40</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/28.png" alt="28"></p><h3><span id="27-dian-xiang-xing-tu-dot-box-plot"><font color="##4876FF">【27】点 + 箱形图（Dot + Box Plot）</font></span></h3><p>点 + 箱形图传达类似于分组的箱形图信息。此外，这些点还提供了每组中有多少数据点的含义。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">13</span>,<span class="hljs-number">10</span>), dpi= <span class="hljs-number">80</span>)sns.boxplot(x=<span class="hljs-string">&#x27;class&#x27;</span>, y=<span class="hljs-string">&#x27;hwy&#x27;</span>, data=df, hue=<span class="hljs-string">&#x27;cyl&#x27;</span>)sns.stripplot(x=<span class="hljs-string">&#x27;class&#x27;</span>, y=<span class="hljs-string">&#x27;hwy&#x27;</span>, data=df, color=<span class="hljs-string">&#x27;black&#x27;</span>, size=<span class="hljs-number">3</span>, jitter=<span class="hljs-number">1</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(df[<span class="hljs-string">&#x27;class&#x27;</span>].unique())-<span class="hljs-number">1</span>):    plt.vlines(i+<span class="hljs-number">.5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">45</span>, linestyles=<span class="hljs-string">&#x27;solid&#x27;</span>, colors=<span class="hljs-string">&#x27;gray&#x27;</span>, alpha=<span class="hljs-number">0.2</span>)<span class="hljs-comment"># Decoration</span>plt.title(<span class="hljs-string">&#x27;Box Plot of Highway Mileage by Vehicle Class&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.legend(title=<span class="hljs-string">&#x27;Cylinders&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/29.png" alt="29"></p><h3><span id="28-xiao-ti-qin-tu-violin-plot"><font color="##4876FF">【28】小提琴图（Violin Plot）</font></span></h3><p>小提琴图是箱形图在视觉上令人愉悦的替代品。 小提琴的形状或面积取决于它所持有的观察次数。 但是，小提琴图可能更难以阅读，并且在专业设置中不常用。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">13</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)sns.violinplot(x=<span class="hljs-string">&#x27;class&#x27;</span>, y=<span class="hljs-string">&#x27;hwy&#x27;</span>, data=df, scale=<span class="hljs-string">&#x27;width&#x27;</span>, inner=<span class="hljs-string">&#x27;quartile&#x27;</span>)<span class="hljs-comment"># Decoration</span>plt.title(<span class="hljs-string">&#x27;Violin Plot of Highway Mileage by Vehicle Class&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/30.png" alt="30"></p><h3><span id="29-ren-kou-jin-zi-ta-tu-population-pyramid"><font color="##4876FF">【29】人口金字塔图（Population Pyramid）</font></span></h3><p>人口金字塔可用于显示按体积排序的组的分布。或者它也可以用于显示人口的逐级过滤，因为它是用来显示有多少人通过一个营销漏斗（Marketing Funnel）的每个阶段。</p><pre><code class="hljs python"><span class="hljs-comment"># Read data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/email_campaign_funnel.csv&quot;</span>)<span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">13</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)group_col = <span class="hljs-string">&#x27;Gender&#x27;</span>order_of_bars = df.Stage.unique()[::-<span class="hljs-number">1</span>]colors = [plt.cm.Spectral(i / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(df[group_col].unique()) - <span class="hljs-number">1</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(df[group_col].unique()))]<span class="hljs-keyword">for</span> c, group <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(colors, df[group_col].unique()):    sns.barplot(x=<span class="hljs-string">&#x27;Users&#x27;</span>, y=<span class="hljs-string">&#x27;Stage&#x27;</span>, data=df.loc[df[group_col] == group, :], order=order_of_bars, color=c, label=group)<span class="hljs-comment"># Decorations</span>plt.xlabel(<span class="hljs-string">&quot;$Users$&quot;</span>)plt.ylabel(<span class="hljs-string">&quot;Stage of Purchase&quot;</span>)plt.yticks(fontsize=<span class="hljs-number">12</span>)plt.title(<span class="hljs-string">&quot;Population Pyramid of the Marketing Funnel&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/31.png" alt="31"></p><h3><span id="30-fen-lei-tu-categorical-plots"><font color="##4876FF">【30】分类图（Categorical Plots）</font></span></h3><p>由 <code>seaborn</code> 库提供的分类图可用于可视化彼此相关的两个或更多分类变量的计数分布。</p><pre><code class="hljs python"><span class="hljs-comment"># Load Dataset</span>titanic = sns.load_dataset(<span class="hljs-string">&quot;titanic&quot;</span>)<span class="hljs-comment"># Plot</span>g = sns.catplot(<span class="hljs-string">&quot;alive&quot;</span>, col=<span class="hljs-string">&quot;deck&quot;</span>, col_wrap=<span class="hljs-number">4</span>,                data=titanic[titanic.deck.notnull()],                kind=<span class="hljs-string">&quot;count&quot;</span>, height=<span class="hljs-number">3.5</span>, aspect=<span class="hljs-number">.8</span>,                palette=<span class="hljs-string">&#x27;tab20&#x27;</span>)<span class="hljs-comment"># 译者 TRHX 注释掉了这一行代码</span><span class="hljs-comment"># fig.suptitle(&#x27;sf&#x27;)</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/32.png" alt="32"></p><pre><code class="hljs python"><span class="hljs-comment"># Load Dataset</span>titanic = sns.load_dataset(<span class="hljs-string">&quot;titanic&quot;</span>)<span class="hljs-comment"># Plot</span>sns.catplot(x=<span class="hljs-string">&quot;age&quot;</span>, y=<span class="hljs-string">&quot;embark_town&quot;</span>,            hue=<span class="hljs-string">&quot;sex&quot;</span>, col=<span class="hljs-string">&quot;class&quot;</span>,            data=titanic[titanic.embark_town.notnull()],            orient=<span class="hljs-string">&quot;h&quot;</span>, height=<span class="hljs-number">5</span>, aspect=<span class="hljs-number">1</span>, palette=<span class="hljs-string">&quot;tab10&quot;</span>,            kind=<span class="hljs-string">&quot;violin&quot;</span>, dodge=<span class="hljs-literal">True</span>, cut=<span class="hljs-number">0</span>, bw=<span class="hljs-number">.2</span>)<span class="hljs-comment"># 译者 TRHX 添加了这行代码</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/33.png" alt="33"></p><h2><span id="7x00-zu-cheng-composition"><font color="#FF0000">【7x00】组成（Composition）</font></span></h2><h3><span id="31-hua-fu-bing-tu-waffle-chart"><font color="##4876FF">【31】华夫饼图（Waffle Chart）</font></span></h3><p>华夫饼图可以使用 <code>pywaffle</code> 包创建，用于显示较大群体中的组的组成。</p><p>【译者 TRHX 注：在使用该方法时要先安装 pywaffle 库】</p><pre><code class="hljs python"><span class="hljs-comment"># ! pip install pywaffle</span><span class="hljs-comment"># Reference: https://stackoverflow.com/questions/41400136/how-to-do-waffle-charts-in-python-square-piechart</span><span class="hljs-keyword">from</span> pywaffle <span class="hljs-keyword">import</span> Waffle<span class="hljs-comment"># Import</span>df_raw = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Prepare Data</span>df = df_raw.groupby(<span class="hljs-string">&#x27;class&#x27;</span>).size().reset_index(name=<span class="hljs-string">&#x27;counts&#x27;</span>)n_categories = df.shape[<span class="hljs-number">0</span>]colors = [plt.cm.inferno_r(i / <span class="hljs-built_in">float</span>(n_categories)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_categories)]<span class="hljs-comment"># Draw Plot and Decorate</span>fig = plt.figure(    FigureClass=Waffle,    plots=&#123;        <span class="hljs-string">&#x27;111&#x27;</span>: &#123;            <span class="hljs-string">&#x27;values&#x27;</span>: df[<span class="hljs-string">&#x27;counts&#x27;</span>],            <span class="hljs-string">&#x27;labels&#x27;</span>: [<span class="hljs-string">&quot;&#123;0&#125; (&#123;1&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n[<span class="hljs-number">0</span>], n[<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> df[[<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;counts&#x27;</span>]].itertuples()],            <span class="hljs-string">&#x27;legend&#x27;</span>: &#123;<span class="hljs-string">&#x27;loc&#x27;</span>: <span class="hljs-string">&#x27;upper left&#x27;</span>, <span class="hljs-string">&#x27;bbox_to_anchor&#x27;</span>: (<span class="hljs-number">1.05</span>, <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">12</span>&#125;,            <span class="hljs-string">&#x27;title&#x27;</span>: &#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;# Vehicles by Class&#x27;</span>, <span class="hljs-string">&#x27;loc&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">18</span>&#125;        &#125;,    &#125;,    rows=<span class="hljs-number">7</span>,    colors=colors,    figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">9</span>))<span class="hljs-comment"># 译者 TRHX 添加了这行代码</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/34.png" alt="34"></p><pre><code class="hljs python"><span class="hljs-comment"># ! pip install pywaffle</span><span class="hljs-keyword">from</span> pywaffle <span class="hljs-keyword">import</span> Waffle<span class="hljs-comment"># Import</span><span class="hljs-comment"># 译者 TRHX 取消注释了这行代码</span>df_raw = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Prepare Data</span><span class="hljs-comment"># By Class Data</span>df_class = df_raw.groupby(<span class="hljs-string">&#x27;class&#x27;</span>).size().reset_index(name=<span class="hljs-string">&#x27;counts_class&#x27;</span>)n_categories = df_class.shape[<span class="hljs-number">0</span>]colors_class = [plt.cm.Set3(i / <span class="hljs-built_in">float</span>(n_categories)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_categories)]<span class="hljs-comment"># By Cylinders Data</span>df_cyl = df_raw.groupby(<span class="hljs-string">&#x27;cyl&#x27;</span>).size().reset_index(name=<span class="hljs-string">&#x27;counts_cyl&#x27;</span>)n_categories = df_cyl.shape[<span class="hljs-number">0</span>]colors_cyl = [plt.cm.Spectral(i / <span class="hljs-built_in">float</span>(n_categories)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_categories)]<span class="hljs-comment"># By Make Data</span>df_make = df_raw.groupby(<span class="hljs-string">&#x27;manufacturer&#x27;</span>).size().reset_index(name=<span class="hljs-string">&#x27;counts_make&#x27;</span>)n_categories = df_make.shape[<span class="hljs-number">0</span>]colors_make = [plt.cm.tab20b(i / <span class="hljs-built_in">float</span>(n_categories)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_categories)]<span class="hljs-comment"># Draw Plot and Decorate</span>fig = plt.figure(    FigureClass=Waffle,    plots=&#123;        <span class="hljs-string">&#x27;311&#x27;</span>: &#123;            <span class="hljs-string">&#x27;values&#x27;</span>: df_class[<span class="hljs-string">&#x27;counts_class&#x27;</span>],            <span class="hljs-string">&#x27;labels&#x27;</span>: [<span class="hljs-string">&quot;&#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(n[<span class="hljs-number">0</span>], n[<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> df_class[[<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;counts_class&#x27;</span>]].itertuples()],            <span class="hljs-string">&#x27;legend&#x27;</span>: &#123;<span class="hljs-string">&#x27;loc&#x27;</span>: <span class="hljs-string">&#x27;upper left&#x27;</span>, <span class="hljs-string">&#x27;bbox_to_anchor&#x27;</span>: (<span class="hljs-number">1.05</span>, <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Class&#x27;</span>&#125;,            <span class="hljs-string">&#x27;title&#x27;</span>: &#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;# Vehicles by Class&#x27;</span>, <span class="hljs-string">&#x27;loc&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">18</span>&#125;,            <span class="hljs-string">&#x27;colors&#x27;</span>: colors_class        &#125;,        <span class="hljs-string">&#x27;312&#x27;</span>: &#123;            <span class="hljs-string">&#x27;values&#x27;</span>: df_cyl[<span class="hljs-string">&#x27;counts_cyl&#x27;</span>],            <span class="hljs-string">&#x27;labels&#x27;</span>: [<span class="hljs-string">&quot;&#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(n[<span class="hljs-number">0</span>], n[<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> df_cyl[[<span class="hljs-string">&#x27;cyl&#x27;</span>, <span class="hljs-string">&#x27;counts_cyl&#x27;</span>]].itertuples()],            <span class="hljs-string">&#x27;legend&#x27;</span>: &#123;<span class="hljs-string">&#x27;loc&#x27;</span>: <span class="hljs-string">&#x27;upper left&#x27;</span>, <span class="hljs-string">&#x27;bbox_to_anchor&#x27;</span>: (<span class="hljs-number">1.05</span>, <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Cyl&#x27;</span>&#125;,            <span class="hljs-string">&#x27;title&#x27;</span>: &#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;# Vehicles by Cyl&#x27;</span>, <span class="hljs-string">&#x27;loc&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">18</span>&#125;,            <span class="hljs-string">&#x27;colors&#x27;</span>: colors_cyl        &#125;,        <span class="hljs-string">&#x27;313&#x27;</span>: &#123;            <span class="hljs-string">&#x27;values&#x27;</span>: df_make[<span class="hljs-string">&#x27;counts_make&#x27;</span>],            <span class="hljs-string">&#x27;labels&#x27;</span>: [<span class="hljs-string">&quot;&#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(n[<span class="hljs-number">0</span>], n[<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> df_make[[<span class="hljs-string">&#x27;manufacturer&#x27;</span>, <span class="hljs-string">&#x27;counts_make&#x27;</span>]].itertuples()],            <span class="hljs-string">&#x27;legend&#x27;</span>: &#123;<span class="hljs-string">&#x27;loc&#x27;</span>: <span class="hljs-string">&#x27;upper left&#x27;</span>, <span class="hljs-string">&#x27;bbox_to_anchor&#x27;</span>: (<span class="hljs-number">1.05</span>, <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Manufacturer&#x27;</span>&#125;,            <span class="hljs-string">&#x27;title&#x27;</span>: &#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;# Vehicles by Make&#x27;</span>, <span class="hljs-string">&#x27;loc&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">18</span>&#125;,            <span class="hljs-string">&#x27;colors&#x27;</span>: colors_make        &#125;    &#125;,    rows=<span class="hljs-number">9</span>,    figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">14</span>))<span class="hljs-comment"># 译者 TRHX 添加了这行代码</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/35.png" alt="35"></p><h3><span id="32-bing-tu-pie-chart"><font color="##4876FF">【32】饼图（Pie Chart）</font></span></h3><p>饼图是显示组成的经典方法。然而，现在一般不宜使用，因为馅饼部分的面积有时会产生误导。因此，如果要使用饼图，强烈建议您显式地记下饼图每个部分的百分比或数字。</p><pre><code class="hljs python"><span class="hljs-comment"># Import</span>df_raw = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Prepare Data</span>df = df_raw.groupby(<span class="hljs-string">&#x27;class&#x27;</span>).size()<span class="hljs-comment"># Make the plot with pandas</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">原代码：df.plot(kind=&#x27;pie&#x27;, subplots=True, figsize=(8, 8), dpi=80)</span><span class="hljs-string">译者 TRHX 删除了 dpi= 80</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>df.plot(kind=<span class="hljs-string">&#x27;pie&#x27;</span>, subplots=<span class="hljs-literal">True</span>, figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>))plt.title(<span class="hljs-string">&quot;Pie Chart of Vehicle Class - Bad&quot;</span>)plt.ylabel(<span class="hljs-string">&quot;&quot;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/36.png" alt="36"></p><pre><code class="hljs python"><span class="hljs-comment"># Import</span>df_raw = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Prepare Data</span>df = df_raw.groupby(<span class="hljs-string">&#x27;class&#x27;</span>).size().reset_index(name=<span class="hljs-string">&#x27;counts&#x27;</span>)<span class="hljs-comment"># Draw Plot</span>fig, ax = plt.subplots(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">7</span>), subplot_kw=<span class="hljs-built_in">dict</span>(aspect=<span class="hljs-string">&quot;equal&quot;</span>), dpi=<span class="hljs-number">80</span>)data = df[<span class="hljs-string">&#x27;counts&#x27;</span>]categories = df[<span class="hljs-string">&#x27;class&#x27;</span>]explode = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">pct, allvals</span>):</span>    absolute = <span class="hljs-built_in">int</span>(pct / <span class="hljs-number">100.</span> * np.<span class="hljs-built_in">sum</span>(allvals))    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;:.1f&#125;% (&#123;:d&#125; )&quot;</span>.<span class="hljs-built_in">format</span>(pct, absolute)wedges, texts, autotexts = ax.pie(data,                                  autopct=<span class="hljs-keyword">lambda</span> pct: func(pct, data),                                  textprops=<span class="hljs-built_in">dict</span>(color=<span class="hljs-string">&quot;w&quot;</span>),                                  colors=plt.cm.Dark2.colors,                                  startangle=<span class="hljs-number">140</span>,                                  explode=explode)<span class="hljs-comment"># Decoration</span>ax.legend(wedges, categories, title=<span class="hljs-string">&quot;Vehicle Class&quot;</span>, loc=<span class="hljs-string">&quot;center left&quot;</span>, bbox_to_anchor=(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>))plt.setp(autotexts, size=<span class="hljs-number">10</span>, weight=<span class="hljs-number">700</span>)ax.set_title(<span class="hljs-string">&quot;Class of Vehicles: Pie Chart&quot;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/37.png" alt="37"></p><h3><span id="33-ju-zhen-shu-xing-tu-treemap"><font color="##4876FF">【33】矩阵树形图（Treemap）</font></span></h3><p>矩阵树形图类似于饼图，它可以更好地完成工作而不会误导每个组的贡献。</p><p>【译者 TRHX 注：在使用该方法时要先安装 squarify 库】</p><pre><code class="hljs python"><span class="hljs-comment"># pip install squarify</span><span class="hljs-keyword">import</span> squarify<span class="hljs-comment"># Import Data</span>df_raw = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Prepare Data</span>df = df_raw.groupby(<span class="hljs-string">&#x27;class&#x27;</span>).size().reset_index(name=<span class="hljs-string">&#x27;counts&#x27;</span>)labels = df.apply(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">str</span>(x[<span class="hljs-number">0</span>]) + <span class="hljs-string">&quot;\n (&quot;</span> + <span class="hljs-built_in">str</span>(x[<span class="hljs-number">1</span>]) + <span class="hljs-string">&quot;)&quot;</span>, axis=<span class="hljs-number">1</span>)sizes = df[<span class="hljs-string">&#x27;counts&#x27;</span>].values.tolist()colors = [plt.cm.Spectral(i / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(labels))) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(labels))]<span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">8</span>), dpi=<span class="hljs-number">80</span>)squarify.plot(sizes=sizes, label=labels, color=colors, alpha=<span class="hljs-number">.8</span>)<span class="hljs-comment"># Decorate</span>plt.title(<span class="hljs-string">&#x27;Treemap of Vechile Class&#x27;</span>)plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/38.png" alt="38"></p><h3><span id="34-tiao-xing-tu-bar-chart"><font color="##4876FF">【34】条形图（Bar Chart）</font></span></h3><p>条形图是一种基于计数或任何给定度量的可视化项的经典方法。在下面的图表中，我为每个项目使用了不同的颜色，但您通常可能希望为所有项目选择一种颜色，除非您按组对它们进行着色。颜色名称存储在下面代码中的 <code>all_colors</code> 中。您可以通过在 <code>plt.plot()</code> 中设置 <code>color</code> 参数来更改条形的颜色。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<span class="hljs-comment"># Import Data</span>df_raw = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv&quot;</span>)<span class="hljs-comment"># Prepare Data</span>df = df_raw.groupby(<span class="hljs-string">&#x27;manufacturer&#x27;</span>).size().reset_index(name=<span class="hljs-string">&#x27;counts&#x27;</span>)n = df[<span class="hljs-string">&#x27;manufacturer&#x27;</span>].unique().__len__()+<span class="hljs-number">1</span>all_colors = <span class="hljs-built_in">list</span>(plt.cm.colors.cnames.keys())random.seed(<span class="hljs-number">100</span>)c = random.choices(all_colors, k=n)<span class="hljs-comment"># Plot Bars</span>plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">10</span>), dpi= <span class="hljs-number">80</span>)plt.bar(df[<span class="hljs-string">&#x27;manufacturer&#x27;</span>], df[<span class="hljs-string">&#x27;counts&#x27;</span>], color=c, width=<span class="hljs-number">.5</span>)<span class="hljs-keyword">for</span> i, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(df[<span class="hljs-string">&#x27;counts&#x27;</span>].values):    plt.text(i, val, <span class="hljs-built_in">float</span>(val), horizontalalignment=<span class="hljs-string">&#x27;center&#x27;</span>, verticalalignment=<span class="hljs-string">&#x27;bottom&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;fontweight&#x27;</span>:<span class="hljs-number">500</span>, <span class="hljs-string">&#x27;size&#x27;</span>:<span class="hljs-number">12</span>&#125;)<span class="hljs-comment"># Decoration</span>plt.gca().set_xticklabels(df[<span class="hljs-string">&#x27;manufacturer&#x27;</span>], rotation=<span class="hljs-number">60</span>, horizontalalignment= <span class="hljs-string">&#x27;right&#x27;</span>)plt.title(<span class="hljs-string">&quot;Number of Vehicles by Manaufacturers&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.ylabel(<span class="hljs-string">&#x27;# Vehicles&#x27;</span>)plt.ylim(<span class="hljs-number">0</span>, <span class="hljs-number">45</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/39.png" alt="39"></p><h2><span id="8x00-bian-hua-change"><font color="#FF0000">【8x00】变化（Change）</font></span></h2><h3><span id="35-shi-jian-xu-lie-tu-time-series-plot"><font color="##4876FF">【35】时间序列图（Time Series Plot）</font></span></h3><p>时间序列图用于可视化给定指标随时间的变化。在这里你可以看到 1949 年到 1969 年间的航空客运量是如何变化的。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&#x27;https://github.com/selva86/datasets/raw/master/AirPassengers.csv&#x27;</span>)<span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)plt.plot(<span class="hljs-string">&#x27;date&#x27;</span>, <span class="hljs-string">&#x27;traffic&#x27;</span>, data=df, color=<span class="hljs-string">&#x27;tab:red&#x27;</span>)<span class="hljs-comment"># Decoration</span>plt.ylim(<span class="hljs-number">50</span>, <span class="hljs-number">750</span>)xtick_location = df.index.tolist()[::<span class="hljs-number">12</span>]xtick_labels = [x[-<span class="hljs-number">4</span>:] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df.date.tolist()[::<span class="hljs-number">12</span>]]plt.xticks(ticks=xtick_location, labels=xtick_labels, rotation=<span class="hljs-number">0</span>, fontsize=<span class="hljs-number">12</span>, horizontalalignment=<span class="hljs-string">&#x27;center&#x27;</span>, alpha=<span class="hljs-number">.7</span>)plt.yticks(fontsize=<span class="hljs-number">12</span>, alpha=<span class="hljs-number">.7</span>)plt.title(<span class="hljs-string">&quot;Air Passengers Traffic (1949 - 1969)&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.grid(axis=<span class="hljs-string">&#x27;both&#x27;</span>, alpha=<span class="hljs-number">.3</span>)<span class="hljs-comment"># Remove borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">0.0</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">0.3</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">0.0</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">0.3</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/40.png" alt="40"></p><h3><span id="36-dai-bo-feng-he-bo-gu-zhu-shi-de-shi-jian-xu-lie-tu-time-series-with-peaks-and-troughs-annotated"><font color="##4876FF">【36】带波峰和波谷注释的时间序列图（Time Series with Peaks and Troughs Annotated）</font></span></h3><p>下面的时间序列绘制了所有的波峰和波谷，并注释了所选特殊事件的发生。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&#x27;https://github.com/selva86/datasets/raw/master/AirPassengers.csv&#x27;</span>)<span class="hljs-comment"># Get the Peaks and Troughs</span>data = df[<span class="hljs-string">&#x27;traffic&#x27;</span>].valuesdoublediff = np.diff(np.sign(np.diff(data)))peak_locations = np.where(doublediff == -<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>doublediff2 = np.diff(np.sign(np.diff(-<span class="hljs-number">1</span> * data)))trough_locations = np.where(doublediff2 == -<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span><span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)plt.plot(<span class="hljs-string">&#x27;date&#x27;</span>, <span class="hljs-string">&#x27;traffic&#x27;</span>, data=df, color=<span class="hljs-string">&#x27;tab:blue&#x27;</span>, label=<span class="hljs-string">&#x27;Air Traffic&#x27;</span>)plt.scatter(df.date[peak_locations], df.traffic[peak_locations], marker=mpl.markers.CARETUPBASE, color=<span class="hljs-string">&#x27;tab:green&#x27;</span>,            s=<span class="hljs-number">100</span>, label=<span class="hljs-string">&#x27;Peaks&#x27;</span>)plt.scatter(df.date[trough_locations], df.traffic[trough_locations], marker=mpl.markers.CARETDOWNBASE, color=<span class="hljs-string">&#x27;tab:red&#x27;</span>,            s=<span class="hljs-number">100</span>, label=<span class="hljs-string">&#x27;Troughs&#x27;</span>)<span class="hljs-comment"># Annotate</span><span class="hljs-keyword">for</span> t, p <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(trough_locations[<span class="hljs-number">1</span>::<span class="hljs-number">5</span>], peak_locations[::<span class="hljs-number">3</span>]):    plt.text(df.date[p], df.traffic[p] + <span class="hljs-number">15</span>, df.date[p], horizontalalignment=<span class="hljs-string">&#x27;center&#x27;</span>, color=<span class="hljs-string">&#x27;darkgreen&#x27;</span>)    plt.text(df.date[t], df.traffic[t] - <span class="hljs-number">35</span>, df.date[t], horizontalalignment=<span class="hljs-string">&#x27;center&#x27;</span>, color=<span class="hljs-string">&#x27;darkred&#x27;</span>)<span class="hljs-comment"># Decoration</span>plt.ylim(<span class="hljs-number">50</span>, <span class="hljs-number">750</span>)xtick_location = df.index.tolist()[::<span class="hljs-number">6</span>]xtick_labels = df.date.tolist()[::<span class="hljs-number">6</span>]plt.xticks(ticks=xtick_location, labels=xtick_labels, rotation=<span class="hljs-number">90</span>, fontsize=<span class="hljs-number">12</span>, alpha=<span class="hljs-number">.7</span>)plt.title(<span class="hljs-string">&quot;Peak and Troughs of Air Passengers Traffic (1949 - 1969)&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.yticks(fontsize=<span class="hljs-number">12</span>, alpha=<span class="hljs-number">.7</span>)<span class="hljs-comment"># Lighten borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">.0</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">.0</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.legend(loc=<span class="hljs-string">&#x27;upper left&#x27;</span>)plt.grid(axis=<span class="hljs-string">&#x27;y&#x27;</span>, alpha=<span class="hljs-number">.3</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/41.png" alt="41"></p><h3><span id="37-zi-xiang-guan-acf-he-bu-fen-zi-xiang-guan-pacf-tu-autocorrelation-acf-and-partial-autocorrelation-pacf-plot"><font color="##4876FF">【37】自相关 (ACF) 和部分自相关 (PACF) 图（Autocorrelation (ACF) and Partial Autocorrelation (PACF) Plot）</font></span></h3><p>自相关图（ACF图）显示了时间序列与其自身滞后的相关性。 每条垂直线（在自相关图上）表示系列与滞后 0 之间的滞后的相关性。图中的蓝色阴影区域是显著性级别。 那些位于蓝线之上的滞后是显著的滞后。</p><p>那么如何解释呢？</p><p>对于航空乘客来说，我们看到超过 14 个滞后已经越过蓝线，因此意义重大。这意味着，14 年前的航空客运量对今天的交通量产生了影响。</p><p>另一方面，部分自相关图（PACF）显示了任何给定滞后（时间序列）相对于当前序列的自相关，但消除了中间滞后的贡献。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> statsmodels.graphics.tsaplots <span class="hljs-keyword">import</span> plot_acf, plot_pacf<span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&#x27;https://github.com/selva86/datasets/raw/master/AirPassengers.csv&#x27;</span>)<span class="hljs-comment"># Draw Plot</span>fig, (ax1, ax2) = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">6</span>), dpi=<span class="hljs-number">80</span>)plot_acf(df.traffic.tolist(), ax=ax1, lags=<span class="hljs-number">50</span>)plot_pacf(df.traffic.tolist(), ax=ax2, lags=<span class="hljs-number">20</span>)<span class="hljs-comment"># Decorate</span><span class="hljs-comment"># lighten the borders</span>ax1.spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">.3</span>); ax2.spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)ax1.spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">.3</span>); ax2.spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)ax1.spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">.3</span>); ax2.spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)ax1.spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">.3</span>); ax2.spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)<span class="hljs-comment"># font size of tick labels</span>ax1.tick_params(axis=<span class="hljs-string">&#x27;both&#x27;</span>, labelsize=<span class="hljs-number">12</span>)ax2.tick_params(axis=<span class="hljs-string">&#x27;both&#x27;</span>, labelsize=<span class="hljs-number">12</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/42.png" alt="42"></p><h3><span id="38-jiao-cha-xiang-guan-tu-cross-correlation-plot"><font color="##4876FF">【38】交叉相关图（Cross Correlation plot）</font></span></h3><p>交叉相关图显示了两个时间序列相互之间的滞后。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> statsmodels.tsa.stattools <span class="hljs-keyword">as</span> stattools<span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&#x27;https://github.com/selva86/datasets/raw/master/mortality.csv&#x27;</span>)x = df[<span class="hljs-string">&#x27;mdeaths&#x27;</span>]y = df[<span class="hljs-string">&#x27;fdeaths&#x27;</span>]<span class="hljs-comment"># Compute Cross Correlations</span>ccs = stattools.ccf(x, y)[:<span class="hljs-number">100</span>]nlags = <span class="hljs-built_in">len</span>(ccs)<span class="hljs-comment"># Compute the Significance level</span><span class="hljs-comment"># ref: https://stats.stackexchange.com/questions/3115/cross-correlation-significance-in-r/3128#3128</span>conf_level = <span class="hljs-number">2</span> / np.sqrt(nlags)<span class="hljs-comment"># Draw Plot</span>plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">7</span>), dpi=<span class="hljs-number">80</span>)plt.hlines(<span class="hljs-number">0</span>, xmin=<span class="hljs-number">0</span>, xmax=<span class="hljs-number">100</span>, color=<span class="hljs-string">&#x27;gray&#x27;</span>)  <span class="hljs-comment"># 0 axis</span>plt.hlines(conf_level, xmin=<span class="hljs-number">0</span>, xmax=<span class="hljs-number">100</span>, color=<span class="hljs-string">&#x27;gray&#x27;</span>)plt.hlines(-conf_level, xmin=<span class="hljs-number">0</span>, xmax=<span class="hljs-number">100</span>, color=<span class="hljs-string">&#x27;gray&#x27;</span>)plt.bar(x=np.arange(<span class="hljs-built_in">len</span>(ccs)), height=ccs, width=<span class="hljs-number">.3</span>)<span class="hljs-comment"># Decoration</span>plt.title(<span class="hljs-string">&#x27;$Cross\; Correlation\; Plot:\; mdeaths\; vs\; fdeaths$&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.xlim(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ccs))plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/43.png" alt="43"></p><h3><span id="39-shi-jian-xu-lie-fen-jie-tu-time-series-decomposition-plot"><font color="##4876FF">【39】时间序列分解图（Time Series Decomposition Plot）</font></span></h3><p>时间序列分解图将时间序列分解为趋势、季节和残差分量。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> statsmodels.tsa.seasonal <span class="hljs-keyword">import</span> seasonal_decompose<span class="hljs-keyword">from</span> dateutil.parser <span class="hljs-keyword">import</span> parse<span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&#x27;https://github.com/selva86/datasets/raw/master/AirPassengers.csv&#x27;</span>)dates = pd.DatetimeIndex([parse(d).strftime(<span class="hljs-string">&#x27;%Y-%m-01&#x27;</span>) <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> df[<span class="hljs-string">&#x27;date&#x27;</span>]])df.set_index(dates, inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Decompose</span>result = seasonal_decompose(df[<span class="hljs-string">&#x27;traffic&#x27;</span>], model=<span class="hljs-string">&#x27;multiplicative&#x27;</span>)<span class="hljs-comment"># Plot</span>plt.rcParams.update(&#123;<span class="hljs-string">&#x27;figure.figsize&#x27;</span>: (<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)&#125;)result.plot().suptitle(<span class="hljs-string">&#x27;Time Series Decomposition of Air Passengers&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/44.png" alt="44"></p><h3><span id="40-duo-chong-shi-jian-xu-lie-multiple-time-series"><font color="##4876FF">【40】多重时间序列（Multiple Time Series）</font></span></h3><p>您可以在同一图表上绘制多个测量相同值的时间序列，如下所示。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&#x27;https://github.com/selva86/datasets/raw/master/mortality.csv&#x27;</span>)<span class="hljs-comment"># Define the upper limit, lower limit, interval of Y axis and colors</span>y_LL = <span class="hljs-number">100</span>y_UL = <span class="hljs-built_in">int</span>(df.iloc[:, <span class="hljs-number">1</span>:].<span class="hljs-built_in">max</span>().<span class="hljs-built_in">max</span>() * <span class="hljs-number">1.1</span>)y_interval = <span class="hljs-number">400</span>mycolors = [<span class="hljs-string">&#x27;tab:red&#x27;</span>, <span class="hljs-string">&#x27;tab:blue&#x27;</span>, <span class="hljs-string">&#x27;tab:green&#x27;</span>, <span class="hljs-string">&#x27;tab:orange&#x27;</span>]<span class="hljs-comment"># Draw Plot and Annotate</span>fig, ax = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), dpi=<span class="hljs-number">80</span>)columns = df.columns[<span class="hljs-number">1</span>:]<span class="hljs-keyword">for</span> i, column <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(columns):    plt.plot(df.date.values, df[column].values, lw=<span class="hljs-number">1.5</span>, color=mycolors[i])    plt.text(df.shape[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>, df[column].values[-<span class="hljs-number">1</span>], column, fontsize=<span class="hljs-number">14</span>, color=mycolors[i])<span class="hljs-comment"># Draw Tick lines</span><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(y_LL, y_UL, y_interval):    plt.hlines(y, xmin=<span class="hljs-number">0</span>, xmax=<span class="hljs-number">71</span>, colors=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">0.3</span>, linestyles=<span class="hljs-string">&quot;--&quot;</span>, lw=<span class="hljs-number">0.5</span>)<span class="hljs-comment"># Decorations</span>plt.tick_params(axis=<span class="hljs-string">&quot;both&quot;</span>, which=<span class="hljs-string">&quot;both&quot;</span>, bottom=<span class="hljs-literal">False</span>, top=<span class="hljs-literal">False</span>,                labelbottom=<span class="hljs-literal">True</span>, left=<span class="hljs-literal">False</span>, right=<span class="hljs-literal">False</span>, labelleft=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Lighten borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.title(<span class="hljs-string">&#x27;Number of Deaths from Lung Diseases in the UK (1974-1979)&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.yticks(<span class="hljs-built_in">range</span>(y_LL, y_UL, y_interval), [<span class="hljs-built_in">str</span>(y) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(y_LL, y_UL, y_interval)], fontsize=<span class="hljs-number">12</span>)plt.xticks(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, df.shape[<span class="hljs-number">0</span>], <span class="hljs-number">12</span>), df.date.values[::<span class="hljs-number">12</span>], horizontalalignment=<span class="hljs-string">&#x27;left&#x27;</span>, fontsize=<span class="hljs-number">12</span>)plt.ylim(y_LL, y_UL)plt.xlim(-<span class="hljs-number">2</span>, <span class="hljs-number">80</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/45.png" alt="45"></p><h3><span id="41-shi-yong-ci-yao-de-y-zhou-lai-hui-zhi-bu-tong-fan-wei-de-tu-xing-plotting-with-different-scales-using-secondary-y-axis"><font color="##4876FF">【41】使用次要的 Y 轴来绘制不同范围的图形（Plotting with different scales using secondary Y axis）</font></span></h3><p>如果要显示在同一时间点测量两个不同数量的两个时间序列，则可以在右侧的次要 Y 轴上再绘制第二个系列。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/economics.csv&quot;</span>)x = df[<span class="hljs-string">&#x27;date&#x27;</span>]y1 = df[<span class="hljs-string">&#x27;psavert&#x27;</span>]y2 = df[<span class="hljs-string">&#x27;unemploy&#x27;</span>]<span class="hljs-comment"># Plot Line1 (Left Y Axis)</span>fig, ax1 = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), dpi=<span class="hljs-number">80</span>)ax1.plot(x, y1, color=<span class="hljs-string">&#x27;tab:red&#x27;</span>)<span class="hljs-comment"># Plot Line2 (Right Y Axis)</span>ax2 = ax1.twinx()  <span class="hljs-comment"># instantiate a second axes that shares the same x-axis</span>ax2.plot(x, y2, color=<span class="hljs-string">&#x27;tab:blue&#x27;</span>)<span class="hljs-comment"># Decorations</span><span class="hljs-comment"># ax1 (left Y axis)</span>ax1.set_xlabel(<span class="hljs-string">&#x27;Year&#x27;</span>, fontsize=<span class="hljs-number">20</span>)ax1.tick_params(axis=<span class="hljs-string">&#x27;x&#x27;</span>, rotation=<span class="hljs-number">0</span>, labelsize=<span class="hljs-number">12</span>)ax1.set_ylabel(<span class="hljs-string">&#x27;Personal Savings Rate&#x27;</span>, color=<span class="hljs-string">&#x27;tab:red&#x27;</span>, fontsize=<span class="hljs-number">20</span>)ax1.tick_params(axis=<span class="hljs-string">&#x27;y&#x27;</span>, rotation=<span class="hljs-number">0</span>, labelcolor=<span class="hljs-string">&#x27;tab:red&#x27;</span>)ax1.grid(alpha=<span class="hljs-number">.4</span>)<span class="hljs-comment"># ax2 (right Y axis)</span>ax2.set_ylabel(<span class="hljs-string">&quot;# Unemployed (1000&#x27;s)&quot;</span>, color=<span class="hljs-string">&#x27;tab:blue&#x27;</span>, fontsize=<span class="hljs-number">20</span>)ax2.tick_params(axis=<span class="hljs-string">&#x27;y&#x27;</span>, labelcolor=<span class="hljs-string">&#x27;tab:blue&#x27;</span>)ax2.set_xticks(np.arange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x), <span class="hljs-number">60</span>))ax2.set_xticklabels(x[::<span class="hljs-number">60</span>], rotation=<span class="hljs-number">90</span>, fontdict=&#123;<span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">10</span>&#125;)ax2.set_title(<span class="hljs-string">&quot;Personal Savings Rate vs Unemployed: Plotting in Secondary Y Axis&quot;</span>, fontsize=<span class="hljs-number">22</span>)fig.tight_layout()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/46.png" alt="46"></p><h3><span id="42-dai-wu-chai-dai-de-shi-jian-xu-lie-time-series-with-error-bands"><font color="##4876FF">【42】带误差带的时间序列（Time Series with Error Bands）</font></span></h3><p>如果您有一个时间序列数据集，其中每个时间点（日期/时间戳）有多个观测值，则可以构造具有误差带的时间序列。下面您可以看到一些基于一天中不同时间的订单的示例。还有一个关于45天内到达的订单数量的例子。</p><p>在这种方法中，订单数量的平均值用白线表示。并计算95%的置信区间，并围绕平均值绘制。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> sem<span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/user_orders_hourofday.csv&quot;</span>)df_mean = df.groupby(<span class="hljs-string">&#x27;order_hour_of_day&#x27;</span>).quantity.mean()df_se = df.groupby(<span class="hljs-string">&#x27;order_hour_of_day&#x27;</span>).quantity.apply(sem).mul(<span class="hljs-number">1.96</span>)<span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)plt.ylabel(<span class="hljs-string">&quot;# Orders&quot;</span>, fontsize=<span class="hljs-number">16</span>)x = df_mean.indexplt.plot(x, df_mean, color=<span class="hljs-string">&quot;white&quot;</span>, lw=<span class="hljs-number">2</span>)plt.fill_between(x, df_mean - df_se, df_mean + df_se, color=<span class="hljs-string">&quot;#3F5D7D&quot;</span>)<span class="hljs-comment"># Decorations</span><span class="hljs-comment"># Lighten borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">1</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">1</span>)plt.xticks(x[::<span class="hljs-number">2</span>], [<span class="hljs-built_in">str</span>(d) <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> x[::<span class="hljs-number">2</span>]], fontsize=<span class="hljs-number">12</span>)plt.title(<span class="hljs-string">&quot;User Orders by Hour of Day (95% confidence)&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.xlabel(<span class="hljs-string">&quot;Hour of Day&quot;</span>)s, e = plt.gca().get_xlim()plt.xlim(s, e)<span class="hljs-comment"># Draw Horizontal Tick lines</span><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>, <span class="hljs-number">20</span>, <span class="hljs-number">2</span>):    plt.hlines(y, xmin=s, xmax=e, colors=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">0.5</span>, linestyles=<span class="hljs-string">&quot;--&quot;</span>, lw=<span class="hljs-number">0.5</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/47.png" alt="47"></p><pre><code class="hljs python"><span class="hljs-string">&quot;Data Source: https://www.kaggle.com/olistbr/brazilian-ecommerce#olist_orders_dataset.csv&quot;</span><span class="hljs-keyword">from</span> dateutil.parser <span class="hljs-keyword">import</span> parse<span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> sem<span class="hljs-comment"># Import Data</span>df_raw = pd.read_csv(<span class="hljs-string">&#x27;https://raw.githubusercontent.com/selva86/datasets/master/orders_45d.csv&#x27;</span>,                     parse_dates=[<span class="hljs-string">&#x27;purchase_time&#x27;</span>, <span class="hljs-string">&#x27;purchase_date&#x27;</span>])<span class="hljs-comment"># Prepare Data: Daily Mean and SE Bands</span>df_mean = df_raw.groupby(<span class="hljs-string">&#x27;purchase_date&#x27;</span>).quantity.mean()df_se = df_raw.groupby(<span class="hljs-string">&#x27;purchase_date&#x27;</span>).quantity.apply(sem).mul(<span class="hljs-number">1.96</span>)<span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)plt.ylabel(<span class="hljs-string">&quot;# Daily Orders&quot;</span>, fontsize=<span class="hljs-number">16</span>)x = [d.date().strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> df_mean.index]plt.plot(x, df_mean, color=<span class="hljs-string">&quot;white&quot;</span>, lw=<span class="hljs-number">2</span>)plt.fill_between(x, df_mean - df_se, df_mean + df_se, color=<span class="hljs-string">&quot;#3F5D7D&quot;</span>)<span class="hljs-comment"># Decorations</span><span class="hljs-comment"># Lighten borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">1</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">1</span>)plt.xticks(x[::<span class="hljs-number">6</span>], [<span class="hljs-built_in">str</span>(d) <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> x[::<span class="hljs-number">6</span>]], fontsize=<span class="hljs-number">12</span>)plt.title(<span class="hljs-string">&quot;Daily Order Quantity of Brazilian Retail with Error Bands (95% confidence)&quot;</span>, fontsize=<span class="hljs-number">20</span>)<span class="hljs-comment"># Axis limits</span>s, e = plt.gca().get_xlim()plt.xlim(s, e - <span class="hljs-number">2</span>)plt.ylim(<span class="hljs-number">4</span>, <span class="hljs-number">10</span>)<span class="hljs-comment"># Draw Horizontal Tick lines</span><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>):    plt.hlines(y, xmin=s, xmax=e, colors=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">0.5</span>, linestyles=<span class="hljs-string">&quot;--&quot;</span>, lw=<span class="hljs-number">0.5</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/48.png" alt="48"></p><h3><span id="43-dui-ji-mian-ji-tu-stacked-area-chart"><font color="##4876FF">【43】堆积面积图（Stacked Area Chart）</font></span></h3><p>堆积面积图提供了多个时间序列的贡献程度的可视化表示，以便相互比较。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&#x27;https://raw.githubusercontent.com/selva86/datasets/master/nightvisitors.csv&#x27;</span>)<span class="hljs-comment"># Decide Colors</span>mycolors = [<span class="hljs-string">&#x27;tab:red&#x27;</span>, <span class="hljs-string">&#x27;tab:blue&#x27;</span>, <span class="hljs-string">&#x27;tab:green&#x27;</span>, <span class="hljs-string">&#x27;tab:orange&#x27;</span>, <span class="hljs-string">&#x27;tab:brown&#x27;</span>, <span class="hljs-string">&#x27;tab:grey&#x27;</span>, <span class="hljs-string">&#x27;tab:pink&#x27;</span>, <span class="hljs-string">&#x27;tab:olive&#x27;</span>]<span class="hljs-comment"># Draw Plot and Annotate</span>fig, ax = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), dpi=<span class="hljs-number">80</span>)columns = df.columns[<span class="hljs-number">1</span>:]labs = columns.values.tolist()<span class="hljs-comment"># Prepare data</span>x = df[<span class="hljs-string">&#x27;yearmon&#x27;</span>].values.tolist()y0 = df[columns[<span class="hljs-number">0</span>]].values.tolist()y1 = df[columns[<span class="hljs-number">1</span>]].values.tolist()y2 = df[columns[<span class="hljs-number">2</span>]].values.tolist()y3 = df[columns[<span class="hljs-number">3</span>]].values.tolist()y4 = df[columns[<span class="hljs-number">4</span>]].values.tolist()y5 = df[columns[<span class="hljs-number">5</span>]].values.tolist()y6 = df[columns[<span class="hljs-number">6</span>]].values.tolist()y7 = df[columns[<span class="hljs-number">7</span>]].values.tolist()y = np.vstack([y0, y2, y4, y6, y7, y5, y1, y3])<span class="hljs-comment"># Plot for each column</span>labs = columns.values.tolist()ax = plt.gca()ax.stackplot(x, y, labels=labs, colors=mycolors, alpha=<span class="hljs-number">0.8</span>)<span class="hljs-comment"># Decorations</span>ax.set_title(<span class="hljs-string">&#x27;Night Visitors in Australian Regions&#x27;</span>, fontsize=<span class="hljs-number">18</span>)ax.<span class="hljs-built_in">set</span>(ylim=[<span class="hljs-number">0</span>, <span class="hljs-number">100000</span>])ax.legend(fontsize=<span class="hljs-number">10</span>, ncol=<span class="hljs-number">4</span>)plt.xticks(x[::<span class="hljs-number">5</span>], fontsize=<span class="hljs-number">10</span>, horizontalalignment=<span class="hljs-string">&#x27;center&#x27;</span>)plt.yticks(np.arange(<span class="hljs-number">10000</span>, <span class="hljs-number">100000</span>, <span class="hljs-number">20000</span>), fontsize=<span class="hljs-number">10</span>)plt.xlim(x[<span class="hljs-number">0</span>], x[-<span class="hljs-number">1</span>])<span class="hljs-comment"># Lighten borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/49.png" alt="49"></p><h3><span id="44-wei-dui-ji-mian-ji-tu-area-chart-unstacked"><font color="##4876FF">【44】未堆积面积图（Area Chart UnStacked）</font></span></h3><p>未堆积的面积图用于可视化两个或多个序列彼此之间的进度（起伏）。在下面的图表中，你可以清楚地看到，随着失业持续时间的中位数增加，个人储蓄率是如何下降的。未堆积面积图很好地展示了这一现象。</p><pre><code class="hljs python"><span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/economics.csv&quot;</span>)<span class="hljs-comment"># Prepare Data</span>x = df[<span class="hljs-string">&#x27;date&#x27;</span>].values.tolist()y1 = df[<span class="hljs-string">&#x27;psavert&#x27;</span>].values.tolist()y2 = df[<span class="hljs-string">&#x27;uempmed&#x27;</span>].values.tolist()mycolors = [<span class="hljs-string">&#x27;tab:red&#x27;</span>, <span class="hljs-string">&#x27;tab:blue&#x27;</span>, <span class="hljs-string">&#x27;tab:green&#x27;</span>, <span class="hljs-string">&#x27;tab:orange&#x27;</span>, <span class="hljs-string">&#x27;tab:brown&#x27;</span>, <span class="hljs-string">&#x27;tab:grey&#x27;</span>, <span class="hljs-string">&#x27;tab:pink&#x27;</span>, <span class="hljs-string">&#x27;tab:olive&#x27;</span>]columns = [<span class="hljs-string">&#x27;psavert&#x27;</span>, <span class="hljs-string">&#x27;uempmed&#x27;</span>]<span class="hljs-comment"># Draw Plot</span>fig, ax = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">9</span>), dpi=<span class="hljs-number">80</span>)ax.fill_between(x, y1=y1, y2=<span class="hljs-number">0</span>, label=columns[<span class="hljs-number">1</span>], alpha=<span class="hljs-number">0.5</span>, color=mycolors[<span class="hljs-number">1</span>], linewidth=<span class="hljs-number">2</span>)ax.fill_between(x, y1=y2, y2=<span class="hljs-number">0</span>, label=columns[<span class="hljs-number">0</span>], alpha=<span class="hljs-number">0.5</span>, color=mycolors[<span class="hljs-number">0</span>], linewidth=<span class="hljs-number">2</span>)<span class="hljs-comment"># Decorations</span>ax.set_title(<span class="hljs-string">&#x27;Personal Savings Rate vs Median Duration of Unemployment&#x27;</span>, fontsize=<span class="hljs-number">18</span>)ax.<span class="hljs-built_in">set</span>(ylim=[<span class="hljs-number">0</span>, <span class="hljs-number">30</span>])ax.legend(loc=<span class="hljs-string">&#x27;best&#x27;</span>, fontsize=<span class="hljs-number">12</span>)plt.xticks(x[::<span class="hljs-number">50</span>], fontsize=<span class="hljs-number">10</span>, horizontalalignment=<span class="hljs-string">&#x27;center&#x27;</span>)plt.yticks(np.arange(<span class="hljs-number">2.5</span>, <span class="hljs-number">30.0</span>, <span class="hljs-number">2.5</span>), fontsize=<span class="hljs-number">10</span>)plt.xlim(-<span class="hljs-number">10</span>, x[-<span class="hljs-number">1</span>])<span class="hljs-comment"># Draw Tick lines</span><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> np.arange(<span class="hljs-number">2.5</span>, <span class="hljs-number">30.0</span>, <span class="hljs-number">2.5</span>):    plt.hlines(y, xmin=<span class="hljs-number">0</span>, xmax=<span class="hljs-built_in">len</span>(x), colors=<span class="hljs-string">&#x27;black&#x27;</span>, alpha=<span class="hljs-number">0.3</span>, linestyles=<span class="hljs-string">&quot;--&quot;</span>, lw=<span class="hljs-number">0.5</span>)<span class="hljs-comment"># Lighten borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/50.png" alt="50"></p><h3><span id="45-ri-li-re-li-tu-calendar-heat-map"><font color="##4876FF">【45】日历热力图（Calendar Heat Map）</font></span></h3><p>与时间序列相比，日历地图是另一种基于时间的数据可视化的不太受欢迎的方法。虽然在视觉上很吸引人，但数值并不十分明显。然而，它能很好地描绘极端值和假日效果。</p><p>【译者 TRHX 注：在使用该方法时要先安装 calmap 库】</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib <span class="hljs-keyword">as</span> mpl<span class="hljs-keyword">import</span> calmap<span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/yahoo.csv&quot;</span>, parse_dates=[<span class="hljs-string">&#x27;date&#x27;</span>])df.set_index(<span class="hljs-string">&#x27;date&#x27;</span>, inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)calmap.calendarplot(df[<span class="hljs-string">&#x27;2014&#x27;</span>][<span class="hljs-string">&#x27;VIX.Close&#x27;</span>], fig_kws=&#123;<span class="hljs-string">&#x27;figsize&#x27;</span>: (<span class="hljs-number">16</span>, <span class="hljs-number">10</span>)&#125;,                    yearlabel_kws=&#123;<span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">14</span>&#125;, subplot_kws=&#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Yahoo Stock Prices&#x27;</span>&#125;)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/51.png" alt="51"></p><h3><span id="46-ji-jie-tu-seasonal-plot"><font color="##4876FF">【46】季节图（Seasonal Plot）</font></span></h3><p>季节图可用于比较上一季度同一天（年/月/周等）时间序列的表现。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> dateutil.parser <span class="hljs-keyword">import</span> parse<span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&#x27;https://github.com/selva86/datasets/raw/master/AirPassengers.csv&#x27;</span>)<span class="hljs-comment"># Prepare data</span>df[<span class="hljs-string">&#x27;year&#x27;</span>] = [parse(d).year <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> df.date]df[<span class="hljs-string">&#x27;month&#x27;</span>] = [parse(d).strftime(<span class="hljs-string">&#x27;%b&#x27;</span>) <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> df.date]years = df[<span class="hljs-string">&#x27;year&#x27;</span>].unique()<span class="hljs-comment"># 译者 TRHX 添加了该行代码</span>df.rename(columns=&#123;<span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;traffic&#x27;</span>&#125;, inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Draw Plot</span>mycolors = [<span class="hljs-string">&#x27;tab:red&#x27;</span>, <span class="hljs-string">&#x27;tab:blue&#x27;</span>, <span class="hljs-string">&#x27;tab:green&#x27;</span>, <span class="hljs-string">&#x27;tab:orange&#x27;</span>, <span class="hljs-string">&#x27;tab:brown&#x27;</span>, <span class="hljs-string">&#x27;tab:grey&#x27;</span>, <span class="hljs-string">&#x27;tab:pink&#x27;</span>, <span class="hljs-string">&#x27;tab:olive&#x27;</span>,            <span class="hljs-string">&#x27;deeppink&#x27;</span>, <span class="hljs-string">&#x27;steelblue&#x27;</span>, <span class="hljs-string">&#x27;firebrick&#x27;</span>, <span class="hljs-string">&#x27;mediumseagreen&#x27;</span>]plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)<span class="hljs-keyword">for</span> i, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(years):    plt.plot(<span class="hljs-string">&#x27;month&#x27;</span>, <span class="hljs-string">&#x27;traffic&#x27;</span>, data=df.loc[df.year == y, :], color=mycolors[i], label=y)    plt.text(df.loc[df.year == y, :].shape[<span class="hljs-number">0</span>] - <span class="hljs-number">.9</span>, df.loc[df.year == y, <span class="hljs-string">&#x27;traffic&#x27;</span>][-<span class="hljs-number">1</span>:].values[<span class="hljs-number">0</span>], y, fontsize=<span class="hljs-number">12</span>,             color=mycolors[i])<span class="hljs-comment"># Decoration</span>plt.ylim(<span class="hljs-number">50</span>, <span class="hljs-number">750</span>)plt.xlim(-<span class="hljs-number">0.3</span>, <span class="hljs-number">11</span>)plt.ylabel(<span class="hljs-string">&#x27;$Air Traffic$&#x27;</span>)plt.yticks(fontsize=<span class="hljs-number">12</span>, alpha=<span class="hljs-number">.7</span>)plt.title(<span class="hljs-string">&quot;Monthly Seasonal Plot: Air Passengers Traffic (1949 - 1969)&quot;</span>, fontsize=<span class="hljs-number">22</span>)plt.grid(axis=<span class="hljs-string">&#x27;y&#x27;</span>, alpha=<span class="hljs-number">.3</span>)<span class="hljs-comment"># Remove borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">0.0</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">0.5</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">0.0</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">0.5</span>)<span class="hljs-comment"># plt.legend(loc=&#x27;upper right&#x27;, ncol=2, fontsize=12)</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/52.png" alt="52"></p><h2><span id="9x00-fen-zu-groups"><font color="#FF0000">【9x00】分组（ Groups）</font></span></h2><h3><span id="47-shu-zhuang-tu-dendrogram"><font color="##4876FF">【47】树状图（Dendrogram）</font></span></h3><p>树状图根据给定的距离度量将相似的点组合在一起，并根据点的相似性将它们组织成树状链接。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> scipy.cluster.hierarchy <span class="hljs-keyword">as</span> shc<span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&#x27;https://raw.githubusercontent.com/selva86/datasets/master/USArrests.csv&#x27;</span>)<span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)plt.title(<span class="hljs-string">&quot;USArrests Dendograms&quot;</span>, fontsize=<span class="hljs-number">22</span>)dend = shc.dendrogram(shc.linkage(df[[<span class="hljs-string">&#x27;Murder&#x27;</span>, <span class="hljs-string">&#x27;Assault&#x27;</span>, <span class="hljs-string">&#x27;UrbanPop&#x27;</span>, <span class="hljs-string">&#x27;Rape&#x27;</span>]], method=<span class="hljs-string">&#x27;ward&#x27;</span>), labels=df.State.values,                      color_threshold=<span class="hljs-number">100</span>)plt.xticks(fontsize=<span class="hljs-number">12</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/53.png" alt="53"></p><h3><span id="48-ju-lei-tu-cluster-plot"><font color="##4876FF">【48】聚类图（Cluster Plot）</font></span></h3><p>聚类图可以用来划分属于同一个聚类的点。下面是一个基于 USArrests 数据集将美国各州分成 5 组的代表性示例。这个聚类图使用 ‘murder’ 和 ‘assault’ 作为 X 轴和 Y 轴。或者，您可以将第一个主元件用作 X 轴和 Y 轴。</p><p>【译者 TRHX 注：在使用该方法时要先安装 sklearn 库】</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> AgglomerativeClustering<span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> ConvexHull<span class="hljs-comment"># Import Data</span>df = pd.read_csv(<span class="hljs-string">&#x27;https://raw.githubusercontent.com/selva86/datasets/master/USArrests.csv&#x27;</span>)<span class="hljs-comment"># Agglomerative Clustering</span>cluster = AgglomerativeClustering(n_clusters=<span class="hljs-number">5</span>, affinity=<span class="hljs-string">&#x27;euclidean&#x27;</span>, linkage=<span class="hljs-string">&#x27;ward&#x27;</span>)cluster.fit_predict(df[[<span class="hljs-string">&#x27;Murder&#x27;</span>, <span class="hljs-string">&#x27;Assault&#x27;</span>, <span class="hljs-string">&#x27;UrbanPop&#x27;</span>, <span class="hljs-string">&#x27;Rape&#x27;</span>]])<span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">14</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">80</span>)plt.scatter(df.iloc[:, <span class="hljs-number">0</span>], df.iloc[:, <span class="hljs-number">1</span>], c=cluster.labels_, cmap=<span class="hljs-string">&#x27;tab10&#x27;</span>)<span class="hljs-comment"># Encircle</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encircle</span>(<span class="hljs-params">x, y, ax=<span class="hljs-literal">None</span>, **kw</span>):</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ax: ax = plt.gca()    p = np.c_[x, y]    hull = ConvexHull(p)    poly = plt.Polygon(p[hull.vertices,:], **kw)    ax.add_patch(poly)<span class="hljs-comment"># Draw polygon surrounding vertices</span>encircle(df.loc[cluster.labels_ == <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Murder&#x27;</span>], df.loc[cluster.labels_ == <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Assault&#x27;</span>], ec=<span class="hljs-string">&quot;k&quot;</span>, fc=<span class="hljs-string">&quot;gold&quot;</span>, alpha=<span class="hljs-number">0.2</span>, linewidth=<span class="hljs-number">0</span>)encircle(df.loc[cluster.labels_ == <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Murder&#x27;</span>], df.loc[cluster.labels_ == <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Assault&#x27;</span>], ec=<span class="hljs-string">&quot;k&quot;</span>, fc=<span class="hljs-string">&quot;tab:blue&quot;</span>, alpha=<span class="hljs-number">0.2</span>, linewidth=<span class="hljs-number">0</span>)encircle(df.loc[cluster.labels_ == <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Murder&#x27;</span>], df.loc[cluster.labels_ == <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Assault&#x27;</span>], ec=<span class="hljs-string">&quot;k&quot;</span>, fc=<span class="hljs-string">&quot;tab:red&quot;</span>, alpha=<span class="hljs-number">0.2</span>, linewidth=<span class="hljs-number">0</span>)encircle(df.loc[cluster.labels_ == <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Murder&#x27;</span>], df.loc[cluster.labels_ == <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Assault&#x27;</span>], ec=<span class="hljs-string">&quot;k&quot;</span>, fc=<span class="hljs-string">&quot;tab:green&quot;</span>, alpha=<span class="hljs-number">0.2</span>, linewidth=<span class="hljs-number">0</span>)encircle(df.loc[cluster.labels_ == <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;Murder&#x27;</span>], df.loc[cluster.labels_ == <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;Assault&#x27;</span>], ec=<span class="hljs-string">&quot;k&quot;</span>, fc=<span class="hljs-string">&quot;tab:orange&quot;</span>, alpha=<span class="hljs-number">0.2</span>, linewidth=<span class="hljs-number">0</span>)<span class="hljs-comment"># Decorations</span>plt.xlabel(<span class="hljs-string">&#x27;Murder&#x27;</span>); plt.xticks(fontsize=<span class="hljs-number">12</span>)plt.ylabel(<span class="hljs-string">&#x27;Assault&#x27;</span>); plt.yticks(fontsize=<span class="hljs-number">12</span>)plt.title(<span class="hljs-string">&#x27;Agglomerative Clustering of USArrests (5 Groups)&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/54.png" alt="54"></p><h3><span id="49-an-de-lu-si-qu-xian-andrews-curve"><font color="##4876FF">【49】安德鲁斯曲线（Andrews Curve）</font></span></h3><p>安德鲁斯曲线有助于可视化是否存在基于给定分组的数值特征的固有分组。如果特征（数据集中的列）不能帮助区分组（cyl），则行将不会像下图所示被很好地分隔开。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pandas.plotting <span class="hljs-keyword">import</span> andrews_curves<span class="hljs-comment"># Import</span>df = pd.read_csv(<span class="hljs-string">&quot;https://github.com/selva86/datasets/raw/master/mtcars.csv&quot;</span>)df.drop([<span class="hljs-string">&#x27;cars&#x27;</span>, <span class="hljs-string">&#x27;carname&#x27;</span>], axis=<span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">9</span>), dpi=<span class="hljs-number">80</span>)andrews_curves(df, <span class="hljs-string">&#x27;cyl&#x27;</span>, colormap=<span class="hljs-string">&#x27;Set1&#x27;</span>)<span class="hljs-comment"># Lighten borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.title(<span class="hljs-string">&#x27;Andrews Curves of mtcars&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.xlim(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)plt.grid(alpha=<span class="hljs-number">0.3</span>)plt.xticks(fontsize=<span class="hljs-number">12</span>)plt.yticks(fontsize=<span class="hljs-number">12</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/55.png" alt="55"></p><h3><span id="50-ping-xing-zuo-biao-tu-parallel-coordinates"><font color="##4876FF">【50】平行坐标图（Parallel Coordinates）</font></span></h3><p>平行坐标有助于可视化功能是否有助于有效地隔离组。如果一个分离受到影响，则该特征可能在预测该组时非常有用。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> pandas.plotting <span class="hljs-keyword">import</span> parallel_coordinates<span class="hljs-comment"># Import Data</span>df_final = pd.read_csv(<span class="hljs-string">&quot;https://raw.githubusercontent.com/selva86/datasets/master/diamonds_filter.csv&quot;</span>)<span class="hljs-comment"># Plot</span>plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">9</span>), dpi=<span class="hljs-number">80</span>)parallel_coordinates(df_final, <span class="hljs-string">&#x27;cut&#x27;</span>, colormap=<span class="hljs-string">&#x27;Dark2&#x27;</span>)<span class="hljs-comment"># Lighten borders</span>plt.gca().spines[<span class="hljs-string">&quot;top&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;bottom&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.gca().spines[<span class="hljs-string">&quot;right&quot;</span>].set_alpha(<span class="hljs-number">0</span>)plt.gca().spines[<span class="hljs-string">&quot;left&quot;</span>].set_alpha(<span class="hljs-number">.3</span>)plt.title(<span class="hljs-string">&#x27;Parallel Coordinated of Diamonds&#x27;</span>, fontsize=<span class="hljs-number">22</span>)plt.grid(alpha=<span class="hljs-number">0.3</span>)plt.xticks(fontsize=<span class="hljs-number">12</span>)plt.yticks(fontsize=<span class="hljs-number">12</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/024/56.png" alt="56"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本译文首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">Selva</span> <span class="hljs-string">Prabhakaran，译者</span> <span class="hljs-string">TRHX。</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106558131</span><span class="hljs-string">原文链接：https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</title>
      <link href="/article/023/"/>
      <url>/article/023/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01x00-liao-jie-mplot3d-toolkit-font"><font color="#FF0000">【01x00】了解 mplot3d Toolkit</font></a><ul><li><a href="#font-color-4876ff-01x01-axes3d-dui-xiang-chuang-jian-fang-fa-yi-axes3d-fig-font"><font color="##4876FF">【01x01】Axes3D 对象创建方法一：Axes3D(fig)</font></a></li><li><a href="#font-color-4876ff-01x02-axes3d-dui-xiang-chuang-jian-fang-fa-er-add-subplot-font"><font color="##4876FF">【01x02】Axes3D 对象创建方法二：add_subplot</font></a></li><li><a href="#font-color-4876ff-01x03-axes3d-dui-xiang-chuang-jian-fang-fa-san-gca-font"><font color="##4876FF">【01x03】Axes3D 对象创建方法三：gca</font></a></li></ul></li><li><a href="#font-color-ff0000-02x00-cmap-yu-colorbar-font"><font color="#FF0000">【02x00】cmap 与 colorbar</font></a></li><li><a href="#font-color-ff0000-03x00-3d-xian-xing-tu-axes3d-plot-font"><font color="#FF0000">【03x00】3D 线性图：Axes3D.plot</font></a></li><li><a href="#font-color-ff0000-04x00-3d-san-dian-tu-axes3d-scatter-font"><font color="#FF0000">【04x00】3D 散点图：Axes3D.scatter</font></a></li><li><a href="#font-color-ff0000-05x00-3d-xian-kuang-tu-axes3d-plot-wireframe-font"><font color="#FF0000">【05x00】3D 线框图：Axes3D.plot_wireframe</font></a></li><li><a href="#font-color-ff0000-06x00-3d-qu-mian-tu-axes3d-plot-surface-font"><font color="#FF0000">【06x00】3D 曲面图：Axes3D.plot_surface</font></a></li><li><a href="#font-color-ff0000-07x00-3d-zhu-zhuang-tu-axes3d-bar-font"><font color="#FF0000">【07x00】3D 柱状图：Axes3D.bar</font></a></li><li><a href="#font-color-ff0000-08x00-3d-jian-tou-tu-axes3d-quiver-font"><font color="#FF0000">【08x00】3D 箭头图：Axes3D.quiver</font></a></li><li><a href="#font-color-ff0000-09x00-3d-deng-gao-xian-tu-axes3d-contour-font"><font color="#FF0000">【09x00】3D 等高线图：Axes3D.contour</font></a></li><li><a href="#font-color-ff0000-10x00-3d-deng-gao-xian-tian-chong-tu-axes3d-contourf-font"><font color="#FF0000">【10x00】3D 等高线填充图：Axes3D.contourf</font></a></li><li><a href="#font-color-ff0000-11x00-3d-san-jiao-qu-mian-tu-axes3d-plot-trisurf-font"><font color="#FF0000">【11x00】3D 三角曲面图：Axes3D.plot_trisurf</font></a></li><li><a href="#font-color-ff0000-12x00-jiang-2d-tu-xiang-ju-he-dao-3d-tu-xiang-zhong-axes3d-add-collection3d-font"><font color="#FF0000">【12x00】将 2D 图像聚合到 3D 图像中：Axes3D.add_collection3d</font></a></li><li><a href="#font-color-ff0000-13x00-3d-tu-tian-jia-wen-ben-miao-shu-axes3d-text-font"><font color="#FF0000">【13x00】3D 图添加文本描述：Axes3D.text</font></a></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106558131</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01x00-liao-jie-mplot3d-toolkit"><font color="#FF0000">【01x00】了解 mplot3d Toolkit</font></span></h2><p>mplot3d Toolkit 即 mplot3d 工具包，在 matplotlib 中使用 mplot3d 工具包可以绘制 3D 图。</p><p>mplot3d 官方文档：<a href="https://matplotlib.org/tutorials/toolkits/mplot3d.html">https://matplotlib.org/tutorials/toolkits/mplot3d.html</a></p><p>在 matplotlib 中，figure 为画布，axes 为绘图区，<code>fig.add_subplot()</code>、<code>plt.subplot()</code> 方法均可以创建子图，在绘制 3D 图时，某些 2D 图的参数也适用于 3D 图，在本文的示例中，可能会用到的一些没有具体解释的函数或者参数，其用法均可在前面的系列文章中找到：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105638122">《Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828049">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828143">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></p></li></ul><p><font color="#FF0000"><strong>绘制 3D 图的步骤：创建 Axes3D 对象，然后调用 Axes3D 的不同方法来绘制不同类型的 3D 图。以下介绍三种 Axes3D 对象创建的方法。</strong></font></p><h3><span id="01x01-axes3d-dui-xiang-chuang-jian-fang-fa-yi-axes3d-fig"><font color="##4876FF">【01x01】Axes3D 对象创建方法一：Axes3D(fig)</font></span></h3><p>在 Matplotlib 1.0.0 版本中，绘制 3D 图需要先导入 Axes3D 包，获取 figure 画布对象 fig 后，通过 Axes3D(fig) 方法来创建 Axes3D 对象，具体方法如下：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<span class="hljs-comment"># 获取 figure 画布并创建 Axes3D 对象</span>fig = plt.figure()ax = Axes3D(fig)<span class="hljs-comment"># 数据坐标</span>z = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1000</span>)x = np.sin(z)y = np.cos(z)<span class="hljs-comment"># 绘制线性图</span>ax.plot(x, y, z)plt.show()</code></pre><h3><span id="01x02-axes3d-dui-xiang-chuang-jian-fang-fa-er-add-subplot"><font color="##4876FF">【01x02】Axes3D 对象创建方法二：add_subplot</font></span></h3><p>在 Matplotlib 3.2.0 版本中，绘制 3D 图可以通过创建子图，然后指定 projection 参数 为 3d 即可，返回的 ax 为 Axes3D 对象，以下两种方法均可：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span>fig = plt.figure()ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># 数据坐标</span>z = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1000</span>)x = np.sin(z)y = np.cos(z)<span class="hljs-comment"># 绘制线性图</span>ax.plot(x, y, z)plt.show()</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-comment"># 通过子图创建 Axes3D 对象</span>ax = plt.subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># 数据坐标</span>z = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1000</span>)x = np.sin(z)y = np.cos(z)<span class="hljs-comment"># 绘制线性图</span>ax.plot(x, y, z)plt.show()</code></pre><h3><span id="01x03-axes3d-dui-xiang-chuang-jian-fang-fa-san-gca"><font color="##4876FF">【01x03】Axes3D 对象创建方法三：gca</font></span></h3><p>除了以上两种方法以外，还可以先获取画布对象 fig，再通过 <code>fig.gca()</code> 方法获取当前绘图区（gca = Get Current Axes），然后指定 projection 参数 为 3d 即可，返回的 ax 为 Axes3D 对象。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-comment"># 依次获取画布和绘图区并创建 Axes3D 对象</span>fig = plt.figure()ax = fig.gca(projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># 数据坐标</span>z = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1000</span>)x = np.sin(z)y = np.cos(z)<span class="hljs-comment"># 绘制线性图</span>ax.plot(x, y, z)plt.show()</code></pre><p>以上三种方法运行结果均为下图：</p><p><img src="https://cdn.itbob.cn/img/article/023/01.png" alt="01"></p><h2><span id="02x00-cmap-yu-colorbar"><font color="#FF0000">【02x00】cmap 与 colorbar</font></span></h2><p>默认情况下，散点图、线性图、曲面图等将以纯色着色，但可以通过提供 cmap 参数支持颜色映射。cmap 参数用于设置一些特殊的颜色组合，如渐变色等，参数取值通常为 Colormap 中的值，具体取值可参见下图：</p><p>官方文档：<a href="https://matplotlib.org/tutorials/colors/colormaps.html">https://matplotlib.org/tutorials/colors/colormaps.html</a></p><p><img src="https://cdn.itbob.cn/img/article/023/02.png" alt="02"></p><p>如果使用了 cmap 参数，则可以使用 <code>pyplot.colorbar()</code> 函数来绘制一个色条，即颜色对照条。</p><p>基本语法：<code>matplotlib.pyplot.colorbar([mappable=None, cax=None, ax=None, **kw])</code></p><p>部分参数解释如下表，其他参数，如长度，宽度等请参考<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.colorbar.html">官方文档</a>。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>mappable</td><td>要设置色条的图像对象，该参数对于 <code>Figure.colorbar</code> 方法是必需的，但对于 <code>pyplot.colorbar</code> 函数是可选的</td></tr><tr><td>cax</td><td>可选项，要绘制色条的轴</td></tr><tr><td>ax</td><td>可选项，设置色条的显示位置，通常在一个画布上有多个子图时使用</td></tr><tr><td>**kw</td><td>可选项，其他关键字参数，参考<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.colorbar.html">官方文档</a></td></tr></tbody></table><h2><span id="03x00-3d-xian-xing-tu-axes3d-plot"><font color="#FF0000">【03x00】3D 线性图：Axes3D.plot</font></span></h2><p>基本方法：<code>Axes3D.plot(xs, ys[, zs, zdir='z', *args, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>xs</td><td>一维数组，点的 x 轴坐标</td></tr><tr><td>ys</td><td>一维数组，点的 y 轴坐标</td></tr><tr><td>zs</td><td>一维数组，可选项，点的 z 轴坐标</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，可参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.plot.html">matplotlib.axes.Axes.plot</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-comment"># 设置中文显示</span>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 依次获取画布和绘图区并创建 Axes3D 对象</span>fig = plt.figure()ax = fig.gca(projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># 第一条3D线性图数据</span>theta = np.linspace(-<span class="hljs-number">4</span> * np.pi, <span class="hljs-number">4</span> * np.pi, <span class="hljs-number">100</span>)z1 = np.linspace(-<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">100</span>)r = z1**<span class="hljs-number">2</span> + <span class="hljs-number">1</span>x1 = r * np.sin(theta)y1 = r * np.cos(theta)<span class="hljs-comment"># 第二条3D线性图数据</span>z2 = np.linspace(-<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">100</span>)x2 = np.sin(z2)y2 = np.cos(z2)<span class="hljs-comment"># 绘制3D线性图</span>ax.plot(x1, y1, z1, color=<span class="hljs-string">&#x27;b&#x27;</span>, label=<span class="hljs-string">&#x27;3D 线性图一&#x27;</span>)ax.plot(x2, y2, z2, color=<span class="hljs-string">&#x27;r&#x27;</span>, label=<span class="hljs-string">&#x27;3D 线性图二&#x27;</span>)<span class="hljs-comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel、plt.legend...</span>ax.set_title(<span class="hljs-string">&#x27;绘制 3D 线性图示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>, color=<span class="hljs-string">&#x27;r&#x27;</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>, color=<span class="hljs-string">&#x27;g&#x27;</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;z 轴&#x27;</span>, color=<span class="hljs-string">&#x27;b&#x27;</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/03.png" alt="03"></p><h2><span id="04x00-3d-san-dian-tu-axes3d-scatter"><font color="#FF0000">【04x00】3D 散点图：Axes3D.scatter</font></span></h2><p>基本方法：<code>Axes3D.scatter(xs, ys[, zs=0, zdir='z', s=20, c=None, depthshade=True, *args, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>xs</td><td>一维数组，点的 x 轴坐标</td></tr><tr><td>ys</td><td>一维数组，点的 y 轴坐标</td></tr><tr><td>zs</td><td>一维数组，可选项，点的 z 轴坐标</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr><tr><td>s</td><td>标量或数组类型，可选项，标记的大小，默认 20</td></tr><tr><td>c</td><td>标记的颜色，可选项，可以是单个颜色或者一个颜色列表<br>支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html">Color Demo</a></td></tr><tr><td>depthshade</td><td>bool 值，可选项，默认 True，是否为散点标记着色以提供深度外观</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，可参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.scatter.html">scatter</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 依次获取画布和绘图区并创建 Axes3D 对象</span>fig = plt.figure()ax = fig.gca(projection=<span class="hljs-string">&#x27;3d&#x27;</span>)n = <span class="hljs-number">100</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">randrange</span>(<span class="hljs-params">n, vmin, vmax</span>):</span>    <span class="hljs-keyword">return</span> (vmax - vmin)*np.random.rand(n) + vmin<span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">定义绘制 n 个随机点，设置每一组数据点的样式和范围</span><span class="hljs-string">x轴数据位于[23，32]区间，y轴数据位于[0，100]区间，z轴数据位于[zlow，zhigh]区间</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-keyword">for</span> m, zlow, zhigh <span class="hljs-keyword">in</span> [(<span class="hljs-string">&#x27;o&#x27;</span>, -<span class="hljs-number">50</span>, -<span class="hljs-number">25</span>), (<span class="hljs-string">&#x27;^&#x27;</span>, -<span class="hljs-number">30</span>, -<span class="hljs-number">5</span>)]:    xs = randrange(n, <span class="hljs-number">23</span>, <span class="hljs-number">32</span>)    ys = randrange(n, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>)    zs = randrange(n, zlow, zhigh)    ax.scatter(xs, ys, zs, marker=m)<span class="hljs-comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span>ax.set_title(<span class="hljs-string">&#x27;绘制 3D 散点图示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>, color=<span class="hljs-string">&#x27;b&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>, color=<span class="hljs-string">&#x27;b&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;z 轴&#x27;</span>, color=<span class="hljs-string">&#x27;b&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/04.png" alt="04"></p><h2><span id="05x00-3d-xian-kuang-tu-axes3d-plot-wireframe"><font color="#FF0000">【05x00】3D 线框图：Axes3D.plot_wireframe</font></span></h2><p>基本方法：<code>Axes3D.plot_wireframe(X, Y, Z[, *args, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X</td><td>二维数组，x 轴数据</td></tr><tr><td>Y</td><td>二维数组，y 轴数据</td></tr><tr><td>Z</td><td>二维数组，z 轴数据</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，如线条样式颜色等，可参见 <a href="https://matplotlib.org/api/_as_gen/mpl_toolkits.mplot3d.art3d.Line3DCollection.html">Line3DCollection</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span>fig = plt.figure()ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># 定义Z轴坐标的生成方法</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">m, n</span>):</span>    <span class="hljs-keyword">return</span> np.sin(np.sqrt(m ** <span class="hljs-number">2</span> + n ** <span class="hljs-number">2</span>))<span class="hljs-comment"># 设置3D线框图数据</span>x = np.linspace(-<span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">30</span>)y = np.linspace(-<span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">30</span>)<span class="hljs-comment"># 生成网格点坐标矩阵，该方法在系列文章八中有具体介绍</span>X, Y = np.meshgrid(x, y)Z = f(X, Y)<span class="hljs-comment"># 绘制3D线框图</span>ax.plot_wireframe(X, Y, Z, color=<span class="hljs-string">&#x27;c&#x27;</span>)<span class="hljs-comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span>ax.set_title(<span class="hljs-string">&#x27;绘制 3D 线框图示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;z 轴&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/05.png" alt="05"></p><h2><span id="06x00-3d-qu-mian-tu-axes3d-plot-surface"><font color="#FF0000">【06x00】3D 曲面图：Axes3D.plot_surface</font></span></h2><p>基本方法：<code>Axes3D.plot_surface(X, Y, Z[, *args, vmin=None, vmax=None, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X</td><td>二维数组，x 轴数据</td></tr><tr><td>Y</td><td>二维数组，y 轴数据</td></tr><tr><td>Z</td><td>二维数组，z 轴数据</td></tr><tr><td>vmin / vmax</td><td>规定数据界限</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，如线条样式颜色等，可参见 <a href="https://matplotlib.org/api/_as_gen/mpl_toolkits.mplot3d.art3d.Line3DCollection.html">Line3DCollection</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span>fig = plt.figure()ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># 设置3D曲面图数据</span>X = np.arange(-<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.25</span>)Y = np.arange(-<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.25</span>)<span class="hljs-comment"># 生成网格点坐标矩阵，该方法在系列文章八中有具体介绍</span>X, Y = np.meshgrid(X, Y)R = np.sqrt(X**<span class="hljs-number">2</span> + Y**<span class="hljs-number">2</span>)Z = np.sin(R)<span class="hljs-comment"># 绘制3D曲面图并添加色条（长度0.8）</span>surface = ax.plot_surface(X, Y, Z, cmap=<span class="hljs-string">&#x27;rainbow&#x27;</span>, antialiased=<span class="hljs-literal">False</span>)fig.colorbar(surface, shrink=<span class="hljs-number">0.8</span>)<span class="hljs-comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span>ax.set_title(<span class="hljs-string">&#x27;绘制 3D 曲面图示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;z 轴&#x27;</span>)<span class="hljs-comment"># 调整观察角度和方位角，俯仰角25度，方位角40度</span>ax.view_init(<span class="hljs-number">25</span>, <span class="hljs-number">40</span>)<span class="hljs-comment"># 设置Z轴刻度界限</span>ax.set_zlim(-<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/06.png" alt="06"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106558131</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="07x00-3d-zhu-zhuang-tu-axes3d-bar"><font color="#FF0000">【07x00】3D 柱状图：Axes3D.bar</font></span></h2><p>基本方法：<code>Axes3D.bar(left, height, zs=0, zdir='z', *args, **kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>一维数组，柱状图最左侧位置的 x 坐标</td></tr><tr><td>height</td><td>一维数组，柱状图的高度（y 坐标）</td></tr><tr><td>zs</td><td>第 i 个多边形将出现在平面 y=zs[i] 上</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr><tr><td>**kwargs</td><td>其他关键字参数，参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.bar.html">matplotlib.axes.Axes.bar</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span>fig = plt.figure()ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)colors = [<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>]yticks = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<span class="hljs-comment"># 设置3D柱状图数据并绘制图像</span><span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(colors, yticks):    xs = np.arange(<span class="hljs-number">20</span>)    ys = np.random.rand(<span class="hljs-number">20</span>)    cs = [c] * <span class="hljs-built_in">len</span>(xs)    ax.bar(xs, ys, zs=k, zdir=<span class="hljs-string">&#x27;y&#x27;</span>, color=cs, alpha=<span class="hljs-number">0.8</span>)<span class="hljs-comment"># 设置图像标题、坐标标签以及范围</span>ax.set_title(<span class="hljs-string">&#x27;绘制 3D 柱状图示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;X 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;Y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;Z 轴&#x27;</span>)ax.set_yticks(yticks)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/07.png" alt="07"></p><h2><span id="08x00-3d-jian-tou-tu-axes3d-quiver"><font color="#FF0000">【08x00】3D 箭头图：Axes3D.quiver</font></span></h2><p>基本方法：<code>Axes3D.quiver(X, Y, Z, U, V, W, length=1, arrow_length_ratio=0.3, pivot='tail', normalize=False, **kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X, Y, Z</td><td>数组形式，箭头位置的 x、y 和 z 轴坐标（默认为箭头尾部）</td></tr><tr><td>U, V, W</td><td>数组形式，箭头向量的 x、y 和 z 轴分量</td></tr><tr><td>length</td><td>float 类型，每个箭筒的长度，默认为 1.0</td></tr><tr><td>arrow_length_ratio</td><td>float 类型，箭头相对于箭身的比率，默认为 0.3</td></tr><tr><td>pivot</td><td>箭头在网格点上的位置；箭头围绕该点旋转，因此命名为 pivot，默认为 ‘tail’<br>可选项：<code>'tail'</code>：尾部；<code>'middle'</code>：中间；<code>'tip'</code>：尖端</td></tr><tr><td>normalize</td><td>bool 类型，如果为 True，则所有箭头的长度都将相同<br>默认为 False，即箭头的长度取决于 U、V、W 的值</td></tr><tr><td>**kwargs</td><td>其他关键字参数，参见 <a href="https://matplotlib.org/api/collections_api.html#matplotlib.collections.LineCollection">LineCollection</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 依次获取画布和绘图区并创建 Axes3D 对象</span>fig = plt.figure()ax = fig.gca(projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># 设置箭头位置</span>x, y, z = np.meshgrid(np.arange(-<span class="hljs-number">0.8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.2</span>),                      np.arange(-<span class="hljs-number">0.8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.2</span>),                      np.arange(-<span class="hljs-number">0.8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.8</span>))<span class="hljs-comment"># 设置箭头数据</span>u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)w = (np.sqrt(<span class="hljs-number">2.0</span> / <span class="hljs-number">3.0</span>) * np.cos(np.pi * x) * np.cos(np.pi * y) * np.sin(np.pi * z))<span class="hljs-comment"># 绘制 3D 箭头图</span>ax.quiver(x, y, z, u, v, w, length=<span class="hljs-number">0.1</span>, normalize=<span class="hljs-literal">True</span>)<span class="hljs-comment"># 设置图像标题、坐标标签</span>ax.set_title(<span class="hljs-string">&#x27;绘制 3D 箭头图示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;X 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;Y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;Z 轴&#x27;</span>)<span class="hljs-comment"># 调整观察角度，俯仰角20度</span>ax.view_init(<span class="hljs-number">20</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/08.png" alt="08"></p><h2><span id="09x00-3d-deng-gao-xian-tu-axes3d-contour"><font color="#FF0000">【09x00】3D 等高线图：Axes3D.contour</font></span></h2><p>基本方法：<code>Axes3D.contour(X, Y, Z[, *args, extend3d=False, stride=5, zdir='z', offset=None, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X</td><td>一维数组，x 轴数据</td></tr><tr><td>Y</td><td>一维数组，y 轴数据</td></tr><tr><td>Z</td><td>一维数组，z 轴数据</td></tr><tr><td>extend3d</td><td>bool 值，可选项，是否以 3D 延伸轮廓，默认 False</td></tr><tr><td>stride</td><td>int 类型，可选项，用于延伸轮廓的步长</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr><tr><td>offset</td><td>标量，可选项，如果指定，则在垂直于 zdir 的平面上的位置绘制轮廓线的投影</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，可参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.contour.html">matplotlib.axes.Axes.contour</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span>fig = plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">4.8</span>))ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># 设置等高线数据</span>X = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)Y = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)<span class="hljs-comment"># 生成网格点坐标矩阵</span>m, n = np.meshgrid(X, Y)<span class="hljs-comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> - b ** <span class="hljs-number">5</span> + a ** <span class="hljs-number">5</span>) * np.exp(-a ** <span class="hljs-number">2</span> - b ** <span class="hljs-number">2</span>)<span class="hljs-comment"># 绘制3D等高线图并添加色条图（长度0.8）</span>contour = ax.contour(X, Y, f(m, n), cmap=<span class="hljs-string">&#x27;rainbow&#x27;</span>)fig.colorbar(contour, shrink=<span class="hljs-number">0.8</span>)<span class="hljs-comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span>ax.set_title(<span class="hljs-string">&#x27;绘制 3D 等高线图示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;z 轴&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/09.png" alt="09"></p><h2><span id="10x00-3d-deng-gao-xian-tian-chong-tu-axes3d-contourf"><font color="#FF0000">【10x00】3D 等高线填充图：Axes3D.contourf</font></span></h2><p>基本语法：<code>Axes3D.contourf(X, Y, Z[, *args, zdir='z', offset=None, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X</td><td>一维数组，x 轴数据</td></tr><tr><td>Y</td><td>一维数组，y 轴数据</td></tr><tr><td>Z</td><td>一维数组，z 轴数据</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr><tr><td>offset</td><td>标量，可选项，如果指定，则在垂直于 zdir 的平面上的位置绘制轮廓线的投影</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，可参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.contourf.html">matplotlib.axes.Axes.contourf</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span>fig = plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">4.8</span>))ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># 设置等高线数据</span>X = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)Y = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)<span class="hljs-comment"># 生成网格点坐标矩阵</span>m, n = np.meshgrid(X, Y)<span class="hljs-comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> - b ** <span class="hljs-number">5</span> + a ** <span class="hljs-number">5</span>) * np.exp(-a ** <span class="hljs-number">2</span> - b ** <span class="hljs-number">2</span>)<span class="hljs-comment"># 绘制3D等高线图并添加色条图（长度0.8）</span>contourf = ax.contourf(X, Y, f(m, n), cmap=<span class="hljs-string">&#x27;rainbow&#x27;</span>)fig.colorbar(contourf, shrink=<span class="hljs-number">0.8</span>)<span class="hljs-comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span>ax.set_title(<span class="hljs-string">&#x27;绘制 3D 等高线填充图示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;z 轴&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/10.png" alt="10"></p><h2><span id="11x00-3d-san-jiao-qu-mian-tu-axes3d-plot-trisurf"><font color="#FF0000">【11x00】3D 三角曲面图：Axes3D.plot_trisurf</font></span></h2><p>基本方法：<code>Axes3D.plot_trisurf(X, Y, Z[, *args, color=None, vmin=None, vmax=None, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X</td><td>一维数组，x 轴数据</td></tr><tr><td>Y</td><td>一维数组，y 轴数据</td></tr><tr><td>Z</td><td>一维数组，z 轴数据</td></tr><tr><td>color</td><td>曲面表面的颜色</td></tr><tr><td>vmin / vmax</td><td>规定数据界限</td></tr><tr><td>**kwargs</td><td>可选项，其他关键字参数，可参见 <a href="https://matplotlib.org/api/_as_gen/mpl_toolkits.mplot3d.art3d.Poly3DCollection.html">Poly3DCollection</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span>fig = plt.figure()ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)n_radii = <span class="hljs-number">8</span>n_angles = <span class="hljs-number">36</span>radii = np.linspace(<span class="hljs-number">0.125</span>, <span class="hljs-number">1.0</span>, n_radii)angles = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.pi, n_angles, endpoint=<span class="hljs-literal">False</span>)[..., np.newaxis]x = np.append(<span class="hljs-number">0</span>, (radii*np.cos(angles)).flatten())y = np.append(<span class="hljs-number">0</span>, (radii*np.sin(angles)).flatten())z = np.sin(-x*y)<span class="hljs-comment"># 绘制3D三角曲面图并添加色条（长度0.8）</span>trisurf = ax.plot_trisurf(x, y, z, cmap=<span class="hljs-string">&#x27;rainbow&#x27;</span>)fig.colorbar(trisurf, shrink=<span class="hljs-number">0.8</span>)<span class="hljs-comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span>ax.set_title(<span class="hljs-string">&#x27;绘制 3D 三角曲面图示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;z 轴&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/11.png" alt="11"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> matplotlib.tri <span class="hljs-keyword">as</span> mtriplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]fig = plt.figure(figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">6</span>))<span class="hljs-comment"># ============ 第一个示例图 ============ #</span>ax = fig.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)u = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2.0</span> * np.pi, endpoint=<span class="hljs-literal">True</span>, num=<span class="hljs-number">50</span>)v = np.linspace(-<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, endpoint=<span class="hljs-literal">True</span>, num=<span class="hljs-number">10</span>)u, v = np.meshgrid(u, v)u, v = u.flatten(), v.flatten()x = (<span class="hljs-number">1</span> + <span class="hljs-number">0.5</span> * v * np.cos(u / <span class="hljs-number">2.0</span>)) * np.cos(u)y = (<span class="hljs-number">1</span> + <span class="hljs-number">0.5</span> * v * np.cos(u / <span class="hljs-number">2.0</span>)) * np.sin(u)z = <span class="hljs-number">0.5</span> * v * np.sin(u / <span class="hljs-number">2.0</span>)tri = mtri.Triangulation(u, v)trisurf_1 = ax.plot_trisurf(x, y, z, triangles=tri.triangles, cmap=<span class="hljs-string">&#x27;cool&#x27;</span>)fig.colorbar(trisurf_1, shrink=<span class="hljs-number">0.8</span>)ax.set_zlim(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)ax.set_title(<span class="hljs-string">&#x27;绘制 3D 三角曲面图示例一&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;z 轴&#x27;</span>)<span class="hljs-comment"># ============ 第二个示例图 ============ #</span>ax = fig.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)n_angles = <span class="hljs-number">36</span>n_radii = <span class="hljs-number">8</span>min_radius = <span class="hljs-number">0.25</span>radii = np.linspace(min_radius, <span class="hljs-number">0.95</span>, n_radii)angles = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.pi, n_angles, endpoint=<span class="hljs-literal">False</span>)angles = np.repeat(angles[..., np.newaxis], n_radii, axis=<span class="hljs-number">1</span>)angles[:, <span class="hljs-number">1</span>::<span class="hljs-number">2</span>] += np.pi/n_anglesx = (radii*np.cos(angles)).flatten()y = (radii*np.sin(angles)).flatten()z = (np.cos(radii)*np.cos(<span class="hljs-number">3</span>*angles)).flatten()triang = mtri.Triangulation(x, y)xmid = x[triang.triangles].mean(axis=<span class="hljs-number">1</span>)ymid = y[triang.triangles].mean(axis=<span class="hljs-number">1</span>)mask = xmid**<span class="hljs-number">2</span> + ymid**<span class="hljs-number">2</span> &lt; min_radius**<span class="hljs-number">2</span>triang.set_mask(mask)trisurf_2 = ax.plot_trisurf(triang, z, cmap=<span class="hljs-string">&#x27;hsv&#x27;</span>)fig.colorbar(trisurf_2, shrink=<span class="hljs-number">0.8</span>)ax.set_title(<span class="hljs-string">&#x27;绘制 3D 三角曲面图示例二&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;z 轴&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/12.png" alt="12"></p><h2><span id="12x00-jiang-2d-tu-xiang-ju-he-dao-3d-tu-xiang-zhong-axes3d-add-collection3d"><font color="#FF0000">【12x00】将 2D 图像聚合到 3D 图像中：Axes3D.add_collection3d</font></span></h2><p>基本方法：<code>Axes3D.add_collection3d(col, zs=0, zdir='z')</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>col</td><td><a href="https://matplotlib.org/api/collections_api.html?highlight=polycollection#matplotlib.collections.PolyCollection">PolyCollection</a> / <a href="https://matplotlib.org/api/collections_api.html?highlight=linecollection#matplotlib.collections.LineCollection">LineCollection</a> / <a href="https://matplotlib.org/api/collections_api.html?highlight=patchcollection#matplotlib.collections.PatchCollection">PatchCollection</a> 对象</td></tr><tr><td>zs</td><td>第 i 个多边形将出现在平面 y=zs[i] 上</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr></tbody></table><p>该函数一般用来向图形中添加 3D 集合对象，以下用一个示例来展示某个地区在不同年份和不同月份的降水量：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> matplotlib.collections <span class="hljs-keyword">import</span> PolyCollectionplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]fig = plt.figure()ax = fig.gca(projection=<span class="hljs-string">&#x27;3d&#x27;</span>)np.random.seed(<span class="hljs-number">59</span>)month = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">13</span>)years = [<span class="hljs-number">2017</span>, <span class="hljs-number">2018</span>, <span class="hljs-number">2019</span>, <span class="hljs-number">2020</span>]precipitation = []<span class="hljs-keyword">for</span> year <span class="hljs-keyword">in</span> years:    value = np.random.rand(<span class="hljs-built_in">len</span>(month)) * <span class="hljs-number">300</span>    value[<span class="hljs-number">0</span>], value[-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>    precipitation.append(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(month, value)))poly = PolyCollection(precipitation, facecolors=[<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>], alpha=<span class="hljs-number">.6</span>)ax.add_collection3d(poly, zs=years, zdir=<span class="hljs-string">&#x27;y&#x27;</span>)ax.set_title(<span class="hljs-string">&#x27;2D 图像聚合到 3D 图像示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;月份&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;年份&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;降水量&#x27;</span>)ax.set_xlim3d(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)ax.set_ylim3d(<span class="hljs-number">2016</span>, <span class="hljs-number">2021</span>)ax.set_zlim3d(<span class="hljs-number">0</span>, <span class="hljs-number">300</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/13.png" alt="13"></p><p>此外，该方法也常被用于绘制 3D 多边形图，即多边体，示例如下：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> mpl_toolkits.mplot3d.art3d <span class="hljs-keyword">import</span> Poly3DCollection, Line3DCollectionplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]fig = plt.figure()ax = fig.gca(projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># 六面体顶点和面</span>verts = [(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)]faces = [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>]]<span class="hljs-comment"># 获取每个面的顶点</span>poly3d = [[verts[vert_id] <span class="hljs-keyword">for</span> vert_id <span class="hljs-keyword">in</span> face] <span class="hljs-keyword">for</span> face <span class="hljs-keyword">in</span> faces]<span class="hljs-comment"># 绘制顶点</span>x, y, z = <span class="hljs-built_in">zip</span>(*verts)ax.scatter(x, y, z)<span class="hljs-comment"># 绘制多边形面</span>ax.add_collection3d(Poly3DCollection(poly3d, facecolors=<span class="hljs-string">&#x27;w&#x27;</span>, linewidths=<span class="hljs-number">1</span>, alpha=<span class="hljs-number">0.5</span>))<span class="hljs-comment"># 绘制多边形的边</span>ax.add_collection3d(Line3DCollection(poly3d, colors=<span class="hljs-string">&#x27;k&#x27;</span>, linewidths=<span class="hljs-number">0.5</span>, linestyles=<span class="hljs-string">&#x27;:&#x27;</span>))<span class="hljs-comment"># 设置图像标题、坐标标签以及范围</span>ax.set_title(<span class="hljs-string">&#x27;绘制多边体示例&#x27;</span>, pad=<span class="hljs-number">15</span>, fontsize=<span class="hljs-string">&#x27;12&#x27;</span>)ax.set_xlabel(<span class="hljs-string">&#x27;X 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;Y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;Z 轴&#x27;</span>)ax.set_xlim3d(-<span class="hljs-number">0.5</span>, <span class="hljs-number">1.5</span>)ax.set_ylim3d(-<span class="hljs-number">0.5</span>, <span class="hljs-number">1.5</span>)ax.set_zlim3d(-<span class="hljs-number">0.5</span>, <span class="hljs-number">1.5</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/14.png" alt="14"></p><h2><span id="13x00-3d-tu-tian-jia-wen-ben-miao-shu-axes3d-text"><font color="#FF0000">【13x00】3D 图添加文本描述：Axes3D.text</font></span></h2><p>基本方法：<code>Axes3D.text(x, y, z, s[, zdir=None, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x, y, z</td><td>文本位置的 x、y、z 轴坐标</td></tr><tr><td>s</td><td>要添加的文本</td></tr><tr><td>zdir</td><td>可选项，若将 zdir 设置为 ‘y’，文本将会被投影到 x-z 轴平面上，默认为 None</td></tr><tr><td>**kwargs</td><td>其他关键字参数，参见 <a href="https://matplotlib.org/api/text_api.html">matplotlib.text</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 依次获取画布和绘图区并创建 Axes3D 对象</span>fig = plt.figure()ax = fig.gca(projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<span class="hljs-comment"># Demo 1: zdir 参数用法</span>zdirs = (<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))xs = (<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>)ys = (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)zs = (<span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>)<span class="hljs-keyword">for</span> zdir, x, y, z <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(zdirs, xs, ys, zs):    label = <span class="hljs-string">&#x27;(%d, %d, %d), dir=%s&#x27;</span> % (x, y, z, zdir)    ax.text(x, y, z, label, zdir)<span class="hljs-comment"># Demo 2：设置颜色</span>ax.text(<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;red&quot;</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>)<span class="hljs-comment"># Demo 3: text2D，位置(0，0)为左下角，(1，1)为右上角。</span>ax.text2D(<span class="hljs-number">0.05</span>, <span class="hljs-number">0.95</span>, <span class="hljs-string">&quot;2D Text&quot;</span>, transform=ax.transAxes)<span class="hljs-comment"># 设置坐标轴界限和标签</span>ax.set_xlim(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)ax.set_ylim(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)ax.set_zlim(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)ax.set_xlabel(<span class="hljs-string">&#x27;X 轴&#x27;</span>)ax.set_ylabel(<span class="hljs-string">&#x27;Y 轴&#x27;</span>)ax.set_zlabel(<span class="hljs-string">&#x27;Z 轴&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/023/15.png" alt="15"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106558131</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（九）：极区图/极坐标图/雷达图的绘制</title>
      <link href="/article/022/"/>
      <url>/article/022/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-liao-jie-ji-zuo-biao-font"><font color="#FF0000">【1x00】了解极坐标</font></a></li><li><a href="#font-color-ff0000-2x00-ji-ben-fang-fa-matplotlib-pyplot-polar-font"><font color="#FF0000">【2x00】基本方法 matplotlib.pyplot.polar()</font></a></li><li><a href="#font-color-ff0000-3x00-hui-zhi-ji-zuo-biao-font"><font color="#FF0000">【3x00】绘制极坐标</font></a></li><li><a href="#font-color-ff0000-4x00-hui-zhi-lei-da-tu-font"><font color="#FF0000">【4x00】绘制雷达图</font></a><ul><li><a href="#font-color-4876ff-4x01-li-jie-numpy-concatenate-font"><font color="##4876FF">【4x01】理解 numpy.concatenate()</font></a></li><li><a href="#font-color-4876ff-4x02-li-jie-pyplot-thetagrids-font"><font color="##4876FF">【4x02】理解 pyplot.thetagrids()</font></a></li><li><a href="#font-color-4876ff-4x03-hui-zhi-lei-da-tu-font"><font color="##4876FF">【4x03】绘制雷达图</font></a></li></ul></li><li><a href="#font-color-ff0000-5x00-gao-ji-yong-fa-hui-zhi-ji-zuo-biao-san-dian-tu-font"><font color="#FF0000">【5x00】高级用法：绘制极坐标散点图</font></a><ul><li><a href="#font-color-4876ff-5x01-fang-fa-yi-pyplot-scatter-yu-pyplot-polar-font"><font color="##4876FF">【5x01】方法一：pyplot.scatter() 与 pyplot.polar()</font></a></li><li><a href="#font-color-4876ff-5x02-fang-fa-er-pyplot-scatter-yu-pyplot-subplot-font"><font color="##4876FF">【5x02】方法二：pyplot.scatter() 与 pyplot.subplot()</font></a></li><li><a href="#font-color-4876ff-5x03-fang-fa-san-pyplot-scatter-yu-pyplot-axes-font"><font color="##4876FF">【5x03】方法三：pyplot.scatter() 与 pyplot.axes()</font></a></li></ul></li><li><a href="#font-color-ff0000-6x00-gao-ji-yong-fa-hui-zhi-ji-zuo-biao-zhu-zhuang-tu-font"><font color="#FF0000">【6x00】高级用法：绘制极坐标柱状图</font></a><ul><li><a href="#font-color-4876ff-6x01-fang-fa-yi-pyplot-bar-yu-pyplot-polar-font"><font color="##4876FF">【6x01】方法一：pyplot.bar() 与 pyplot.polar()</font></a></li><li><a href="#font-color-4876ff-6x02-fang-fa-er-pyplot-bar-yu-pyplot-subplot-font"><font color="##4876FF">【6x02】方法二：pyplot.bar() 与 pyplot.subplot()</font></a></li><li><a href="#font-color-4876ff-6x03-fang-fa-san-pyplot-bar-yu-pyplot-axes-font"><font color="##4876FF">【6x03】方法三：pyplot.bar() 与 pyplot.axes()</font></a></li></ul></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106162412</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-liao-jie-ji-zuo-biao"><font color="#FF0000">【1x00】了解极坐标</font></span></h2><p>参考百度百科：极坐标，属于二维坐标系统，创始人是牛顿，主要应用于数学领域。极坐标是指在平面内取一个定点 <font color="#FF0000">O</font>，叫极点，引一条射线 <font color="#FF0000">Ox</font>，叫做极轴，再选定一个长度单位和角度的正方向（通常取逆时针方向）。对于平面内任何一点 <font color="#FF0000">M</font>，用 <font color="#FF0000">ρ</font> 表示线段 <font color="#FF0000">OM</font> 的长度（有时也用 <font color="#FF0000">r</font> 表示），<font color="#FF0000">θ</font> 表示从 <font color="#FF0000">Ox</font> 到 <font color="#FF0000">OM</font> 的角度，<font color="#FF0000">ρ</font> 叫做点 <font color="#FF0000">M</font> 的极径，<font color="#FF0000">θ</font> 叫做点 <font color="#FF0000">M</font> 的极角，有序数对 <font color="#FF0000">(ρ,θ)</font> 就叫点 <font color="#FF0000">M</font> 的极坐标，这样建立的坐标系叫做极坐标系。通常情况下，<font color="#FF0000">M</font> 的极径坐标单位为 <font color="#FF0000">1</font>（长度单位），极角坐标单位为 <font color="#FF0000">rad</font>（或<font color="#FF0000">°</font>）。</p><p><img src="https://cdn.itbob.cn/img/article/022/01.png" alt="01"></p><h2><span id="2x00-ji-ben-fang-fa-matplotlib-pyplot-polar"><font color="#FF0000">【2x00】基本方法 matplotlib.pyplot.polar()</font></span></h2><p><code>matplotlib.pyplot.polar()</code> 方法可用于绘制极坐标图。</p><p>基本语法：<code>polar(theta, r, **kwargs)</code></p><ul><li><font color="#FF0000"><strong>theta</strong></font>：点的角坐标，以弧度单位传入参数；</li><li><font color="#FF0000"><strong>r</strong></font>：点的半径坐标；</li><li><font color="#FF0000">**<strong>kwargs</strong></font>：可选项，其他 Line2D 属性，常用属性见<font color="#FF0000"><strong>表一</strong></font>。</li></ul><p>拓展：数学上通常是用弧度而非角度，弧度单位缩写为 rad，2π rad = 360°，1° ≈ 0.0174533 rad，1 rad ≈ 57.29578°。</p><ul><li>角度转换为弧度公式：弧度 = 角度 ÷ 180 × π</li><li>弧度转换为角度公式：角度 = 弧度 × 180 ÷ π</li></ul><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="FF0000" size="3px">表一：Line2D 部分属性，完整属性参见官方文档：<br>https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html</font></strong></td></tr></table><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>alpha</td><td>线条透明度，float 类型，取值范围：<code>[0, 1]</code>，默认为 1.0，即不透明</td></tr><tr><td>antialiased / aa</td><td>是否使用抗锯齿渲染，默认为 True</td></tr><tr><td>color / c</td><td>线条颜色，支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html">Color Demo</a></td></tr><tr><td>fillstyle</td><td>点的填充样式，<code>'full'</code>、<code>'left'</code>、<code>'right'</code>、<code>'bottom'</code>、<code>'top'</code>、<code>'none'</code></td></tr><tr><td>label</td><td>图例，具体参数参见：<br><a href="https://itrhx.blog.csdn.net/article/details/105828143">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></td></tr><tr><td>linestyle / ls</td><td>连接的线条样式：<code>'-'</code> or <code>'solid'</code>, <code>'--'</code> or <code>'dashed'</code>, <code>'-.'</code> or <code>'dashdot'</code> <br> <code>':'</code> or <code>'dotted'</code>, <code>'none'</code> or <code>' '</code> or <code>''</code></td></tr><tr><td>linewidth / lw</td><td>连接的线条宽度，float 类型，默认 0.8</td></tr><tr><td>marker</td><td>标记样式，具体样式参见<font color="#FF0000"><strong>表二</strong></font></td></tr><tr><td>markeredgecolor / mec</td><td>marker 标记的边缘颜色</td></tr><tr><td>markeredgewidth / mew</td><td>marker 标记的边缘宽度</td></tr><tr><td>markerfacecolor / mfc</td><td>marker 标记的颜色</td></tr><tr><td>markerfacecoloralt / mfcalt</td><td>marker 标记的备用颜色</td></tr><tr><td>markersize / ms</td><td>marker 标记的大小</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="FF0000" size="3px">表二：marker 标记的样式，官方文档：<br>https://matplotlib.org/api/markers_api.html</font></strong></td></tr></table><table><thead><tr><th>标记</th><th>描述</th></tr></thead><tbody><tr><td><code>&quot;.&quot;</code></td><td>点</td></tr><tr><td><code>&quot;,&quot;</code></td><td>像素点</td></tr><tr><td><code>&quot;o&quot;</code></td><td>圆圈</td></tr><tr><td><code>&quot;v&quot;</code></td><td>倒三角</td></tr><tr><td><code>&quot;^&quot;</code></td><td>正三角</td></tr><tr><td><code>&quot;&lt;&quot;</code></td><td>左三角</td></tr><tr><td><code>&quot;&gt;&quot;</code></td><td>右三角</td></tr><tr><td><code>&quot;1&quot;</code></td><td>倒三叉星</td></tr><tr><td><code>&quot;2&quot;</code></td><td>正三叉星（类似奔驰车标形状）</td></tr><tr><td><code>&quot;3&quot;</code></td><td>左三叉星</td></tr><tr><td><code>&quot;4&quot;</code></td><td>右三叉星</td></tr><tr><td><code>&quot;8&quot;</code></td><td>八边形</td></tr><tr><td><code>&quot;s&quot;</code></td><td>正方形</td></tr><tr><td><code>&quot;p&quot;</code></td><td>五边形</td></tr><tr><td><code>&quot;P&quot;</code></td><td>填充的加号（粗加号）</td></tr><tr><td><code>&quot;+&quot;</code></td><td>加号</td></tr><tr><td><code>&quot;*&quot;</code></td><td>星形</td></tr><tr><td><code>&quot;h&quot;</code></td><td>六边形（底部是角）</td></tr><tr><td><code>&quot;H&quot;</code></td><td>六边形（底部是边）</td></tr><tr><td><code>&quot;x&quot;</code></td><td>x 号</td></tr><tr><td><code>&quot;X&quot;</code></td><td>填充的 x 号（粗 x 号）</td></tr><tr><td><code>&quot;D&quot;</code></td><td>粗菱形（对角线相等）</td></tr><tr><td><code>&quot;d&quot;</code></td><td>细菱形（对角线不等）</td></tr><tr><td>`&quot;</td><td>&quot;`</td></tr><tr><td><code>&quot;_&quot;</code></td><td>水平线</td></tr><tr><td><code>0</code></td><td>水平线靠左</td></tr><tr><td><code>1</code></td><td>水平线靠右</td></tr><tr><td><code>2</code></td><td>垂直线靠上</td></tr><tr><td><code>3</code></td><td>垂直线靠下</td></tr><tr><td><code>4</code></td><td>左三角（比 <code>&quot;&lt;&quot;</code> 更细）</td></tr><tr><td><code>5</code></td><td>右三角（比 <code>&quot;&gt;&quot;</code> 更细）</td></tr><tr><td><code>6</code></td><td>正三角（比 <code>&quot;^&quot;</code> 更细）</td></tr><tr><td><code>7</code></td><td>倒三角（比 <code>&quot;v&quot;</code> 更细）</td></tr><tr><td><code>8</code></td><td>左三角（比 <code>&quot;&lt;&quot;</code> 更细，靠左显示）</td></tr><tr><td><code>9</code></td><td>右三角（比 <code>&quot;&gt;&quot;</code> 更细，靠右显示）</td></tr><tr><td><code>10</code></td><td>正三角（比 <code>&quot;^&quot;</code> 更细，靠上显示）</td></tr><tr><td><code>11</code></td><td>倒三角（比 <code>&quot;v&quot;</code> 更细，靠下显示）</td></tr><tr><td><code>&quot;None&quot;</code> / <code>&quot; &quot;</code> / <code>&quot;&quot;</code></td><td>无样式</td></tr><tr><td><code>'$...$'</code></td><td>支持 LaTeX 数学公式，表达式用美元符号包围起来</td></tr></tbody></table><h2><span id="3x00-hui-zhi-ji-zuo-biao"><font color="#FF0000">【3x00】绘制极坐标</font></span></h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-comment"># 设置中文显示</span>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<span class="hljs-comment"># 设置画布大小</span>plt.figure(figsize=(<span class="hljs-number">8.0</span>, <span class="hljs-number">6.0</span>))<span class="hljs-comment"># 设置三个数据，theta 为点位置的弧度参数，r 为点的半径坐标</span>theta1 = np.array([<span class="hljs-number">1.25</span>*np.pi, np.pi/<span class="hljs-number">2</span>, <span class="hljs-number">0</span>])theta2 = np.array([-np.pi/<span class="hljs-number">6</span>, -np.pi/<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, np.pi/<span class="hljs-number">2</span>, np.pi])theta3 = np.arange(<span class="hljs-number">0.</span>, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.5</span>)r1 = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])r2 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>])r3 = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>)<span class="hljs-comment"># 绘制第一个极坐标图，点的标记样式为细菱形，大小为8，点之间的连接线条样式为:</span>plt.polar(theta1, r1, marker=<span class="hljs-string">&#x27;d&#x27;</span>, ms=<span class="hljs-number">8</span>, ls=<span class="hljs-string">&#x27;:&#x27;</span>, label=<span class="hljs-string">&#x27;数据一&#x27;</span>)<span class="hljs-comment"># 填充第一个极坐标图，填充颜色为蓝色，透明度0.3</span>plt.fill(theta1, r1, color=<span class="hljs-string">&#x27;b&#x27;</span>, alpha=<span class="hljs-number">0.3</span>)<span class="hljs-comment"># 绘制第二个极坐标图，marker、linestyle、color 三个参数可以组合以字符串形式传入</span>plt.polar(theta2, r2, <span class="hljs-string">&#x27;*-g&#x27;</span>, ms=<span class="hljs-number">10</span>, label=<span class="hljs-string">&#x27;数据二&#x27;</span>)<span class="hljs-comment"># 绘制第三个极坐标图，设置 linestyle 为 none，即点与点之间不相连</span>plt.polar(theta3, r3, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ls=<span class="hljs-string">&#x27;none&#x27;</span>, ms=<span class="hljs-number">8</span>, color=<span class="hljs-string">&#x27;r&#x27;</span>, label=<span class="hljs-string">&#x27;数据三&#x27;</span>)plt.title(<span class="hljs-string">&#x27;matplotlib.pyplot.polar 用法示例&#x27;</span>, pad=<span class="hljs-number">25</span>, fontsize=<span class="hljs-number">15</span>)plt.legend(bbox_to_anchor=(<span class="hljs-number">1.3</span>, <span class="hljs-number">1</span>))plt.show()</code></pre><p>示例中 figure、title、legend 等其他方法的解释可参见我的系列文章：</p><ul><li><a href="https://itrhx.blog.csdn.net/article/details/105638122">《Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件》</a></li><li><a href="https://itrhx.blog.csdn.net/article/details/105828049">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></li><li><a href="https://itrhx.blog.csdn.net/article/details/105828143">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></li></ul><p>绘制结果如下图：</p><p><img src="https://cdn.itbob.cn/img/article/022/02.png" alt="02"></p><h2><span id="4x00-hui-zhi-lei-da-tu"><font color="#FF0000">【4x00】绘制雷达图</font></span></h2><p>雷达图是以从同一点开始的轴上表示的三个或更多个定量变量的二维图表的形式显示多变量数据的图形方法。轴的相对位置和角度通常是无信息的。 雷达图也称为网络图，蜘蛛图，星图，蜘蛛网图，不规则多边形，极坐标图或 Kiviat 图。它相当于平行坐标图，轴径向排列。</p><p>在前面的示例中，使用了 <code>matplotlib.pyplot.fill()</code> 方法对三个极坐标点围成的图形进行了填充，这就有点儿接近于雷达图了，仔细观察前面的示例，在填充时第一个点和最后一个点之间没有连线，即没有闭合，而更精确的雷达图应该是闭合的，且外围应该是文字描述而不是度数。</p><p>在绘制雷达图之前需要提前了解一些函数。这些函数可以帮助我们实现闭合、自定义文字标签等。</p><hr><h3><span id="4x01-li-jie-numpy-concatenate"><font color="##4876FF">【4x01】理解 numpy.concatenate()</font></span></h3><p><code>numpy.concatenate()</code> 方法用于沿现有轴连接一系列数组，我们可以利用此方法来实现闭合操作。</p><p>基本语法：<code>numpy.concatenate((a1, a2, ...)[, axis=0, out=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a1, a2, …</td><td>要连接的数组，必须拥有相同的维度</td></tr><tr><td>axis</td><td>沿指定轴连接数组，可选项，如果 axis 为 None，则数组在使用前被展平，默认值为 0</td></tr><tr><td>out</td><td>用于接收连接后的数组，可选项</td></tr></tbody></table><p>用法示例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npa = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])b = np.array([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<span class="hljs-built_in">print</span>(np.concatenate((a, b)))</code></pre><p>输出结果如下：</p><pre><code class="hljs python">[<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-string">&#x27;d&#x27;</span>]</code></pre><p>如果要实现数组的闭合，则可以传入原数组和一个新数组，其中新数组中的元素为原数组中的第一个元素，示例如下：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npa = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-built_in">print</span>(np.concatenate((a, [a[<span class="hljs-number">0</span>]])))</code></pre><p>输出结果如下：</p><pre><code class="hljs python">[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span>]</code></pre><hr><h3><span id="4x02-li-jie-pyplot-thetagrids"><font color="##4876FF">【4x02】理解 pyplot.thetagrids()</font></span></h3><p><code>matplotlib.pyplot.thetagrids()</code> 方法用于获取并设置当前极区图上的极轴。</p><p>基本语法：<code>matplotlib.pyplot.thetagrids(angles, labels=None, fmt=None, **kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>angles</td><td>网格线的角度，浮点数、度数组成的元组</td></tr><tr><td>labels</td><td>每个极轴要使用的文本标签，字符串组成的元组</td></tr><tr><td>fmt</td><td>格式化 angles 参数，如 <code>'%1.2f'</code> 保留两位小数，注意，将使用以弧度为单位的角度</td></tr><tr><td>**kwargs</td><td>其他关键字参数，参见<a href="https://matplotlib.org/api/text_api.html?highlight=text#matplotlib.text.Text">官方文档</a></td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"> <span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]plt.polar()angles = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">360</span>, <span class="hljs-number">45</span>)labels = (<span class="hljs-string">&#x27;东&#x27;</span>, <span class="hljs-string">&#x27;东北&#x27;</span>, <span class="hljs-string">&#x27;北&#x27;</span>, <span class="hljs-string">&#x27;西北&#x27;</span>, <span class="hljs-string">&#x27;西&#x27;</span>, <span class="hljs-string">&#x27;西南&#x27;</span>, <span class="hljs-string">&#x27;南&#x27;</span>, <span class="hljs-string">&#x27;东南&#x27;</span>)plt.thetagrids(angles, labels)plt.title(<span class="hljs-string">&#x27;matplotlib.pyplot.thetagrids() 用法示例&#x27;</span>, pad=<span class="hljs-number">15</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/022/03.png" alt="03"></p><hr><h3><span id="4x03-hui-zhi-lei-da-tu"><font color="##4876FF">【4x03】绘制雷达图</font></span></h3><p><code>numpy.concatenate()</code> 方法能够解决闭合问题，<code>matplotlib.pyplot.thetagrids()</code> 能够解决自定义极轴和极轴的文本标记问题，因此就可以绘制一个标准的雷达图了。示例如下：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-comment"># 设置中文显示、画布大小</span>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]plt.figure(figsize=(<span class="hljs-number">8.0</span>, <span class="hljs-number">6.0</span>))<span class="hljs-comment"># 分割圆并执行闭合操作（0-2π之间返回间隔均匀的6个弧度：π/3、2π/3、π、4π/3、5π/3、2π）</span>theta = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">6</span>, endpoint=<span class="hljs-literal">False</span>)theta = np.concatenate((theta, [theta[<span class="hljs-number">0</span>]]))<span class="hljs-comment"># 设置两组数据并执行闭合操作</span>data1 = np.array([<span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>])data2 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])data1 = np.concatenate((data1, [data1[<span class="hljs-number">0</span>]]))data2 = np.concatenate((data2, [data2[<span class="hljs-number">0</span>]]))<span class="hljs-comment"># 绘制并填充两组数据</span>plt.polar(theta, data1, <span class="hljs-string">&#x27;bo-&#x27;</span>, label=<span class="hljs-string">&#x27;小王&#x27;</span>)plt.polar(theta, data2, <span class="hljs-string">&#x27;ro:&#x27;</span>, label=<span class="hljs-string">&#x27;小张&#x27;</span>)plt.fill(theta, data1, color=<span class="hljs-string">&#x27;b&#x27;</span>, alpha=<span class="hljs-number">0.3</span>)plt.fill(theta, data2, color=<span class="hljs-string">&#x27;r&#x27;</span>, alpha=<span class="hljs-number">0.3</span>)<span class="hljs-comment"># 将六个弧度（π/3、2π/3、π、4π/3、5π/3、2π）转换成角度，并分别设置标签</span>labels = np.array([<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;Golang&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;PHP&#x27;</span>, <span class="hljs-string">&#x27;JavaScript&#x27;</span>])plt.thetagrids(theta * <span class="hljs-number">180</span>/np.pi, labels)<span class="hljs-comment"># 设置刻度范围、标题、图例</span>plt.ylim(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)plt.title(<span class="hljs-string">&#x27;编程语言掌握程度&#x27;</span>)plt.legend(bbox_to_anchor=(<span class="hljs-number">1.3</span>, <span class="hljs-number">1</span>))plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/022/04.png" alt="04"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106162412</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="5x00-gao-ji-yong-fa-hui-zhi-ji-zuo-biao-san-dian-tu"><font color="#FF0000">【5x00】高级用法：绘制极坐标散点图</font></span></h2><p><code>matplotlib.pyplot.polar()</code> 方法可以实现极坐标散点图，但仅用这一个函数的话实现的样式效果并不多，以下介绍另外三种绘制极坐标散点图的方法：</p><ul><li><p><code>matplotlib.pyplot.polar()</code> 和 <code>matplotlib.pyplot.scatter()</code> 结合，前者绘制极坐标图，后者在极坐标图上绘制散点图；</p></li><li><p><code>matplotlib.pyplot.subplot()</code> 和 <code>matplotlib.pyplot.scatter()</code> 结合，前者添加子图，其中指定 <code>projection='polar'</code> 即为极坐标图， 后者在极坐标图上绘制散点图；</p></li><li><p><code>matplotlib.pyplot.axes()</code> 与 <code>matplotlib.pyplot.scatter()</code> 结合，前者设置绘图区参数，其中指定 <code>projection='polar'</code> 或 <code>polar=True</code> 即为极坐标图， 后者在极坐标图上绘制散点图。</p></li></ul><hr><h3><span id="5x01-fang-fa-yi-pyplot-scatter-yu-pyplot-polar"><font color="##4876FF">【5x01】方法一：pyplot.scatter() 与 pyplot.polar()</font></span></h3><p>以下用到的 <code>matplotlib.pyplot.scatter()</code> 函数，各参数含义以及支持的其他参数可以参见前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828049">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105914929">《Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制》</a></p></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]N = <span class="hljs-number">50</span>r = <span class="hljs-number">2</span> * np.random.rand(N)theta = <span class="hljs-number">2</span> * np.pi * np.random.rand(N)size = <span class="hljs-number">200</span> * r ** <span class="hljs-number">2</span>colors = N * np.random.rand(N)plt.polar()plt.scatter(theta, r, s=size, c=colors, alpha=<span class="hljs-number">0.8</span>)plt.title(<span class="hljs-string">&#x27;极坐标散点图示例一&#x27;</span>, pad=<span class="hljs-number">15</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/022/05.png" alt="05"></p><hr><h3><span id="5x02-fang-fa-er-pyplot-scatter-yu-pyplot-subplot"><font color="##4876FF">【5x02】方法二：pyplot.scatter() 与 pyplot.subplot()</font></span></h3><p><code>matplotlib.pyplot.subplot()</code> 方法用于添加子图，如果想要子图为极坐标图，则需要指定 <code>projection</code> 参数为 <code>polar</code>，有关此函数的具体介绍可参见<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html">官方文档</a>。其他函数的参数解释可参考前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828143">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105914929">《Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制》</a></p></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]N = <span class="hljs-number">50</span>r = <span class="hljs-number">2</span> * np.random.rand(N)theta = <span class="hljs-number">2</span> * np.pi * np.random.rand(N)size = <span class="hljs-number">200</span> * r ** <span class="hljs-number">2</span>colors = N * np.random.rand(N)<span class="hljs-comment"># 一行一列第一个子图</span>plt.subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;polar&#x27;</span>)plt.scatter(theta, r, s=size, c=colors, alpha=<span class="hljs-number">0.8</span>)plt.title(<span class="hljs-string">&#x27;极坐标散点图示例二&#x27;</span>, pad=<span class="hljs-number">15</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/022/06.png" alt="06"></p><hr><h3><span id="5x03-fang-fa-san-pyplot-scatter-yu-pyplot-axes"><font color="##4876FF">【5x03】方法三：pyplot.scatter() 与 pyplot.axes()</font></span></h3><p>axes 为 Matplotlib 图像中的绘图区，<code>matplotlib.pyplot.axes()</code> 方法可以对绘图区进行设置，同样的也可以设置 <code>projection</code> 参数为 <code>polar</code> 来实现极坐标图，设置 <code>polar=True</code> 也行。示例中其他函数的参数解释可参考前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105638122">《Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105914929">《Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制》</a></p></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]N = <span class="hljs-number">50</span>r = <span class="hljs-number">2</span> * np.random.rand(N)theta = <span class="hljs-number">2</span> * np.pi * np.random.rand(N)size = <span class="hljs-number">200</span> * r ** <span class="hljs-number">2</span>colors = N * np.random.rand(N)<span class="hljs-comment"># plt.axes(polar=True)</span>plt.axes(projection=<span class="hljs-string">&#x27;polar&#x27;</span>)plt.scatter(theta, r, s=size, c=colors, alpha=<span class="hljs-number">0.8</span>)plt.title(<span class="hljs-string">&#x27;极坐标散点图示例三&#x27;</span>, pad=<span class="hljs-number">15</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/022/07.png" alt="07"></p><h2><span id="6x00-gao-ji-yong-fa-hui-zhi-ji-zuo-biao-zhu-zhuang-tu"><font color="#FF0000">【6x00】高级用法：绘制极坐标柱状图</font></span></h2><p>和极坐标散点图的绘制类似，<code>matplotlib.pyplot.polar()</code> 方法可以实现极坐标图，但仅用这一个函数的话实现的样式效果并不多，以下介绍另外三种绘制极坐标柱状图的方法：</p><ul><li><p><code>matplotlib.pyplot.polar()</code> 和 <code>matplotlib.pyplot.bar()</code> 结合，前者绘制极坐标图，后者在极坐标图上绘制柱状图；</p></li><li><p><code>matplotlib.pyplot.subplot()</code> 和 <code>matplotlib.pyplot.bar()</code> 结合，前者添加子图，其中指定 <code>projection='polar'</code> 即为极坐标图， 后者在极坐标图上绘制柱状图；</p></li><li><p><code>matplotlib.pyplot.axes()</code> 与 <code>matplotlib.pyplot.bar()</code> 结合，前者设置绘图区参数，其中指定 <code>projection='polar'</code> 或 <code>polar=True</code> 即为极坐标图， 后者在极坐标图上绘制柱状图。</p></li></ul><hr><h3><span id="6x01-fang-fa-yi-pyplot-bar-yu-pyplot-polar"><font color="##4876FF">【6x01】方法一：pyplot.bar() 与 pyplot.polar()</font></span></h3><p>以下用到的 <code>matplotlib.pyplot.bar()</code> 函数，各参数含义以及支持的其他参数可以参见前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828049">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105952856">《Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制》</a></p></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]r = np.random.rand(<span class="hljs-number">8</span>)theta = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> * np.pi, <span class="hljs-number">2</span> * np.pi / <span class="hljs-number">8</span>)colors = np.array([<span class="hljs-string">&#x27;#4bb2c5&#x27;</span>, <span class="hljs-string">&#x27;#c5b47f&#x27;</span>, <span class="hljs-string">&#x27;#EAA228&#x27;</span>, <span class="hljs-string">&#x27;#579575&#x27;</span>, <span class="hljs-string">&#x27;#839557&#x27;</span>, <span class="hljs-string">&#x27;#958c12&#x27;</span>, <span class="hljs-string">&#x27;#953579&#x27;</span>, <span class="hljs-string">&#x27;#4b5de4&#x27;</span>])plt.polar()plt.bar(theta, r, color=colors, alpha=<span class="hljs-number">0.8</span>)plt.title(<span class="hljs-string">&#x27;极坐标柱状图示例一&#x27;</span>, pad=<span class="hljs-number">15</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/022/08.png" alt="08"></p><hr><h3><span id="6x02-fang-fa-er-pyplot-bar-yu-pyplot-subplot"><font color="##4876FF">【6x02】方法二：pyplot.bar() 与 pyplot.subplot()</font></span></h3><p><code>matplotlib.pyplot.subplot()</code> 方法用于添加子图，如果想要子图为极坐标图，则需要指定 <code>projection</code> 参数为 <code>polar</code>，有关此函数的具体介绍可参见<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html">官方文档</a>。其他函数的参数解释可参考前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828143">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105952856">《Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制》</a></p></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]r = np.random.rand(<span class="hljs-number">8</span>)theta = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> * np.pi, <span class="hljs-number">2</span> * np.pi / <span class="hljs-number">8</span>)colors = np.array([<span class="hljs-string">&#x27;#4bb2c5&#x27;</span>, <span class="hljs-string">&#x27;#c5b47f&#x27;</span>, <span class="hljs-string">&#x27;#EAA228&#x27;</span>, <span class="hljs-string">&#x27;#579575&#x27;</span>, <span class="hljs-string">&#x27;#839557&#x27;</span>, <span class="hljs-string">&#x27;#958c12&#x27;</span>, <span class="hljs-string">&#x27;#953579&#x27;</span>, <span class="hljs-string">&#x27;#4b5de4&#x27;</span>])plt.subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;polar&#x27;</span>)plt.bar(theta, r, color=colors, alpha=<span class="hljs-number">0.8</span>)plt.title(<span class="hljs-string">&#x27;极坐标柱状图示例二&#x27;</span>, pad=<span class="hljs-number">15</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/022/09.png" alt="09"></p><hr><h3><span id="6x03-fang-fa-san-pyplot-bar-yu-pyplot-axes"><font color="##4876FF">【6x03】方法三：pyplot.bar() 与 pyplot.axes()</font></span></h3><p>axes 为 Matplotlib 图像中的绘图区，<code>matplotlib.pyplot.axes()</code> 方法可以对绘图区进行设置，同样的也可以设置 <code>projection</code> 参数为 <code>polar</code> 来实现极坐标图，设置 <code>polar=True</code> 也行。示例中其他函数的参数解释可参考前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105638122">《Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105952856">《Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制》</a></p></li></ul><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]r = np.random.rand(<span class="hljs-number">8</span>)theta = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> * np.pi, <span class="hljs-number">2</span> * np.pi / <span class="hljs-number">8</span>)colors = np.array([<span class="hljs-string">&#x27;#4bb2c5&#x27;</span>, <span class="hljs-string">&#x27;#c5b47f&#x27;</span>, <span class="hljs-string">&#x27;#EAA228&#x27;</span>, <span class="hljs-string">&#x27;#579575&#x27;</span>, <span class="hljs-string">&#x27;#839557&#x27;</span>, <span class="hljs-string">&#x27;#958c12&#x27;</span>, <span class="hljs-string">&#x27;#953579&#x27;</span>, <span class="hljs-string">&#x27;#4b5de4&#x27;</span>])<span class="hljs-comment"># plt.axes(polar=True)</span>plt.axes(projection=<span class="hljs-string">&#x27;polar&#x27;</span>)plt.bar(theta, r, color=colors, alpha=<span class="hljs-number">0.8</span>)plt.title(<span class="hljs-string">&#x27;极坐标柱状图示例三&#x27;</span>, pad=<span class="hljs-number">15</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/022/10.png" alt="10"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106162412</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（八）：等高线/等值线图的绘制</title>
      <link href="/article/021/"/>
      <url>/article/021/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-deng-gao-xian-gai-nian-font"><font color="#FF0000">【1x00】等高线概念</font></a></li><li><a href="#font-color-ff0000-2x00-li-jie-numpy-meshgrid-font"><font color="#FF0000">【2x00】理解 numpy.meshgrid()</font></a></li><li><a href="#font-color-ff0000-3x00-hui-zhi-fang-fa-matplotlib-pyplot-contour-font"><font color="#FF0000">【3x00】绘制方法 matplotlib.pyplot.contour()</font></a></li><li><a href="#font-color-ff0000-4x00-tian-chong-fang-fa-matplotlib-pyplot-contourf-font"><font color="#FF0000">【4x00】填充方法 matplotlib.pyplot.contourf()</font></a></li><li><a href="#font-color-ff0000-5x00-biao-ji-fang-fa-matplotlib-pyplot-clabel-font"><font color="#FF0000">【5x00】标记方法 matplotlib.pyplot.clabel()</font></a></li><li><a href="#font-color-ff0000-6x00-colormap-qu-zhi-font"><font color="#FF0000">【6x00】Colormap 取值</font></a></li><li><a href="#font-color-ff0000-7x00-jian-dan-shi-li-font"><font color="#FF0000">【7x00】简单示例</font></a></li><li><a href="#font-color-ff0000-8x00-tian-jia-biao-ji-font"><font color="#FF0000">【8x00】添加标记</font></a></li><li><a href="#font-color-ff0000-9x00-lun-kuo-xian-yan-se-he-yang-shi-font"><font color="#FF0000">【9x00】轮廓线颜色和样式</font></a></li><li><a href="#font-color-ff0000-10x00-yan-se-tian-chong-font"><font color="#FF0000">【10x00】颜色填充</font></a></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106066852</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-deng-gao-xian-gai-nian"><font color="#FF0000">【1x00】等高线概念</font></span></h2><p>参考百度百科，等高线概念总结如下：等高线指的是地形图上高程相等的相邻各点所连成的闭合曲线。把地面上海拔高度相同的点连成的闭合曲线，并垂直投影到一个水平面上，并按比例缩绘在图纸上，就得到等高线。等高线也可以看作是不同海拔高度的水平面与实际地面的交线，所以等高线是闭合曲线。在等高线上标注的数字为该等高线的海拔。</p><ul><li>位于同一等高线上的地面点，海拔高度相同。但海拔高度相同的点不一定位于同一条等高线上；</li><li>在同一幅图内，除了陡崖以外，不同高程的等高线不能相交；</li><li>在图廓内相邻等高线的高差一般是相同的，因此地面坡度与等高线之间的等高线平距成反比，等高线平距愈小，等高线排列越密，说明地面坡度越大；等高线平距愈大，等高线排列越稀，则说明地面坡度愈小；</li><li>等高线是一条闭合的曲线，如果不能在同一幅内闭合，则必在相邻或者其他图幅内闭合。</li><li>等高线经过山脊或山谷时改变方向，因此，山脊线或者山谷线应垂直于等高线转折点处的切线，即等高线与山脊线或者山谷线正交。</li></ul><p><font color="#FF0000"><strong>在 Matplotlib 等高线的绘制中，需要传递三个基本参数：某个点的 x、y 轴坐标以及其高度。</strong></font></p><p><img src="https://cdn.itbob.cn/img/article/021/01.png" alt="01"></p><p><img src="https://cdn.itbob.cn/img/article/021/02.png" alt="02"></p><h2><span id="2x00-li-jie-numpy-meshgrid"><font color="#FF0000">【2x00】理解 numpy.meshgrid()</font></span></h2><p><code>numpy.meshgrid()</code> 方法用于生成网格点坐标矩阵。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npa = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])b = np.array([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])res = np.meshgrid(a, b)<span class="hljs-built_in">print</span>(res)</code></pre><p>输出结果：</p><pre><code class="hljs python">[array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],       [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],       [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]), array([[<span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>],       [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>],       [<span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>]])]</code></pre><p>给定两个数组，<code>a[1, 2, 3]</code> 和 <code>b[7, 8, 9]</code>，a 作为 x 轴数据，b 作为 y 轴数据，那么一共可以绘制出 9 个点： (1,7)、(1,8)、(1,9)、(2,7)、(2,8)、(2,9)、(3,7)、(3,8)、(3,9)，而 <code>numpy.meshgrid()</code> 方法就是起这样的作用，返回的两个二维数组，横坐标矩阵 a 中的每个元素，与纵坐标矩阵 b 中对应位置元素，共同构成一个点的完整坐标。</p><p><font color="#FF0000"><strong>因为在 <code>matplotlib.pyplot.contour()</code> 等高线绘制函数中接收的是二维坐标信息，所以在绘制等高线图之前要将原数据经过 <code>numpy.meshgrid()</code> 方法处理，也可以自己构建类似于上述的二维数组。</strong></font></p><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2><span id="3x00-hui-zhi-fang-fa-matplotlib-pyplot-contour"><font color="#FF0000">【3x00】绘制方法 matplotlib.pyplot.contour()</font></span></h2><p><code>matplotlib.pyplot.contour()</code> 方法可用于绘制等高线图。</p><p>基本语法：<code>matplotlib.pyplot.contour(\*args, data=None, \*\*kwargs)</code></p><p>通用格式：<code>matplotlib.pyplot.contour([X, Y,] Z, [levels], **kwargs)</code></p><p>基本参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X, Y</td><td>数组形式的点的 x 和 y 轴坐标，两者都必须是二维的，形状与 Z 相同</td></tr><tr><td>Z</td><td>绘制轮廓的高度值，二维数组，每个元素是其对应点的高度</td></tr><tr><td>levels</td><td>确定等高线的数目和位置，如果是整数 N，则使用 N 个数据间隔，即绘制 N+1 条等高线<br>如果是数组形式，则绘制指定的等高线。值必须按递增顺序排列</td></tr></tbody></table><p>其他参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>colors</td><td>等高线的颜色，颜色字符串或颜色序列</td></tr><tr><td>cmap</td><td>等高线的颜色，字符串或者 <a href="https://matplotlib.org/tutorials/colors/colormaps.html">Colormap</a><br>通常包含一系列的渐变色或其他颜色组合，取值参见<font color="#FF0000"><strong>【6x00】Colormap 取值</strong></font></td></tr><tr><td>alpha</td><td>透明度，介于0（透明）和1（不透明）之间</td></tr><tr><td>origin</td><td>通过指定 Z[0，0] 的位置来确定 Z 的方向和确切位置，仅当未指定 X, Y 时才有意义<br><code>None</code>：Z[0，0] 位于左下角的 X=0, Y=0 处<br><code>'lower'</code>：Z [0, 0] 位于左下角的 X = 0.5, Y = 0.5 处<br><code>'upper'</code>：Z[0，0] 位于左上角的 X=N+0.5, Y=0.5 处<br><code>'image'</code>：使用 <code>rcParams[“image.origin”] = 'upper'</code>的值</td></tr><tr><td>antialiased</td><td>是否启用抗锯齿渲染，默认 True</td></tr><tr><td>linewidths</td><td>等高线的线宽，如果是数字，则所有等高线都将使用此线宽<br>如果是序列，则将按指定的顺序以升序打印线宽<br>默认为 <code>rcParams[“lines.linewidth”] = 1.5</code></td></tr><tr><td>linestyles</td><td>等高线的样式，如果线条颜色为单色，则负等高线默认为虚线<br><code>'-'</code> or <code>'solid'</code>, <code>'--'</code> or <code>'dashed'</code>, <code>'-.'</code> or <code>'dashdot'</code> <code>':'</code> or <code>'dotted'</code>, <code>'none'</code> or <code>' '</code> or <code>''</code></td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2><span id="4x00-tian-chong-fang-fa-matplotlib-pyplot-contourf"><font color="#FF0000">【4x00】填充方法 matplotlib.pyplot.contourf()</font></span></h2><p><code>matplotlib.pyplot.contourf()</code> 方法与 <code>matplotlib.pyplot.contour()</code> 的区别在于：<code>contourf()</code> 会对等高线间的区域进行颜色填充（filled contours）。除此之外两者的函数签名和返回值都相同。</p><p>基本语法：<code>matplotlib.pyplot.contourf(\*args, data=None, \*\*kwargs)</code></p><p>通用格式：<code>matplotlib.pyplot.contour([X, Y,] Z, [levels], **kwargs)</code></p><p>基本参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X, Y</td><td>数组形式的点的 x 和 y 轴坐标，两者都必须是二维的，形状与 Z 相同</td></tr><tr><td>Z</td><td>绘制轮廓的高度值，二维数组，每个元素是其对应点的高度</td></tr><tr><td>levels</td><td>确定等高线的数目和位置，如果是整数 N，则使用 N 个数据间隔，即绘制 N+1 条等高线<br>如果是数组形式，则绘制指定的等高线。值必须按递增顺序排列</td></tr></tbody></table><p>其他参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>colors</td><td>等高线的填充颜色，颜色字符串或颜色序列</td></tr><tr><td>cmap</td><td>等高线的填充颜色，字符串或者 <a href="https://matplotlib.org/tutorials/colors/colormaps.html">Colormap</a><br>通常包含一系列的渐变色或其他颜色组合，取值参见<font color="#FF0000"><strong>【6x00】Colormap 取值</strong></font></td></tr><tr><td>alpha</td><td>透明度，介于0（透明）和1（不透明）之间</td></tr><tr><td>origin</td><td>通过指定 Z[0，0] 的位置来确定 Z 的方向和确切位置，仅当未指定 X, Y 时才有意义<br><code>None</code>：Z[0，0] 位于左下角的 X=0, Y=0 处<br><code>'lower'</code>：Z [0, 0] 位于左下角的 X = 0.5, Y = 0.5 处<br><code>'upper'</code>：Z[0，0] 位于左上角的 X=N+0.5, Y=0.5 处<br><code>'image'</code>：使用 <code>rcParams[“image.origin”] = 'upper'</code>的值</td></tr><tr><td>antialiased</td><td>是否启用抗锯齿渲染，默认 True</td></tr><tr><td>linewidths</td><td>等高线的线宽，如果是数字，则所有等高线都将使用此线宽<br>如果是序列，则将按指定的顺序以升序打印线宽<br>默认为 <code>rcParams[“lines.linewidth”] = 1.5</code></td></tr><tr><td>linestyles</td><td>等高线的样式，如果线条颜色为单色，则负等高线默认为虚线<br><code>'-'</code> or <code>'solid'</code>, <code>'--'</code> or <code>'dashed'</code>, <code>'-.'</code> or <code>'dashdot'</code> <code>':'</code> or <code>'dotted'</code>, <code>'none'</code> or <code>' '</code> or <code>''</code></td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20200512180336350.png" alt="分割线"></p><h2><span id="5x00-biao-ji-fang-fa-matplotlib-pyplot-clabel"><font color="#FF0000">【5x00】标记方法 matplotlib.pyplot.clabel()</font></span></h2><p><code>matplotlib.pyplot.clabel(CS, \*args, \*\*kwargs)</code> 方法可用于标记等高线图。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>CS</td><td>ContourSet（等高线集）对象，即 <code>pyplot.contour()</code> 返回的对象</td></tr><tr><td>levels</td><td>需要标记的等高线集，数组类型，如果未指定则默认标记所有等高线</td></tr><tr><td>fontsize</td><td>标记的字体大小，可选项：<br><code>'xx-small'</code>, <code>'x-small'</code>, <code>'small'</code>, <code>'medium'</code>, <code>'large'</code>, <code>'x-large'</code>, <code>'xx-large'</code></td></tr><tr><td>colors</td><td>标记的颜色，颜色字符串或颜色序列</td></tr><tr><td>inline</td><td>是否在标签位置移除轮廓显示，bool 类型，默认 True</td></tr><tr><td>inline_spacing</td><td>标签位置移除轮廓的宽度，float 类型，默认为 5</td></tr><tr><td>fmt</td><td>标签的格式字符串。str 或 dict 类型，默认值为 <code>%1.3f</code></td></tr><tr><td>rightside_up</td><td>是否将标签旋转始终与水平面成正负90度，bool 类型，默认 True</td></tr><tr><td>use_clabeltext</td><td>默认为 False，如果为 True，则使用 <a href="https://matplotlib.org/api/contour_api.html#matplotlib.contour.ClabelText">ClabelText</a> 类（而不是 <a href="https://matplotlib.org/api/text_api.html#matplotlib.text.Text">Text</a>）创建标签<br>ClabelText  在绘图期间重新计算文本的旋转角度，如果轴的角度发生变化，则可以使用此功能</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106066852</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="6x00-colormap-qu-zhi"><font color="#FF0000">【6x00】Colormap 取值</font></span></h2><p><code>matplotlib.pyplot.contour()</code> 和 <code>matplotlib.pyplot.contourf()</code> 中 <code>cmap</code> 参数用于设置等高线的颜色，取值通常为 Colormap 中的值，通常包含一系列的渐变色或其他颜色组合。具体参加下图。</p><p>官方文档：<a href="https://matplotlib.org/tutorials/colors/colormaps.html">https://matplotlib.org/tutorials/colors/colormaps.html</a></p><p><img src="https://cdn.itbob.cn/img/article/021/03.png" alt="03"></p><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2><span id="7x00-jian-dan-shi-li"><font color="#FF0000">【7x00】简单示例</font></span></h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)y = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)m, n = np.meshgrid(x, y)        <span class="hljs-comment"># 生成网格点坐标矩阵</span><span class="hljs-comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> - b ** <span class="hljs-number">5</span> + a ** <span class="hljs-number">5</span>) * np.exp(-a ** <span class="hljs-number">2</span> - b ** <span class="hljs-number">2</span>)<span class="hljs-comment"># 绘制等高线图，8 个数据间隔，颜色为黑色</span>plt.contour(m, n, f(m, n), <span class="hljs-number">8</span>, colors=<span class="hljs-string">&#x27;k&#x27;</span>)plt.title(<span class="hljs-string">&#x27;等高线图简单示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/021/04.png" alt="04"></p><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2><span id="8x00-tian-jia-biao-ji"><font color="#FF0000">【8x00】添加标记</font></span></h2><p><code>matplotlib.pyplot.clabel()</code> 方法用于给等高线添加标记。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)y = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)m, n = np.meshgrid(x, y)        <span class="hljs-comment"># 生成网格点坐标矩阵</span><span class="hljs-comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> - b ** <span class="hljs-number">5</span> + a ** <span class="hljs-number">5</span>) * np.exp(-a ** <span class="hljs-number">2</span> - b ** <span class="hljs-number">2</span>)<span class="hljs-comment"># 绘制等高线图，8 个数据间隔，颜色为黑色</span>C = plt.contour(m, n, f(m, n), <span class="hljs-number">8</span>, colors=<span class="hljs-string">&#x27;k&#x27;</span>)<span class="hljs-comment"># 添加标记，标记处不显示轮廓线，颜色为黑红绿蓝四种，保留两位小数</span>plt.clabel(C, inline=<span class="hljs-literal">True</span>, colors=[<span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>], fmt=<span class="hljs-string">&#x27;%1.2f&#x27;</span>)plt.title(<span class="hljs-string">&#x27;等高线图添加标记示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/021/05.png" alt="05"></p><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2><span id="9x00-lun-kuo-xian-yan-se-he-yang-shi"><font color="#FF0000">【9x00】轮廓线颜色和样式</font></span></h2><p><code>matplotlib.pyplot.contour()</code> 方法中，<code>colors</code> 参数即可为等高线轮廓设置颜色，可以是单色，也可以是一个颜色列表，<code>linestyles</code> 参数可以设置轮廓线样式，注意，如果线条颜色为单色，则负等高线（高度值为负）默认为虚线。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)y = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)m, n = np.meshgrid(x, y)        <span class="hljs-comment"># 生成网格点坐标矩阵</span><span class="hljs-comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> - b ** <span class="hljs-number">5</span> + a ** <span class="hljs-number">5</span>) * np.exp(-a ** <span class="hljs-number">2</span> - b ** <span class="hljs-number">2</span>)colors = [<span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]<span class="hljs-comment"># 绘制等高线图，8 个数据间隔，颜色为黑色，线条样式为 --</span>C = plt.contour(m, n, f(m, n), <span class="hljs-number">8</span>, colors=colors, linestyles=<span class="hljs-string">&#x27;--&#x27;</span>)<span class="hljs-comment"># 添加标记，标记处不显示轮廓线，颜色为黑红绿蓝四种，保留两位小数</span>plt.clabel(C, inline=<span class="hljs-literal">True</span>, colors=colors, fmt=<span class="hljs-string">&#x27;%1.2f&#x27;</span>)plt.title(<span class="hljs-string">&#x27;等高线图设置颜色/样式示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/021/06.png" alt="06"></p><p>如果想启用渐变色，则可以设置 <code>cmap</code>，取值参见<font color="#FF0000"><strong>【6x00】Colormap 取值</strong></font>，<code>colorbar()</code> 方法可以显示颜色对照条。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)y = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)m, n = np.meshgrid(x, y)        <span class="hljs-comment"># 生成网格点坐标矩阵</span><span class="hljs-comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> - b ** <span class="hljs-number">5</span> + a ** <span class="hljs-number">5</span>) * np.exp(-a ** <span class="hljs-number">2</span> - b ** <span class="hljs-number">2</span>)<span class="hljs-comment"># 绘制等高线图，8 个数据间隔，颜色为 plasma</span>C = plt.contour(m, n, f(m, n), <span class="hljs-number">8</span>, cmap=<span class="hljs-string">&#x27;plasma&#x27;</span>)<span class="hljs-comment"># 添加标记，标记处不显示轮廓线，颜色为黑色，保留两位小数</span>plt.clabel(C, inline=<span class="hljs-literal">True</span>, colors=<span class="hljs-string">&#x27;k&#x27;</span>, fmt=<span class="hljs-string">&#x27;%1.2f&#x27;</span>)<span class="hljs-comment"># 显示颜色条</span>plt.colorbar()plt.title(<span class="hljs-string">&#x27;等高线图设置渐变色示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/021/07.png" alt="07"></p><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2><span id="10x00-yan-se-tian-chong"><font color="#FF0000">【10x00】颜色填充</font></span></h2><p><code>matplotlib.pyplot.contourf()</code> 方法用于对等高线之间的地方进行颜色填充。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)y = np.arange(-<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)m, n = np.meshgrid(x, y)        <span class="hljs-comment"># 生成网格点坐标矩阵</span><span class="hljs-comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> - b ** <span class="hljs-number">5</span> + a ** <span class="hljs-number">5</span>) * np.exp(-a ** <span class="hljs-number">2</span> - b ** <span class="hljs-number">2</span>)<span class="hljs-comment"># 绘制等高线图，8 个数据间隔，颜色为 plasma</span>plt.contourf(m, n, f(m, n), <span class="hljs-number">8</span>, cmap=<span class="hljs-string">&#x27;plasma&#x27;</span>)C = plt.contour(m, n, f(m, n), <span class="hljs-number">8</span>, cmap=<span class="hljs-string">&#x27;plasma&#x27;</span>)<span class="hljs-comment"># 添加标记，标记处不显示轮廓线，颜色为黑色，保留两位小数</span>plt.clabel(C, inline=<span class="hljs-literal">True</span>, colors=<span class="hljs-string">&#x27;k&#x27;</span>, fmt=<span class="hljs-string">&#x27;%1.2f&#x27;</span>)<span class="hljs-comment"># 显示颜色条</span>plt.colorbar()plt.title(<span class="hljs-string">&#x27;等高线图颜色填充示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/021/08.png" alt="08"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106066852</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</title>
      <link href="/article/020/"/>
      <url>/article/020/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-fang-fa-miao-shu-font"><font color="#FF0000">【1x00】方法描述</font></a></li><li><a href="#font-color-ff0000-2x00-jian-dan-shi-li-font"><font color="#FF0000">【2x00】简单示例</font></a></li><li><a href="#font-color-ff0000-3x00-an-jiao-du-diao-zheng-shan-xing-biao-qian-font"><font color="#FF0000">【3x00】按角度调整扇形标签</font></a></li><li><a href="#font-color-ff0000-4x00-xian-shi-tu-li-font"><font color="#FF0000">【4x00】显示图例</font></a></li><li><a href="#font-color-ff0000-5x00-tu-chu-xian-shi-shan-xing-kuai-font"><font color="#FF0000">【5x00】突出显示扇形块</font></a></li><li><a href="#font-color-ff0000-6x00-xian-shi-ge-shan-qu-suo-zhan-bai-fen-bi-font"><font color="#FF0000">【6x00】显示各扇区所占百分比</font></a></li><li><a href="#font-color-ff0000-7x00-xuan-zhuan-bing-zhuang-tu-font"><font color="#FF0000">【7x00】旋转饼状图</font></a></li><li><a href="#font-color-ff0000-8x00-zi-ding-yi-mei-ge-shan-xing-he-wen-zi-shu-xing-font"><font color="#FF0000">【8x00】自定义每个扇形和文字属性</font></a></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106025845</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-fang-fa-miao-shu"><font color="#FF0000">【1x00】方法描述</font></span></h2><p><code>matplotlib.pyplot.pie()</code> 方法用于绘制饼状图。</p><p>基本语法：</p><pre><code class="hljs python">matplotlib.pyplot.pie(        x[, explode=<span class="hljs-literal">None</span>, labels=<span class="hljs-literal">None</span>, colors=<span class="hljs-literal">None</span>,        autopct=<span class="hljs-literal">None</span>, pctdistance=<span class="hljs-number">0.6</span>, shadow=<span class="hljs-literal">False</span>,        labeldistance=<span class="hljs-number">1.1</span>, startangle=<span class="hljs-literal">None</span>, radius=<span class="hljs-literal">None</span>,        counterclock=<span class="hljs-literal">True</span>, wedgeprops=<span class="hljs-literal">None</span>, textprops=<span class="hljs-literal">None</span>,        center=(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), frame=<span class="hljs-literal">False</span>, rotatelabels=<span class="hljs-literal">False</span>, \*, data=<span class="hljs-literal">None</span>]        )</code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>每个扇形块的大小，数组形式，大小单位是比例</td></tr><tr><td>explode</td><td>指定对应扇形块脱离饼图的半径大小，数组形式，其中元素个数应该是 len(x)</td></tr><tr><td>labels</td><td>每个扇形块上的文本标签，列表形式</td></tr><tr><td>labeldistance</td><td>每个扇形块上的文本标签与扇形中心的距离，float 类型，默认 1.1</td></tr><tr><td>colors</td><td>每个扇形块对应的颜色，数组形式</td></tr><tr><td>autopct</td><td>用于计算每个扇形块所占比例，字符串或者函数类型<br>例如：<code>autopct='%1.1f%%'</code> 表示浮点数，保留一位小数，并添加百分比符号</td></tr><tr><td>pctdistance</td><td>每个扇形块的中心与 autopct 生成的文本之间的距离，float 类型，默认 0.6</td></tr><tr><td>shadow</td><td>是否为扇形添加阴影效果</td></tr><tr><td>startangle</td><td>将饼图按照逆时针旋转指定的角度，float 类型</td></tr><tr><td>radius</td><td>饼图的半径，如果是 None，则将被设置为 1，float 类型</td></tr><tr><td>counterclock</td><td>是否按照逆时针对扇形图进行排列，bool 类型，默认 True</td></tr><tr><td>wedgeprops</td><td>传递给绘制每个扇形图对象的参数，字典形式，参数值参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.Wedge.html#matplotlib.patches.Wedge">Wedge</a><br>例如：<code>wedgeprops = &#123;'linewidth': 3&#125;</code> 设置扇形边框线宽度为 3</td></tr><tr><td>textprops</td><td>传递给文本对象的参数，字典形式<br>例如：<code>textprops=&#123;'color': 'r', 'fontsize': 15&#125;</code> 设置文字为红色，大小为15</td></tr><tr><td>center</td><td>饼图圆心在画布上是坐标，默认 (0, 0)</td></tr><tr><td>frame</td><td>是否显示 x, y 坐标轴外框，默认 False</td></tr><tr><td>rotatelabels</td><td>是否按照角度进行调整每块饼的 label 文本标签，默认 False</td></tr></tbody></table><h2><span id="2x00-jian-dan-shi-li"><font color="#FF0000">【2x00】简单示例</font></span></h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">15</span>]labels = [<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Golang&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>]colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<span class="hljs-comment"># 指定4个扇区所占比例以及扇区的颜色，扇区文本标签距离扇区中心1.1</span>plt.pie(x, labels=labels, colors=colors, labeldistance=<span class="hljs-number">1.1</span>)plt.title(<span class="hljs-string">&#x27;饼状图简单示例&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/020/01.png" alt="01"></p><h2><span id="3x00-an-jiao-du-diao-zheng-shan-xing-biao-qian"><font color="#FF0000">【3x00】按角度调整扇形标签</font></span></h2><p><code>rotatelabels</code> 属性可以设置是否按照角度调整每块饼的 label（标签）显示方式。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">15</span>]labels = [<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Go&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>]colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<span class="hljs-comment"># 指定4个扇区所占比例以及扇区的颜色，扇区文本标签距离扇区中心1.1，按角度调整 labels</span>plt.pie(x, labels=labels, colors=colors, labeldistance=<span class="hljs-number">1.1</span>, rotatelabels=<span class="hljs-literal">True</span>)plt.title(<span class="hljs-string">&#x27;饼状图按角度调整 labels 示例&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/020/02.png" alt="02"></p><h2><span id="4x00-xian-shi-tu-li"><font color="#FF0000">【4x00】显示图例</font></span></h2><p>与前面文章中绘制线性图、散点图、条形图一样，调用 <code>matplotlib.pyplot.legend()</code> 方法可绘制图例，该方法的参数解释参见前文<a href="https://itrhx.blog.csdn.net/article/details/105828143">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">15</span>]labels = [<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Go&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>]colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]plt.pie(x, labels=labels, colors=colors, labeldistance=<span class="hljs-number">1.1</span>)plt.title(<span class="hljs-string">&#x27;饼状图显示图例示例&#x27;</span>)plt.legend(bbox_to_anchor=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/020/03.png" alt="03"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106025845</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="5x00-tu-chu-xian-shi-shan-xing-kuai"><font color="#FF0000">【5x00】突出显示扇形块</font></span></h2><p><code>explode</code> 参数可以实现突出显示某一块扇区，接收数组形式的参数，这个数组中的元素个数应该是 len(x)，即和扇区块的数量相同。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">15</span>]labels = [<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Golang&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>]colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<span class="hljs-comment"># 指定第一个扇区块脱离饼图的半径大小为0.3，其它扇区不脱离</span>plt.pie(x, labels=labels, colors=colors, labeldistance=<span class="hljs-number">1.1</span>, explode=[<span class="hljs-number">0.3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])plt.title(<span class="hljs-string">&#x27;饼状图突出显示扇形块示例&#x27;</span>)plt.legend(bbox_to_anchor=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/020/04.png" alt="04"></p><h2><span id="6x00-xian-shi-ge-shan-qu-suo-zhan-bai-fen-bi"><font color="#FF0000">【6x00】显示各扇区所占百分比</font></span></h2><p><code>autopct</code> 参数可用于计算每个扇形块所占比例，接收字符串或者函数类型，例如：<code>autopct='%1.1f%%'</code> 表示浮点数，保留一位小数，并添加百分比符号。<code>pctdistance</code> 参数用于调整每个扇形块的中心与 <code>autopct</code> 生成的文本之间的距离，float 类型，默认 0.6。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">15</span>]labels = [<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Golang&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>]colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]plt.pie(    x,                        <span class="hljs-comment"># 每个扇形块所占比例</span>    labels=labels,            <span class="hljs-comment"># 扇形块文本标签</span>    colors=colors,            <span class="hljs-comment"># 扇形块颜色</span>    labeldistance=<span class="hljs-number">1.1</span>,        <span class="hljs-comment"># 扇形块标签距离中心的距离</span>    explode=[<span class="hljs-number">0.3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],   <span class="hljs-comment"># 第一个扇形块突出显示</span>    autopct=<span class="hljs-string">&#x27;%1.1f%%&#x27;</span>,        <span class="hljs-comment"># 显示百分比，保留一位小数</span>    pctdistance=<span class="hljs-number">0.5</span>           <span class="hljs-comment"># 百分比文本距离饼状图中心的距离</span>)plt.title(<span class="hljs-string">&#x27;饼状图显示各扇区所占百分比示例&#x27;</span>)plt.legend(bbox_to_anchor=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 显示图例</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/020/05.png" alt="05"></p><h2><span id="7x00-xuan-zhuan-bing-zhuang-tu"><font color="#FF0000">【7x00】旋转饼状图</font></span></h2><p><code>startangle</code> 参数可以选择饼状图，改变饼状图放置的角度。注意是按照逆时针旋转。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">15</span>]labels = [<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Golang&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>]colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]plt.pie(    x,                        <span class="hljs-comment"># 每个扇形块所占比例</span>    labels=labels,            <span class="hljs-comment"># 扇形块文本标签</span>    colors=colors,            <span class="hljs-comment"># 扇形块颜色</span>    labeldistance=<span class="hljs-number">1.1</span>,        <span class="hljs-comment"># 扇形块标签距离中心的距离</span>    explode=[<span class="hljs-number">0.3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],   <span class="hljs-comment"># 第一个扇形块突出显示</span>    autopct=<span class="hljs-string">&#x27;%1.1f%%&#x27;</span>,        <span class="hljs-comment"># 显示百分比，保留一位小数</span>    pctdistance=<span class="hljs-number">0.5</span>,          <span class="hljs-comment"># 百分比文本距离饼状图中心的距离</span>    startangle=-<span class="hljs-number">90</span>            <span class="hljs-comment"># 逆时针旋转-90°，即顺时针旋转90°</span>)plt.title(<span class="hljs-string">&#x27;饼状图旋转角度示例&#x27;</span>)plt.legend(bbox_to_anchor=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 显示图例</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/020/06.png" alt="06"></p><h2><span id="8x00-zi-ding-yi-mei-ge-shan-xing-he-wen-zi-shu-xing"><font color="#FF0000">【8x00】自定义每个扇形和文字属性</font></span></h2><p><code>wedgeprops</code> 参数以字典形式为每个扇形添加自定义属性，例如：<code>wedgeprops = &#123;'linewidth': 3&#125;</code> 设置扇形边框线宽度为 3，更多其他参数值参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.Wedge.html#matplotlib.patches.Wedge">Wedge</a>；</p><p><code>textprops</code> 参数同样以字典形式为文本对象添加自定义属性，例如：<code>textprops=&#123;'color': 'r', 'fontsize': 15&#125;</code> 设置文字为红色，大小为15，更多其他参数值参见 <a href="https://matplotlib.org/api/text_api.html?highlight=text#matplotlib.text.Text">Text</a>。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = [<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">15</span>]labels = [<span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;Golang&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>]colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]plt.pie(    x,                           <span class="hljs-comment"># 每个扇形块所占比例</span>    labels=labels,               <span class="hljs-comment"># 扇形块文本标签</span>    colors=colors,               <span class="hljs-comment"># 扇形块颜色</span>    labeldistance=<span class="hljs-number">1.1</span>,           <span class="hljs-comment"># 扇形块标签距离中心的距离</span>    explode=[<span class="hljs-number">0.3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],      <span class="hljs-comment"># 第一个扇形块突出显示</span>    autopct=<span class="hljs-string">&#x27;%1.1f%%&#x27;</span>,           <span class="hljs-comment"># 显示百分比，保留一位小数</span>    pctdistance=<span class="hljs-number">0.6</span>,             <span class="hljs-comment"># 百分比文本距离饼状图中心的距离</span>    shadow=<span class="hljs-literal">True</span>,                 <span class="hljs-comment"># 显示阴影效果</span>    wedgeprops=&#123;                 <span class="hljs-comment"># 为每个扇形添加属性</span>        <span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">0.7</span>,            <span class="hljs-comment"># 扇形宽度0.7</span>        <span class="hljs-string">&#x27;edgecolor&#x27;</span>: <span class="hljs-string">&#x27;#98F5FF&#x27;</span>,  <span class="hljs-comment"># 扇形边缘线颜色</span>        <span class="hljs-string">&#x27;linewidth&#x27;</span>: <span class="hljs-number">3</span>           <span class="hljs-comment"># 扇形边缘线宽度</span>    &#125;,    textprops=&#123;                  <span class="hljs-comment"># 为文字添加属性</span>        <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">13</span>,          <span class="hljs-comment"># 文字大小</span>        <span class="hljs-string">&#x27;fontweight&#x27;</span>: <span class="hljs-string">&#x27;bold&#x27;</span>,    <span class="hljs-comment"># 文字粗细</span>        <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;k&#x27;</span>             <span class="hljs-comment"># 文字颜色，黑色</span>    &#125;)plt.title(<span class="hljs-string">&#x27;饼状图自定义每个扇形和文字属性示例&#x27;</span>, fontweight=<span class="hljs-string">&#x27;bold&#x27;</span>)plt.legend(bbox_to_anchor=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), borderpad=<span class="hljs-number">0.6</span>)  <span class="hljs-comment"># 显示图例</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/020/07.png" alt="07"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/106025845</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（六）：直方图/柱状图/条形图的绘制</title>
      <link href="/article/019/"/>
      <url>/article/019/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-zhi-fang-tu-zhu-zhuang-tu-tiao-xing-tu-de-qu-bie-font"><font color="#FF0000">【1x00】直方图 / 柱状图 / 条形图的区别</font></a></li><li><a href="#font-color-ff0000-2x00-zhi-fang-tu-de-hui-zhi-font"><font color="#FF0000">【2x00】直方图的绘制</font></a><ul><li><a href="#font-color-4876ff-2x01-han-shu-jie-shao-matplotlib-pyplot-hist-font"><font color="##4876FF">【2x01】函数介绍 matplotlib.pyplot.hist()</font></a></li><li><a href="#font-color-4876ff-2x02-jian-dan-zhi-fang-tu-shi-li-font"><font color="##4876FF">【2x02】简单直方图示例</font></a></li><li><a href="#font-color-4876ff-2x03-dui-ji-de-zhi-fang-tu-font"><font color="##4876FF">【2x03】堆积的直方图</font></a></li><li><a href="#font-color-4876ff-2x04-tian-chong-qi-ta-yang-shi-font"><font color="##4876FF">【2x04】填充其他样式</font></a></li></ul></li><li><a href="#font-color-ff0000-3x00-zhu-zhuang-tu-de-hui-zhi-font"><font color="#FF0000">【3x00】柱状图的绘制</font></a><ul><li><a href="#font-color-4876ff-3x01-han-shu-jie-shao-matplotlib-pyplot-bar-font"><font color="##4876FF">【3x01】函数介绍 matplotlib.pyplot.bar()</font></a></li><li><a href="#font-color-4876ff-3x02-jian-dan-zhu-zhuang-tu-shi-li-font"><font color="##4876FF">【3x02】简单柱状图示例</font></a></li><li><a href="#font-color-4876ff-3x03-tian-jia-yu-biao-zhun-chai-de-wu-chai-xian-font"><font color="##4876FF">【3x03】添加与标准差的误差线</font></a></li><li><a href="#font-color-4876ff-3x04-duo-xu-lie-zhu-zhuang-tu-font"><font color="##4876FF">【3x04】多序列柱状图</font></a></li><li><a href="#font-color-4876ff-3x05-dui-ji-de-zhu-zhuang-tu-font"><font color="##4876FF">【3x05】堆积的柱状图</font></a></li><li><a href="#font-color-4876ff-3x06-tian-chong-qi-ta-yang-shi-font"><font color="##4876FF">【3x06】填充其他样式</font></a></li><li><a href="#font-color-4876ff-3x07-tian-jia-wen-zi-miao-shu-font"><font color="##4876FF">【3x07】添加文字描述</font></a></li></ul></li><li><a href="#font-color-ff0000-4x00-tiao-xing-tu-de-hui-zhi-font"><font color="#FF0000">【4x00】条形图的绘制</font></a><ul><li><a href="#font-color-4876ff-4x01-han-shu-jie-shao-matplotlib-pyplot-barh-font"><font color="##4876FF">【4x01】函数介绍 matplotlib.pyplot.barh()</font></a></li><li><a href="#font-color-4876ff-4x02-jian-dan-tiao-xing-tu-shi-li-font"><font color="##4876FF">【4x02】简单条形图示例</font></a></li><li><a href="#font-color-4876ff-4x03-tian-jia-yu-biao-zhun-chai-de-wu-chai-xian-font"><font color="##4876FF">【4x03】添加与标准差的误差线</font></a></li><li><a href="#font-color-4876ff-4x04-duo-xu-lie-tiao-xing-tu-font"><font color="##4876FF">【4x04】多序列条形图</font></a></li><li><a href="#font-color-4876ff-4x05-dui-ji-de-tiao-xing-tu-font"><font color="##4876FF">【4x05】堆积的条形图</font></a></li><li><a href="#font-color-4876ff-4x06-tian-chong-qi-ta-yang-shi-font"><font color="##4876FF">【4x06】填充其他样式</font></a></li><li><a href="#font-color-4876ff-4x07-tian-jia-wen-zi-miao-shu-font"><font color="##4876FF">【4x07】添加文字描述</font></a></li></ul></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105952856</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-zhi-fang-tu-zhu-zhuang-tu-tiao-xing-tu-de-qu-bie"><font color="#FF0000">【1x00】直方图 / 柱状图 / 条形图的区别</font></span></h2><ul><li><p>直方图：直方图（Histogram）又称质量分布图，是一种统计报告图，由一系列高度不等的纵向条纹或线段表示数据分布的情况。<font color="##0000FF"><strong>一般用于描述连续型数据的分布关系</strong></font>，用横轴表示数据类型，纵轴表示分布情况。直方图是用面积表示各组频数的多少，矩形的高度表示每一组的频数或频率，宽度则表示各组的组距，因此其<font color="##32CD32"><strong>高度与宽度均有意义</strong></font>。其次，由于分组数据具有连续性，<font color="##32CD32"><strong>直方图的各矩形通常是连续排列。</strong></font></p></li><li><p>柱状图：柱状图（bar chart）又称条图、长条图、柱状统计图、条状图、棒形图，是一种以长方形的长度为变量的统计图表。<font color="##0000FF"><strong>一般用于描述离散型分类数据的对比</strong></font>，长条图用来比较两个或以上的价值（不同时间或者不同条件），只有一个变量，通常利用于较小的数据集分析。柱状图亦可横向排列，或用多维方式表达。<font color="##32CD32"><strong>柱状图各矩形的宽度固定，矩形之间分开排列，会有间距。</strong></font></p></li><li><p>条形图：通常情况下<font color="#FF0000"><strong>条形图 = 柱状图</strong></font>，也可以<font color="#FF0000"><strong>将横向排列的柱状图称为条形图</strong></font>。在本文中会将条形图视为后者。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200509010455973.png" alt="分割线"></p><h2><span id="2x00-zhi-fang-tu-de-hui-zhi"><font color="#FF0000">【2x00】直方图的绘制</font></span></h2><h3><span id="2x01-han-shu-jie-shao-matplotlib-pyplot-hist"><font color="##4876FF">【2x01】函数介绍 matplotlib.pyplot.hist()</font></span></h3><p><code>matplotlib.pyplot.hist()</code> 函数用于绘制直方图。</p><p>基本语法：<code>matplotlib.pyplot.hist(x[, bins=None, range=None, density=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, \*\*kwargs])</code></p><p>基本参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>数据集，数组或数组序列</td></tr><tr><td>bins</td><td>统计的分布区间、条形数，可以是整数、序列或字符串，默认 <code>rcParams[&quot;hist.bins&quot;] =10</code><br>如果 bins 是整数，则定义的是等宽的矩形的个数<br>如果 bins 是序列，则定义的是每个矩形的区间，如：<code>bins = [1, 2, 3, 4]</code>，则矩形分布区间为 <code>[1,2)</code>、<code>[2,3)</code>、<code>[3,4]</code><br>如果 bins 是字符串，则它应该是 <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram_bin_edges.html#numpy.histogram_bin_edges">numpy.histogram_bin_edges</a> 所支持的策略之一</td></tr><tr><td>range</td><td>矩形分布的区间，在没有指定 bins 生效，元组类型</td></tr><tr><td>density</td><td>是否<strong>显示频率统计结果</strong>，<code>频率统计结果=区间数目/(总数*区间宽度)</code></td></tr><tr><td>bottom</td><td>y 轴的起始位置，默认为 0</td></tr><tr><td>histtype</td><td>矩形的样式，有四种类型可选：<br><code>'bar'</code>：默认值，传统的条形直方图，如果给出多个数据，则条形图并排排列<br><code>'barstacked'</code>：当数据为 1 个时，和 bar 结果一样，当数据为多个时，则进行垂直堆叠<br><code>'step'</code>：未填充的线条形式；<code>'stepfilled'</code>：填充的线条形式，效果与 bar 差不多</td></tr><tr><td>align</td><td>矩形的中心位于 bins（x 轴） 的位置，<code>'left'</code>：左；<code>'mid'</code>：中；<code>'right'</code>：右</td></tr><tr><td>orientation</td><td>矩形的方向，<code>vertical</code>：垂直；<code>horizontal</code>：水平</td></tr><tr><td>rwidth</td><td>矩形的相对宽度，如果未指定，则自动计算宽度</td></tr><tr><td>log</td><td>y 坐标轴是否以指数刻度显示</td></tr><tr><td>color</td><td>矩形的颜色，默认蓝色，与 facecolor 作用相同，指定一个即可，如果两者都指定，则取 facecolor 的值</td></tr><tr><td>label</td><td>数据的标签，展示图例时使用</td></tr><tr><td>stacked</td><td>是否为堆积状图（当两个数据相似时，堆积在一起就会把第一个数据的显示相对缩小一点）</td></tr></tbody></table><p>其他参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>facecolor</td><td>标量或数组类型，每个矩形的颜色，与 color 作用相同，指定一个即可，如果两者都指定，则取 facecolor 的值</td></tr><tr><td>edgecolor</td><td>标量或数组类型，直方图边缘线的颜色</td></tr><tr><td>linewidth</td><td>标量或数组类型，直方图边缘线的宽度，如果为 0，则不绘制边</td></tr><tr><td>alpha</td><td>float 类型，矩形透明度</td></tr><tr><td>label</td><td>图例中显示的标签</td></tr><tr><td>linestyle / ls</td><td>线条样式，此处指矩形边缘线条样式<br><code>'-'</code> or <code>'solid'</code>, <code>'--'</code> or <code>'dashed'</code>, <code>'-.'</code> or <code>'dashdot'</code> or <code>':'</code> or <code>'dotted'</code>, <code>'none'</code> or <code>' '</code> or <code>''</code></td></tr><tr><td>linewidth / lw</td><td>线条宽度，此处指矩形边缘线的宽度，float 类型，默认 0.8</td></tr><tr><td>hatch</td><td>矩形的填充图案，可以是组合形式，如果有相同的图案，则会增加填充的密度<br>取值可以是：<code>'/'</code>, <code>'\'</code>, `’</td></tr></tbody></table><h3><span id="2x02-jian-dan-zhi-fang-tu-shi-li"><font color="##4876FF">【2x02】简单直方图示例</font></span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]  <span class="hljs-comment"># 设置中文显示</span>x = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>, <span class="hljs-number">100</span>)  <span class="hljs-comment"># 数据集</span>bins = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>, <span class="hljs-number">10</span>)        <span class="hljs-comment"># 分布区间 [0,10)、[10,20)...[90,100]</span>plt.hist(x, bins=bins, linewidth=<span class="hljs-number">0.5</span>, edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>)  <span class="hljs-comment"># 边缘线宽0.5，颜色为黑色</span>plt.xlim(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)                    <span class="hljs-comment"># x 轴刻度范围       </span>plt.title(<span class="hljs-string">&#x27;简单直方图示例&#x27;</span>)         <span class="hljs-comment"># 标题</span>plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)         <span class="hljs-comment"># x 轴标签</span>plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)         <span class="hljs-comment"># y 轴标签</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/01.png" alt="01"></p><h3><span id="2x03-dui-ji-de-zhi-fang-tu"><font color="##4876FF">【2x03】堆积的直方图</font></span></h3><p>参数 <code>stacked</code> 决定了将两份数据进行堆积显示。注意，有可能两个数据相似（y 轴的值相似），但是堆积在一起的时候，会把第一个数据的显示相对缩小一点。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]hist1 = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)hist2 = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)x = [hist1, hist2]colors = [<span class="hljs-string">&#x27;orchid&#x27;</span>, <span class="hljs-string">&#x27;deepskyblue&#x27;</span>]labels = [<span class="hljs-string">&#x27;hist1&#x27;</span>, <span class="hljs-string">&#x27;hist2&#x27;</span>]bins = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>, <span class="hljs-number">10</span>)<span class="hljs-comment"># 绘制两份数据的直方图，数据集等其他参数可以使用列表形式传递，也可以使用两次 hist 函数单独传递</span>plt.hist(x, bins=bins, color=colors, stacked=<span class="hljs-literal">True</span>, label=labels)plt.title(<span class="hljs-string">&#x27;堆积的直方图示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.legend(loc=<span class="hljs-string">&quot;upper left&quot;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/02.png" alt="02"></p><h3><span id="2x04-tian-chong-qi-ta-yang-shi"><font color="##4876FF">【2x04】填充其他样式</font></span></h3><p><code>hatch</code> 参数可以让直方图的矩形填充其他样式，可选值有：<code>'/'</code>, <code>'\'</code>, <code>'|'</code>, <code>'-'</code>, <code>'+'</code>, <code>'x'</code>, <code>'o'</code>, <code>'O'</code>, <code>'.'</code>, <code>'*'</code>。可以是不同图案的组合形式，如果有相同的图案，则会增加填充的密度。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]  <span class="hljs-comment"># 设置中文显示</span>x = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>, <span class="hljs-number">100</span>)  <span class="hljs-comment"># 数据集</span>bins = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>, <span class="hljs-number">10</span>)        <span class="hljs-comment"># 分布区间 [0,10)、[10,20)...[90,100]</span><span class="hljs-comment"># 矩形颜色为白色，使用 / 填充，边缘线宽0.5，颜色为黑色</span>plt.hist(x, bins=bins, color=<span class="hljs-string">&#x27;w&#x27;</span>, hatch=<span class="hljs-string">&#x27;///&#x27;</span>, linewidth=<span class="hljs-number">0.5</span>, edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>)plt.xlim(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)                   <span class="hljs-comment"># x 轴刻度范围</span>plt.title(<span class="hljs-string">&#x27;直方图图案填充示例&#x27;</span>)     <span class="hljs-comment"># 标题</span>plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)         <span class="hljs-comment"># x 轴标签</span>plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)         <span class="hljs-comment"># y 轴标签</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/03.png" alt="03"></p><p><img src="https://img-blog.csdnimg.cn/20200509010455973.png" alt="分割线"></p><h2><span id="3x00-zhu-zhuang-tu-de-hui-zhi"><font color="#FF0000">【3x00】柱状图的绘制</font></span></h2><h3><span id="3x01-han-shu-jie-shao-matplotlib-pyplot-bar"><font color="##4876FF">【3x01】函数介绍 matplotlib.pyplot.bar()</font></span></h3><p><code>matplotlib.pyplot.bar()</code> 函数用于绘制柱状图。</p><p>基本语法：<code>matplotlib.pyplot.bar(x, height[, width=0.8, bottom=None, align='center', \*\*kwargs])</code></p><p>基本参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>标量序列，每个矩形对应的 x 轴刻度</td></tr><tr><td>height</td><td>标量或标量序列，每个矩形对应的高度，即 y 轴刻度</td></tr><tr><td>width</td><td>标量或数组类型，每个矩形的宽度，默认为 0.8</td></tr><tr><td>bottom</td><td>标量或数组类型，y 轴的起始位置，默认为 0</td></tr><tr><td>align</td><td>矩形与 x 轴刻度对齐的位置，<code>'center'</code>：中；<code>'edge'</code>：左边缘</td></tr></tbody></table><p>其他参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>标量或数组类型，每个矩形的颜色，与 facecolor 作用相同，指定一个即可，如果两者都指定，则取 facecolor 的值</td></tr><tr><td>edgecolor</td><td>标量或数组类型，柱状图边缘线的颜色</td></tr><tr><td>linewidth</td><td>标量或数组类型，柱状图边缘线的宽度，如果为0，则不绘制边</td></tr><tr><td>tick_label</td><td>标量或数组类型，柱状图 x 轴的刻度标签，默认使用数字标签</td></tr><tr><td>xerr / yerr</td><td>标量，指定对应标准差（添加误差线时会用到）</td></tr><tr><td>ecolor</td><td>标量或数组类型，误差线的线条颜色，默认值为 black</td></tr><tr><td>capsize</td><td>标量，误差线两头横线的宽度，默认为 <code>rcParams[&quot;errorbar.capsize&quot;] = 0.0</code></td></tr><tr><td>error_kw</td><td>字典类型，可以此字典中定义 ecolor 和 capsize，比单独指定的优先级要高</td></tr><tr><td>log</td><td>bool 值，y 坐标轴是否以指数刻度显示</td></tr><tr><td>alpha</td><td>float 类型，矩形透明度</td></tr><tr><td>label</td><td>图例中显示的标签</td></tr><tr><td>linestyle / ls</td><td>线条样式，此处指矩形边缘线条样式<br><code>'-'</code> or <code>'solid'</code>, <code>'--'</code> or <code>'dashed'</code>, <code>'-.'</code> or <code>'dashdot'</code> or <code>':'</code> or <code>'dotted'</code>, <code>'none'</code> or <code>' '</code> or <code>''</code></td></tr><tr><td>linewidth / lw</td><td>线条宽度，此处指矩形边缘线的宽度，float 类型，默认 0.8</td></tr><tr><td>hatch</td><td>矩形的填充图案，可以是组合形式，如果有相同的图案，则会增加填充的密度<br>取值可以是：<code>'/'</code>, <code>'\'</code>, `’</td></tr></tbody></table><h3><span id="3x02-jian-dan-zhu-zhuang-tu-shi-li"><font color="##4876FF">【3x02】简单柱状图示例</font></span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]height = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<span class="hljs-comment"># 设置 x 轴的标签，也可以用 plt.xticks 方法来设置</span>tick_label = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>]<span class="hljs-comment"># 设置颜色序列</span>color = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;peru&#x27;</span>, <span class="hljs-string">&#x27;orchid&#x27;</span>, <span class="hljs-string">&#x27;deepskyblue&#x27;</span>]<span class="hljs-comment"># 绘制柱状图，边缘线宽度为1，颜色为黑色，样式为 --</span>plt.bar(x, height, tick_label=tick_label, color=color, edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>, linewidth=<span class="hljs-number">1</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)plt.title(<span class="hljs-string">&#x27;简单柱状图示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/04.png" alt="04"></p><h3><span id="3x03-tian-jia-yu-biao-zhun-chai-de-wu-chai-xian"><font color="##4876FF">【3x03】添加与标准差的误差线</font></span></h3><p>首先定义一个列表，其中的元素是与每个值对应的标准差，<code>ecolor</code> 和 <code>capsize</code> 参数分别指定误差线的颜色和两头横线的宽度。这两个参数可以通过 <code>error_kw</code> 字典形式组合起来。以字典形式的组合优先级别要比单独指定高。另外，柱状图指定标准差时要用 <code>yerr</code>，条形图（横向排列的柱状图）指定标准差时要用 <code>xerr</code>。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]height = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]std = [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">1.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">1.0</span>]   <span class="hljs-comment"># 标准差</span>tick_label = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>]  <span class="hljs-comment"># 设置 x 轴的标签，也可以用 plt.xticks 方法来设置</span>color = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;peru&#x27;</span>, <span class="hljs-string">&#x27;orchid&#x27;</span>, <span class="hljs-string">&#x27;deepskyblue&#x27;</span>]  <span class="hljs-comment"># 设置颜色序列</span>plt.bar(    x,    height,    tick_label=tick_label,    color=color,    yerr=std,              <span class="hljs-comment"># 指定对应标准差</span>    <span class="hljs-comment"># error_kw=&#123;</span>    <span class="hljs-comment">#     &#x27;ecolor&#x27;: &#x27;k&#x27;,   # 指定误差线的颜色</span>    <span class="hljs-comment">#     &#x27;capsize&#x27;: 6     # 指定误差线两头横线的宽度</span>    <span class="hljs-comment"># &#125;,</span>    ecolor=<span class="hljs-string">&#x27;k&#x27;</span>,    capsize=<span class="hljs-number">6</span>,    edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>,         <span class="hljs-comment"># 指定边缘线颜色</span>    linewidth=<span class="hljs-number">1</span>            <span class="hljs-comment"># 指定边缘线宽度</span>)plt.title(<span class="hljs-string">&#x27;柱状图添加误差线示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/05.png" alt="05"></p><h3><span id="3x04-duo-xu-lie-zhu-zhuang-tu"><font color="##4876FF">【3x04】多序列柱状图</font></span></h3><p>在绘制多序列的柱状图时，只需要多次调用 <code>matplotlib.pyplot.bar()</code> 函数即可，指定一个较小的宽度值（偏移量），绘制不同数据时设置不同的 x 位置刻度即可。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(<span class="hljs-number">5</span>)height1 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])height2 = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>])height3 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>])<span class="hljs-comment"># 设置宽度值（偏移量）</span>width = <span class="hljs-number">0.3</span><span class="hljs-comment"># 绘制不同数据时，x 轴依次增加一个偏移量</span>plt.bar(x, height1, width, label=<span class="hljs-string">&#x27;bar1&#x27;</span>)plt.bar(x + width, height2, width, label=<span class="hljs-string">&#x27;bar2&#x27;</span>)plt.bar(x + width * <span class="hljs-number">2</span>, height3, width, label=<span class="hljs-string">&#x27;bar3&#x27;</span>)<span class="hljs-comment"># 设置 x 轴刻度的标签</span>plt.xticks(x + width, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])plt.title(<span class="hljs-string">&#x27;多序列柱状图示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/06.png" alt="06"></p><h3><span id="3x05-dui-ji-de-zhu-zhuang-tu"><font color="##4876FF">【3x05】堆积的柱状图</font></span></h3><p>所谓堆积图，就是将多序列数据堆积到一个矩形上显示，在柱状图中要实现堆积图，只需要改变 <code>bottom</code> 参数即可，<code>bottom</code> 参数用于设置 y 轴基线，即柱状图的底边在 y 轴上的起始刻度，第一条数据 <code>data1</code> 的基线可以设置为 0，即默认值，第二条数据 <code>data2</code> 的基线可以设置在 <code>data1</code> 的上方，即 <code>bottom=data1</code>，第三条数据 <code>data3</code> 的基线可以设置在 <code>data1 + data2</code> 的上方，即 <code>bottom=data1+data2</code>，以此类推。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(<span class="hljs-number">5</span>)height1 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])height2 = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>])height3 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>])plt.bar(x, height1, label=<span class="hljs-string">&#x27;bar1&#x27;</span>)plt.bar(x, height2, label=<span class="hljs-string">&#x27;bar2&#x27;</span>, bottom=height1)plt.bar(x, height3, label=<span class="hljs-string">&#x27;bar3&#x27;</span>, bottom=(height2+height1))plt.xticks(x, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])plt.title(<span class="hljs-string">&#x27;堆积的柱状图示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/07.png" alt="07"></p><h3><span id="3x06-tian-chong-qi-ta-yang-shi"><font color="##4876FF">【3x06】填充其他样式</font></span></h3><p><code>hatch</code> 参数可以让柱状图的矩形填充其他样式，可选值有：<code>'/'</code>, <code>'\'</code>, <code>'|'</code>, <code>'-'</code>, <code>'+'</code>, <code>'x'</code>, <code>'o'</code>, <code>'O'</code>, <code>'.'</code>, <code>'*'</code>。可以是不同图案的组合形式，如果有相同的图案，则会增加填充的密度。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(<span class="hljs-number">5</span>)height1 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])height2 = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>])height3 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>])plt.bar(x, height1, label=<span class="hljs-string">&#x27;bar1&#x27;</span>, color=<span class="hljs-string">&#x27;w&#x27;</span>, hatch=<span class="hljs-string">&#x27;///&#x27;</span>)plt.bar(x, height2, label=<span class="hljs-string">&#x27;bar2&#x27;</span>, bottom=height1, color=<span class="hljs-string">&#x27;w&#x27;</span>, hatch=<span class="hljs-string">&#x27;xxx&#x27;</span>)plt.bar(x, height3, label=<span class="hljs-string">&#x27;bar3&#x27;</span>, bottom=(height2+height1), color=<span class="hljs-string">&#x27;w&#x27;</span>, hatch=<span class="hljs-string">&#x27;|||&#x27;</span>)plt.xticks(x, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])plt.title(<span class="hljs-string">&#x27;柱状图图案填充示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/08.png" alt="08"></p><h3><span id="3x07-tian-jia-wen-zi-miao-shu"><font color="##4876FF">【3x07】添加文字描述</font></span></h3><p>利用 <code>matplotlib.pyplot.text()</code> 方法可以在柱状图每个矩形上方添加文字描述。具体参数解释可参考前面的文章：<a href="https://itrhx.blog.csdn.net/article/details/105828049">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(<span class="hljs-number">5</span>)height1 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])height2 = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>])height3 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>])width = <span class="hljs-number">0.3</span><span class="hljs-comment"># 绘制不同数据时，x 轴依次增加一个偏移量</span>plt.bar(x, height1, width, label=<span class="hljs-string">&#x27;bar1&#x27;</span>)plt.bar(x + width, height2, width, label=<span class="hljs-string">&#x27;bar2&#x27;</span>)plt.bar(x + width * <span class="hljs-number">2</span>, height3, width, label=<span class="hljs-string">&#x27;bar3&#x27;</span>)<span class="hljs-comment"># 依次添加每条数据的标签</span><span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x, height1):    plt.text(a, b, b, ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;bottom&#x27;</span>)<span class="hljs-keyword">for</span> c, d <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x, height2):    plt.text(c + width, d, d, ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;bottom&#x27;</span>)<span class="hljs-keyword">for</span> e, f <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x, height3):    plt.text(e + width * <span class="hljs-number">2</span>, f, f, ha=<span class="hljs-string">&#x27;center&#x27;</span>, va=<span class="hljs-string">&#x27;bottom&#x27;</span>)<span class="hljs-comment"># 设置 x 轴刻度的标签</span>plt.xticks(x + width, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])plt.title(<span class="hljs-string">&#x27;柱状图添加文字描述示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/09.png" alt="09"></p><p><img src="https://img-blog.csdnimg.cn/20200509010455973.png" alt="分割线"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105952856</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="4x00-tiao-xing-tu-de-hui-zhi"><font color="#FF0000">【4x00】条形图的绘制</font></span></h2><h3><span id="4x01-han-shu-jie-shao-matplotlib-pyplot-barh"><font color="##4876FF">【4x01】函数介绍 matplotlib.pyplot.barh()</font></span></h3><p><code>matplotlib.pyplot.barh()</code> 函数用于绘制条形图（水平排列的柱状图）。</p><p>基本语法：<code>matplotlib.pyplot.barh(y, width[, height=0.8, left=None, align='center', color, \*\*kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>y</td><td>标量或数组类型，每个矩形对应的 y 轴刻度</td></tr><tr><td>width</td><td>标量或数组类型，每个矩形的宽度，即 x 轴刻度</td></tr><tr><td>height</td><td>标量序列，每个矩形的高度，默认 0.8</td></tr><tr><td>left</td><td>标量序列，每个矩形的左侧 x 坐标的起始位置，默认值为 0</td></tr><tr><td>align</td><td>矩形的底边与 y 轴刻度对齐的位置，<code>'center'</code>：中；<code>'edge'</code>：底边</td></tr></tbody></table><p>其他参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>标量或数组类型，每个矩形的颜色，与 facecolor 作用相同，指定一个即可，如果两者都指定，则取 facecolor 的值</td></tr><tr><td>edgecolor</td><td>标量或数组类型，条形图边缘线的颜色</td></tr><tr><td>linewidth</td><td>标量或数组类型，条形图边缘线的宽度，如果为0，则不绘制边</td></tr><tr><td>tick_label</td><td>标量或数组类型，条形图 y 轴的刻度标签，默认使用数字标签</td></tr><tr><td>xerr / yerr</td><td>标量，指定对应标准差（添加误差线时会用到）</td></tr><tr><td>ecolor</td><td>标量或数组类型，误差线的线条颜色，默认值为 black</td></tr><tr><td>capsize</td><td>标量，误差线两头横线的宽度，默认为 <code>rcParams[&quot;errorbar.capsize&quot;] = 0.0</code></td></tr><tr><td>error_kw</td><td>字典类型，可以此字典中定义 ecolor 和 capsize，比单独指定的优先级要高</td></tr><tr><td>log</td><td>bool 值，y 坐标轴是否以指数刻度显示</td></tr><tr><td>alpha</td><td>float 类型，矩形透明度</td></tr><tr><td>label</td><td>图例中显示的标签</td></tr><tr><td>linestyle / ls</td><td>线条样式，此处指矩形边缘线条样式<br><code>'-'</code> or <code>'solid'</code>, <code>'--'</code> or <code>'dashed'</code>, <code>'-.'</code> or <code>'dashdot'</code> or <code>':'</code> or <code>'dotted'</code>, <code>'none'</code> or <code>' '</code> or <code>''</code></td></tr><tr><td>linewidth / lw</td><td>线条宽度，此处指矩形边缘线的宽度，float 类型，默认 0.8</td></tr><tr><td>hatch</td><td>矩形的填充图案，可以是组合形式，如果有相同的图案，则会增加填充的密度<br>取值可以是：<code>'/'</code>, <code>'\'</code>, `’</td></tr></tbody></table><h3><span id="4x02-jian-dan-tiao-xing-tu-shi-li"><font color="##4876FF">【4x02】简单条形图示例</font></span></h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]y = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]width = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]tick_label = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>]color = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;peru&#x27;</span>, <span class="hljs-string">&#x27;orchid&#x27;</span>, <span class="hljs-string">&#x27;deepskyblue&#x27;</span>]plt.barh(y, width, tick_label=tick_label, color=color, edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>, linewidth=<span class="hljs-number">1</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>)plt.title(<span class="hljs-string">&#x27;简单条形图示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/10.png" alt="10"></p><h3><span id="4x03-tian-jia-yu-biao-zhun-chai-de-wu-chai-xian"><font color="##4876FF">【4x03】添加与标准差的误差线</font></span></h3><p>与柱状图一样，首先定义一个列表，其中的元素是与每个值对应的标准差，<code>ecolor</code> 和 <code>capsize</code> 参数分别指定误差线的颜色和两头横线的宽度。这两个参数可以通过 <code>error_kw</code> 字典形式组合起来。以字典形式的组合优先级别要比单独指定高。另外，柱状图指定标准差时要用 <code>yerr</code>，条形图（横向排列的柱状图）指定标准差时要用 <code>xerr</code>。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]y = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]width = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]std = [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">1.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">1.0</span>]  <span class="hljs-comment"># 标准差</span>tick_label = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>]   <span class="hljs-comment"># 设置 x 轴的标签，也可以用 plt.xticks 方法来设置</span>color = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;peru&#x27;</span>, <span class="hljs-string">&#x27;orchid&#x27;</span>, <span class="hljs-string">&#x27;deepskyblue&#x27;</span>]  <span class="hljs-comment"># 颜色序列</span>plt.barh(    y,    width,    tick_label=tick_label,    color=color,    xerr=std,               <span class="hljs-comment"># 指定对应标准差</span>    <span class="hljs-comment"># error_kw=&#123;</span>    <span class="hljs-comment">#     &#x27;ecolor&#x27;: &#x27;k&#x27;,    # 指定误差线的颜色</span>    <span class="hljs-comment">#     &#x27;capsize&#x27;: 6      # 指定误差线两头横线的宽度</span>    <span class="hljs-comment"># &#125;,</span>    ecolor=<span class="hljs-string">&#x27;k&#x27;</span>,    capsize=<span class="hljs-number">6</span>,    edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>,          <span class="hljs-comment"># 指定边缘线颜色</span>    linewidth=<span class="hljs-number">1</span>             <span class="hljs-comment"># 指定边缘线宽度</span>)plt.title(<span class="hljs-string">&#x27;条形图添加误差线示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/11.png" alt="11"></p><h3><span id="4x04-duo-xu-lie-tiao-xing-tu"><font color="##4876FF">【4x04】多序列条形图</font></span></h3><p>与多序列柱状图类似，在绘制多序列的条形图时，只需要多次调用 <code>matplotlib.pyplot.barh()</code> 函数即可，指定一个较小的高度值（偏移量），绘制不同数据时设置不同的 y 位置刻度即可。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]y = np.arange(<span class="hljs-number">5</span>)width1 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])width2 = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>])width3 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>])<span class="hljs-comment"># 设置高度值（偏移量）</span>height = <span class="hljs-number">0.3</span><span class="hljs-comment"># 绘制不同数据时，y 轴依次增加一个偏移量</span>plt.barh(y, width1, height, label=<span class="hljs-string">&#x27;bar1&#x27;</span>)plt.barh(y + height, width2, height, label=<span class="hljs-string">&#x27;bar2&#x27;</span>)plt.barh(y + height * <span class="hljs-number">2</span>, width3, height, label=<span class="hljs-string">&#x27;bar3&#x27;</span>)<span class="hljs-comment"># 设置 y 轴刻度的标签</span>plt.yticks(y + height, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])plt.title(<span class="hljs-string">&#x27;多序列条形图示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/12.png" alt="12"></p><h3><span id="4x05-dui-ji-de-tiao-xing-tu"><font color="##4876FF">【4x05】堆积的条形图</font></span></h3><p>堆积图就是将多序列数据堆积到一个矩形上显示，和堆积的柱状图类似，在条形图中要实现堆积图，只需要改变 <code>left</code> 参数即可，<code>left</code> 参数用于设置 x 轴基线，即柱状图的底边在 x 轴上的起始刻度，第一条数据 <code>data1</code> 的基线可以设置为 0，即默认值，第二条数据 <code>data2</code> 的基线可以设置在 <code>data1</code> 的上方，即 <code>left=data1</code>，第三条数据 <code>data3</code> 的基线可以设置在 <code>data1 + data2</code> 的上方，即 <code>left=data1+data2</code>，以此类推。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]y = np.arange(<span class="hljs-number">5</span>)width1 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])width2 = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>])width3 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>])plt.barh(y, width1, label=<span class="hljs-string">&#x27;bar1&#x27;</span>)plt.barh(y, width2, label=<span class="hljs-string">&#x27;bar2&#x27;</span>, left=width1)plt.barh(y, width3, label=<span class="hljs-string">&#x27;bar3&#x27;</span>, left=(width1+width2))plt.yticks(y, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])plt.title(<span class="hljs-string">&#x27;堆积的条形图示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/13.png" alt="13"></p><h3><span id="4x06-tian-chong-qi-ta-yang-shi"><font color="##4876FF">【4x06】填充其他样式</font></span></h3><p><code>hatch</code> 参数可以让柱状图的矩形填充其他样式，可选值有：<code>'/'</code>, <code>'\'</code>, <code>'|'</code>, <code>'-'</code>, <code>'+'</code>, <code>'x'</code>, <code>'o'</code>, <code>'O'</code>, <code>'.'</code>, <code>'*'</code>。可以是不同图案的组合形式，如果有相同的图案，则会增加填充的密度。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]y = np.arange(<span class="hljs-number">5</span>)width1 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])width2 = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>])width3 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>])plt.barh(y, width1, label=<span class="hljs-string">&#x27;bar1&#x27;</span>, color=<span class="hljs-string">&#x27;w&#x27;</span>, hatch=<span class="hljs-string">&#x27;///&#x27;</span>)plt.barh(y, width2, label=<span class="hljs-string">&#x27;bar2&#x27;</span>, left=width1, color=<span class="hljs-string">&#x27;w&#x27;</span>, hatch=<span class="hljs-string">&#x27;xxx&#x27;</span>)plt.barh(y, width3, label=<span class="hljs-string">&#x27;bar3&#x27;</span>, left=(width1+width2), color=<span class="hljs-string">&#x27;w&#x27;</span>, hatch=<span class="hljs-string">&#x27;|||&#x27;</span>)plt.yticks(y, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])plt.title(<span class="hljs-string">&#x27;条形图图案填充示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/14.png" alt="14"></p><h3><span id="4x07-tian-jia-wen-zi-miao-shu"><font color="##4876FF">【4x07】添加文字描述</font></span></h3><p>利用 <code>matplotlib.pyplot.text()</code> 方法可以在条形图每个矩形上方添加文字描述。具体参数解释可参考前面的文章：<a href="https://itrhx.blog.csdn.net/article/details/105828049">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]y = np.arange(<span class="hljs-number">5</span>)width1 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])width2 = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>])width3 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>])height = <span class="hljs-number">0.3</span><span class="hljs-comment"># 绘制不同数据时，y 轴依次增加一个偏移量</span>plt.barh(y, width1, height, label=<span class="hljs-string">&#x27;bar1&#x27;</span>)plt.barh(y + height, width2, height, label=<span class="hljs-string">&#x27;bar2&#x27;</span>)plt.barh(y + height * <span class="hljs-number">2</span>, width3, height, label=<span class="hljs-string">&#x27;bar3&#x27;</span>)<span class="hljs-comment"># 依次添加每条数据的标签</span><span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(width1, y):    plt.text(a, b-<span class="hljs-number">0.05</span>, a)<span class="hljs-keyword">for</span> c, d <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(width2, y):    plt.text(c, d+<span class="hljs-number">0.20</span>, c)<span class="hljs-keyword">for</span> e, f <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(width3, y):    plt.text(e, f+<span class="hljs-number">0.50</span>, e)<span class="hljs-comment"># 设置 y 轴刻度的标签</span>plt.yticks(y + height, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])plt.title(<span class="hljs-string">&#x27;条形图添加文字描述示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/019/15.png" alt="15"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105952856</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</title>
      <link href="/article/018/"/>
      <url>/article/018/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-fang-fa-miao-shu-font"><font color="#FF0000">【1x00】方法描述</font></a></li><li><a href="#font-color-ff0000-2x00-jian-dan-shi-li-font"><font color="#FF0000">【2x00】简单示例</font></a></li><li><a href="#font-color-ff0000-3x00-duo-tiao-shu-ju-font"><font color="#FF0000">【3x00】多条数据</font></a></li><li><a href="#font-color-ff0000-4x00-she-zhi-yan-se-yang-shi-tu-li-font"><font color="#FF0000">【4x00】设置颜色 / 样式 / 图例</font></a></li><li><a href="#font-color-ff0000-5x00-zhi-ding-wei-zhi-xian-shi-wen-ben-zhu-shi-font"><font color="#FF0000">【5x00】指定位置显示文本注释</font></a></li><li><a href="#font-color-ff0000-6x00-sui-ji-shu-ju-san-dian-tu-font"><font color="#FF0000">【6x00】随机数据散点图</font></a></li><li><a href="#font-color-ff0000-7x00-sui-ji-yan-se-yu-se-tiao-font"><font color="#FF0000">【7x00】随机颜色与色条</font></a></li><li><a href="#font-color-ff0000-8x00-bu-tong-tu-xiang-zhi-jian-de-ceng-ji-diao-zheng-font"><font color="#FF0000">【8x00】不同图像之间的层级调整</font></a></li><li><a href="#font-color-ff0000-9x00-kuang-xuan-bu-fen-shu-ju-font"><font color="#FF0000">【9x00】框选部分数据</font></a></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105914929</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-fang-fa-miao-shu"><font color="#FF0000">【1x00】方法描述</font></span></h2><p><code>matplotlib.pyplot.scatter()</code> 方法可用于绘制散点图。</p><p>本文用到的其他图像属性可参考前面的两篇文章：</p><p><a href="https://itrhx.blog.csdn.net/article/details/105828049">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a><br><a href="https://itrhx.blog.csdn.net/article/details/105828143">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图等基本图像属性》</a></p><p>基本语法：<code>matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, alpha=None, linewidths=None, edgecolors=None, \*\*kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x,y</td><td>数据位置，标量或类似数组的形式</td></tr><tr><td>s</td><td>标记的大小，以磅为单位，默认 <code>rcParams['lines.markersize'] ** 2</code>，即 6**2=36</td></tr><tr><td>color / c</td><td>标记的颜色，可以是单个颜色或者一个颜色列表<br>支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html">Color Demo</a></td></tr><tr><td>marker</td><td>标记的样式，默认为 <code>rcParams[&quot;scatter.marker&quot;] = 'o'</code>，更多样式参见<font color="#FF0000"><strong>表一</strong></font></td></tr><tr><td>cmap</td><td>将浮点数映射成颜色的颜色映射表，即一个 <a href="https://matplotlib.org/api/_as_gen/matplotlib.colors.Colormap.html#matplotlib.colors.Colormap">Colormap</a> 实例或注册的颜色表名，仅当 c 是浮点数数组时才使用 cmap</td></tr><tr><td>alpha</td><td>标记的透明度，float 类型，取值范围：[0, 1]，默认为 1.0，即不透明</td></tr><tr><td>linewidths</td><td>标记边缘的线宽，默认为 <code>rcParams[&quot;lines.linewidth&quot;] = 1.5</code></td></tr><tr><td>edgecolors</td><td>标记边缘的颜色，可以是单个颜色或者一个颜色列表<br>支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html">Color Demo</a></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="FF0000" size="3px">表一：marker 标记的样式</font></strong></td></tr></table><table><thead><tr><th>标记</th><th>描述</th></tr></thead><tbody><tr><td><code>&quot;.&quot;</code></td><td>点</td></tr><tr><td><code>&quot;,&quot;</code></td><td>像素点</td></tr><tr><td><code>&quot;o&quot;</code></td><td>圆圈</td></tr><tr><td><code>&quot;v&quot;</code></td><td>倒三角</td></tr><tr><td><code>&quot;^&quot;</code></td><td>正三角</td></tr><tr><td><code>&quot;&lt;&quot;</code></td><td>左三角</td></tr><tr><td><code>&quot;&gt;&quot;</code></td><td>右三角</td></tr><tr><td><code>&quot;1&quot;</code></td><td>倒三叉星</td></tr><tr><td><code>&quot;2&quot;</code></td><td>正三叉星（类似奔驰车标形状）</td></tr><tr><td><code>&quot;3&quot;</code></td><td>左三叉星</td></tr><tr><td><code>&quot;4&quot;</code></td><td>右三叉星</td></tr><tr><td><code>&quot;8&quot;</code></td><td>八边形</td></tr><tr><td><code>&quot;s&quot;</code></td><td>正方形</td></tr><tr><td><code>&quot;p&quot;</code></td><td>五边形</td></tr><tr><td><code>&quot;P&quot;</code></td><td>填充的加号（粗加号）</td></tr><tr><td><code>&quot;+&quot;</code></td><td>加号</td></tr><tr><td><code>&quot;*&quot;</code></td><td>星形</td></tr><tr><td><code>&quot;h&quot;</code></td><td>六边形（底部是角）</td></tr><tr><td><code>&quot;H&quot;</code></td><td>六边形（底部是边）</td></tr><tr><td><code>&quot;x&quot;</code></td><td>x 号</td></tr><tr><td><code>&quot;X&quot;</code></td><td>填充的 x 号（粗 x 号）</td></tr><tr><td><code>&quot;D&quot;</code></td><td>粗菱形（对角线相等）</td></tr><tr><td><code>&quot;d&quot;</code></td><td>细菱形（对角线不等）</td></tr><tr><td>`&quot;</td><td>&quot;`</td></tr><tr><td><code>&quot;_&quot;</code></td><td>水平线</td></tr><tr><td><code>0</code></td><td>水平线靠左</td></tr><tr><td><code>1</code></td><td>水平线靠右</td></tr><tr><td><code>2</code></td><td>垂直线靠上</td></tr><tr><td><code>3</code></td><td>垂直线靠下</td></tr><tr><td><code>4</code></td><td>左三角（比 <code>&quot;&lt;&quot;</code> 更细）</td></tr><tr><td><code>5</code></td><td>右三角（比 <code>&quot;&gt;&quot;</code> 更细）</td></tr><tr><td><code>6</code></td><td>正三角（比 <code>&quot;^&quot;</code> 更细）</td></tr><tr><td><code>7</code></td><td>倒三角（比 <code>&quot;v&quot;</code> 更细）</td></tr><tr><td><code>8</code></td><td>左三角（比 <code>&quot;&lt;&quot;</code> 更细，靠左显示）</td></tr><tr><td><code>9</code></td><td>右三角（比 <code>&quot;&gt;&quot;</code> 更细，靠右显示）</td></tr><tr><td><code>10</code></td><td>正三角（比 <code>&quot;^&quot;</code> 更细，靠上显示）</td></tr><tr><td><code>11</code></td><td>倒三角（比 <code>&quot;v&quot;</code> 更细，靠下显示）</td></tr><tr><td><code>&quot;None&quot;</code> / <code>&quot; &quot;</code> / <code>&quot;&quot;</code></td><td>无样式</td></tr><tr><td><code>'$...$'</code></td><td>支持 LaTeX 数学公式，表达式用美元符号包围起来</td></tr></tbody></table><h2><span id="2x00-jian-dan-shi-li"><font color="#FF0000">【2x00】简单示例</font></span></h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltx = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>)y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])plt.scatter(x, y)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/018/01.png" alt="01"></p><h2><span id="3x00-duo-tiao-shu-ju"><font color="#FF0000">【3x00】多条数据</font></span></h2><p>绘制多条数据，设置不同数据，然后多次调用 <code>plt.scatter()</code> 函数即可，不同数据的线条颜色会不同，系统随机，可单独指定不同颜色。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">1</span>)y1 = np.sin(<span class="hljs-number">3</span>*x)/xy2 = np.sin(<span class="hljs-number">2</span>*x)/xy3 = np.sin(<span class="hljs-number">1</span>*x)/xplt.title(<span class="hljs-string">&#x27;多数据散点图示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.scatter(x, y1)plt.scatter(x, y2)plt.scatter(x, y3)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/018/02.png" alt="02"></p><h2><span id="4x00-she-zhi-yan-se-yang-shi-tu-li"><font color="#FF0000">【4x00】设置颜色 / 样式 / 图例</font></span></h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">1</span>)y1 = np.sin(<span class="hljs-number">3</span>*x)/xy2 = np.sin(<span class="hljs-number">2</span>*x)/xy3 = np.sin(<span class="hljs-number">1</span>*x)/xplt.title(<span class="hljs-string">&#x27;散点图自定义样式示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.scatter(x, y1, color=<span class="hljs-string">&#x27;g&#x27;</span>, s=<span class="hljs-number">30</span>, label=<span class="hljs-string">&#x27;(x, y1)&#x27;</span>)              <span class="hljs-comment"># 默认绿色样式</span>plt.scatter(x, y2, color=<span class="hljs-string">&#x27;r&#x27;</span>, s=<span class="hljs-number">40</span>, marker=<span class="hljs-string">&#x27;d&#x27;</span>, label=<span class="hljs-string">&#x27;(x, y2)&#x27;</span>)  <span class="hljs-comment"># 红色菱形</span>plt.scatter(x, y3, color=<span class="hljs-string">&#x27;b&#x27;</span>, s=<span class="hljs-number">50</span>, marker=<span class="hljs-string">&#x27;2&#x27;</span>, label=<span class="hljs-string">&#x27;(x, y3)&#x27;</span>)  <span class="hljs-comment"># 蓝色正三叉星</span>plt.legend(framealpha=<span class="hljs-number">0</span>)    <span class="hljs-comment"># 显示图例，设置为全透明</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/018/03.png" alt="03"></p><h2><span id="5x00-zhi-ding-wei-zhi-xian-shi-wen-ben-zhu-shi"><font color="#FF0000">【5x00】指定位置显示文本注释</font></span></h2><p><code>matplotlib.pyplot.annotate()</code> 方法可以在指定位置显示文本注释，参数解释常见前文：<br><a href="https://itrhx.blog.csdn.net/article/details/105828049">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = [<span class="hljs-number">0.13</span>, <span class="hljs-number">0.22</span>, <span class="hljs-number">0.39</span>, <span class="hljs-number">0.59</span>, <span class="hljs-number">0.68</span>, <span class="hljs-number">0.74</span>, <span class="hljs-number">0.93</span>]y = [<span class="hljs-number">0.75</span>, <span class="hljs-number">0.34</span>, <span class="hljs-number">0.44</span>, <span class="hljs-number">0.52</span>, <span class="hljs-number">0.80</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">0.55</span>]plt.title(<span class="hljs-string">&#x27;散点图添加文本注释示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.xlim([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])       <span class="hljs-comment"># 设置 x 轴刻度的范围</span>plt.ylim([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])       <span class="hljs-comment"># 设置 y 轴刻度的范围</span>plt.scatter(x, y, marker=<span class="hljs-string">&#x27;o&#x27;</span>, s=<span class="hljs-number">50</span>)<span class="hljs-keyword">for</span> m, n <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x, y):    plt.annotate(<span class="hljs-string">&#x27;(%s,%s)&#x27;</span> % (m, n),                 xy=(m, n),                 xytext=(<span class="hljs-number">0</span>, -<span class="hljs-number">10</span>),                 textcoords=<span class="hljs-string">&#x27;offset points&#x27;</span>,                 ha=<span class="hljs-string">&#x27;center&#x27;</span>,      <span class="hljs-comment"># 点在注释文本的中心</span>                 va=<span class="hljs-string">&#x27;top&#x27;</span>)         <span class="hljs-comment"># 点在注释文本的上方</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/018/04.png" alt="04"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105914929</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="6x00-sui-ji-shu-ju-san-dian-tu"><font color="#FF0000">【6x00】随机数据散点图</font></span></h2><p>随机数据可以用 numpy 的 random 模块来实现。</p><p><code>numpy.random.rand(d0, d1, …, dn)</code>：根据给定维度生成 [0,1) 之间的数据。</p><p><code>numpy.random.randn(d0, d1, …, dn)</code> ：返回一个或一组具有标准正态分布的样本。</p><p><code>numpy.random.randint(low, high, size)</code>：返回随机整数，范围区间为 [low,high），size 为数组维度大小</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]N = <span class="hljs-number">1000</span>x = np.random.randn(N)y = np.random.randn(N)plt.title(<span class="hljs-string">&#x27;散点图随机数据示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.scatter(x, y, alpha=<span class="hljs-number">0.5</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/018/05.png" alt="05"></p><h2><span id="7x00-sui-ji-yan-se-yu-se-tiao"><font color="#FF0000">【7x00】随机颜色与色条</font></span></h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]N = <span class="hljs-number">1000</span>x = np.random.randn(N)y = np.random.randn(N)color = np.random.rand(N)size = np.random.rand(N) * <span class="hljs-number">1000</span>plt.figure(figsize=(<span class="hljs-number">8.4</span>, <span class="hljs-number">5.8</span>))    <span class="hljs-comment"># 设置画布大小 840x580</span>plt.title(<span class="hljs-string">&#x27;散点图随机大小颜色示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.scatter(x, y, c=color, s=size, alpha=<span class="hljs-number">0.5</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/018/06.png" alt="06"></p><p>可以用 <code>pyplot.colorbar()</code> 方法绘制颜色对照条。</p><p>基本语法：<code>matplotlib.pyplot.colorbar([mappable=None, cax=None, ax=None, **kw])</code></p><p>部分参数解释如下表，其他参数，如长度，宽度等请参考<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.colorbar.html">官方文档</a>。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>mappable</td><td>要设置色条的图像对象，该参数对于 <code>Figure.colorbar</code> 方法是必需的，但对于 <code>pyplot.colorbar</code> 函数是可选的</td></tr><tr><td>cax</td><td>可选项，要绘制色条的轴</td></tr><tr><td>ax</td><td>可选项，设置色条的显示位置，通常在一个画布上有多个子图时使用</td></tr><tr><td>**kw</td><td>可选项，其他关键字参数，参考<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.colorbar.html">官方文档</a></td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]N = <span class="hljs-number">1000</span>x = np.random.randn(N)y = np.random.randn(N)color = np.random.rand(N)size = np.random.rand(N) * <span class="hljs-number">1000</span>plt.figure(figsize=(<span class="hljs-number">8.4</span>, <span class="hljs-number">5.8</span>))plt.title(<span class="hljs-string">&#x27;散点图颜色对照条示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.scatter(x, y, c=color, s=size, alpha=<span class="hljs-number">0.5</span>)plt.colorbar()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/018/07.png" alt="07"></p><h2><span id="8x00-bu-tong-tu-xiang-zhi-jian-de-ceng-ji-diao-zheng"><font color="#FF0000">【8x00】不同图像之间的层级调整</font></span></h2><p><code>zorder</code> 参数用于设置不同图像之间的层级关系，数字越大，所处的层级越大，即显示越靠上。</p><p>未设置 <code>zorder</code> 参数前：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x1 = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.01</span>)y1 = np.sin(<span class="hljs-number">3</span>*x1)/x1x2 = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">1</span>)y2 = np.sin(<span class="hljs-number">3</span>*x2)/x2plt.title(<span class="hljs-string">&#x27;不同图像之间层级调整示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.plot(x1, y1, c=<span class="hljs-string">&#x27;b&#x27;</span>, linewidth=<span class="hljs-number">3.5</span>, label=<span class="hljs-string">&#x27;线性图&#x27;</span>)plt.scatter(x2, y2, c=<span class="hljs-string">&#x27;r&#x27;</span>, s=<span class="hljs-number">40</span>, label=<span class="hljs-string">&#x27;散点图&#x27;</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/018/08.png" alt="08"></p><p>设置 <code>zorder</code> 参数后：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x1 = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.01</span>)y1 = np.sin(<span class="hljs-number">3</span>*x1)/x1x2 = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">1</span>)y2 = np.sin(<span class="hljs-number">3</span>*x2)/x2plt.title(<span class="hljs-string">&#x27;不同图像之间层级调整示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.plot(x1, y1, zorder=<span class="hljs-number">1</span>, c=<span class="hljs-string">&#x27;b&#x27;</span>, linewidth=<span class="hljs-number">3.5</span>, label=<span class="hljs-string">&#x27;线性图&#x27;</span>)plt.scatter(x2, y2, zorder=<span class="hljs-number">2</span>, c=<span class="hljs-string">&#x27;r&#x27;</span>, s=<span class="hljs-number">40</span>, label=<span class="hljs-string">&#x27;散点图&#x27;</span>)plt.legend()plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/018/09.png" alt="09"></p><h2><span id="9x00-kuang-xuan-bu-fen-shu-ju"><font color="#FF0000">【9x00】框选部分数据</font></span></h2><p>有时候我们希望能够框选一部分数据来强调其重要性，<code>matplotlib.patches.Polygon()</code> 方法的作用是生成不规则的多边形补丁，<code>matplotlib.patches</code> 还有另外的方法可以生成矩形、圆形等其他图形，具体参见前面的文章<a href="https://itrhx.blog.csdn.net/article/details/105828143">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a>，生成补丁之后，通过 <code>axes.add_patch()</code> 方法将其添加到绘图区（axes）即可。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> matplotlib.patches <span class="hljs-keyword">as</span> mpathesplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]plt.figure(figsize=(<span class="hljs-number">8.4</span>, <span class="hljs-number">5.8</span>))x1 = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">10</span>)y1 = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">100</span>)x2 = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">500</span>, <span class="hljs-number">10</span>)y2 = np.random.randint(<span class="hljs-number">200</span>, <span class="hljs-number">800</span>, <span class="hljs-number">50</span>)x3 = np.random.randint(<span class="hljs-number">50</span>, <span class="hljs-number">800</span>, <span class="hljs-number">80</span>)y3 = np.random.randint(<span class="hljs-number">50</span>, <span class="hljs-number">800</span>, <span class="hljs-number">80</span>)x4 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">350</span>, <span class="hljs-number">500</span>, <span class="hljs-number">450</span>, <span class="hljs-number">367</span>, <span class="hljs-number">420</span>, <span class="hljs-number">490</span>])y4 = np.array([<span class="hljs-number">267</span>, <span class="hljs-number">800</span>, <span class="hljs-number">453</span>, <span class="hljs-number">500</span>, <span class="hljs-number">600</span>, <span class="hljs-number">420</span>, <span class="hljs-number">380</span>, <span class="hljs-number">503</span>, <span class="hljs-number">390</span>, <span class="hljs-number">600</span>])plt.title(<span class="hljs-string">&#x27;散点图数据框选示例&#x27;</span>, fontsize=<span class="hljs-number">15</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>, fontsize=<span class="hljs-number">15</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>, fontsize=<span class="hljs-number">15</span>)plt.scatter(x1, y1, c=<span class="hljs-string">&#x27;r&#x27;</span>, s=<span class="hljs-number">50</span>, alpha=<span class="hljs-number">0.7</span>, label=<span class="hljs-string">&#x27;RED&#x27;</span>)plt.scatter(x2, y2, c=<span class="hljs-string">&#x27;b&#x27;</span>, s=<span class="hljs-number">100</span>, alpha=<span class="hljs-number">0.7</span>, label=<span class="hljs-string">&#x27;BLUE&#x27;</span>)plt.scatter(x3, y3, c=<span class="hljs-string">&#x27;g&#x27;</span>, s=<span class="hljs-number">150</span>, alpha=<span class="hljs-number">0.7</span>, label=<span class="hljs-string">&#x27;GREEN&#x27;</span>)plt.scatter(x4, y4, c=<span class="hljs-string">&#x27;y&#x27;</span>, s=<span class="hljs-number">250</span>, alpha=<span class="hljs-number">0.7</span>, label=<span class="hljs-string">&#x27;YELLOW&#x27;</span>)plt.legend(loc=<span class="hljs-string">&#x27;upper right&#x27;</span>, borderpad=<span class="hljs-number">1</span>, edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>, framealpha=<span class="hljs-number">1</span>, labelspacing=<span class="hljs-number">1</span>)Polygon_point = [[<span class="hljs-number">100</span>, <span class="hljs-number">800</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">267</span>], [<span class="hljs-number">500</span>, <span class="hljs-number">420</span>], [<span class="hljs-number">490</span>, <span class="hljs-number">600</span>]]        <span class="hljs-comment"># 多边形补丁的顶点坐标</span>polygon = mpathes.Polygon(Polygon_point, color=<span class="hljs-string">&#x27;#FF69B4&#x27;</span>, alpha=<span class="hljs-number">0.3</span>)  <span class="hljs-comment"># 绘制补丁，框选部分数据</span>ax = plt.gca()          <span class="hljs-comment"># 获取当前绘图区（gca = Get Current Axes）</span>ax.add_patch(polygon)   <span class="hljs-comment"># 将补丁添加到当前绘图区</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/018/10.png" alt="10"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105914929</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</title>
      <link href="/article/017/"/>
      <url>/article/017/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-fang-fa-miao-shu-font"><font color="#FF0000">【1x00】方法描述</font></a></li><li><a href="#font-color-ff0000-2x00-ji-ben-shi-li-font"><font color="#FF0000">【2x00】基本示例</font></a></li><li><a href="#font-color-ff0000-3x00-duo-tiao-shu-ju-font"><font color="#FF0000">【3x00】多条数据</font></a></li><li><a href="#font-color-ff0000-4x00-she-zhi-yan-se-yang-shi-tu-li-font"><font color="#FF0000">【4x00】设置颜色 / 样式 / 图例</font></a></li><li><a href="#font-color-ff0000-5x00-she-zhi-ke-du-font"><font color="#FF0000">【5x00】设置刻度</font></a></li><li><a href="#font-color-ff0000-6x00-yin-cang-hua-bu-bian-kuang-font"><font color="#FF0000">【6x00】隐藏画布边框</font></a></li><li><a href="#font-color-ff0000-7x00-yi-dong-zuo-biao-zhou-font"><font color="#FF0000">【7x00】移动坐标轴</font></a></li><li><a href="#font-color-ff0000-8x00-zhi-ding-wei-zhi-xian-shi-wen-ben-font"><font color="#FF0000">【8x00】指定位置显示文本</font></a></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105839855</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-fang-fa-miao-shu"><font color="#FF0000">【1x00】方法描述</font></span></h2><p><code>matplotlib.pyplot.plot()</code> 函数可以用于绘制线性图。</p><p>本文用到的其他图像属性可参考前面的两篇文章：</p><p><a href="https://itrhx.blog.csdn.net/article/details/105828049">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a><br><a href="https://itrhx.blog.csdn.net/article/details/105828143">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图等基本图像属性》</a></p><p>基本语法：<code>matplotlib.pyplot.plot(x, y[, fmt, \*\*kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>x 轴数据，数组类型或者标量，x 值是可选的，默认为 <code>range(len(y))</code>，通常为一维数组</td></tr><tr><td>y</td><td>y 轴数据，数组类型或者标量，通常为一维数组</td></tr><tr><td>fmt</td><td>str 类型，格式字符串，由标记、线条和颜色部分组成<br><code>fmt = '[marker][line][color]'</code>，例如 <code>ro</code> 表示红色圆圈，三个参数的取值见后表</td></tr><tr><td>**kwargs</td><td>可选项，其他 <a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D">Line2D</a> 属性，常用属性见下表</td></tr></tbody></table><p>部分常见 Line2D 属性如下表，完整属性参见<a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D">官方文档</a>。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>alpha</td><td>线条透明度，float 类型，取值范围：<code>[0, 1]</code>，默认为 1.0，即不透明</td></tr><tr><td>antialiased / aa</td><td>是否使用抗锯齿渲染，默认为 True</td></tr><tr><td>color / c</td><td>线条颜色，支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html">Color Demo</a></td></tr><tr><td>linestyle / ls</td><td>线条样式：<code>'-'</code> or <code>'solid'</code>, <code>'--'</code> or <code>'dashed'</code>, <code>'-.'</code> or <code>'dashdot'</code> <br> <code>':'</code> or <code>'dotted'</code>, <code>'none'</code> or <code>' '</code> or <code>''</code></td></tr><tr><td>linewidth / lw</td><td>线条宽度，float 类型，默认 0.8</td></tr><tr><td>markeredgecolor / mec</td><td>marker 标记的边缘颜色</td></tr><tr><td>markeredgewidth / mew</td><td>marker 标记的边缘宽度</td></tr><tr><td>markerfacecolor / mfc</td><td>marker 标记的颜色</td></tr><tr><td>markerfacecoloralt / mfcalt</td><td>marker 标记的备用颜色</td></tr><tr><td>markersize / ms</td><td>marker 标记的大小</td></tr></tbody></table><p>fmt 中 <code>marker</code>、<code>line</code>、<code>color</code> 三个参数的取值：</p><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">marker：线条标记样式（线条上每个数据点的样式）</font></strong></td></tr></table><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>'.'</code></td><td>点标记（point marker）</td></tr><tr><td><code>','</code></td><td>像素点标记（pixel marker）</td></tr><tr><td><code>'o'</code></td><td>圆圈标记（circle marker）</td></tr><tr><td><code>'v'</code></td><td>下三角标记（triangle_down marker）</td></tr><tr><td><code>'^'</code></td><td>上三角标记（triangle_up marker）</td></tr><tr><td><code>'&lt;'</code></td><td>左三角标记（triangle_left marker）</td></tr><tr><td><code>'&gt;'</code></td><td>右三角标记（triangle_right marker）</td></tr><tr><td><code>'1'</code></td><td>下三叉星标记（tri_down marker）</td></tr><tr><td><code>'2'</code></td><td>上三叉星标记（tri_up marker）</td></tr><tr><td><code>'3'</code></td><td>左三叉星标记（tri_left marker）</td></tr><tr><td><code>'4'</code></td><td>右三叉星标记（tri_right marker）</td></tr><tr><td><code>'s'</code></td><td>正方形标记（square marker）</td></tr><tr><td><code>'p'</code></td><td>五角形标记（pentagon marker）</td></tr><tr><td><code>'*'</code></td><td>星号标记（star marker）</td></tr><tr><td><code>'h'</code></td><td>六边形标记（hexagon1 marker）</td></tr><tr><td><code>'H'</code></td><td>六边形标记（hexagon2 marker）</td></tr><tr><td><code>'+'</code></td><td>加号标记（plus marker）</td></tr><tr><td><code>'x'</code></td><td>X 号标记（x marker）</td></tr><tr><td><code>'D'</code></td><td>菱形标记（diamond marker）</td></tr><tr><td><code>'d'</code></td><td>细菱形标记（thin_diamond marker）</td></tr><tr><td>`’</td><td>'`</td></tr><tr><td><code>'_'</code></td><td>水平线标记（hline marker）</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">line：线条样式</font></strong></td></tr></table><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>'-'</code></td><td>实线样式（solid line style）</td></tr><tr><td><code>'--'</code></td><td>虚线样式（dashed line style）</td></tr><tr><td><code>'-.'</code></td><td>点划线样式（dash-dot line style）</td></tr><tr><td><code>':'</code></td><td>点样式（dotted line style）</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">color：线条颜色，支持英文颜色名称及其简写、十六进制颜色码等</font></strong></td></tr></table><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>'b'</code></td><td>蓝色（blue）</td></tr><tr><td><code>'g'</code></td><td>绿色（green）</td></tr><tr><td><code>'r'</code></td><td>红色（red）</td></tr><tr><td><code>'c'</code></td><td>青色（cyan）</td></tr><tr><td><code>'m'</code></td><td>品红（magenta）</td></tr><tr><td><code>'y'</code></td><td>黄色（yellow）</td></tr><tr><td><code>'k'</code></td><td>黑色（black）</td></tr><tr><td><code>'w'</code></td><td>白色（white）</td></tr></tbody></table><p>fmt 举例：</p><pre><code class="hljs powershell"><span class="hljs-string">&#x27;b&#x27;</span>    <span class="hljs-comment"># 默认形状的蓝色标记</span><span class="hljs-string">&#x27;or&#x27;</span>   <span class="hljs-comment"># 红圈</span><span class="hljs-string">&#x27;-g&#x27;</span>   <span class="hljs-comment"># 绿色实线</span><span class="hljs-string">&#x27;--&#x27;</span>   <span class="hljs-comment"># 默认颜色的虚线</span><span class="hljs-string">&#x27;^k:&#x27;</span>  <span class="hljs-comment"># 黑色三角形标记，由虚线连接</span></code></pre><h2><span id="2x00-ji-ben-shi-li"><font color="#FF0000">【2x00】基本示例</font></span></h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]  <span class="hljs-comment"># 设置显示中文</span>x = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.01</span>)y = np.sin(<span class="hljs-number">3</span>*x)/xplt.title(<span class="hljs-string">&#x27;线性图示例&#x27;</span>)   <span class="hljs-comment"># 设置标题</span>plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)       <span class="hljs-comment"># 设置 x 轴标签</span>plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)       <span class="hljs-comment"># 设置 y 轴标签</span>plt.plot(x, y)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/017/01.png" alt="01"></p><h2><span id="3x00-duo-tiao-shu-ju"><font color="#FF0000">【3x00】多条数据</font></span></h2><p>绘制多条数据，设置不同数据，然后多次调用 <code>plt.plot()</code> 函数即可，不同数据的线条颜色会不同，系统随机，可单独指定不同颜色。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.01</span>)y1 = np.sin(<span class="hljs-number">3</span>*x)/xy2 = np.sin(<span class="hljs-number">2</span>*x)/xy3 = np.sin(<span class="hljs-number">1</span>*x)/xplt.title(<span class="hljs-string">&#x27;多数据线性图示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.plot(x, y1)plt.plot(x, y2)plt.plot(x, y3)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/017/02.png" alt="02"></p><h2><span id="4x00-she-zhi-yan-se-yang-shi-tu-li"><font color="#FF0000">【4x00】设置颜色 / 样式 / 图例</font></span></h2><p>设置线条颜色样式等属性直接在 <code>plot()</code> 函数里面添加相应参数即可，设置图例则需要调用 <code>legend()</code> 方法。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x1 = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.01</span>)y1 = np.sin(<span class="hljs-number">3</span>*x1)/x1y2 = np.sin(<span class="hljs-number">2</span>*x1)/x1x3 = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>)y3 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2.4</span>, -<span class="hljs-number">0.2</span>, <span class="hljs-number">1.7</span>])plt.title(<span class="hljs-string">&#x27;线性图自定义样式示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.plot(x1, y1, <span class="hljs-string">&#x27;--r&#x27;</span>, label=<span class="hljs-string">&#x27;x1, y1&#x27;</span>)                               <span class="hljs-comment"># 线条样式为 --，颜色为 r（红色）</span>plt.plot(x1, y2, color=<span class="hljs-string">&#x27;green&#x27;</span>, label=<span class="hljs-string">&#x27;x1, y2&#x27;</span>)                       <span class="hljs-comment"># 样式默认，颜色为绿色</span>plt.plot(x3, y3, marker=<span class="hljs-string">&#x27;o&#x27;</span>, mfc=<span class="hljs-string">&#x27;r&#x27;</span>, linestyle=<span class="hljs-string">&#x27;:&#x27;</span>, label=<span class="hljs-string">&#x27;x3, y3&#x27;</span>)  <span class="hljs-comment"># 标记样式为 o，颜色为 r（红色），线条样式为 :</span>plt.legend(edgecolor=<span class="hljs-string">&#x27;#87A3CC&#x27;</span>, facecolor=<span class="hljs-string">&#x27;#F5F5F5&#x27;</span>)                  <span class="hljs-comment"># 图例</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/017/03.png" alt="03"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105839855</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="5x00-she-zhi-ke-du"><font color="#FF0000">【5x00】设置刻度</font></span></h2><p>调用 <code>xticks()</code> 和 <code>yticks()</code> 函数可以对坐标刻度进行自定义，该函数接收两个参数，第一个参数表示要显示的刻度位置，第二个参数表示在对应刻度线上要显示的标签信息，标签信息支持 LeTeX 数学公式，使用时要用美元符号 <code>$</code> 包围起来。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.01</span>)y1 = np.sin(<span class="hljs-number">3</span>*x)/xy2 = np.sin(<span class="hljs-number">2</span>*x)/xy3 = np.sin(<span class="hljs-number">1</span>*x)/xplt.title(<span class="hljs-string">&#x27;线性图设置刻度示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.plot(x, y1, <span class="hljs-string">&#x27;--r&#x27;</span>, label=<span class="hljs-string">&#x27;sin(3*x)/x&#x27;</span>)plt.plot(x, y2, color=<span class="hljs-string">&#x27;green&#x27;</span>, linestyle=<span class="hljs-string">&#x27;:&#x27;</span>, label=<span class="hljs-string">&#x27;sin(2*x)/x&#x27;</span>)plt.plot(x, y3, label=<span class="hljs-string">&#x27;sin(1*x)/x&#x27;</span>)plt.legend(edgecolor=<span class="hljs-string">&#x27;#87A3CC&#x27;</span>, facecolor=<span class="hljs-string">&#x27;#F5F5F5&#x27;</span>)plt.xticks((-<span class="hljs-number">2</span>*np.pi, -np.pi, <span class="hljs-number">0</span>, np.pi, <span class="hljs-number">2</span>*np.pi), (<span class="hljs-string">r&#x27;$-2\pi$&#x27;</span>, <span class="hljs-string">r&#x27;$-\pi$&#x27;</span>, <span class="hljs-string">&#x27;$0$&#x27;</span>, <span class="hljs-string">r&#x27;$\pi$&#x27;</span>, <span class="hljs-string">r&#x27;$2\pi$&#x27;</span>))plt.yticks((-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/017/04.png" alt="04"></p><h2><span id="6x00-yin-cang-hua-bu-bian-kuang"><font color="#FF0000">【6x00】隐藏画布边框</font></span></h2><p>Matplotlib 所绘制的图表中的每个绘图元素，例如线条 Line2D、文字 Text、刻度等在内存中都有一个对象与之对应。</p><p><code>matplotlib.pyplot.gca()</code> 函数用于获取当前的绘图区 <code>Axes</code>（Get Current Axes）</p><p><code>matplotlib.pyplot.gcf()</code> 函数用于获取当前的画布 <code>Figure</code>（Get Current Figure）</p><p>例如：<code>matplotlib.pyplot.plot()</code> 实际上会通过 <code>matplotlib.pyplot.gca()</code> 获得当前的 <code>Axes</code> 对象 <code>ax</code>，然后再调用 <code>ax.plot()</code> 方法实现真正的绘图。我们可以通过这种方法来实现画布边框的隐藏和坐标轴的移动。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.01</span>)y1 = np.sin(<span class="hljs-number">3</span>*x)/xy2 = np.sin(<span class="hljs-number">2</span>*x)/xy3 = np.sin(<span class="hljs-number">1</span>*x)/xplt.title(<span class="hljs-string">&#x27;线性图隐藏画布边框示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.plot(x, y1, <span class="hljs-string">&#x27;--r&#x27;</span>, label=<span class="hljs-string">&#x27;sin(3*x)/x&#x27;</span>)plt.plot(x, y2, color=<span class="hljs-string">&#x27;green&#x27;</span>, linestyle=<span class="hljs-string">&#x27;:&#x27;</span>, label=<span class="hljs-string">&#x27;sin(2*x)/x&#x27;</span>)plt.plot(x, y3, label=<span class="hljs-string">&#x27;sin(1*x)/x&#x27;</span>)plt.legend(edgecolor=<span class="hljs-string">&#x27;#87A3CC&#x27;</span>, facecolor=<span class="hljs-string">&#x27;#F5F5F5&#x27;</span>)plt.xticks((-<span class="hljs-number">2</span>*np.pi, -np.pi, <span class="hljs-number">0</span>, np.pi, <span class="hljs-number">2</span>*np.pi), (<span class="hljs-string">r&#x27;$-2\pi$&#x27;</span>, <span class="hljs-string">r&#x27;$-\pi$&#x27;</span>, <span class="hljs-string">&#x27;$0$&#x27;</span>, <span class="hljs-string">r&#x27;$\pi$&#x27;</span>, <span class="hljs-string">r&#x27;$2\pi$&#x27;</span>))plt.yticks((-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))ax = plt.gca()                          <span class="hljs-comment"># 获取当前的画布, gca = get current axes</span>ax.spines[<span class="hljs-string">&#x27;right&#x27;</span>].set_visible(<span class="hljs-literal">False</span>)   <span class="hljs-comment"># 获取绘图区的轴对象（spines），设置右边框不显示</span>ax.spines[<span class="hljs-string">&#x27;top&#x27;</span>].set_visible(<span class="hljs-literal">False</span>)     <span class="hljs-comment"># 获取绘图区的轴对象（spines），设置上边框不显示</span><span class="hljs-comment"># ax.spines[&#x27;right&#x27;].set_color(&#x27;none&#x27;)  # 设置颜色为 none，效果与上面的一致</span><span class="hljs-comment"># ax.spines[&#x27;top&#x27;].set_color(&#x27;none&#x27;)</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/017/05.png" alt="05"></p><h2><span id="7x00-yi-dong-zuo-biao-zhou"><font color="#FF0000">【7x00】移动坐标轴</font></span></h2><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.01</span>)y1 = np.sin(<span class="hljs-number">3</span>*x)/xy2 = np.sin(<span class="hljs-number">2</span>*x)/xy3 = np.sin(<span class="hljs-number">1</span>*x)/xplt.title(<span class="hljs-string">&#x27;线性图移动坐标轴示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.plot(x, y1, <span class="hljs-string">&#x27;--r&#x27;</span>, label=<span class="hljs-string">&#x27;sin(3*x)/x&#x27;</span>)plt.plot(x, y2, color=<span class="hljs-string">&#x27;green&#x27;</span>, linestyle=<span class="hljs-string">&#x27;:&#x27;</span>, label=<span class="hljs-string">&#x27;sin(2*x)/x&#x27;</span>)plt.plot(x, y3, label=<span class="hljs-string">&#x27;sin(1*x)/x&#x27;</span>)plt.legend(edgecolor=<span class="hljs-string">&#x27;#87A3CC&#x27;</span>, facecolor=<span class="hljs-string">&#x27;#F5F5F5&#x27;</span>)plt.xticks((-<span class="hljs-number">2</span>*np.pi, -np.pi, <span class="hljs-number">0</span>, np.pi, <span class="hljs-number">2</span>*np.pi), (<span class="hljs-string">r&#x27;$-2\pi$&#x27;</span>, <span class="hljs-string">r&#x27;$-\pi$&#x27;</span>, <span class="hljs-string">&#x27;$0$&#x27;</span>, <span class="hljs-string">r&#x27;$\pi$&#x27;</span>, <span class="hljs-string">r&#x27;$2\pi$&#x27;</span>))plt.yticks((-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))ax = plt.gca()                          <span class="hljs-comment"># 获取当前的画布, gca = get current axes</span>ax.spines[<span class="hljs-string">&#x27;right&#x27;</span>].set_visible(<span class="hljs-literal">False</span>)   <span class="hljs-comment"># 获取绘图区的轴对象（spines），设置右边框不显示</span>ax.spines[<span class="hljs-string">&#x27;top&#x27;</span>].set_visible(<span class="hljs-literal">False</span>)     <span class="hljs-comment"># 获取绘图区的轴对象（spines），设置上边框不显示</span><span class="hljs-comment"># ax.spines[&#x27;right&#x27;].set_color(&#x27;none&#x27;)  # 设置颜色为 none，效果与上面的一致</span><span class="hljs-comment"># ax.spines[&#x27;top&#x27;].set_color(&#x27;none&#x27;)</span>ax.spines[<span class="hljs-string">&#x27;left&#x27;</span>].set_position((<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-number">0</span>))    <span class="hljs-comment"># 设置两个坐标轴在（0, 0）位置相交</span>ax.spines[<span class="hljs-string">&#x27;bottom&#x27;</span>].set_position((<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-number">0</span>))ax.xaxis.set_ticks_position(<span class="hljs-string">&#x27;bottom&#x27;</span>)          <span class="hljs-comment"># 设置 x 坐标轴标签的位置</span>ax.yaxis.set_ticks_position(<span class="hljs-string">&#x27;left&#x27;</span>)            <span class="hljs-comment"># 设置 y 坐标轴标签的位置</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/017/06.png" alt="06"></p><h2><span id="8x00-zhi-ding-wei-zhi-xian-shi-wen-ben"><font color="#FF0000">【8x00】指定位置显示文本</font></span></h2><p><code>matplotlib.pyplot.annotate()</code> 方法可以在指定坐标点添加文本或 LaTeX 描述，也可以在其他位置添加描述后，使用箭头指向某个坐标点。</p><p>基本语法：<code>matplotlib.pyplot.annotate(text, xy, xytext, xycoords, textcoords, ha, va, arrowprops, \*\*kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>str 类型，注释的文本</td></tr><tr><td>xy</td><td>被注释的坐标点，格式：<code>(x, y)</code></td></tr><tr><td>xytext</td><td>注释文本的坐标点，格式：<code>(x, y)</code>，默认与 xy 相同</td></tr><tr><td>xycoords</td><td>被注释的坐标点的参考系，取值参见<font color="#FF0000"><strong>表一</strong></font>，默认为 ‘data’</td></tr><tr><td>textcoords</td><td>注释文本的坐标点的参考系，取值参见<font color="#FF0000"><strong>表二</strong></font>，默认为 xycoords 的值</td></tr><tr><td>ha</td><td>注释点在注释文本的左边、右边或中间（<code>left</code>、<code>right</code>、<code>center</code>）</td></tr><tr><td>va</td><td>注释点在注释文本的上边、下边、中间或基线 （<code>top</code>、<code>bottom</code>、<code>center</code>、<code>baseline</code>）</td></tr><tr><td>arrowprops</td><td>dict 字典类型，箭头的样式<br>如果 arrowprops 不包含键 arrowstyle，则允许的键参见<font color="#FF0000"><strong>表三</strong></font><br>如果 arrowprops 包含键 arrowstyle，则允许的键参见<font color="#FF0000"><strong>表四</strong></font></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表一：xycoords 取值类型</font></strong></td></tr></table><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>‘figure points’</td><td>以画布左下角为参考，单位为点数</td></tr><tr><td>‘figure pixels’</td><td>以画布左下角为参考，单位为像素</td></tr><tr><td>‘figure fraction’</td><td>以画布左下角为参考，单位为百分比</td></tr><tr><td>‘axes points’</td><td>以绘图区左下角为参考，单位为点数</td></tr><tr><td>‘axes pixels’</td><td>以绘图区左下角为参考，单位为像素</td></tr><tr><td>‘axes fraction’</td><td>以绘图区左下角为参考，单位为百分比</td></tr><tr><td>‘data’</td><td>使用被注释对象的坐标系，即数据的 x, y 轴（默认）</td></tr><tr><td>‘polar’</td><td>使用（θ，r）形式的极坐标系</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表二：textcoords 取值类型</font></strong></td></tr></table><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>‘figure points’</td><td>以画布左下角为参考，单位为点数</td></tr><tr><td>‘figure pixels’</td><td>以画布左下角为参考，单位为像素</td></tr><tr><td>‘figure fraction’</td><td>以画布左下角为参考，单位为百分比</td></tr><tr><td>‘axes points’</td><td>以绘图区左下角为参考，单位为点数</td></tr><tr><td>‘axes pixels’</td><td>以绘图区左下角为参考，单位为像素</td></tr><tr><td>‘axes fraction’</td><td>以绘图区左下角为参考，单位为百分比</td></tr><tr><td>‘data’</td><td>使用被注释对象的坐标系，即数据的 x, y 轴</td></tr><tr><td>‘polar’</td><td>使用（θ，r）形式的极坐标系</td></tr><tr><td>‘offset points’</td><td>相对于被注释点的坐标 xy 的偏移量，单位是点</td></tr><tr><td>‘offset pixels’</td><td>相对于被注释点的坐标 xy 的偏移量，单位是像素</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表三：arrowprops 不包含键 arrowstyle 时的取值</font></strong></td></tr></table><table><thead><tr><th>键</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>箭头的宽度，以点为单位</td></tr><tr><td>headwidth</td><td>箭头底部的宽度，以点为单位</td></tr><tr><td>headlength</td><td>箭头的长度，以点为单位</td></tr><tr><td>shrink</td><td>箭头两端收缩占总长的百分比</td></tr><tr><td>?</td><td>其他 <a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.FancyArrowPatch.html#matplotlib.patches.FancyArrowPatch">matplotlib.patches.FancyArrowPatch</a> 中的关键字，部分常用关键字参见<font color="#FF0000"><strong>表五</strong></font></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表四：arrowprops 包含键 arrowstyle 时的取值</font></strong></td></tr></table><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td><code>'-'</code></td><td>None</td></tr><tr><td><code>'-&gt;'</code></td><td>head_length=0.4,head_width=0.2</td></tr><tr><td><code>'-['</code></td><td>widthB=1.0,lengthB=0.2,angleB=None</td></tr><tr><td><code>']-'</code></td><td>widthA=1.0, lengthA=0.2, angleA=None</td></tr><tr><td><code>]-[</code></td><td>widthA=1.0, lengthA=0.2, angleA=None, widthB=1.0, lengthB=0.2, angleB=None</td></tr><tr><td>`’</td><td>-</td></tr><tr><td>`'-</td><td>&gt;'`</td></tr><tr><td><code>'&lt;-'</code></td><td>head_length=0.4,head_width=0.2</td></tr><tr><td><code>'&lt;-&gt;'</code></td><td>head_length=0.4,head_width=0.2</td></tr><tr><td>`'&lt;</td><td>-'`</td></tr><tr><td>`'&lt;</td><td>-</td></tr><tr><td><code>'fancy'</code></td><td>head_length=0.4,head_width=0.4,tail_width=0.4</td></tr><tr><td><code>'simple'</code></td><td>head_length=0.5,head_width=0.5,tail_width=0.2</td></tr><tr><td><code>'wedge'</code></td><td>tail_width=0.3,shrink_factor=0.5</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表五：matplotlib.patches.FancyArrowPatch 常用的键</font></strong></td></tr></table><table><thead><tr><th>键</th><th>描述</th></tr></thead><tbody><tr><td>arrowstyle</td><td>箭头样式，取值参见<font color="#FF0000"><strong>表四</strong></font></td></tr><tr><td>connectionstyle</td><td>连接方式，默认为 <code>arc3</code>，有以下五种取值：<br><code>angle</code>：angleA=90, angleB=0, rad=0.0<br><code>angle3</code>：angleA=90, angleB=0<br><code>arc</code>：angleA=0, angleB=0, armA=None, armB=None, rad=0.0<br><code>arc3</code>：rad=0.0<br><code>bar</code>：armA=0.0, armB=0.0, fraction=0.3, angle=None<br>angle 为箭头旋转的角度，rad 为弧度</td></tr><tr><td>relpos</td><td>箭头起始点相对注释文本的位置，默认为 (0.5, 0.5)，即文本的中心<br>（0，0）表示左下角，（1，1）表示右上角</td></tr><tr><td>patchA</td><td>箭头起点处的图形，默认为文本的边框</td></tr><tr><td>patchB</td><td>箭头终点处的图形，默认为空</td></tr><tr><td>shrinkA</td><td>箭头起点的缩进点数，默认为2</td></tr><tr><td>shrinkB</td><td>箭头终点的缩进点数，默认为2</td></tr><tr><td>？</td><td>其他键值，参见官方文档 <a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.PathPatch.html#matplotlib.patches.PathPatch">matplotlib.patches.PathPatch</a></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">connectionstyle 样式举例</font></strong></td></tr></table><p><img src="https://cdn.itbob.cn/img/article/017/07.png" alt="07"></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.01</span>)y1 = np.sin(<span class="hljs-number">3</span>*x)/xy2 = np.sin(<span class="hljs-number">2</span>*x)/xy3 = np.sin(<span class="hljs-number">1</span>*x)/xplt.title(<span class="hljs-string">&#x27;线性图显示文本注释示例&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;x 轴&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y 轴&#x27;</span>)plt.plot(x, y1, <span class="hljs-string">&#x27;--r&#x27;</span>, label=<span class="hljs-string">&#x27;sin(3*x)/x&#x27;</span>)plt.plot(x, y2, color=<span class="hljs-string">&#x27;green&#x27;</span>, linestyle=<span class="hljs-string">&#x27;:&#x27;</span>, label=<span class="hljs-string">&#x27;sin(2*x)/x&#x27;</span>)plt.plot(x, y3, label=<span class="hljs-string">&#x27;sin(1*x)/x&#x27;</span>)plt.legend(edgecolor=<span class="hljs-string">&#x27;#87A3CC&#x27;</span>, facecolor=<span class="hljs-string">&#x27;#F5F5F5&#x27;</span>)plt.xticks((-<span class="hljs-number">2</span>*np.pi, -np.pi, <span class="hljs-number">0</span>, np.pi, <span class="hljs-number">2</span>*np.pi), (<span class="hljs-string">r&#x27;$-2\pi$&#x27;</span>, <span class="hljs-string">r&#x27;$-\pi$&#x27;</span>, <span class="hljs-string">&#x27;$0$&#x27;</span>, <span class="hljs-string">r&#x27;$\pi$&#x27;</span>, <span class="hljs-string">r&#x27;$2\pi$&#x27;</span>))plt.yticks((-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))ax = plt.gca()                          <span class="hljs-comment"># 获取当前的画布, gca = get current axes</span>ax.spines[<span class="hljs-string">&#x27;right&#x27;</span>].set_visible(<span class="hljs-literal">False</span>)   <span class="hljs-comment"># 获取绘图区的轴对象（spines），设置右边框不显示</span>ax.spines[<span class="hljs-string">&#x27;top&#x27;</span>].set_visible(<span class="hljs-literal">False</span>)     <span class="hljs-comment"># 获取绘图区的轴对象（spines），设置上边框不显示</span><span class="hljs-comment"># ax.spines[&#x27;right&#x27;].set_color(&#x27;none&#x27;)  # 设置颜色为 none，效果与上面的一致</span><span class="hljs-comment"># ax.spines[&#x27;top&#x27;].set_color(&#x27;none&#x27;)</span>ax.spines[<span class="hljs-string">&#x27;left&#x27;</span>].set_position((<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-number">0</span>))    <span class="hljs-comment"># 设置两个坐标轴在（0, 0）位置相交</span>ax.spines[<span class="hljs-string">&#x27;bottom&#x27;</span>].set_position((<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-number">0</span>))ax.xaxis.set_ticks_position(<span class="hljs-string">&#x27;bottom&#x27;</span>)          <span class="hljs-comment"># 设置 x 坐标轴标签的位置</span>ax.yaxis.set_ticks_position(<span class="hljs-string">&#x27;left&#x27;</span>)            <span class="hljs-comment"># 设置 y 坐标轴标签的位置</span>plt.annotate(<span class="hljs-string">r&#x27;$\lim_&#123;x\to 0&#125;\frac&#123;\sin(x)&#125;&#123;x&#125;=1$&#x27;</span>,  <span class="hljs-comment"># 插入 LaTeX 表达式</span>             xy=[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],                              <span class="hljs-comment"># 被标记的坐标</span>             xycoords=<span class="hljs-string">&#x27;data&#x27;</span>,                        <span class="hljs-comment"># 被标记的坐标的参考系</span>             xytext=[<span class="hljs-number">30</span>, <span class="hljs-number">30</span>],                        <span class="hljs-comment"># 注释文本的坐标</span>             textcoords=<span class="hljs-string">&#x27;offset points&#x27;</span>,             <span class="hljs-comment"># 注释文本的坐标的参考系</span>             fontsize=<span class="hljs-number">16</span>,                            <span class="hljs-comment"># 字体大小</span>             arrowprops=<span class="hljs-built_in">dict</span>(arrowstyle=<span class="hljs-string">&quot;-&gt;&quot;</span>, connectionstyle=<span class="hljs-string">&quot;arc3, rad=.2&quot;</span>))  <span class="hljs-comment"># 箭头样式</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/017/08.png" alt="08"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105839855</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（三）：图例/LaTeX/刻度/子图/补丁等基本图像属性</title>
      <link href="/article/016/"/>
      <url>/article/016/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-she-zhi-tu-li-font"><font color="#FF0000">【1x00】设置图例</font></a><ul><li><a href="#font-color-1bc3fb-1x01-fang-fa-yi-zhi-ding-label-can-shu-font"><font color="#1BC3FB">【1x01】方法一：指定 label 参数</font></a></li><li><a href="#font-color-1bc3fb-1x02-fang-fa-er-shi-yong-set-label-fang-fa-font"><font color="#1BC3FB">【1x02】方法二：使用 set_label 方法</font></a></li><li><a href="#font-color-1bc3fb-1x03-fang-fa-san-zhi-jie-shi-yong-legend-fang-fa-font"><font color="#1BC3FB">【1x03】方法三：直接使用 legend 方法</font></a></li></ul></li><li><a href="#font-color-ff0000-2x00-shu-xue-gong-shi-latex-font"><font color="#FF0000">【2x00】数学公式 LaTeX</font></a></li><li><a href="#font-color-ff0000-3x00-diao-zheng-x-y-zhou-ke-du-he-fan-wei-font"><font color="#FF0000">【3x00】调整 x / y 轴刻度和范围</font></a></li><li><a href="#font-color-ff0000-4x00-hua-bu-bian-kuang-yu-zuo-biao-zhou-de-yi-dong-font"><font color="#FF0000">【4x00】画布边框与坐标轴的移动</font></a></li><li><a href="#font-color-ff0000-5x00-chuang-jian-zi-tu-font"><font color="#FF0000">【5x00】创建子图</font></a><ul><li><a href="#font-color-1bc3fb-5x01-fang-fa-yi-add-subplot-font"><font color="#1BC3FB">【5x01】方法一：add_subplot()</font></a></li><li><a href="#font-color-1bc3fb-5x02-fang-fa-er-pyplot-subplot-font"><font color="#1BC3FB">【5x02】方法二：pyplot.subplot()</font></a></li><li><a href="#font-color-1bc3fb-5x03-fang-fa-san-pyplot-subplots-font"><font color="#1BC3FB">【5x03】方法三：pyplot.subplots()</font></a></li></ul></li><li><a href="#font-color-ff0000-6x00-tian-chong-bu-ding-font"><font color="#FF0000">【6x00】填充补丁</font></a></li><li><a href="#font-color-ff0000-7x00-bao-cun-tu-xiang-font"><font color="#FF0000">【7x00】保存图像</font></a></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105828143</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-she-zhi-tu-li"><font color="#FF0000">【1x00】设置图例</font></span></h2><p><code>matplotlib.pyplot.legend()</code> 方法可以为图表设置图例。</p><p>基本语法：<code>matplotlib.pyplot.legend(\*args, \*\*kwargs)</code></p><p>部分常见参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>loc</td><td>图例在画布中的位置，默认为 best，其他取值：<br><code>best</code>, <code>upper right</code>, <code>upper left</code>, <code>lower left</code> <br> <code>lower right</code>, <code>right</code>, <code>center left</code>, <code>center right</code> <br> <code>lower center</code>, <code>upper center</code>, <code>center</code><br>也可以用数字 0 - 10 来表示上述位置</td></tr><tr><td>bbox_to_anchor</td><td>调整图例在画布中的位置，当 loc 达不到我们想要的效果时，就可以使用该参数<br>该参数接收一个二元数组 (x, y)，x 用于控制图例的左右移动，值越大越向右边移动<br>y 用于控制图例的上下移动，值越大，越向上移动</td></tr><tr><td>borderaxespad</td><td>图例距离轴之间的距离，float 类型，默认为 0.5</td></tr><tr><td>borderpad</td><td>图例边框空白区域大小，float 类型，默认为 0.4</td></tr><tr><td>columnspacing</td><td>图例列间距，float 类型，默认为 2.0</td></tr><tr><td>edgecolor</td><td>图例边缘线颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>facecolor</td><td>图例背景颜色，默认继承自 <code>axes.facecolor</code><br>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>fancybox</td><td>是否使用圆形框作为图例背景， 默认为 True</td></tr><tr><td>fontsize</td><td>图例字体大小，默认为 <code>medium</code>，<code>xx-small</code>, <code>x-small</code>, <code>small</code>, <code>medium</code> <br> <code>large</code>, <code>x-large</code>, <code>xx-large</code>, <code>smaller</code>, <code>larger</code><br>也可以使用数字来表示字体大小</td></tr><tr><td>framealpha</td><td>图例透明度，float 类型，默认为 0.8，取值范围：<code>[0, 1]</code></td></tr><tr><td>handleheight</td><td>图例的高度 ，float 类型，默认为 0.7</td></tr><tr><td>handlelength</td><td>图例的宽度，float 类型，默认为 2.0</td></tr><tr><td>handletextpad</td><td>图例和图例文本之间的水平距离，float 类型，默认为 0.8</td></tr><tr><td>labelspacing</td><td>不同图例之间的垂直距离，float 类型，默认为 0.5</td></tr><tr><td>shadow</td><td>是否给图例添加阴影效果，默认为 False</td></tr></tbody></table><h3><span id="1x01-fang-fa-yi-zhi-ding-label-can-shu"><font color="#1BC3FB">【1x01】方法一：指定 label 参数</font></span></h3><p>在画图的时候先指定 <code>label</code> 标签文本，再调用 <code>legend()</code> 方法即可。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)a = [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]plt.plot(a, b, label=<span class="hljs-string">&#x27;图例一&#x27;</span>)    <span class="hljs-comment"># 指定 a,b 数据的图例</span>plt.plot(x, y, label=<span class="hljs-string">&#x27;图例二&#x27;</span>)    <span class="hljs-comment"># 指定 x,y 数据的图例</span>plt.legend(loc=<span class="hljs-number">2</span>, edgecolor=<span class="hljs-string">&#x27;red&#x27;</span>, facecolor=<span class="hljs-string">&#x27;#F5F5F5&#x27;</span>)  <span class="hljs-comment"># 指定图例位置、边缘线条颜色和背景色</span>plt.show()</code></pre><h3><span id="1x02-fang-fa-er-shi-yong-set-label-fang-fa"><font color="#1BC3FB">【1x02】方法二：使用 set_label 方法</font></span></h3><p>在画图的时候先使用 <code>set_label()</code> 方法指定标签文本，再调用 <code>legend()</code> 方法即可。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)a = [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]line1, = plt.plot(a, b)line2, = plt.plot(x, y)line1.set_label(<span class="hljs-string">&#x27;图例一&#x27;</span>)    <span class="hljs-comment"># 指定 a,b 数据的图例</span>line2.set_label(<span class="hljs-string">&#x27;图例二&#x27;</span>)    <span class="hljs-comment"># 指定 x,y 数据的图例</span>plt.legend(loc=<span class="hljs-number">2</span>, edgecolor=<span class="hljs-string">&#x27;red&#x27;</span>, facecolor=<span class="hljs-string">&#x27;#F5F5F5&#x27;</span>)  <span class="hljs-comment"># 指定图例位置、边缘线条颜色和背景色</span>plt.show()</code></pre><h3><span id="1x03-fang-fa-san-zhi-jie-shi-yong-legend-fang-fa"><font color="#1BC3FB">【1x03】方法三：直接使用 legend 方法</font></span></h3><p>直接使用 <code>legend()</code> 方法来指定图例标签也可以达到同样效果，图例以列表或者元组形式储存，图例与绘制图形的顺序一一对应。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)a = [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]plt.plot(a, b)plt.plot(x, y)plt.legend([<span class="hljs-string">&#x27;图例一&#x27;</span>, <span class="hljs-string">&#x27;图例二&#x27;</span>], loc=<span class="hljs-number">2</span>, edgecolor=<span class="hljs-string">&#x27;red&#x27;</span>, facecolor=<span class="hljs-string">&#x27;#F5F5F5&#x27;</span>)plt.show()</code></pre><p>也可以使用两个元组，将绘制的图形和图例一一对应来储存：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)a = [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]line1, = plt.plot(a, b)line2, = plt.plot(x, y)plt.legend((line1, line2), (<span class="hljs-string">&#x27;图例一&#x27;</span>, <span class="hljs-string">&#x27;图例二&#x27;</span>), loc=<span class="hljs-number">2</span>, edgecolor=<span class="hljs-string">&#x27;red&#x27;</span>, facecolor=<span class="hljs-string">&#x27;#F5F5F5&#x27;</span>)plt.show()</code></pre><p>以上三种方法绘制的图形均一致：</p><p><img src="https://cdn.itbob.cn/img/article/016/01.png" alt="01"></p><h2><span id="2x00-shu-xue-gong-shi-latex"><font color="#FF0000">【2x00】数学公式 LaTeX</font></span></h2><p>LaTeX（LATEX，音译“拉泰赫”）是一种基于 TeX 的排版系统，常用于生成复杂表格和数学公式，Matplotlib 提供了自己的 TeX 表达式解析器，布局引擎和字体，布局引擎基于 Donald Knuth 的 TeX 布局算法改编。使用数学公式时用 <code>$</code> 将其包围起来即可。具体的符号与其对应的英文表示参见官方文档：<a href="https://matplotlib.org/tutorials/text/mathtext.html">https://matplotlib.org/tutorials/text/mathtext.html</a></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltt = np.arange(<span class="hljs-number">0.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)s = np.sin(<span class="hljs-number">2</span>*np.pi*t)plt.title(<span class="hljs-string">r&#x27;$\alpha_i &gt; \beta_i$&#x27;</span>, fontsize=<span class="hljs-number">20</span>)plt.text(<span class="hljs-number">1</span>, -<span class="hljs-number">0.6</span>, <span class="hljs-string">r&#x27;$\sum_&#123;i=0&#125;^\infty x_i$&#x27;</span>, fontsize=<span class="hljs-number">20</span>)plt.text(<span class="hljs-number">0.6</span>, <span class="hljs-number">0.6</span>, <span class="hljs-string">r&#x27;$\mathcal&#123;A&#125;\mathrm&#123;sin&#125;(2 \omega t)$&#x27;</span>, fontsize=<span class="hljs-number">20</span>)plt.xlabel(<span class="hljs-string">&#x27;time (s)&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;volts (mV)&#x27;</span>)plt.plot(t, s)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/016/02.png" alt="02"></p><h2><span id="3x00-diao-zheng-x-y-zhou-ke-du-he-fan-wei"><font color="#FF0000">【3x00】调整 x / y 轴刻度和范围</font></span></h2><p>在生成图像时，默认会按照所给的数据均匀设置几个刻度，如果对默认的刻度不满意，则可以使用 <code>xticks()</code> 或 <code>yticks()</code> 方法指定刻度值。<code>xlim()</code> 与 <code>ylim()</code> 则可以设置刻度的范围。</p><p>基本语法：<br><code>matplotlib.pyplot.xticks([ticks=None, labels=None, \*\*kwargs])</code><br><code>matplotlib.pyplot.yticks([ticks=None, labels=None, \*\*kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ticks</td><td>数组形式的位置列表，即显示第 n 个位置的刻度，可选项，若传递空列表将删除所有 xtick / ytick</td></tr><tr><td>labels</td><td>数组形式的值，在对应刻度线显示的标签信息。仅当同时传递了刻度时，才能传递此参数</td></tr><tr><td>**kwargs</td><td>其他参数参见 <a href="https://matplotlib.org/api/text_api.html#matplotlib.text.Text">Text</a></td></tr></tbody></table><p>其他参数里面有一个常用的 <code>rotation</code> 参数，次参数可以用于设置刻度标签的旋转角度，对于标签太长的可以将其旋转一个角度来显示。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)plt.plot(x, y)<span class="hljs-comment"># x 轴每隔三个显示一次刻度，旋转45°显示标签</span>plt.xticks(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">3</span>), (<span class="hljs-string">&#x27;the &#123;&#125; ticks&#x27;</span>.<span class="hljs-built_in">format</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">3</span>)), rotation=<span class="hljs-number">45</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/016/03.png" alt="03"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)plt.xlim((<span class="hljs-number">0</span>, <span class="hljs-number">30</span>))   <span class="hljs-comment"># 设置 x 轴刻度范围</span>plt.plot(x, y)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/016/04.png" alt="04"></p><h2><span id="4x00-hua-bu-bian-kuang-yu-zuo-biao-zhou-de-yi-dong"><font color="#FF0000">【4x00】画布边框与坐标轴的移动</font></span></h2><p>Matplotlib 所绘制的图表中的每个绘图元素，例如线条 Line2D、文字 Text、刻度等在内存中都有一个对象与之对应。</p><p><code>matplotlib.pyplot.gca()</code> 函数用于获取当前的绘图区 <code>Axes</code>（Get Current Axes）</p><p><code>matplotlib.pyplot.gcf()</code> 函数用于获取当前的画布 <code>Figure</code>（Get Current Figure）</p><p>例如：<code>matplotlib.pyplot.plot()</code> 实际上会通过 <code>matplotlib.pyplot.gca()</code> 获得当前的 Axes对象 <code>ax</code>，然后再调用 <code>ax.plot()</code> 方法实现真正的绘图。我们可以通过这种方法来实现画布边框的隐藏和坐标轴的移动。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> npx = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.pi, np.pi/<span class="hljs-number">100</span>)y = np.sin(x)plt.plot(x, y)plt.xlabel(<span class="hljs-string">&#x27;X axis&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;Y axis&#x27;</span>)ticks = (<span class="hljs-number">0</span>, np.pi/<span class="hljs-number">2</span>, np.pi, <span class="hljs-number">3</span>*np.pi/<span class="hljs-number">2</span>, <span class="hljs-number">2</span>*np.pi)labels = (<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">r&#x27;$\frac&#123;\pi&#125; &#123;2&#125;$&#x27;</span>, <span class="hljs-string">r&#x27;$\pi$&#x27;</span>, <span class="hljs-string">r&#x27;$\frac&#123;3\pi&#125; &#123;2&#125;$&#x27;</span>, <span class="hljs-string">r&#x27;$2\pi$&#x27;</span>)plt.xticks(ticks, labels)                      <span class="hljs-comment"># 设置 x 坐标轴显示的数据</span>ax = plt.gca()                                 <span class="hljs-comment"># 获取当前的画布, gca = get current axes</span>ax.spines[<span class="hljs-string">&#x27;right&#x27;</span>].set_visible(<span class="hljs-literal">False</span>)          <span class="hljs-comment"># 设置右边框不显示</span>ax.spines[<span class="hljs-string">&#x27;top&#x27;</span>].set_visible(<span class="hljs-literal">False</span>)            <span class="hljs-comment"># 设置上边框不显示</span><span class="hljs-comment"># ax.spines[&#x27;top&#x27;].set_color(&#x27;none&#x27;)           # 设置颜色为无也可以</span>ax.xaxis.set_ticks_position(<span class="hljs-string">&#x27;bottom&#x27;</span>)          <span class="hljs-comment"># 设置 x 坐标轴的标签位置</span>ax.yaxis.set_ticks_position(<span class="hljs-string">&#x27;left&#x27;</span>)            <span class="hljs-comment"># 设置 y 坐标轴的标签位置</span>ax.spines[<span class="hljs-string">&#x27;bottom&#x27;</span>].set_position((<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-number">0</span>))  <span class="hljs-comment"># 设置 x 轴在 (0, 0) 位置</span>ax.spines[<span class="hljs-string">&#x27;left&#x27;</span>].set_position((<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-number">0</span>))    <span class="hljs-comment"># 设置 y 轴在 (0, 0) 位置</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/016/05.png" alt="05"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105828143</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="5x00-chuang-jian-zi-tu"><font color="#FF0000">【5x00】创建子图</font></span></h2><p>子图的概念：在同一张画布中创建多个图像，方便对数据进行对比。</p><h3><span id="5x01-fang-fa-yi-add-subplot"><font color="#1BC3FB">【5x01】方法一：add_subplot()</font></span></h3><p>首先创建一个画布，然后利用 <code>add_subplot()</code> 方法填充子图，该方法接收三个参数，前两个参数表示子图有几行几列，最后一个参数表示第几个子图，如：<code>fig.add_subplot(221)</code> 表示总共有两行两列（2x2=4）一共4个子图，当前是第一个子图。若子图大于9个则用逗号隔开即可。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltx = np.arange(<span class="hljs-number">100</span>)fig = plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">6</span>))ax1 = fig.add_subplot(<span class="hljs-number">221</span>)   <span class="hljs-comment"># 第 1 个子图</span>ax1.plot(x, x)ax2 = fig.add_subplot(<span class="hljs-number">222</span>)   <span class="hljs-comment"># 第 2 个子图</span>ax2.plot(x, -x)ax3 = fig.add_subplot(<span class="hljs-number">223</span>)   <span class="hljs-comment"># 第 3 个子图</span>ax3.plot(x, x ** <span class="hljs-number">2</span>)ax4 = fig.add_subplot(<span class="hljs-number">224</span>)   <span class="hljs-comment"># 第 4 个子图</span>ax4.plot(-x, x ** <span class="hljs-number">2</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/016/06.png" alt="06"></p><h3><span id="5x02-fang-fa-er-pyplot-subplot"><font color="#1BC3FB">【5x02】方法二：pyplot.subplot()</font></span></h3><p><code>matplotlib.pyplot.subplot()</code> 方法和 <code>add_subplot()</code> 方法有点儿类似，同样接收三个参数，前两个参数表示子图有几行几列，最后一个参数表示第几个子图。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltx = np.arange(<span class="hljs-number">100</span>)plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">6</span>))plt.subplot(<span class="hljs-number">221</span>)     <span class="hljs-comment"># 第 1 个子图</span>plt.plot(x, x)plt.subplot(<span class="hljs-number">222</span>)     <span class="hljs-comment"># 第 2 个子图</span>plt.plot(x, x ** <span class="hljs-number">2</span>)plt.subplot(<span class="hljs-number">223</span>)     <span class="hljs-comment"># 第 3 个子图</span>plt.plot(x, x ** <span class="hljs-number">3</span>)plt.subplot(<span class="hljs-number">224</span>)     <span class="hljs-comment"># 第 4 个子图</span>plt.plot(x, x ** <span class="hljs-number">4</span>)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/016/07.png" alt="07"></p><h3><span id="5x03-fang-fa-san-pyplot-subplots"><font color="#1BC3FB">【5x03】方法三：pyplot.subplots()</font></span></h3><p><code>matplotlib.pyplot.subplots()</code> 函数会将画布分割成指定的列和行，分割后依次在各个区域画图即可。注意与 <code>matplotlib.pyplot.subplot()</code> 略有差别。</p><p><code>fig, axes = plt.subplots</code> 的意思是：<code>plt.subplots</code> 方法会返回一个包含 figure（画布） 和 axes（绘图区） 对象的元组，fig 和 axes 参数分别接收这两个对象，后期对不同绘图区进行处理即可。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltx = np.arange(<span class="hljs-number">100</span>)fig, axes = plt.subplots(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">6</span>), nrows=<span class="hljs-number">2</span>, ncols=<span class="hljs-number">2</span>)  <span class="hljs-comment"># 将画布分割为2行2列，起始值为0</span>axes[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].plot(x, x)         <span class="hljs-comment"># 绘制第1行第1列</span>axes[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].plot(x, -x)        <span class="hljs-comment"># 绘制第1行第2列</span>axes[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].plot(-x, x ** <span class="hljs-number">2</span>)   <span class="hljs-comment"># 绘制第2行第1列</span>axes[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>].plot(x, -x ** <span class="hljs-number">2</span>)   <span class="hljs-comment"># 绘制第2行第2列</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/016/08.png" alt="08"></p><h2><span id="6x00-tian-chong-bu-ding"><font color="#FF0000">【6x00】填充补丁</font></span></h2><p><code>matplotlib.patches</code> 可用于在画布上填充圆形、长方形、椭圆形、多边形等多种图像补丁。</p><p>官方文档：<a href="https://matplotlib.org/api/patches_api.html">https://matplotlib.org/api/patches_api.html</a></p><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td>matplotlib.patches.Arc(xy, width, height, angle=0.0, theta1=0.0, theta2=360.0, **kwargs)</td><td>椭圆弧</td></tr><tr><td>matplotlib.patches.Arrow(x, y, dx, dy, width=1.0, **kwargs)</td><td>箭头</td></tr><tr><td>matplotlib.patches.Circle(xy, radius=5, **kwargs)</td><td>圆</td></tr><tr><td>matplotlib.patches.Ellipse(xy, width, height, angle=0, **kwargs)</td><td>椭圆</td></tr><tr><td>matplotlib.patches.CirclePolygon(xy, radius=5, resolution=20, **kwargs)</td><td>近似多边形的圆形面片</td></tr><tr><td>matplotlib.patches.Polygon(xy, closed=True, **kwargs)</td><td>不规则多边形</td></tr><tr><td>matplotlib.patches.Rectangle(xy, width, height, angle=0.0, **kwargs)</td><td>矩形</td></tr><tr><td>matplotlib.patches.RegularPolygon(xy, numVertices, radius=5, orientation=0, **kwargs)</td><td>正多边形</td></tr><tr><td>matplotlib.patches.Shadow(patch, ox, oy, props=None, **kwargs)</td><td>创建给定补丁的阴影</td></tr><tr><td>matplotlib.patches.Wedge(center, r, theta1, theta2, width=None, **kwargs)</td><td>楔形</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> matplotlib.patches <span class="hljs-keyword">as</span> mpathesx = np.arange(<span class="hljs-number">0.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.01</span>)y = np.sin(<span class="hljs-number">2</span>*np.pi*x)<span class="hljs-comment"># 获取当前绘图区（gca = Get Current Axes</span>ax = plt.gca()<span class="hljs-comment"># 圆形：圆点(0.2, -0.25)，半径0.2，红色</span>circle = mpathes.Circle((<span class="hljs-number">0.2</span>, -<span class="hljs-number">0.25</span>), <span class="hljs-number">0.2</span>, color=<span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-comment"># 长方形：左侧和底部坐标(0.25, 0.75)，宽0.25，高0.15，透明度0.5</span>rect = mpathes.Rectangle((<span class="hljs-number">0.25</span>, <span class="hljs-number">0.75</span>), <span class="hljs-number">0.25</span>, <span class="hljs-number">0.15</span>, alpha=<span class="hljs-number">0.5</span>)<span class="hljs-comment"># 正多边形：中心点坐标(1.0, 0)，顶点数6，中心到每个顶点的距离0.25</span>regular_polygon = mpathes.RegularPolygon((<span class="hljs-number">1.0</span>, <span class="hljs-number">0</span>), <span class="hljs-number">6</span>, <span class="hljs-number">0.25</span>, color=<span class="hljs-string">&#x27;g&#x27;</span>)<span class="hljs-comment"># 不规则多边形：polygon_point 为要连接的点的坐标</span>polygon_point = [[<span class="hljs-number">1.5</span>, -<span class="hljs-number">0.75</span>], [<span class="hljs-number">1.75</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">2.0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1.5</span>, -<span class="hljs-number">0.25</span>]]polygon = mpathes.Polygon(polygon_point, color=<span class="hljs-string">&#x27;#FF69B4&#x27;</span>, alpha=<span class="hljs-number">0.3</span>)<span class="hljs-comment"># 椭圆形：中心点坐标(1.25, 0.75)，横轴长度0.4，垂直轴长度0.2</span>ellipse = mpathes.Ellipse((<span class="hljs-number">1.25</span>, <span class="hljs-number">0.75</span>), <span class="hljs-number">0.4</span>, <span class="hljs-number">0.2</span>, color=<span class="hljs-string">&#x27;y&#x27;</span>)<span class="hljs-comment"># 将补丁添加到当前绘图区</span>ax.add_patch(circle)ax.add_patch(rect)ax.add_patch(regular_polygon)ax.add_patch(polygon)ax.add_patch(ellipse)plt.xlabel(<span class="hljs-string">&#x27;x axis label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;y axis label&#x27;</span>)plt.grid()plt.plot(x, y)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/016/09.png" alt="09"></p><h2><span id="7x00-bao-cun-tu-xiang"><font color="#FF0000">【7x00】保存图像</font></span></h2><p><code>matplotlib.pyplot.savefig()</code> 方法可以将绘制的图像保存到本地，支持多种格式：eps, pdf, pgf, png, ps, raw, rgba, svg, svgz。</p><p><font color="#FF0000"> <strong>注意：因为调用 <code>plt.show()</code> 函数后，会创建一个新的空白的图片，所以在保存图片时注意要在 <code>plt.show()</code> 前调用 <code>plt.savefig()</code></strong> </font></p><p>基本语法：<code>matplotlib.pyplot.savefig(fname, dpi=None, facecolor='w', edgecolor='w', format=None, transparent=False)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>fname</td><td>str 类型 / 文件路径 / 类似文件的对象<br>如果未设置格式，则根据 fname 的扩展名（如果有）和 <code>rcParams[“savefig.format”] = ‘png’</code> 推断输出格式<br>如果设置了格式，则它将确定输出格式</td></tr><tr><td>dpi</td><td>保存图片的像素（dpi），以每英寸点数为单位。如果为 None，则默认取 <code>rcParams[’savefig.dpi’] = ‘figure’</code></td></tr><tr><td>facecolor</td><td>保存图片的画布颜色，默认为 white</td></tr><tr><td>edgecolor</td><td>保存图片的边缘颜色，默认为 white</td></tr><tr><td>format</td><td>保存图片的格式，未设置则取 fname 中的格式</td></tr><tr><td>transparent</td><td>保存图片的背景是否透明</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)a = [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]line1, = plt.plot(a, b)line2, = plt.plot(x, y)plt.legend((line1, line2), (<span class="hljs-string">&#x27;图例一&#x27;</span>, <span class="hljs-string">&#x27;图例二&#x27;</span>), loc=<span class="hljs-number">2</span>, edgecolor=<span class="hljs-string">&#x27;red&#x27;</span>, facecolor=<span class="hljs-string">&#x27;#F5F5F5&#x27;</span>)plt.savefig(<span class="hljs-string">&#x27;D:\\data\\pic.png&#x27;</span>, transparent=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 保存为透明文件</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/016/10.png" alt="10"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105828143</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（二）：文本描述/中文支持/画布/网格等基本图像属性</title>
      <link href="/article/015/"/>
      <url>/article/015/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-tian-jia-wen-ben-miao-shu-font"><font color="#FF0000">【1x00】添加文本描述</font></a><ul><li><a href="#font-color-1bc3fb-1x01-tian-jia-biao-ti-matplotlib-pyplot-title-font"><font color="#1BC3FB">【1x01】添加标题：matplotlib.pyplot.title()</font></a></li><li><a href="#font-color-1bc3fb-1x02-wei-zuo-biao-zhou-tian-jia-biao-qian-matplotlib-pyplot-xlabel-ylabel-font"><font color="#1BC3FB">【1x02】为坐标轴添加标签：matplotlib.pyplot.xlabel() / ylabel()</font></a></li><li><a href="#font-color-1bc3fb-1x03-ren-yi-wei-zhi-tian-jia-wen-ben-matplotlib-pyplot-text-font"><font color="#1BC3FB">【1x03】任意位置添加文本：matplotlib.pyplot.text()</font></a></li><li><a href="#font-color-1bc3fb-1x03-ren-yi-wei-zhi-tian-jia-wen-ben-matplotlib-pyplot-annotate-font"><font color="#1BC3FB">【1x03】任意位置添加文本：matplotlib.pyplot.annotate()</font></a></li></ul></li><li><a href="#font-color-ff0000-2x00-she-zhi-zhong-wen-xian-shi-font"><font color="#FF0000">【2x00】设置中文显示</font></a><ul><li><a href="#font-color-1bc3fb-2x01-chang-jian-xi-tong-zi-dai-wen-zi-ji-qi-ying-wen-ming-cheng-font"><font color="#1BC3FB">【2x01】常见系统自带文字及其英文名称</font></a></li><li><a href="#font-color-1bc3fb-2x02-zhi-ding-quan-ju-zi-ti-rcparams-font"><font color="#1BC3FB">【2x02】指定全局字体：rcParams</font></a></li><li><a href="#font-color-1bc3fb-2x03-zhi-ding-dan-ge-zi-ti-fontproperties-font"><font color="#1BC3FB">【2x03】指定单个字体：fontproperties</font></a></li><li><a href="#font-color-1bc3fb-2x04-zhi-ding-wen-zi-lu-jing-fontproperties-font"><font color="#1BC3FB">【2x04】指定文字路径：FontProperties</font></a></li><li><a href="#font-color-1bc3fb-2x05-wen-zi-geng-duo-shu-xing-rc-font"><font color="#1BC3FB">【2x05】文字更多属性：rc</font></a></li></ul></li><li><a href="#font-color-ff0000-3x00-she-zhi-hua-bu-da-xiao-fen-bian-lu-yan-se-font"><font color="#FF0000">【3x00】设置画布大小 / 分辨率 / 颜色</font></a></li><li><a href="#font-color-ff0000-4x00-she-zhi-wang-ge-font"><font color="#FF0000">【4x00】设置网格</font></a></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105828049</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-tian-jia-wen-ben-miao-shu"><font color="#FF0000">【1x00】添加文本描述</font></span></h2><h3><span id="1x01-tian-jia-biao-ti-matplotlib-pyplot-title"><font color="#1BC3FB">【1x01】添加标题：matplotlib.pyplot.title()</font></span></h3><p><code>matplotlib.pyplot.title()</code> 方法可为图表添加标题。</p><p>基本语法：<code>matplotlib.pyplot.title(label[, fontdict=None, loc=None, pad=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>label</td><td>str 类型，标题文字</td></tr><tr><td>fontdict</td><td>字典类型，控制标题文本外观，可选项，默认值为：<br><code>&#123;'fontsize': rcParams['axes.titlesize'], </code><br><code>'fontweight' : rcParams['axes.titleweight'], </code><br><code>'color' : rcParams['axes.titlecolor'], </code><br><code>'verticalalignment': 'baseline', </code><br><code>'horizontalalignment': loc&#125;</code></td></tr><tr><td>loc</td><td>str 类型，可选项，三个可选值：center、left、right，默认为 <code>rcParams[&quot;axes.titlelocation&quot;]</code>（默认为 <code>center</code>）</td></tr><tr><td>pad</td><td>float 类型，可选项，标题距轴顶部的偏移量（以磅为单位）。如果为 None，则默认为 <code>rcParams[&quot;axes.titlepad&quot;]</code>（默认为：6.0）</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltx = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)plt.title(<span class="hljs-string">&#x27;This is a title&#x27;</span>)plt.plot(x, y)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/015/01.png" alt="01"></p><h3><span id="1x02-wei-zuo-biao-zhou-tian-jia-biao-qian-matplotlib-pyplot-xlabel-ylabel"><font color="#1BC3FB">【1x02】为坐标轴添加标签：matplotlib.pyplot.xlabel() / ylabel()</font></span></h3><p><code>matplotlib.pyplot.xlabel()</code>：为 x 轴添加标签；<br><code>matplotlib.pyplot.ylabel()</code>：为 y 轴添加标签。</p><p>基本语法：<br><code>matplotlib.pyplot.xlabel(xlabel[, fontdict=None, labelpad=None])</code><br><code>matplotlib.pyplot.ylabel(ylabel[, fontdict=None, labelpad=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>xlabel / ylabel</td><td>str 类型，要添加的文本信息</td></tr><tr><td>fontdict</td><td>字典类型，控制标题文本外观，可选项，默认值为：<br><code>&#123;'fontsize': rcParams['axes.titlesize'], </code><br><code>'fontweight' : rcParams['axes.titleweight'], </code><br><code>'color' : rcParams['axes.titlecolor'], </code><br><code>'verticalalignment': 'baseline', </code><br><code>'horizontalalignment': loc&#125;</code></td></tr><tr><td>labelpad</td><td>float 类型，可选项，x 轴标签距离 x 轴的距离</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltx = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)a = [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]plt.title(<span class="hljs-string">&#x27;This is a title&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;This is x label&#x27;</span>, fontdict=&#123;<span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;fontweight&#x27;</span>: <span class="hljs-string">&#x27;bold&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;red&#x27;</span>&#125;, labelpad=<span class="hljs-number">15.0</span>)plt.ylabel(<span class="hljs-string">&#x27;This is y label&#x27;</span>, fontsize=<span class="hljs-number">10</span>, fontweight=<span class="hljs-string">&#x27;light&#x27;</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>, labelpad=<span class="hljs-number">15.0</span>)plt.plot(x, y)plt.plot(a, b)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/015/02.png" alt="02"></p><h3><span id="1x03-ren-yi-wei-zhi-tian-jia-wen-ben-matplotlib-pyplot-text"><font color="#1BC3FB">【1x03】任意位置添加文本：matplotlib.pyplot.text()</font></span></h3><p><code>matplotlib.pyplot.text()</code> 方法可以在画布上任意位置添加文本描述。</p><p>基本语法：<code>matplotlib.pyplot.text(x, y, s[, fontdict=None, withdash=&lt;deprecated parameter&gt;])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x, y</td><td>放置文本的坐标位置</td></tr><tr><td>s</td><td>str 类型，要添加的文本信息</td></tr><tr><td>fontdict</td><td>字典类型，控制标题文本外观，可选项，默认值为：<br><code>&#123;'fontsize': rcParams['axes.titlesize'], </code><br><code>'fontweight' : rcParams['axes.titleweight'], </code><br><code>'color' : rcParams['axes.titlecolor'], </code><br><code>'verticalalignment': 'baseline', </code><br><code>'horizontalalignment': loc&#125;</code></td></tr><tr><td>ha</td><td>注释点在注释文本的左边、右边或中间（<code>left</code>、<code>right</code>、<code>center</code>）</td></tr><tr><td>va</td><td>注释点在注释文本的上边、下边、中间或基线 （<code>top</code>、<code>bottom</code>、<code>center</code>、<code>baseline</code>）</td></tr><tr><td>withdash</td><td>bool 类型，可选项，默认为 False，创建一个 <a href="https://matplotlib.org/api/text_api.html#matplotlib.text.TextWithDash">TextWithDash</a> 实例而不是一个 <a href="https://matplotlib.org/api/text_api.html#matplotlib.text.Text">Text</a> 实例</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;lines.marker&#x27;</span>] = <span class="hljs-string">&#x27;o&#x27;</span>  <span class="hljs-comment"># 设置线条上点的形状</span>a = [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]plt.title(<span class="hljs-string">&#x27;This is a title&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;This is x label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;This is y label&#x27;</span>)plt.text(<span class="hljs-number">4</span>, <span class="hljs-number">3.2</span>, <span class="hljs-string">&#x27;text1&#x27;</span>)plt.text(<span class="hljs-number">9</span>, <span class="hljs-number">4.2</span>, <span class="hljs-string">&#x27;text2&#x27;</span>)plt.text(<span class="hljs-number">14</span>, <span class="hljs-number">5.2</span>, <span class="hljs-string">&#x27;text3&#x27;</span>)plt.text(<span class="hljs-number">19</span>, <span class="hljs-number">6.2</span>, <span class="hljs-string">&#x27;text4&#x27;</span>)plt.text(<span class="hljs-number">24</span>, <span class="hljs-number">7.2</span>, <span class="hljs-string">&#x27;text5&#x27;</span>)plt.text(<span class="hljs-number">27.5</span>, <span class="hljs-number">7.9</span>, <span class="hljs-string">&#x27;text6&#x27;</span>)plt.plot(a, b)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/015/03.png" alt="03"></p><h3><span id="1x03-ren-yi-wei-zhi-tian-jia-wen-ben-matplotlib-pyplot-annotate"><font color="#1BC3FB">【1x03】任意位置添加文本：matplotlib.pyplot.annotate()</font></span></h3><p><code>matplotlib.pyplot.annotate()</code> 方法可以在指定坐标点添加文本或 LaTeX 描述，也可以在其他位置添加描述后，使用箭头指向某个坐标点。比 <code>matplotlib.pyplot.text()</code> 更高级。</p><p>基本语法：<code>matplotlib.pyplot.annotate(text, xy, xytext, xycoords, textcoords, ha, va, arrowprops, \*\*kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>str 类型，注释的文本</td></tr><tr><td>xy</td><td>被注释的坐标点，格式：<code>(x, y)</code></td></tr><tr><td>xytext</td><td>注释文本的坐标点，格式：<code>(x, y)</code>，默认与 xy 相同</td></tr><tr><td>xycoords</td><td>被注释的坐标点的参考系，取值参见<font color="#FF0000"><strong>表一</strong></font>，默认为 ‘data’</td></tr><tr><td>textcoords</td><td>注释文本的坐标点的参考系，取值参见<font color="#FF0000"><strong>表二</strong></font>，默认为 xycoords 的值</td></tr><tr><td>ha</td><td>注释点在注释文本的左边、右边或中间（<code>left</code>、<code>right</code>、<code>center</code>）</td></tr><tr><td>va</td><td>注释点在注释文本的上边、下边、中间或基线 （<code>top</code>、<code>bottom</code>、<code>center</code>、<code>baseline</code>）</td></tr><tr><td>arrowprops</td><td>dict 字典类型，箭头的样式<br>如果 arrowprops 不包含键 arrowstyle，则允许的键参见<font color="#FF0000"><strong>表三</strong></font><br>如果 arrowprops 包含键 arrowstyle，则允许的键参见<font color="#FF0000"><strong>表四</strong></font></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表一：xycoords 取值类型</font></strong></td></tr></table><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>‘figure points’</td><td>以画布左下角为参考，单位为点数</td></tr><tr><td>‘figure pixels’</td><td>以画布左下角为参考，单位为像素</td></tr><tr><td>‘figure fraction’</td><td>以画布左下角为参考，单位为百分比</td></tr><tr><td>‘axes points’</td><td>以绘图区左下角为参考，单位为点数</td></tr><tr><td>‘axes pixels’</td><td>以绘图区左下角为参考，单位为像素</td></tr><tr><td>‘axes fraction’</td><td>以绘图区左下角为参考，单位为百分比</td></tr><tr><td>‘data’</td><td>使用被注释对象的坐标系，即数据的 x, y 轴（默认）</td></tr><tr><td>‘polar’</td><td>使用（θ，r）形式的极坐标系</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表二：textcoords 取值类型</font></strong></td></tr></table><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>‘figure points’</td><td>以画布左下角为参考，单位为点数</td></tr><tr><td>‘figure pixels’</td><td>以画布左下角为参考，单位为像素</td></tr><tr><td>‘figure fraction’</td><td>以画布左下角为参考，单位为百分比</td></tr><tr><td>‘axes points’</td><td>以绘图区左下角为参考，单位为点数</td></tr><tr><td>‘axes pixels’</td><td>以绘图区左下角为参考，单位为像素</td></tr><tr><td>‘axes fraction’</td><td>以绘图区左下角为参考，单位为百分比</td></tr><tr><td>‘data’</td><td>使用被注释对象的坐标系，即数据的 x, y 轴</td></tr><tr><td>‘polar’</td><td>使用（θ，r）形式的极坐标系</td></tr><tr><td>‘offset points’</td><td>相对于被注释点的坐标 xy 的偏移量，单位是点</td></tr><tr><td>‘offset pixels’</td><td>相对于被注释点的坐标 xy 的偏移量，单位是像素</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表三：arrowprops 不包含键 arrowstyle 时的取值</font></strong></td></tr></table><table><thead><tr><th>键</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>箭头的宽度，以点为单位</td></tr><tr><td>headwidth</td><td>箭头底部的宽度，以点为单位</td></tr><tr><td>headlength</td><td>箭头的长度，以点为单位</td></tr><tr><td>shrink</td><td>箭头两端收缩占总长的百分比</td></tr><tr><td>?</td><td>其他 <a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.FancyArrowPatch.html#matplotlib.patches.FancyArrowPatch">matplotlib.patches.FancyArrowPatch</a> 中的关键字，部分常用关键字参见<font color="#FF0000"><strong>表五</strong></font></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表四：arrowprops 包含键 arrowstyle 时的取值</font></strong></td></tr></table><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td><code>'-'</code></td><td>None</td></tr><tr><td><code>'-&gt;'</code></td><td>head_length=0.4,head_width=0.2</td></tr><tr><td><code>'-['</code></td><td>widthB=1.0,lengthB=0.2,angleB=None</td></tr><tr><td><code>']-'</code></td><td>widthA=1.0, lengthA=0.2, angleA=None</td></tr><tr><td><code>]-[</code></td><td>widthA=1.0, lengthA=0.2, angleA=None, widthB=1.0, lengthB=0.2, angleB=None</td></tr><tr><td>`’</td><td>-</td></tr><tr><td>`'-</td><td>&gt;'`</td></tr><tr><td><code>'&lt;-'</code></td><td>head_length=0.4,head_width=0.2</td></tr><tr><td><code>'&lt;-&gt;'</code></td><td>head_length=0.4,head_width=0.2</td></tr><tr><td>`'&lt;</td><td>-'`</td></tr><tr><td>`'&lt;</td><td>-</td></tr><tr><td><code>'fancy'</code></td><td>head_length=0.4,head_width=0.4,tail_width=0.4</td></tr><tr><td><code>'simple'</code></td><td>head_length=0.5,head_width=0.5,tail_width=0.2</td></tr><tr><td><code>'wedge'</code></td><td>tail_width=0.3,shrink_factor=0.5</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表五：matplotlib.patches.FancyArrowPatch 常用的键</font></strong></td></tr></table><table><thead><tr><th>键</th><th>描述</th></tr></thead><tbody><tr><td>arrowstyle</td><td>箭头样式，取值参见<font color="#FF0000"><strong>表四</strong></font></td></tr><tr><td>connectionstyle</td><td>连接方式，默认为 <code>arc3</code>，有以下五种取值：<br><code>angle</code>：angleA=90, angleB=0, rad=0.0<br><code>angle3</code>：angleA=90, angleB=0<br><code>arc</code>：angleA=0, angleB=0, armA=None, armB=None, rad=0.0<br><code>arc3</code>：rad=0.0<br><code>bar</code>：armA=0.0, armB=0.0, fraction=0.3, angle=None<br>angle 为箭头旋转的角度，rad 为弧度</td></tr><tr><td>relpos</td><td>箭头起始点相对注释文本的位置，默认为 (0.5, 0.5)，即文本的中心<br>（0，0）表示左下角，（1，1）表示右上角</td></tr><tr><td>patchA</td><td>箭头起点处的图形，默认为文本的边框</td></tr><tr><td>patchB</td><td>箭头终点处的图形，默认为空</td></tr><tr><td>shrinkA</td><td>箭头起点的缩进点数，默认为2</td></tr><tr><td>shrinkB</td><td>箭头终点的缩进点数，默认为2</td></tr><tr><td>？</td><td>其他键值，参见官方文档 <a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.PathPatch.html#matplotlib.patches.PathPatch">matplotlib.patches.PathPatch</a></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">connectionstyle 样式举例</font></strong></td></tr></table><p><img src="https://cdn.itbob.cn/img/article/015/04.png" alt="04"></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltx = np.arange(-<span class="hljs-number">2</span>*np.pi, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">0.01</span>)y = np.sin(<span class="hljs-number">1</span>*x)/xplt.title(<span class="hljs-string">&#x27;This is a title&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;This is x label&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;This is y label&#x27;</span>)plt.plot(x, y)plt.annotate(<span class="hljs-string">r&#x27;$\lim_&#123;x\to 0&#125;\frac&#123;\sin(x)&#125;&#123;x&#125;=1$&#x27;</span>,  <span class="hljs-comment"># 插入 LaTeX 表达式</span>             xy=[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],                              <span class="hljs-comment"># 被标记的坐标</span>             xycoords=<span class="hljs-string">&#x27;data&#x27;</span>,                        <span class="hljs-comment"># 被标记的坐标的参考系</span>             xytext=[<span class="hljs-number">50</span>, -<span class="hljs-number">40</span>],                        <span class="hljs-comment"># 注释文本的坐标</span>             textcoords=<span class="hljs-string">&#x27;offset points&#x27;</span>,             <span class="hljs-comment"># 注释文本的坐标的参考系</span>             fontsize=<span class="hljs-number">16</span>,                            <span class="hljs-comment"># 字体大小</span>             arrowprops=<span class="hljs-built_in">dict</span>(arrowstyle=<span class="hljs-string">&quot;-&gt;&quot;</span>, connectionstyle=<span class="hljs-string">&quot;arc3, rad=.2&quot;</span>))  <span class="hljs-comment"># 箭头样式</span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/015/05.png" alt="05"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105828049</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="2x00-she-zhi-zhong-wen-xian-shi"><font color="#FF0000">【2x00】设置中文显示</font></span></h2><h3><span id="2x01-chang-jian-xi-tong-zi-dai-wen-zi-ji-qi-ying-wen-ming-cheng"><font color="#1BC3FB">【2x01】常见系统自带文字及其英文名称</font></span></h3><p>Windows 系统中常见自带字体：</p><table><thead><tr><th>字体</th><th>英文名称</th></tr></thead><tbody><tr><td>黑体</td><td>SimHei</td></tr><tr><td>宋体</td><td>SimSun</td></tr><tr><td>新宋体</td><td>NSimSun</td></tr><tr><td>仿宋</td><td>FangSong</td></tr><tr><td>仿宋_GB2312</td><td>FangSong_GB2312</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td></tr><tr><td>楷体</td><td>KaiTi</td></tr><tr><td>微软正黑</td><td>Microsoft JhengHei</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td></tr><tr><td>细明体</td><td>MingLiU</td></tr><tr><td>标楷体</td><td>DFKai-SB</td></tr><tr><td>新细明体</td><td>PMingLiU</td></tr></tbody></table><p>装有 office 后新添加的字体：</p><table><thead><tr><th>字体</th><th>英文名称</th></tr></thead><tbody><tr><td>隶书</td><td>LiSu</td></tr><tr><td>幼圆</td><td>YouYuan</td></tr><tr><td>华文细黑</td><td>STXihei</td></tr><tr><td>华文楷体</td><td>STKaiti</td></tr><tr><td>华文宋体</td><td>STSong</td></tr><tr><td>华文中宋</td><td>STZhongsong</td></tr><tr><td>华文仿宋</td><td>STFangsong</td></tr><tr><td>方正舒体</td><td>FZShuTi</td></tr><tr><td>方正姚体</td><td>FZYaoti</td></tr><tr><td>华文彩云</td><td>STCaiyun</td></tr><tr><td>华文琥珀</td><td>STHupo</td></tr><tr><td>华文隶书</td><td>STLiti</td></tr><tr><td>华文行楷</td><td>STXingkai</td></tr><tr><td>华文新魏</td><td>STXinwei</td></tr></tbody></table><p>Mac OS 系统中常见自带字体：</p><table><thead><tr><th>字体</th><th>英文名称</th></tr></thead><tbody><tr><td>华文细黑</td><td>STHeiti Light / STXihei</td></tr><tr><td>华文黑体</td><td>STHeiti</td></tr><tr><td>华文楷体</td><td>STKaiti</td></tr><tr><td>华文宋体</td><td>STSong</td></tr><tr><td>华文仿宋</td><td>STFangsong</td></tr><tr><td>丽黑 Pro</td><td>LiHei Pro Medium</td></tr><tr><td>丽宋 Pro</td><td>LiSong Pro Light</td></tr><tr><td>标楷体</td><td>BiauKai</td></tr><tr><td>苹果丽中黑</td><td>Apple LiGothic Medium</td></tr><tr><td>苹果丽细宋</td><td>Apple LiSung Light</td></tr></tbody></table><h3><span id="2x02-zhi-ding-quan-ju-zi-ti-rcparams"><font color="#1BC3FB">【2x02】指定全局字体：rcParams</font></span></h3><p>通过 <code>rcParams['font.sans-serif']</code> 可以配置全局字体。</p><p>优点：只需设置一次即可显示所有中文；缺点：污染全局，无法对单个中文设置字体。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]   <span class="hljs-comment"># 配置全局字体为微软雅黑</span>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span>              <span class="hljs-comment"># 部分字体负号会显示乱码，可添加此参数进行配置</span>a = [-<span class="hljs-number">15</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [-<span class="hljs-number">5</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]plt.title(<span class="hljs-string">&#x27;这是中文标题&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;这是 x 轴标签&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;这是 y 轴标签&#x27;</span>)plt.plot(a, b)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/015/06.png" alt="06"></p><h3><span id="2x03-zhi-ding-dan-ge-zi-ti-fontproperties"><font color="#1BC3FB">【2x03】指定单个字体：fontproperties</font></span></h3><p><code>fontproperties</code> 参数可以加在要设置中文的地方</p><p>优点：不污染全局；缺点：中文太多了挨个设置比较繁琐。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plta = [-<span class="hljs-number">15</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [-<span class="hljs-number">5</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]plt.title(<span class="hljs-string">&#x27;这是中文标题&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;Microsoft JhengHei&#x27;</span>)   <span class="hljs-comment"># 微软正黑</span>plt.xlabel(<span class="hljs-string">&#x27;这是 x 轴标签&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;STLiti&#x27;</span>)             <span class="hljs-comment"># 华文隶书</span>plt.ylabel(<span class="hljs-string">&#x27;这是 y 轴标签&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)    <span class="hljs-comment"># 微软雅黑</span>plt.plot(a, b)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/015/07.png" alt="07"></p><h3><span id="2x04-zhi-ding-wen-zi-lu-jing-fontproperties"><font color="#1BC3FB">【2x04】指定文字路径：FontProperties</font></span></h3><p><code>matplotlib</code> 中 <code>font_manager</code> 模块的 <code>FontProperties</code> 方法可以通过指定文字路径来使用本地文字，在 Windows 中，文字路径一般是 <code>C:\Windows\Fonts\</code>，文字名称可以通过其属性来获取，部分用户自己安装的字体可能包含多个类型，可打开字体合集后通过其属性来获取。</p><p><img src="https://cdn.itbob.cn/img/article/015/08.png" alt="08"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">from</span> matplotlib.font_manager <span class="hljs-keyword">import</span> FontPropertiesfont = FontProperties(fname=<span class="hljs-string">r&quot;C:\Windows\Fonts\STXINGKA.TTF&quot;</span>, size=<span class="hljs-number">14</span>)a = [-<span class="hljs-number">15</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [-<span class="hljs-number">5</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]plt.title(<span class="hljs-string">&#x27;这是中文标题&#x27;</span>, fontproperties=font)plt.xlabel(<span class="hljs-string">&#x27;这是 x 轴标签&#x27;</span>, fontproperties=font)plt.ylabel(<span class="hljs-string">&#x27;这是 y 轴标签&#x27;</span>, fontproperties=font)plt.plot(a, b)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/015/09.png" alt="09"></p><h3><span id="2x05-wen-zi-geng-duo-shu-xing-rc"><font color="#1BC3FB">【2x05】文字更多属性：rc</font></span></h3><p>rc 参数支持文字的更多属性设置，如字体粗细、大小等，这种方法同样将影响全局。</p><p>官方参考：<a href="https://matplotlib.org/api/matplotlib_configuration_api.html?highlight=rc#matplotlib.rc">https://matplotlib.org/api/matplotlib_configuration_api.html?highlight=rc#matplotlib.rc</a></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltfont = &#123;<span class="hljs-string">&#x27;family&#x27;</span>: <span class="hljs-string">&#x27;SimHei&#x27;</span>,        <span class="hljs-string">&#x27;weight&#x27;</span>: <span class="hljs-string">&#x27;bold&#x27;</span>,        <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-string">&#x27;10&#x27;</span>&#125;plt.rc(<span class="hljs-string">&#x27;font&#x27;</span>, **font)               <span class="hljs-comment"># 设置字体的更多属性</span>plt.rc(<span class="hljs-string">&#x27;axes&#x27;</span>, unicode_minus=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 显示负号</span>a = [-<span class="hljs-number">15</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [-<span class="hljs-number">5</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]plt.title(<span class="hljs-string">&#x27;这是中文标题&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;这是 x 轴标签&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;这是 y 轴标签&#x27;</span>)plt.plot(a, b)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/015/10.png" alt="10"></p><h2><span id="3x00-she-zhi-hua-bu-da-xiao-fen-bian-lu-yan-se"><font color="#FF0000">【3x00】设置画布大小 / 分辨率 / 颜色</font></span></h2><p><code>matplotlib.pyplot.figure()</code> 可以设置画布的大小、图片分辨率、颜色等。</p><p>基本语法：<code>matplotlib.pyplot.figure(figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, \*\*kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>figsize</td><td><code>(float, float)</code> 的格式，代表宽度和高度，单位为英寸<br>默认为 <code>rcParams[&quot;figure.figsize&quot;] = [6.4, 4.8]</code>，即：640 x 480</td></tr><tr><td>dpi</td><td>图像分辨率，默认为 <code>rcParams[&quot;figure.figsize&quot;] = 100</code></td></tr><tr><td>facecolor</td><td>图像背景颜色，默认为 <code>rcParams[&quot;figure.edgecolor&quot;] = ‘white’</code></td></tr><tr><td>edgecolor</td><td>图像边缘颜色，默认为 <code>rcParams[’figure.edgecolor’] = ‘white’</code></td></tr><tr><td>frameon</td><td>是否启用图框</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)plt.figure(figsize=(<span class="hljs-number">6.5</span>, <span class="hljs-number">5</span>), dpi=<span class="hljs-number">120</span>, facecolor=<span class="hljs-string">&#x27;#BBFFFF&#x27;</span>)plt.plot(x, y)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/015/11.png" alt="11"></p><h2><span id="4x00-she-zhi-wang-ge"><font color="#FF0000">【4x00】设置网格</font></span></h2><p><code>matplotlib.pyplot.grid()</code> 方法可以为图表设置网格显示。</p><p>基本语法：<code>matplotlib.pyplot.grid([b=None, which='major', axis='both', \*\*kwargs])</code></p><table><thead><tr><th>参数</th><th>属性</th></tr></thead><tbody><tr><td>b</td><td>bool 值，可选项，是否显示网格，值为 <code>None</code> 或 <code>True</code> 则显示，<code>False</code> 不显示</td></tr><tr><td>which</td><td>可选项，在主/次刻度显示网格线，<code>major</code>：主（大）刻度；<code>minor</code>：次（小）刻度；<code>both</code>：两者同时显示</td></tr><tr><td>axis</td><td>可选项，在横/竖轴显示网格线，<code>x</code>：x 轴；<code>y</code>：y 轴；<code>both</code>：两者同时显示</td></tr><tr><td>**kwargs</td><td>其他 <a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D">Line2D</a> 属性，常见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D">Line2D</a> 属性见下表</td></tr></tbody></table><p>Line2D 属性用法：<code>grid(color='r', linestyle='-', linewidth=2)</code>，部分常见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D">Line2D</a> 属性如下：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>alpha</td><td>网格透明度，float 类型，取值范围：<code>[0, 1]</code>，默认为 1.0，即不透明</td></tr><tr><td>antialiased / aa</td><td>是否使用抗锯齿渲染，默认为 True</td></tr><tr><td>color / c</td><td>网格颜色，支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html">Color Demo</a></td></tr><tr><td>linestyle / ls</td><td>网格线条样式：<code>'-'</code> or <code>'solid'</code>, <code>'--'</code> or <code>'dashed'</code>, <code>'-.'</code> or <code>'dashdot'</code> <br> <code>':'</code> or <code>'dotted'</code>, <code>'none'</code> or <code>' '</code> or <code>''</code></td></tr><tr><td>linewidth / lw</td><td>网格线条宽度，float 类型，默认 0.8</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]a = [-<span class="hljs-number">15</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [-<span class="hljs-number">5</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]plt.title(<span class="hljs-string">&#x27;这是中文标题&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;这是 x 轴标签&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;这是 y 轴标签&#x27;</span>)plt.grid(axis=<span class="hljs-string">&#x27;x&#x27;</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>, linestyle=<span class="hljs-string">&#x27;-.&#x27;</span>, linewidth=<span class="hljs-number">2</span>)plt.plot(a, b)plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/015/12.png" alt="12"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105828049</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</title>
      <link href="/article/014/"/>
      <url>/article/014/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-ren-shi-matplotlib-font"><font color="#FF0000">【1x00】认识 Matplotlib</font></a><ul><li><a href="#font-color-1bc3fb-1x01-jian-dan-shi-li-font"><font color="#1BC3FB">【1x01】简单示例</font></a></li><li><a href="#font-color-1bc3fb-1x02-tu-xiang-jie-gou-font"><font color="#1BC3FB">【1x02】图像结构</font></a></li><li><a href="#font-color-1bc3fb-1x03-san-ceng-jie-gou-font"><font color="#1BC3FB">【1x03】三层结构</font></a></li></ul></li><li><a href="#font-color-ff0000-2x00-liao-jie-matplotlib-rcparams-font"><font color="#FF0000">【2x00】了解 matplotlib.rcParams</font></a><ul><li><a href="#font-color-1bc3fb-2x01-axes-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x01】axes 部分属性</font></a></li><li><a href="#font-color-1bc3fb-2x02-figure-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x02】figure 部分属性</font></a></li><li><a href="#font-color-1bc3fb-2x03-font-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x03】font 部分属性</font></a></li><li><a href="#font-color-1bc3fb-2x04-grid-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x04】grid 部分属性</font></a></li><li><a href="#font-color-1bc3fb-2x05-legend-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x05】legend 部分属性</font></a></li><li><a href="#font-color-1bc3fb-2x06-lines-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x06】lines 部分属性</font></a></li><li><a href="#font-color-1bc3fb-2x07-patch-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x07】patch 部分属性</font></a></li><li><a href="#font-color-1bc3fb-2x08-savefig-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x08】savefig 部分属性</font></a></li><li><a href="#font-color-1bc3fb-2x09-text-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x09】text 部分属性</font></a></li><li><a href="#font-color-1bc3fb-2x10-xtick-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x10】xtick 部分属性</font></a></li><li><a href="#font-color-1bc3fb-2x11-ytick-bu-fen-shu-xing-font"><font color="#1BC3FB">【2x11】ytick 部分属性</font></a></li></ul></li></ul><!-- tocstop --><hr><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/014/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itbob.cn/article/015/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/016/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itbob.cn/article/017/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itbob.cn/article/018/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itbob.cn/article/019/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itbob.cn/article/020/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itbob.cn/article/021/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itbob.cn/article/022/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itbob.cn/article/023/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itbob.cn/article/024/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105638122</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-ren-shi-matplotlib"><font color="#FF0000">【1x00】认识 Matplotlib</font></span></h2><p>Matplotlib 是建立在 NumPy 数组基础上的多平台数据可视化程序库，用于在 Python 中绘制数组的 2D 图形库，最初被设计用于完善 SciPy 的生态环境，虽然它起源于模仿 Matlab 图形命令，但它独立于 Matlab，可以以 Pythonic 和面向对象的方式使用。虽然 Matplotlib 主要是在纯 Python 中编写的，但它大量使用 NumPy 和其他扩展代码，即使对于大型数组也能提供良好的性能。它与 NumPy 一起使用，提供了一种有效的 Matlab 开源替代方案。 它也可以和图形工具包一起使用，如 PyQt 和 wxPython。Matplotlib 最重要的特性之一就是具有良好的操作系统兼容性和图形显示底层接口兼容性。</p><h3><span id="1x01-jian-dan-shi-li"><font color="#1BC3FB">【1x01】简单示例</font></span></h3><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)     <span class="hljs-comment"># 数据在 x 轴的位置，是一个可迭代对象</span><span class="hljs-meta">&gt;&gt;&gt; </span>y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)        <span class="hljs-comment"># 数据在 y 轴的位置，是一个可迭代对象</span><span class="hljs-meta">&gt;&gt;&gt; </span>plt.plot(x, y)          <span class="hljs-comment"># 绘制线形图</span>[&lt;matplotlib.lines.Line2D <span class="hljs-built_in">object</span> at <span class="hljs-number">0x00BA1D18</span>&gt;]<span class="hljs-meta">&gt;&gt;&gt; </span>plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/014/01.png" alt="01"></p><h3><span id="1x02-tu-xiang-jie-gou"><font color="#1BC3FB">【1x02】图像结构</font></span></h3><p><img src="https://cdn.itbob.cn/img/article/014/02.png" alt="02"></p><h3><span id="1x03-san-ceng-jie-gou"><font color="#1BC3FB">【1x03】三层结构</font></span></h3><p>Matplotlib 三层结构：容器层、辅助显示层、图像层</p><table><tr><td bgcolor="#7FFFD4">容器层</td></tr></table><p>容器层主要由 Canvas、Figure、Axes 组成。</p><ul><li>Canvas 是位于最底层的系统层，在绘图的过程中充当画板的角色，即放置画布（Figure）的工具。</li><li>Figure 是 Canvas 上方的第一层，也是需要用户来操作的应用层的第一层，在绘图的过程中充当画布的角色，可以通过 plt.figure() 设置画布的大小和分辨率等</li><li>Axes 是应用层的第二层，在绘图的过程中相当于画布上的绘图区的角色，注意与 Axis 的区别，Axis 是坐标轴，包含大小限制、刻度和刻度标签。</li></ul><p>注意点：</p><ul><li>一个figure（画布）可以包含多个axes（坐标系/绘图区），但是一个 axes 只能属于一个figure。</li><li>一个axes（坐标系/绘图区）可以包含多个axis（坐标轴），包含两个即为 2d 坐标系，三个即为 3d 坐标系 。</li></ul><table><tr><td bgcolor="#7FFFD4">辅助显示层</td></tr></table><p>辅助显示层为 Axes（绘图区）内的除了根据数据绘制出的图像以外的内容，主要包括 Axes 外观（facecolor）、边框线(spines）、坐标轴（axis）、坐标轴名称（axis label）、坐标轴刻度（tick）、坐标轴刻度标签（tick label）、网格线（grid）、图例（legend）、标题（title）等内容。该层的设置可使图像显示更加直观更加容易被用户理解，但又不会对图像产生实质的影响。</p><table><tr><td bgcolor="#7FFFD4">图像层</td></tr></table><p>图像层指 Axes 内通过 plot（线形图）、scatter（散点图）、bar（柱状图）、histogram（直方图）、pie（饼图） 等函数根据数据绘制出的图像。</p><table><tr><td bgcolor="#7FFFD4">三者关系总结</td></tr></table><ul><li>Canvas（画板）位于最底层，用户一般接触不到；</li><li>Figure（画布）建立在 Canvas 之上；</li><li>Axes（绘图区）建立在Figure之上；</li><li>坐标轴（axis）、图例（legend）等辅助显示层以及图像层都是建立在 Axes 之上。</li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105638122</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="2x00-liao-jie-matplotlib-rcparams"><font color="#FF0000">【2x00】了解 matplotlib.rcParams</font></span></h2><p><code>matplotlib</code> 使用 <code>matplotlibrc</code> 配置文件来自定义图形的各种默认属性，称之为 <code>rc</code> 配置或 <code>rc</code> 参数。通过 <code>rc</code> 参数可以修改默认的属性，包括窗体大小、每英寸的点数、线条宽度、颜色、样式、坐标轴、坐标和网络属性、文本、字体等。<code>rc</code> 参数存储在字典变量中，通过字典的方式进行访问。</p><p>执行 <code>matplotlib.rcParams.keys()</code> 命令可以查看所有的 rc 参数及其默认值；<br>执行 <code>matplotlib.matplotlib_fname()</code> 命令可以查看 <code>matplotlibrc</code> 配置文件在本地的路径。</p><p>官网介绍：<a href="https://matplotlib.org/tutorials/introductory/customizing.html">https://matplotlib.org/tutorials/introductory/customizing.html</a></p><p>配置文件 matplotibrc 主要包括以下配置要素：</p><ul><li><font color="#FF0000"><strong>axes</strong></font>：坐标轴的背景颜色、坐标轴的边缘颜色、刻度线的大小、刻度标签的字体大小等；</li><li><font color="#FF0000"><strong>figure</strong></font>：画布标题大小、画布标题粗细、画布像素（dpi）、 画布背景颜色和边缘颜色等；</li><li><font color="#FF0000"><strong>font</strong></font>：字体类别、字体风格、字体粗细和字体大小等；</li><li><font color="#FF0000"><strong>grid</strong></font>：网格颜色、网格线条风格、网格线条宽度和网格透明度；</li><li><font color="#FF0000"><strong>legend</strong></font>：图例的文本大小、阴影、图例线框风格等；</li><li><font color="#FF0000"><strong>lines</strong></font>：设置线条属性，包括颜色、线条风格、线条宽度和标记风格等；</li><li><font color="#FF0000"><strong>patch</strong></font>：填充 2D 空间的图形对象，包括多边形和圆；</li><li><font color="#FF0000"><strong>savefig</strong></font>：保存画布图像的分辨率、背景颜色和边缘颜色等；</li><li><font color="#FF0000"><strong>text</strong></font>：文本颜色、LaTex 渲染文本等；</li><li><font color="#FF0000"><strong>xtick / ytick</strong></font>：x 轴和 y 轴的主次要刻度线的大小、宽度、刻度线颜色和刻度标签大小等。</li></ul><hr><p><font color="#FF0000"><strong>我们可以在 Python 项目中动态设置 <code>rc</code> 参数，所有 <code>rc</code> 参数设置都存储在名为 <code>matplotlib.rcParams</code> 的类似于字典的变量中，该变量对于 Matplotlib 软件包是全局的。<code>rcParams</code> 可以直接修改。通过这种方法的修改会对全局产生影响，在 Matplotlib 的其他方法中也可以单独对某个参数进行修改，后续介绍不同方法时会见到。</strong></font></p><hr><p><code>rcParams</code> 修改示例：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> pltplt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]   <span class="hljs-comment"># 定义全局字体</span>plt.rcParams[<span class="hljs-string">&#x27;xtick.color&#x27;</span>] = <span class="hljs-string">&#x27;red&#x27;</span>         <span class="hljs-comment"># 定义 x 轴刻度颜色</span>plt.rcParams[<span class="hljs-string">&#x27;lines.marker&#x27;</span>] = <span class="hljs-string">&#x27;o&#x27;</span>          <span class="hljs-comment"># 定义线条上点的形状</span>plt.rcParams[<span class="hljs-string">&#x27;legend.loc&#x27;</span>] = <span class="hljs-string">&#x27;upper left&#x27;</span>   <span class="hljs-comment"># 定义图例在左上角</span>x = <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>)y = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>)a = [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>]b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]plt.title(<span class="hljs-string">&#x27;This is a title / 这是标题&#x27;</span>)plt.xlabel(<span class="hljs-string">&#x27;这是 x 轴标题&#x27;</span>)plt.ylabel(<span class="hljs-string">&#x27;这是 y 轴标题&#x27;</span>)plt.grid(<span class="hljs-literal">True</span>)plt.plot(x, y)plt.plot(a, b)plt.legend([<span class="hljs-string">&#x27;图例一&#x27;</span>, <span class="hljs-string">&#x27;图例二&#x27;</span>])plt.show()</code></pre><p><img src="https://cdn.itbob.cn/img/article/014/03.png" alt="03"></p><hr><h3><span id="2x01-axes-bu-fen-shu-xing"><font color="#1BC3FB">【2x01】axes 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>axes.axisbelow</code>’] = ‘line’</td><td>网格线和刻度的位置</td><td><code>line</code>：在画板上方，在线条下方<br><code>False</code>：在线条和画板的上方<br><code>True</code>：在画板下方</td></tr><tr><td>mpl.rcParams[‘<code>axes.edgecolor</code>’] = ‘black’</td><td>轴边缘颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>axes.facecolor</code>’] = ‘white’</td><td>轴背景色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>axes.labelcolor</code>’] = ‘black’</td><td>轴标题颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>axes.grid</code>’] = False</td><td>是否显示网格</td><td><code>False</code>：不显示网格；<code>True</code>：显示网格</td></tr><tr><td>mpl.rcParams[‘<code>axes.grid.axis</code>’] = ‘both’</td><td>网格应用于哪个轴</td><td><code>x</code>：x 轴；<code>y</code>：y 轴；<code>both</code>：同时应用于两个轴</td></tr><tr><td>mpl.rcParams[‘<code>axes.grid.which</code>’] = ‘major’</td><td>网格应用于哪个刻度</td><td><code>major</code>：主（大）刻度；<code>minor</code>：次（小刻度）；<br><code>both</code>：同时应用于两个刻度</td></tr><tr><td>mpl.rcParams[‘<code>axes.labelpad</code>’] = 4.0</td><td>轴标题和轴之间的间距</td><td>float 类型间距值</td></tr><tr><td>mpl.rcParams[‘<code>axes.labelsize</code>’] = ‘medium’</td><td>x 轴和 y 轴标题的字体大小</td><td><code>xx-small</code>, <code>x-small</code>, <code>small</code>, <code>medium</code> <br> <code>large</code>, <code>x-large</code>, <code>xx-large</code>, <code>smaller</code>, <code>larger</code><br>也可以使用数字来表示字体大小</td></tr><tr><td>mpl.rcParams[‘<code>axes.labelweight</code>’] = ‘normal’</td><td>x 轴和 y 轴标题的字体粗细</td><td><code>normal</code>：正常粗细；<code>bold</code>：粗体；<code>light</code>：细体<br>数字值 <code>400</code> 等价于 <code>normal</code>，<code>700</code> 等价于 <code>bold</code></td></tr><tr><td>mpl.rcParams[‘<code>axes.linewidth</code>’] = 0.8</td><td>轴边线宽度</td><td>float 类型宽度值</td></tr><tr><td>mpl.rcParams[‘<code>axes.titlecolor</code>’] = ‘auto’</td><td>图表标题颜色</td><td>默认取 <code>text.color</code> 的值<br>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>axes.titlelocation</code>’] = ‘center’</td><td>图表标题位置</td><td><code>left</code>：左；<code>right</code>：右；<code>center</code>：中间</td></tr><tr><td>mpl.rcParams[‘<code>axes.titlepad</code>’] = 6.0</td><td>图表标题和轴之间的间距</td><td>float 类型间距值</td></tr><tr><td>mpl.rcParams[‘<code>axes.titlesize</code>’] = ‘large’</td><td>图表标题字体大小</td><td><code>xx-small</code>, <code>x-small</code>, <code>small</code>, <code>medium</code> <br> <code>large</code>, <code>x-large</code>, <code>xx-large</code>, <code>smaller</code>, <code>larger</code><br>也可以使用数字来表示字体大小</td></tr><tr><td>mpl.rcParams[‘<code>axes.titleweight</code>’] = ‘normal’</td><td>图表标题字体粗细</td><td><code>normal</code>：正常粗细；<code>bold</code>：粗体；<code>light</code>：细体<br>数字值 <code>400</code> 等价于 <code>normal</code>，<code>700</code> 等价于 <code>bold</code></td></tr><tr><td>mpl.rcParams[‘<code>axes.xmargin</code>’] = 0.05</td><td>x 轴边距</td><td>取值范围 <code>[0, 1]</code></td></tr><tr><td>mpl.rcParams[‘<code>axes.ymargin</code>’] = 0.05</td><td>y 轴边距</td><td>取值范围 <code>[0, 1]</code></td></tr><tr><td>mpl.rcParams[‘<code>axes.unicode_minus</code>’] = True</td><td>对负号使用 Unicode 而不是连字符</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>axes3d.grid</code>’] = True</td><td>是否在三维轴上显示网格</td><td><code>True</code>：是；<code>False</code>：否</td></tr></tbody></table><h3><span id="2x02-figure-bu-fen-shu-xing"><font color="#1BC3FB">【2x02】figure 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>figure.dpi</code>’] = 100</td><td>画布像素（dpi）</td><td>float 类型像素值</td></tr><tr><td>mpl.rcParams[‘<code>figure.edgecolor</code>’] = ‘white’</td><td>画布边缘颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>figure.facecolor</code>’] = ‘white’</td><td>画布背景颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>figure.figsize</code>’] = [6.4, 4.8]</td><td>画布尺寸 <code>[长, 宽]</code></td><td>float 类型尺寸值（英寸）</td></tr><tr><td>mpl.rcParams[‘<code>figure.frameon</code>’] = True</td><td>是否启用图框</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>figure.titlesize</code>’] = ‘large’</td><td>画布标题大小</td><td><code>xx-small</code>, <code>x-small</code>, <code>small</code>, <code>medium</code> <br> <code>large</code>, <code>x-large</code>, <code>xx-large</code>, <code>smaller</code>, <code>larger</code><br>也可以使用数字来表示字体大小</td></tr><tr><td>mpl.rcParams[‘<code>figure.titleweight</code>’] = ‘normal’</td><td>画布标题粗细</td><td><code>normal</code>：正常粗细；<code>bold</code>：粗体；<code>light</code>：细体<br>数字值 <code>400</code> 等价于 <code>normal</code>，<code>700</code> 等价于 <code>bold</code></td></tr></tbody></table><h3><span id="2x03-font-bu-fen-shu-xing"><font color="#1BC3FB">【2x03】font 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>font.family</code>’] = [‘sans-serif’]</td><td>规定字体系列</td><td>字体名称</td></tr><tr><td>mpl.rcParams[‘<code>font.sans-serif</code>’] = [‘DejaVu Sans, …’]</td><td>定义无衬线字体</td><td>默认是一些西文字体，可将其设置成其他字体来显示中文</td></tr><tr><td>mpl.rcParams[‘<code>font.serif</code>’] = [‘DejaVu Sans, …’]</td><td>定义有衬线字体</td><td>默认是一些西文字体，可将其设置成其他字体来显示中文</td></tr><tr><td>mpl.rcParams[‘<code>font.size</code>’] = 10.0</td><td>定义字体大小</td><td>float 数字类型字体大小</td></tr><tr><td>mpl.rcParams[‘<code>font.weight</code>’] = ‘normal’</td><td>定义字体粗细</td><td><code>normal</code>：正常粗细；<code>bold</code>：粗体；<code>light</code>：细体<br>数字值 <code>400</code> 等价于 <code>normal</code>，<code>700</code> 等价于 <code>bold</code></td></tr></tbody></table><h3><span id="2x04-grid-bu-fen-shu-xing"><font color="#1BC3FB">【2x04】grid 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>grid.alpha</code>’] = 1.0</td><td>网格透明度</td><td>float 类型，取值范围：<code>[0, 1]</code></td></tr><tr><td>mpl.rcParams[‘<code>grid.color</code>’] = ‘#b0b0b0’</td><td>网格颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>grid.linestyle</code>’] = ‘-’</td><td>网格线的样式</td><td><code>'-'</code> or <code>'solid'</code>, <code>'--'</code> or <code>'dashed'</code>, <code>'-.'</code> or <code>'dashdot'</code> <br> <code>':'</code> or <code>'dotted'</code>, <code>'none'</code> or <code>' '</code> or <code>''</code></td></tr><tr><td>mpl.rcParams[‘<code>grid.linewidth</code>’] = 0.8</td><td>网格宽度</td><td>float 类型宽度值</td></tr></tbody></table><h3><span id="2x05-legend-bu-fen-shu-xing"><font color="#1BC3FB">【2x05】legend 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>legend.borderaxespad</code>’] = 0.5</td><td>图例距离轴之间的距离</td><td>float 类型距离值</td></tr><tr><td>mpl.rcParams[‘<code>legend.borderpad</code>’] = 0.4</td><td>图例边框空白区域大小</td><td>float 类型大小值</td></tr><tr><td>mpl.rcParams[‘<code>legend.columnspacing</code>’] = 2.0</td><td>图例列间距</td><td>float 类型距离值</td></tr><tr><td>mpl.rcParams[‘<code>legend.edgecolor</code>’] = 0.8</td><td>图例边缘线颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>legend.facecolor</code>’] = ‘inherit’</td><td>图例背景颜色</td><td>默认继承自 <code>axes.facecolor</code><br>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>legend.fancybox</code>’] = True</td><td>是否使用圆形框作为图例背景</td><td><code>True</code>：使用圆形框；<code>False</code>：使用矩形框</td></tr><tr><td>mpl.rcParams[‘<code>legend.fontsize</code>’] = ‘medium’</td><td>图例字体大小</td><td><code>xx-small</code>, <code>x-small</code>, <code>small</code>, <code>medium</code> <br> <code>large</code>, <code>x-large</code>, <code>xx-large</code>, <code>smaller</code>, <code>larger</code><br>也可以使用数字来表示字体大小</td></tr><tr><td>mpl.rcParams[‘<code>legend.framealpha</code>’] = 0.8</td><td>图例透明度</td><td>float 类型，取值范围：<code>[0, 1]</code></td></tr><tr><td>mpl.rcParams[‘<code>legend.frameon</code>’] = True</td><td>是否在画布之上绘制图例</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>legend.handleheight</code>’] = 0.7</td><td>图例的高度</td><td>float 类型高度值</td></tr><tr><td>mpl.rcParams[‘<code>legend.handlelength</code>’] = 2.0</td><td>图例的宽度</td><td>float 类型宽度值</td></tr><tr><td>mpl.rcParams[‘<code>legend.handletextpad</code>’] = 0.8</td><td>图例和图例文本之间的水平距离</td><td>float 类型距离值</td></tr><tr><td>mpl.rcParams[‘<code>legend.labelspacing</code>’] = 0.5</td><td>不同图例之间的垂直距离</td><td>float 类型距离值</td></tr><tr><td>mpl.rcParams[‘<code>legend.loc</code>’] = ‘best’</td><td>图例在画布中的位置</td><td><code>best</code>, <code>upper right</code>, <code>upper left</code>, <code>lower left</code> <br> <code>lower right</code>, <code>right</code>, <code>center left</code>, <code>center right</code> <br> <code>lower center</code>, <code>upper center</code>, <code>center</code></td></tr><tr><td>mpl.rcParams[‘<code>legend.shadow</code>’] = False</td><td>是否给图例添加阴影效果</td><td><code>True</code>：是；<code>False</code>：否</td></tr></tbody></table><h3><span id="2x06-lines-bu-fen-shu-xing"><font color="#1BC3FB">【2x06】lines 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>lines.antialiased</code>’] = True</td><td>是否以抗锯齿方式渲染线条</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>lines.color</code>’] = ‘C0’</td><td>线条颜色（对 <code>plot()</code> 没有影响）</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>lines.linestyle</code>’] = ‘-’</td><td>线条样式</td><td><code>'-'</code>, <code>'--'</code>, <code>'-.'</code>, <code>':'</code>, <code>'solid'</code>, <code>'dashed'</code>, <br><code>'dashdot'</code>, <code>'dotted'</code>, <code>'none'</code>, <code>' '</code>, <code>''</code></td></tr><tr><td>mpl.rcParams[‘<code>lines.linewidth</code>’] = 1.5</td><td>线条宽度</td><td>float 类型宽度值</td></tr><tr><td>mpl.rcParams[‘<code>lines.marker</code>’] = ‘None’</td><td>线条上点的形状</td><td><code>.</code>, <code>,</code>, <code>o</code>, <code>v</code>, <code>^</code> 等，具体常见 <a href="https://matplotlib.org/api/markers_api.html">matplotlib.markers</a></td></tr><tr><td>mpl.rcParams[‘<code>lines.markeredgecolor</code>’] = ‘auto’</td><td>线条上点边缘的颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>lines.markerfacecolor</code>’] = ‘auto’</td><td>线条上点的颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>lines.markeredgewidth</code>’] = 1.0</td><td>线条上点的粗细</td><td>float 类型粗细值</td></tr><tr><td>mpl.rcParams[‘<code>lines.markersize</code>’] = 6.0</td><td>线条上点的大小</td><td>float 类型大小值</td></tr></tbody></table><h3><span id="2x07-patch-bu-fen-shu-xing"><font color="#1BC3FB">【2x07】patch 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>patch.antialiased</code>’] = True</td><td>以抗锯齿方式渲染补丁</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>patch.edgecolor</code>’] = ‘black’</td><td>补丁边缘颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>patch.facecolor</code>’] = ‘C0’</td><td>补丁颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>patch.linewidth</code>’] = 1.0</td><td>补丁边缘宽度（以磅为单位）</td><td>float 类型宽度值</td></tr></tbody></table><h3><span id="2x08-savefig-bu-fen-shu-xing"><font color="#1BC3FB">【2x08】savefig 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>savefig.bbox</code>’] = None</td><td>是否以紧凑形式保存图片</td><td><code>standard</code>：标准形式；<code>tight</code>：紧凑形式<br>（去掉边上多余的空白）</td></tr><tr><td>mpl.rcParams[‘<code>savefig.pad_inches</code>’] = 0.1</td><td><code>savefig.bbox</code> 参数为 <code>tight</code> 时，<br>图片使用的填充值<br>（相当于 html 中的 Padding）</td><td>float 类型填充值</td></tr><tr><td>mpl.rcParams[‘<code>savefig.dpi</code>’] = ‘figure’</td><td>保存图片的像素（dpi）</td><td>str 类型像素值</td></tr><tr><td>mpl.rcParams[‘<code>savefig.edgecolor</code>’] = ‘white’</td><td>保存图片的边缘颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>savefig.facecolor</code>’] = ‘white’</td><td>保存图片的画布颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>savefig.format</code>’] = ‘png’</td><td>保存图片的格式</td><td><code>eps</code>, <code>pdf</code>, <code>pgf</code>, <code>png</code>, <code>ps</code>, <code>raw</code>, <code>rgba</code>, <code>svg</code>, <code>svgz</code></td></tr><tr><td>mpl.rcParams[‘<code>savefig.transparent</code>’] = False</td><td>保存图片的背景是否透明</td><td><code>True</code>：是；<code>False</code>：否</td></tr></tbody></table><h3><span id="2x09-text-bu-fen-shu-xing"><font color="#1BC3FB">【2x09】text 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>text.antialiased</code>’] = True</td><td>是否以抗锯齿方式渲染文本</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>text.color</code>’] = ‘red’</td><td>文本颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>text.usetex</code>’] = False</td><td>是否使用 <a href="https://baike.baidu.com/item/LaTeX/1212106">LaTeX</a> 排版系统<br>（主要用于生成复杂表格和数学公式）</td><td><code>True</code>：是；<code>False</code>：否</td></tr></tbody></table><h3><span id="2x10-xtick-bu-fen-shu-xing"><font color="#1BC3FB">【2x10】xtick 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>xtick.color</code>’] = ‘black’</td><td>x 轴刻度的颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>xtick.direction</code>’] = ‘out’</td><td>x 轴刻度的方向</td><td><code>in</code>：内部（x 轴上方）；<code>out</code>：外部（x 轴下方）<br><code>inout</code>：同时在内部和外部</td></tr><tr><td>mpl.rcParams[‘<code>xtick.bottom</code>’] = True</td><td>是否在画布底部显示 x 轴刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>xtick.top</code>’] = False</td><td>是否在画布顶部显示 x 轴刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>xtick.labelbottom</code>’] = True</td><td>是否在画布底部显示 x 轴刻度文字标签</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>xtick.labeltop</code>’] = False</td><td>是否在画布顶部显示 x 轴刻度文字标签</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>xtick.labelsize</code>’] = ‘medium’</td><td>x 轴刻度文字大小</td><td><code>xx-small</code>, <code>x-small</code>, <code>small</code>, <code>medium</code> <br> <code>large</code>, <code>x-large</code>, <code>xx-large</code>, <code>smaller</code>, <code>larger</code><br>也可以使用数字来表示字体大小</td></tr><tr><td>mpl.rcParams[‘<code>xtick.major.bottom</code>’] = True</td><td>是否在画布底部显示 x 轴主（大）刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>xtick.major.top</code>’] = True</td><td>是否在画布顶部显示 x 轴主（大）刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>xtick.major.pad</code>’] = 3.5</td><td>x 轴主（大）刻度与文字标签的距离</td><td>float 类型距离值</td></tr><tr><td>mpl.rcParams[‘<code>xtick.major.size</code>’] = 3.5</td><td>x 轴主（大）刻度的大小</td><td>float 类型大小值</td></tr><tr><td>mpl.rcParams[‘<code>xtick.major.width</code>’] = 0.8</td><td>x 轴主（大）刻度的宽度</td><td>float 类型宽度值</td></tr><tr><td>mpl.rcParams[‘<code>xtick.minor.bottom</code>’] = True</td><td>是否在画布底部显示 x 轴次（小）刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>xtick.minor.top</code>’] = True</td><td>是否在画布顶部显示 x 轴次（小）刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>xtick.minor.pad</code>’] = 3.4</td><td>x 轴次（小）刻度与文字标签的距离</td><td>float 类型距离值</td></tr><tr><td>mpl.rcParams[‘<code>xtick.minor.size</code>’] = 2.0</td><td>x 轴次（小）刻度的大小</td><td>float 类型大小值</td></tr><tr><td>mpl.rcParams[‘<code>xtick.minor.width</code>’] = 0.6</td><td>x 轴次（小）刻度的宽度</td><td>float 类型宽度值</td></tr><tr><td>mpl.rcParams[‘<code>xtick.minor.visible</code>’] = False</td><td>x 轴次（小）刻度的可见性</td><td><code>True</code>：是；<code>False</code>：否</td></tr></tbody></table><h3><span id="2x11-ytick-bu-fen-shu-xing"><font color="#1BC3FB">【2x11】ytick 部分属性</font></span></h3><table><thead><tr><th>属性及其默认值</th><th>描述</th><th>其他取值</th></tr></thead><tbody><tr><td>mpl.rcParams[‘<code>ytick.color</code>’] = ‘black’</td><td>y 轴刻度的颜色</td><td>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html">官网 Color Demo</a></td></tr><tr><td>mpl.rcParams[‘<code>ytick.direction</code>’] = ‘out’</td><td>y 轴刻度的方向</td><td><code>in</code>：内部（y 轴右方）；<code>out</code>：外部（y 轴左方）<br><code>inout</code>：同时在内部和外部</td></tr><tr><td>mpl.rcParams[‘<code>ytick.left</code>’] = True</td><td>是否在画布左边显示 y 轴刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>ytick.right</code>’] = False</td><td>是否在画布右边显示 y 轴刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>ytick.labelleft</code>’] = True</td><td>是否在画布左边显示 y 轴刻度文字标签</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>ytick.labelright</code>’] = False</td><td>是否在画布右边显示 y 轴刻度文字标签</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>ytick.labelsize</code>’] = ‘medium’</td><td>y 轴刻度文字大小</td><td><code>xx-small</code>, <code>x-small</code>, <code>small</code>, <code>medium</code> <br> <code>large</code>, <code>x-large</code>, <code>xx-large</code>, <code>smaller</code>, <code>larger</code><br>也可以使用数字来表示字体大小</td></tr><tr><td>mpl.rcParams[‘<code>ytick.major.left</code>’] = True</td><td>是否在画布左边显示 y 轴主（大）刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>ytick.major.right</code>’] = True</td><td>是否在画布右边显示 y 轴主（大）刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>ytick.major.pad</code>’] = 3.5</td><td>y 轴主（大）刻度与文字标签的距离</td><td>float 类型距离值</td></tr><tr><td>mpl.rcParams[‘<code>ytick.major.size</code>’] = 3.5</td><td>y 轴主（大）刻度的大小</td><td>float 类型大小值</td></tr><tr><td>mpl.rcParams[‘<code>ytick.major.width</code>’] = 0.8</td><td>y 轴主（大）刻度的宽度</td><td>float 类型宽度值</td></tr><tr><td>mpl.rcParams[‘<code>ytick.minor.left</code>’] = True</td><td>是否在画布左边显示 y 轴次（小）刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>ytick.minor.right</code>’] = True</td><td>是否在画布右边显示 y 轴次（小）刻度</td><td><code>True</code>：是；<code>False</code>：否</td></tr><tr><td>mpl.rcParams[‘<code>ytick.minor.pad</code>’] = 3.4</td><td>y 轴次（小）刻度与文字标签的距离</td><td>float 类型距离值</td></tr><tr><td>mpl.rcParams[‘<code>ytick.minor.size</code>’] = 2.0</td><td>y 轴次（小）刻度的大小</td><td>float 类型大小值</td></tr><tr><td>mpl.rcParams[‘<code>ytick.minor.width</code>’] = 0.6</td><td>y 轴次（小）刻度的宽度</td><td>float 类型宽度值</td></tr><tr><td>mpl.rcParams[‘<code>ytick.minor.visible</code>’] = False</td><td>y 轴次（小）刻度的可见性</td><td><code>True</code>：是；<code>False</code>：否</td></tr></tbody></table><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105638122</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matplotlib </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 NumPy（六）：矩阵 / 线性代数库与 IO 操作</title>
      <link href="/article/013/"/>
      <url>/article/013/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-numpy-ju-zhen-ku-font"><font color="#FF0000">【1x00】NumPy 矩阵库</font></a><ul><li><a href="#font-color-1bc3fb-1x01-numpy-mat-font"><font color="#1BC3FB">【1x01】numpy.mat()</font></a></li><li><a href="#font-color-1bc3fb-1x02-numpy-asmatrix-font"><font color="#1BC3FB">【1x02】numpy.asmatrix()</font></a></li><li><a href="#font-color-1bc3fb-1x03-numpy-matrix-font"><font color="#1BC3FB">【1x03】numpy.matrix()</font></a></li><li><a href="#font-color-1bc3fb-1x04-mat-asmatrix-matrix-de-qu-bie-font"><font color="#1BC3FB">【1x04】mat() / asmatrix() / matrix() 的区别</font></a></li><li><a href="#font-color-1bc3fb-1x05-numpy-bmat-font"><font color="#1BC3FB">【1x05】numpy.bmat()</font></a></li><li><a href="#font-color-1bc3fb-1x06-numpy-matlib-empty-font"><font color="#1BC3FB">【1x06】numpy.matlib.empty()</font></a></li><li><a href="#font-color-1bc3fb-1x07-numpy-matlib-zeros-font"><font color="#1BC3FB">【1x07】numpy.matlib.zeros()</font></a></li><li><a href="#font-color-1bc3fb-1x08-numpy-matlib-ones-font"><font color="#1BC3FB">【1x08】numpy.matlib.ones()</font></a></li><li><a href="#font-color-1bc3fb-1x09-numpy-matlib-eye-font"><font color="#1BC3FB">【1x09】numpy.matlib.eye()</font></a></li><li><a href="#font-color-1bc3fb-1x10-numpy-matlib-identity-font"><font color="#1BC3FB">【1x10】numpy.matlib.identity()</font></a></li><li><a href="#font-color-1bc3fb-1x11-numpy-matlib-repmat-font"><font color="#1BC3FB">【1x11】numpy.matlib.repmat()</font></a></li><li><a href="#font-color-1bc3fb-1x12-numpy-matlib-rand-font"><font color="#1BC3FB">【1x12】numpy.matlib.rand()</font></a></li><li><a href="#font-color-1bc3fb-1x13-numpy-matlib-randn-font"><font color="#1BC3FB">【1x13】numpy.matlib.randn()</font></a></li></ul></li><li><a href="#font-color-ff0000-2x00-numpy-xian-xing-dai-shu-ku-font"><font color="#FF0000">【2x00】NumPy 线性代数库</font></a><ul><li><a href="#font-color-1bc3fb-2x01-numpy-dot-font"><font color="#1BC3FB">【2x01】numpy.dot()</font></a></li><li><a href="#font-color-1bc3fb-2x02-numpy-vdot-font"><font color="#1BC3FB">【2x02】numpy.vdot()</font></a></li><li><a href="#font-color-1bc3fb-2x03-numpy-inner-font"><font color="#1BC3FB">【2x03】numpy.inner()</font></a></li><li><a href="#font-color-1bc3fb-2x04-numpy-outer-font"><font color="#1BC3FB">【2x04】numpy.outer()</font></a></li><li><a href="#font-color-1bc3fb-2x05-numpy-matmul-font"><font color="#1BC3FB">【2x05】numpy.matmul()</font></a></li><li><a href="#font-color-1bc3fb-2x06-numpy-tensordot-font"><font color="#1BC3FB">【2x06】numpy.tensordot()</font></a></li><li><a href="#font-color-1bc3fb-2x07-numpy-linalg-det-font"><font color="#1BC3FB">【2x07】numpy.linalg.det()</font></a></li><li><a href="#font-color-1bc3fb-2x08-numpy-linalg-solve-font"><font color="#1BC3FB">【2x08】numpy.linalg.solve()</font></a></li><li><a href="#font-color-1bc3fb-2x09-numpy-linalg-inv-font"><font color="#1BC3FB">【2x09】numpy.linalg.inv()</font></a></li></ul></li><li><a href="#font-color-ff0000-3x00-numpy-io-cao-zuo-font"><font color="#FF0000">【3x00】NumPy IO 操作</font></a><ul><li><a href="#font-color-1bc3fb-3x01-numpy-save-font"><font color="#1BC3FB">【3x01】numpy.save()</font></a></li><li><a href="#font-color-1bc3fb-3x02-numpy-load-font"><font color="#1BC3FB">【3x02】numpy.load()</font></a></li><li><a href="#font-color-1bc3fb-3x03-numpy-savez-font"><font color="#1BC3FB">【3x03】numpy.savez()</font></a></li><li><a href="#font-color-1bc3fb-3x04-numpy-savetxt-font"><font color="#1BC3FB">【3x04】numpy.savetxt()</font></a></li><li><a href="#font-color-1bc3fb-3x05-numpy-loadtxt-font"><font color="#1BC3FB">【3x05】numpy.loadtxt()</font></a></li><li><a href="#font-color-1bc3fb-3x06-numpy-genfromtxt-font"><font color="#1BC3FB">【3x06】numpy.genfromtxt()</font></a></li></ul></li></ul><!-- tocstop --><hr><p>NumPy 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/008/">Python 数据分析三剑客之 NumPy（一）：理解 NumPy / 数组基础</a></li><li><a href="https://www.itbob.cn/article/009/">Python 数据分析三剑客之 NumPy（二）：数组索引 / 切片 / 广播 / 拼接 / 分割</a></li><li><a href="https://www.itbob.cn/article/010/">Python 数据分析三剑客之 NumPy（三）：数组的迭代与位运算</a></li><li><a href="https://www.itbob.cn/article/011/">Python 数据分析三剑客之 NumPy（四）：字符串函数总结与对比</a></li><li><a href="https://www.itbob.cn/article/012/">Python 数据分析三剑客之 NumPy（五）：数学 / 算术 / 统计 / 排序 / 条件 / 判断函数合集</a></li><li><a href="https://www.itbob.cn/article/013/">Python 数据分析三剑客之 NumPy（六）：矩阵 / 线性代数库与 IO 操作</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105511641</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-numpy-ju-zhen-ku"><font color="#FF0000">【1x00】NumPy 矩阵库</font></span></h2><p><code>numpy.matlib</code> 模块是 NumPy 的矩阵库，该矩阵库包含多种函数，函数返回的是一个矩阵，而不是 Ndarray 对象。</p><p>官方文档介绍：<a href="https://numpy.org/doc/1.18/reference/routines.matlib.html">https://numpy.org/doc/1.18/reference/routines.matlib.html</a></p><h3><span id="1x01-numpy-mat"><font color="#1BC3FB">【1x01】numpy.mat()</font></span></h3><p><code>numpy.mat()</code> 函数将输入数组转换为为矩阵。</p><p>基本语法：<code>numpy.mat(data[, dtype=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>输入数据，如果 data 为字符串，则需要用逗号或空格分隔列，用分号分隔行</td></tr><tr><td>dtype</td><td>输出矩阵的数据类型，可选项</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.mat([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>amatrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">0</span>]matrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<span class="hljs-number">2</span></code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>aarray([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],       [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.mat(a)<span class="hljs-meta">&gt;&gt;&gt; </span>bmatrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])</code></pre><h3><span id="1x02-numpy-asmatrix"><font color="#1BC3FB">【1x02】numpy.asmatrix()</font></span></h3><p><code>numpy.asmatrix()</code> 函数将输入数组转换为为矩阵。</p><p>基本语法：<code>numpy.asmatrix(data[, dtype=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>输入数据，如果 data 为字符串，则需要用逗号或空格分隔列，用分号分隔行</td></tr><tr><td>dtype</td><td>输出矩阵的数据类型，可选项</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>np.asmatrix(a)matrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])</code></pre><h3><span id="1x03-numpy-matrix"><font color="#1BC3FB">【1x03】numpy.matrix()</font></span></h3><p><code>numpy.matrix()</code> 函数从类似数组的对象或数据字符串中返回一个矩阵。</p><p><font color="#FF0000"><strong>注意：此函数已经不建议再使用，在未来的版本当中可能会被删除。</strong></font></p><p>基本语法：<code>class numpy.matrix(data[, dtype=None, copy=True])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>数组或者字符串，如果 data 为字符串，则需要用逗号或空格分隔列，用分号分隔行</td></tr><tr><td>dtype</td><td>输出矩阵的数据类型，可选项</td></tr><tr><td>copy</td><td>是否复制数据到一个新矩阵，可选项</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.matrix(<span class="hljs-string">&#x27;1 2; 3 4&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>amatrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.matrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>bmatrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])</code></pre><h3><span id="1x04-mat-asmatrix-matrix-de-qu-bie"><font color="#1BC3FB">【1x04】mat() / asmatrix() / matrix() 的区别</font></span></h3><p>如果输入已经是一个矩阵或一个数组，则 <code>mat()</code> 和 <code>asmatrix()</code> 函数不会执行复制操作，相当于 <code>matrix(data, copy=False)</code></p><p>对比举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.mat(a)<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.matrix(a)<span class="hljs-meta">&gt;&gt;&gt; </span>d = np.asmatrix(a)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>aarray([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],       [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>bmatrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>cmatrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>dmatrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>aarray([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],       [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>bmatrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>c              <span class="hljs-comment"># matrix() 函数默认执行 copy 操作，所以数据不变</span>matrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>dmatrix([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>]])</code></pre><h3><span id="1x05-numpy-bmat"><font color="#1BC3FB">【1x05】numpy.bmat()</font></span></h3><p><code>numpy.bmat()</code> 函数用于从字符串、嵌套序列或数组生成矩阵对象，一般用于创建复合矩阵。</p><p>基本语法：<code>numpy.bmat(obj[, ldict=None, gdict=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>obj</td><td>数组或者字符串，如果 data 为字符串，则需要用逗号或空格分隔列，用分号分隔行</td></tr><tr><td>ldict</td><td>字典，用于替换当前帧中的本地操作数。如果 obj 不是字符串或 gdict 为 None，则将被忽略</td></tr><tr><td>gdict</td><td>字典，用于替换当前帧中的全局操作数。如果 obj 不是字符串则忽略</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.mat(<span class="hljs-string">&#x27;1 1; 1 1&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.mat(<span class="hljs-string">&#x27;2 2; 2 2&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.mat(<span class="hljs-string">&#x27;3 4; 5 6&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>d = np.mat(<span class="hljs-string">&#x27;7 8; 9 0&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>np.bmat([[a, b], [c, d]])matrix([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>],        [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>np.bmat(np.r_[np.c_[a, b], np.c_[c, d]])matrix([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>],        [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>np.bmat(<span class="hljs-string">&#x27;a,b; c,d&#x27;</span>)matrix([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>],        [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>]])</code></pre><h3><span id="1x06-numpy-matlib-empty"><font color="#1BC3FB">【1x06】numpy.matlib.empty()</font></span></h3><p><code>numpy.matlib.empty()</code> 函数用于创建一个给定形状和数据类型的新矩阵。</p><p>基本语法：<code>numpy.matlib.empty(shape[, dtype=None, order='C'])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>shape</td><td>定义新矩阵的形状</td></tr><tr><td>dtype</td><td>数据类型，可选项</td></tr><tr><td>order</td><td>以行优先（C）或列优先（Fortran）的顺序存储多维数据在内存中，可选项</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.empty((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))[[<span class="hljs-number">9.90263869e+067</span> <span class="hljs-number">8.01304531e+262</span>] [<span class="hljs-number">2.60799828e-310</span> <span class="hljs-number">0.00000000e+000</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.empty((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), dtype=<span class="hljs-built_in">int</span>))[[ -<span class="hljs-number">793016358</span>  -<span class="hljs-number">243407933</span>] [ -<span class="hljs-number">959331519</span> -<span class="hljs-number">2060787213</span>]]</code></pre><h3><span id="1x07-numpy-matlib-zeros"><font color="#1BC3FB">【1x07】numpy.matlib.zeros()</font></span></h3><p><code>numpy.matlib.zeros()</code> 函数创建一个以 0 填充的给定形状和类数据型的矩阵。</p><p>基本语法：<code>numpy.matlib.zeros(shape[, dtype=None, order='C'])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>shape</td><td>定义新矩阵的形状</td></tr><tr><td>dtype</td><td>数据类型，可选项</td></tr><tr><td>order</td><td>以行优先（C）或列优先（Fortran）的顺序存储多维数据在内存中，可选项</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.matlib.zeros((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))matrix([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],        [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])</code></pre><h3><span id="1x08-numpy-matlib-ones"><font color="#1BC3FB">【1x08】numpy.matlib.ones()</font></span></h3><p><code>numpy.matlib.ones()</code> 函数创建一个以 1 填充的给定形状和类数据型的矩阵。</p><p>基本语法：<code>numpy.matlib.ones(shape[, dtype=None, order='C'])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>shape</td><td>定义新矩阵的形状</td></tr><tr><td>dtype</td><td>数据类型，可选项</td></tr><tr><td>order</td><td>以行优先（C）或列优先（Fortran）的顺序存储多维数据在内存中，可选项</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.matlib.ones((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))matrix([[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],        [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]])</code></pre><h3><span id="1x09-numpy-matlib-eye"><font color="#1BC3FB">【1x09】numpy.matlib.eye()</font></span></h3><p><code>numpy.matlib.eye()</code> 函数创建一个对角线元素为 1，其他位置为零的矩阵。</p><p>基本语法：<code>numpy.matlib.eye(n[, M=None, k=0, dtype=&lt;class 'float'&gt;, order='C'])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>n</td><td>返回的矩阵的行数，int 类型</td></tr><tr><td>M</td><td>返回的矩阵的列数，int 类型，可选项，默认为 n</td></tr><tr><td>k</td><td>对角线索引，可选项，0 表示主对角线，正值表示上对角线，负值表示下对角线，该对角线上元素的值将会是 1</td></tr><tr><td>dtype</td><td>返回矩阵的数据类型，可选项</td></tr><tr><td>order</td><td>以行优先（C）或列优先（Fortran）的顺序存储多维数据在内存中，可选项</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.eye(n=<span class="hljs-number">3</span>, k=<span class="hljs-number">1</span>))[[<span class="hljs-number">0.</span> <span class="hljs-number">1.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">1.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.eye(n=<span class="hljs-number">3</span>, k=-<span class="hljs-number">1</span>))[[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">1.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">1.</span> <span class="hljs-number">0.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.eye(n=<span class="hljs-number">3</span>, M=<span class="hljs-number">4</span>, k=<span class="hljs-number">0</span>, dtype=<span class="hljs-built_in">int</span>))[[<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>]]</code></pre><h3><span id="1x10-numpy-matlib-identity"><font color="#1BC3FB">【1x10】numpy.matlib.identity()</font></span></h3><p><code>numpy.matlib.identity()</code> 函数创建一个给定大小的单位矩阵。</p><p>单位矩阵：在矩阵的乘法中，有一种矩阵起着特殊的作用，如同数的乘法中的1，这种矩阵被称为单位矩阵。它是个方阵，从左上角到右下角的对角线（称为主对角线）上的元素均为1。除此以外全都为0。</p><p>基本语法：<code>numpy.matlib.identity(n[, dtype=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>n</td><td>返回的单位矩阵的大小，int 类型</td></tr><tr><td>dtype</td><td>可选项，返回的单位矩阵的数据类型</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.identity(<span class="hljs-number">3</span>, dtype=<span class="hljs-built_in">int</span>))[[<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>]]</code></pre><h3><span id="1x11-numpy-matlib-repmat"><font color="#1BC3FB">【1x11】numpy.matlib.repmat()</font></span></h3><p><code>numpy.matlib.repmat()</code> 函数用于重复数组或矩阵 m*n 次。</p><p>基本语法：<code>numpy.matlib.repmat(a, m, n)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>m,n</td><td>沿第一轴和第二轴重复的次数</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array(<span class="hljs-number">1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.arange(<span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>aarray(<span class="hljs-number">1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>barray([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.repmat(a, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))[[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>] [<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.repmat(b, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))[[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]]</code></pre><h3><span id="1x12-numpy-matlib-rand"><font color="#1BC3FB">【1x12】numpy.matlib.rand()</font></span></h3><p><code>numpy.matlib.rand()</code> 函数创建一个给定大小的矩阵，其中的数据在 <code>[0, 1)</code> 区间随机取值来填充。</p><p>基本语法：<code>numpy.matlib.rand(*args)</code></p><p>参数解释：<code>*args</code>：输出矩阵的形状，如果给定为 N 个整数，则每个整数指定一维的大小，如果以元组形式给出，则该元组表示输出矩阵完整的形状。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.rand(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))[[<span class="hljs-number">0.27957871</span> <span class="hljs-number">0.48748368</span> <span class="hljs-number">0.0970184</span> ] [<span class="hljs-number">0.71062224</span> <span class="hljs-number">0.92503824</span> <span class="hljs-number">0.72415015</span>]]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.rand((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)))[[<span class="hljs-number">0.08814715</span> <span class="hljs-number">0.0307317</span>  <span class="hljs-number">0.77775332</span>] [<span class="hljs-number">0.81158748</span> <span class="hljs-number">0.09173265</span> <span class="hljs-number">0.77497881</span>]]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.rand(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">4</span>)     <span class="hljs-comment"># 如果第一个参数是元组，则其他参数将被忽略</span>[[<span class="hljs-number">0.53407924</span> <span class="hljs-number">0.56006372</span> <span class="hljs-number">0.63903716</span>] [<span class="hljs-number">0.56132381</span> <span class="hljs-number">0.90300814</span> <span class="hljs-number">0.44074964</span>]] <span class="hljs-number">4</span></code></pre><h3><span id="1x13-numpy-matlib-randn"><font color="#1BC3FB">【1x13】numpy.matlib.randn()</font></span></h3><p><code>numpy.matlib.randn()</code> 函数创建一个标准正态分布的随机矩阵。</p><p>标准正态分布，是一个在数学、物理及工程等领域都非常重要的概率分布，在统计学的许多方面有着重大的影响力。期望值<code>μ=0</code>，即曲线图象对称轴为Y轴，标准差 <code>σ=1</code> 条件下的正态分布，记为 <code>N（0，1）</code>。</p><p>标准正态分布又称为 u 分布，是以 0 为均数、以 1 为标准差的正态分布，记为 <code>N（0，1）</code></p><p>基本语法：<code>numpy.matlib.randn(*args)</code></p><p>参数解释：<code>*args</code>：输出矩阵的形状，如果给定为 N 个整数，则每个整数指定一维的大小，如果以元组形式给出，则该元组表示输出矩阵完整的形状。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matlib.randn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))[[ <span class="hljs-number">0.82976978</span> -<span class="hljs-number">0.9798698</span>   <span class="hljs-number">0.71262414</span>] [ <span class="hljs-number">2.31211127</span> -<span class="hljs-number">0.5090537</span>   <span class="hljs-number">1.12357032</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-number">2.5</span> * np.matlib.randn((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)) + <span class="hljs-number">3</span>)         <span class="hljs-comment"># 2 x 4 矩阵 N(3, 6.25)</span>[[-<span class="hljs-number">0.66974538</span>  <span class="hljs-number">4.9354863</span>   <span class="hljs-number">2.46138048</span>  <span class="hljs-number">7.05576713</span>] [ <span class="hljs-number">0.80688217</span>  <span class="hljs-number">1.79017491</span>  <span class="hljs-number">3.78979646</span> -<span class="hljs-number">1.99071372</span>]]</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105511641</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="2x00-numpy-xian-xing-dai-shu-ku"><font color="#FF0000">【2x00】NumPy 线性代数库</font></span></h2><p>线性代数是数学的一个分支，它的研究对象是向量，向量空间（或称线性空间），线性变换和有限维的线性方程组。NumPy 中也提供了线性代数函数库 <code>numpy.linalg</code>。</p><p>官方文档介绍：<a href="https://numpy.org/doc/1.18/reference/routines.linalg.html">https://numpy.org/doc/1.18/reference/routines.linalg.html</a></p><h3><span id="2x01-numpy-dot"><font color="#1BC3FB">【2x01】numpy.dot()</font></span></h3><p><code>numpy.dot()</code> 函数用于计算两个数组的点积。</p><p>基本语法：<code>numpy.dot(a, b[, out=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>第一个数组</td></tr><tr><td>b</td><td>第二个数组</td></tr><tr><td>out</td><td>可选项，放置结果的备用输出数组</td></tr></tbody></table><ul><li>如果 a 和 b 均为一维数组，计算的是这两个数组对应下标元素的乘积和（数学上称之为内积）；</li><li>如果 a 和 b 均为二维数组，计算的是两个数组的矩阵乘积；</li><li>如果 a 和 b 均为多维数组，它的通用计算公式为：<code>dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])</code>，即结果数组中的每个元素都是数组 a 的最后一维上的所有元素与数组 b 的倒数第二维上的所有元素的乘积和。</li></ul><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">11</span>,<span class="hljs-number">12</span>],[<span class="hljs-number">13</span>,<span class="hljs-number">14</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.dot(a,b))     <span class="hljs-comment"># [[1*11+2*13, 1*12+2*14],[3*11+4*13, 3*12+4*14]]</span>[[<span class="hljs-number">37</span> <span class="hljs-number">40</span>] [<span class="hljs-number">85</span> <span class="hljs-number">92</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>c = np.arange(<span class="hljs-number">3</span>*<span class="hljs-number">4</span>*<span class="hljs-number">5</span>*<span class="hljs-number">6</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>d = np.arange(<span class="hljs-number">3</span>*<span class="hljs-number">4</span>*<span class="hljs-number">5</span>*<span class="hljs-number">6</span>)[::-<span class="hljs-number">1</span>].reshape((<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>))<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.dot(c, d)[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>])<span class="hljs-number">499128</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(c[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,:] * d[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,:,<span class="hljs-number">2</span>]))<span class="hljs-number">499128</span></code></pre><h3><span id="2x02-numpy-vdot"><font color="#1BC3FB">【2x02】numpy.vdot()</font></span></h3><p><code>numpy.vdot()</code> 函数返回两个向量的点积，如果第一个参数是复数，那么它的共轭复数会用于计算。 如果参数是多维数组，它会被展开。</p><p>共轭复数：两个实部相等，虚部互为相反数的复数互为共轭复数。</p><p>基本语法：<code>numpy.vdot(a, b)</code></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>+<span class="hljs-number">2j</span>, <span class="hljs-number">3</span>+<span class="hljs-number">4j</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">5</span>+<span class="hljs-number">6j</span>, <span class="hljs-number">7</span>+<span class="hljs-number">8j</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.vdot(a, b))       <span class="hljs-comment"># a 的共轭复数用于计算：(1-2j) * (5+6j) + (3-4j) * (7+8j)</span>(<span class="hljs-number">70</span>-<span class="hljs-number">8j</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.vdot(b, a))       <span class="hljs-comment"># b 的共轭复数用于计算：(1+2j) * (5-6j) + (3+4j) * (7-8j)</span>(<span class="hljs-number">70</span>+<span class="hljs-number">8j</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>c = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>d = np.array([[<span class="hljs-number">4</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.vdot(c, d))              <span class="hljs-comment"># 1*4 + 4*1 + 5*2 + 6*2</span><span class="hljs-number">30</span></code></pre><h3><span id="2x03-numpy-inner"><font color="#1BC3FB">【2x03】numpy.inner()</font></span></h3><p><code>numpy.inner()</code> 函数计算一维数组的点积，对于其他维度，返回最后一个轴上的和的乘积。</p><p>基本语法：<code>numpy.inner(a, b)</code></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">11</span>,<span class="hljs-number">12</span>],[<span class="hljs-number">13</span>,<span class="hljs-number">14</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.inner(a,b))       <span class="hljs-comment"># [[1*11+2*12, 1*13+2*14], [3*11+4*12, 3*13+4*14]]</span>[[<span class="hljs-number">35</span> <span class="hljs-number">41</span>] [<span class="hljs-number">81</span> <span class="hljs-number">95</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>c = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>d = np.array([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.inner(c,d))      <span class="hljs-comment"># 1*0+2*1+3*0</span><span class="hljs-number">2</span></code></pre><h3><span id="2x04-numpy-outer"><font color="#1BC3FB">【2x04】numpy.outer()</font></span></h3><p><code>numpy.outer()</code> 函数计算两个向量的外积。</p><p>基本语法：<code>numpy.outer(a, b[, out=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>第一个向量，如果不是一维的则在计算前会将其展平</td></tr><tr><td>b</td><td>第一个向量，如果不是一维的则在计算前会将其展平</td></tr><tr><td>out</td><td>结果存储的位置，可选项，类似于 (M, N) 结构的 Ndarray 对象</td></tr></tbody></table><p>外积一般指两个向量的向量积，若两向量：<code>a = [a0, a1, ..., aM]</code>  <code>b = [b0, b1, ..., bN]</code>，外积如下：</p><pre><code class="hljs mipsasm">[[<span class="hljs-built_in">a0</span>*<span class="hljs-keyword">b0 </span> <span class="hljs-built_in">a0</span>*<span class="hljs-keyword">b1 </span>... <span class="hljs-built_in">a0</span>*<span class="hljs-keyword">bN </span>] [<span class="hljs-built_in">a1</span>*<span class="hljs-keyword">b0 </span>   . [ ...          . [aM*<span class="hljs-keyword">b0 </span>           aM*<span class="hljs-keyword">bN </span>]]</code></pre><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.outer(a, b))[[ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>] [<span class="hljs-number">10</span> <span class="hljs-number">12</span> <span class="hljs-number">14</span> <span class="hljs-number">16</span>] [<span class="hljs-number">15</span> <span class="hljs-number">18</span> <span class="hljs-number">21</span> <span class="hljs-number">24</span>] [<span class="hljs-number">20</span> <span class="hljs-number">24</span> <span class="hljs-number">28</span> <span class="hljs-number">32</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>c = np.array([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>], dtype=<span class="hljs-built_in">object</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.outer(c, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))[[<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;aa&#x27;</span> <span class="hljs-string">&#x27;aaa&#x27;</span>] [<span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-string">&#x27;bb&#x27;</span> <span class="hljs-string">&#x27;bbb&#x27;</span>] [<span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-string">&#x27;cc&#x27;</span> <span class="hljs-string">&#x27;ccc&#x27;</span>]]</code></pre><h3><span id="2x05-numpy-matmul"><font color="#1BC3FB">【2x05】numpy.matmul()</font></span></h3><p><code>numpy.matmul()</code> 函数计算两个矩阵的乘积。</p><p>矩阵的乘积运算：</p><p>设 A 为 <code>m x p</code> 的矩阵，B 为 <code>p x n</code> 的矩阵，那么称 <code>m x n</code> 的矩阵 C 为矩阵 A 与 B 的乘积，记作 C = AB，其中矩阵 C 中的第 i 行第 j 列元素可以表示为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mi>B</mi><msub><mo stretchy="false">)</mo><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><msub><mi>a</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><msub><mi>b</mi><mrow><mi>k</mi><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><msub><mi>b</mi><mrow><mn>1</mn><mi>j</mi></mrow></msub><mo>+</mo><msub><mi>a</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub><msub><mi>b</mi><mrow><mn>2</mn><mi>j</mi></mrow></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mrow><mi>i</mi><mi>p</mi></mrow></msub><msub><mi>b</mi><mrow><mi>p</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">(AB)_{ij} = \sum_{k=1}^p a_{ik}b_{kj} = a_{i1}b_{1j} + a_{i2}b_{2j} + ... + a_{ip}b_{pj}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0006em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3471em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">ik</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">kj</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></p><hr><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mspace width="2em"><mspace width="2em"><mspace width="2em"><mspace width="2em"><mspace width="2em"><mspace width="2em"><mi>B</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mspace></mspace></mspace></mspace></mspace></mspace></mrow><annotation encoding="application/x-tex">A =\left[\begin{matrix}a_{1,1} &amp; a_{1,2} &amp; a_{1,3} \\a_{2,1} &amp; a_{2,2} &amp; a_{2,3} \end{matrix}\right]\qquad\qquad\qquad\qquad\qquad\qquad B =\left[\begin{matrix}b_{1,1} &amp; b_{1,2} \\b_{2,1} &amp; b_{2,2} \\b_{3,1} &amp; b_{3,2}\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewbox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><mi>A</mi><mi>B</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><msub><mi>b</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><msub><mi>b</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><msub><mi>b</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><msub><mi>b</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><msub><mi>b</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><msub><mi>b</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><msub><mi>b</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><msub><mi>b</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><msub><mi>b</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>1</mn></mrow></msub><msub><mi>b</mi><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub><msub><mi>b</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mrow><mn>2</mn><mo separator="true">,</mo><mn>3</mn></mrow></msub><msub><mi>b</mi><mrow><mn>3</mn><mo separator="true">,</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">C = AB =\left[\begin{matrix}a_{1,1}b_{1,1} &amp; a_{1,2}b_{2,1} &amp; a_{1,3}b_{3,1}, &amp; a_{1,1}b_{1,2} &amp; a_{1,2}b_{2,2} &amp; a_{1,3}b_{3,2} \\a_{2,1}b_{1,1} &amp; a_{2,2}b_{2,1} &amp; a_{2,3}b_{3,1}, &amp; a_{2,1}b_{1,2} &amp; a_{2,2}b_{2,2} &amp; a_{2,3}b_{3,2}\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><hr><p>矩阵相乘的条件：</p><ul><li>当矩阵 A 的列数（column）等于矩阵 B 的行数（row）时，A 与 B 可以相乘；</li><li>矩阵 C 的行数等于矩阵 A 的行数，C 的列数等于 B 的列数；</li><li>乘积 C 的第 m 行第 n 列的元素等于矩阵 A 的第 m 行的元素与矩阵 B 的第 n 列对应元素乘积之和。</li></ul><hr><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">4</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matmul(a, b))[[<span class="hljs-number">4</span> <span class="hljs-number">1</span>] [<span class="hljs-number">2</span> <span class="hljs-number">2</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>c = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>d = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matmul(c, d))[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matmul(d, c))[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>e = np.arange(<span class="hljs-number">8</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>f = np.arange(<span class="hljs-number">4</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.matmul(e, f))[[[ <span class="hljs-number">2</span>  <span class="hljs-number">3</span>]  [ <span class="hljs-number">6</span> <span class="hljs-number">11</span>]] [[<span class="hljs-number">10</span> <span class="hljs-number">19</span>]  [<span class="hljs-number">14</span> <span class="hljs-number">27</span>]]]</code></pre><h3><span id="2x06-numpy-tensordot"><font color="#1BC3FB">【2x06】numpy.tensordot()</font></span></h3><p><code>numpy.tensordot()</code> 函数计算两个不同维度矩阵的乘积。</p><p>基本语法：<code>numpy.tensordot(a, b, axes=2)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>第一个矩阵</td></tr><tr><td>b</td><td>第二个矩阵</td></tr><tr><td>axis</td><td>指定收缩的轴<br>如果是一个整型 m，表示指定数组 a 的后 m 个轴和数组 b 的前 m 个轴分别进行内积，即对应位置元素相乘、再整体求和<br>如果是一个列表 [m, n]，那么表示 a 的第 m+1 个 (索引为m) 轴和 b 的第 n+1 (索引为n) 个轴进行内积</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>aarray([[<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>],       [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>],       [<span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>barray([[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>],       [<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>],       [<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>],       [<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.tensordot(a, b, <span class="hljs-number">1</span>))[[<span class="hljs-number">34</span> <span class="hljs-number">69</span> <span class="hljs-number">30</span> <span class="hljs-number">52</span> <span class="hljs-number">30</span>] [<span class="hljs-number">24</span> <span class="hljs-number">54</span> <span class="hljs-number">31</span> <span class="hljs-number">38</span>  <span class="hljs-number">8</span>] [<span class="hljs-number">33</span> <span class="hljs-number">61</span> <span class="hljs-number">27</span> <span class="hljs-number">71</span> <span class="hljs-number">40</span>]]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.array(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">9</span>)).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>d = np.array((<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>), dtype=<span class="hljs-built_in">object</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>carray([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]],       [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>],        [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span>darray([[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>],       [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]], dtype=<span class="hljs-built_in">object</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.tensordot(c, d))[<span class="hljs-string">&#x27;abbcccdddd&#x27;</span> <span class="hljs-string">&#x27;aaaaabbbbbbcccccccdddddddd&#x27;</span>]</code></pre><h3><span id="2x07-numpy-linalg-det"><font color="#1BC3FB">【2x07】numpy.linalg.det()</font></span></h3><p><code>numpy.linalg.det()</code> 函数计算矩阵的行列式。</p><p>阵行列式是指矩阵的全部元素构成的行列式，设 A=(a<sub>ij</sub>) 是数域 P 上的一个 n 阶矩阵，则所有 A=(a<sub>ij</sub>) 中的元素组成的行列式称为矩阵 A 的行列式，记为 <code>|A|</code> 或 <code>det(A)</code></p><p>一个 2×2 矩阵的行列式可表示如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mi>a</mi><mi>d</mi><mo>−</mo><mi>b</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">det = \left[ \begin{matrix} a &amp; b \\ c &amp; d \end{matrix} \right] = ad - bc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">c</span></span></span></span></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.linalg.det(a))-<span class="hljs-number">2.0000000000000004</span></code></pre><h3><span id="2x08-numpy-linalg-solve"><font color="#1BC3FB">【2x08】numpy.linalg.solve()</font></span></h3><p><code>numpy.linalg.solve()</code> 函数求解线性矩阵方程或线性标量方程组。</p><hr><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.25em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>3</mn><mi>x</mi><mo>+</mo><mi>y</mi><mo>=</mo><mn>9</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mo>+</mo><mn>2</mn><mi>y</mi><mo>=</mo><mn>8</mn></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left \{ \begin{aligned}3x+y=9 \\x+2y=8\end{aligned}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">9</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>用矩阵可表示为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\left[\begin{matrix}3 &amp; 1 \\1 &amp; 2\end{matrix}\right]\left[\begin{matrix}x &amp; y\end{matrix}\right]= \left[\begin{matrix}9 &amp; 8\end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></p><hr><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">9</span>,<span class="hljs-number">8</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.linalg.solve(a, b))[<span class="hljs-number">2.</span> <span class="hljs-number">3.</span>]</code></pre><h3><span id="2x09-numpy-linalg-inv"><font color="#1BC3FB">【2x09】numpy.linalg.inv()</font></span></h3><p><code>numpy.linalg.inv()</code> 函数计算矩阵的逆矩阵。</p><p>设 A 是数域上的一个 n 阶矩阵，若在相同数域上存在另一个 n 阶矩阵 B，使得：AB = BA = E，则我们称 B 是 A 的逆矩阵，而 A 则被称为可逆矩阵。注：E 为单位矩阵。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.linalg.inv(a)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[-<span class="hljs-number">2.</span>   <span class="hljs-number">1.</span> ] [ <span class="hljs-number">1.5</span> -<span class="hljs-number">0.5</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>a * b == b * aarray([[ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>],       [ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>]])</code></pre><h2><span id="3x00-numpy-io-cao-zuo"><font color="#FF0000">【3x00】NumPy IO 操作</font></span></h2><p>NumPy IO 操作即读写磁盘上的文本数据或二进制数据，在 NumPy 中有专门的 <code>.npy</code> / <code>npy</code> 文件，<code>.npy</code> 文件用于储存单个 Ndarray 对象；<code>.npz</code> 文件用于储存多个 Ndarray 对象。</p><h3><span id="3x01-numpy-save"><font color="#1BC3FB">【3x01】numpy.save()</font></span></h3><p><code>numpy.save()</code> 函数将数组保存到二进制文件（<code>.npy</code> 文件）中。</p><p>基本语法：<code>numpy.save(file, arr[, allow_pickle=True, fix_imports=True])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td>要保存的文件名，可以带路径，文件后缀为 <code>.npy</code>，若路径末尾没有后缀，则会默认加上 <code>.npy</code> 后缀</td></tr><tr><td>arr</td><td>要保存的数组</td></tr><tr><td>allow_pickle</td><td>bool 值，可选项，是否允许使用 Python pickle 保存数组对象<br>Python pickle 用于在保存到磁盘文件或从磁盘文件读取之前，对对象进行序列化和反序列化<br>pickle 序列化后的数据，可读性差，人一般无法识别</td></tr><tr><td>fix_imports</td><td>bool 值，可选项，强制以 Python 2 兼容方式对 Python 3 上的数组对象进行处理<br>如果 fix_imports 为True，则 pickle 将尝试将新的 Python 3 名称映射到 Python 2 中使用的旧模块名称，以便 pickle 数据流可被 Python 2 读取</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>np.save(<span class="hljs-string">&#x27;D:\\file\\outfile.npy&#x27;</span>, a)</code></pre><h3><span id="3x02-numpy-load"><font color="#1BC3FB">【3x02】numpy.load()</font></span></h3><p><code>numpy.load()</code> 函数用于读取 <code>.npy</code> / <code>npz</code> 文件里面的内容。</p><p>基本语法：<code>numpy.load(file[, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td>要读取的 <code>npy</code> 文件对象</td></tr><tr><td>mmap_mode</td><td>可选项，读取文件的模式，可选参数  <code>r+</code> <code>r</code> <code>w+</code> <code>c</code>，与 Python 读取文件模式类似，模式含义参见 <a href="https://numpy.org/doc/1.18/reference/generated/numpy.memmap.html">numpy.memmap</a></td></tr><tr><td>allow_pickle</td><td>bool 值，可选项，是否允许使用 Python pickle 保存数组对象<br>Python pickle 用于在保存到磁盘文件或从磁盘文件读取之前，对对象进行序列化和反序列化<br>pickle 序列化后的数据，可读性差，人一般无法识别</td></tr><tr><td>fix_imports</td><td>bool 值，可选项，强制以 Python 2 兼容方式对 Python 3 上的数组对象进行处理<br>如果 fix_imports 为True，则 pickle 将尝试将新的 Python 3 名称映射到 Python 2 中使用的旧模块名称，以便 pickle 数据流可被 Python 2 读取</td></tr><tr><td>encoding</td><td>str 类型，可选项，读取 Python2 字符串时使用什么编码<br>仅当在 Python3 中加载 Python 2 生成的 pickled 文件（包括包含对象数组的 npy/npz 文件）时才有用<br>不允许使用 <code>latin1</code>、<code>ASCII</code> 和 <code>bytes</code> 以外的值，因为它们可能损坏数字数据。默认值为 <code>ASCII</code></td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>np.save(<span class="hljs-string">&#x27;D:\\file\\outfile.npy&#x27;</span>, a)<span class="hljs-meta">&gt;&gt;&gt; </span>np.load(<span class="hljs-string">&#x27;D:\\file\\outfile.npy&#x27;</span>)array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],       [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])</code></pre><h3><span id="3x03-numpy-savez"><font color="#1BC3FB">【3x03】numpy.savez()</font></span></h3><p><code>numpy.savez()</code> 函数将多个数组保存到二进制文件（<code>.npz</code> 文件）中。</p><p>基本语法：<code>numpy.savez(file, *args[, **kwds])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td>要保存的文件名，可以带路径，文件后缀为 <code>.npz</code>，若路径末尾没有后缀，则会默认加上 <code>.npz</code> 后缀</td></tr><tr><td>args</td><td>保存的数组，由于 Python 不知道外面 savez 的数组的名称，因此将使用 <code>arr_0</code>，<code>arr_1</code> 等名称保存数组，这些参数可以是任何表达式</td></tr><tr><td>kwds</td><td>关键字参数，可选项，数组将与关键字名称一起保存在文件中</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.sin(b)           <span class="hljs-comment"># c 使用关键字参数 sin_array</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.savez(<span class="hljs-string">&#x27;D:\\file\\outfile.npz&#x27;</span>, a, b, sin_array=c)<span class="hljs-meta">&gt;&gt;&gt; </span>r = np.load(<span class="hljs-string">&#x27;D:\\file\\outfile.npz&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(r.files)         <span class="hljs-comment"># 查看各个数组名称</span>[<span class="hljs-string">&#x27;sin_array&#x27;</span>, <span class="hljs-string">&#x27;arr_0&#x27;</span>, <span class="hljs-string">&#x27;arr_1&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(r[<span class="hljs-string">&#x27;arr_0&#x27;</span>])      <span class="hljs-comment"># 数组 a</span>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(r[<span class="hljs-string">&#x27;arr_1&#x27;</span>])      <span class="hljs-comment"># 数组 b</span>[<span class="hljs-number">0.</span>  <span class="hljs-number">0.1</span> <span class="hljs-number">0.2</span> <span class="hljs-number">0.3</span> <span class="hljs-number">0.4</span> <span class="hljs-number">0.5</span> <span class="hljs-number">0.6</span> <span class="hljs-number">0.7</span> <span class="hljs-number">0.8</span> <span class="hljs-number">0.9</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(r[<span class="hljs-string">&#x27;sin_array&#x27;</span>])  <span class="hljs-comment"># 数组 c</span>[<span class="hljs-number">0.</span>         <span class="hljs-number">0.09983342</span> <span class="hljs-number">0.19866933</span> <span class="hljs-number">0.29552021</span> <span class="hljs-number">0.38941834</span> <span class="hljs-number">0.47942554</span> <span class="hljs-number">0.56464247</span> <span class="hljs-number">0.64421769</span> <span class="hljs-number">0.71735609</span> <span class="hljs-number">0.78332691</span>]</code></pre><h3><span id="3x04-numpy-savetxt"><font color="#1BC3FB">【3x04】numpy.savetxt()</font></span></h3><p><code>numpy.savetxt()</code> 函数将数组保存到文本文件中（txt）。</p><p>基本语法：<code>numpy.savetxt(fname, X[, fmt='%.18e', delimiter=' ', newline='n', header='', footer='', comments='# ', encoding=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>fname</td><td>要保存的文件名，可以带路径，如果文件后缀为 <code>.gz</code>，则文件将自动以压缩格式 <code>gzip</code> 保存</td></tr><tr><td>X</td><td>要保存的数组</td></tr><tr><td>fmt</td><td>格式序列或多格式字符串，可选项</td></tr><tr><td>delimiter</td><td>指定各种分隔符、针对特定列的转换器函数、需要跳过的行数等，可选项</td></tr><tr><td>newline</td><td>字符串或字符分隔线，可选项</td></tr><tr><td>header</td><td>写入文件开头的字符串，可选项</td></tr><tr><td>footer</td><td>写入文件末尾的字符串，可选项</td></tr><tr><td>comments</td><td>注释，在 header 和 footer 字符串之前添加的字符串，可选项</td></tr><tr><td>encoding</td><td>对输出文件进行编码，可选项</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>np.savetxt(<span class="hljs-string">&#x27;D:\\file\\outfile.txt&#x27;</span>, a)<span class="hljs-meta">&gt;&gt;&gt; </span>np.loadtxt(<span class="hljs-string">&#x27;D:\\file\\outfile.txt&#x27;</span>)array([<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0.5</span>).reshape(<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>np.savetxt(<span class="hljs-string">&#x27;D:\\file\\outfile2.txt&#x27;</span>, b, fmt=<span class="hljs-string">&quot;%d&quot;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)  <span class="hljs-comment"># 保存为整数，以逗号分隔</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.loadtxt(<span class="hljs-string">&#x27;D:\\file\\outfile2.txt&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)               <span class="hljs-comment"># 读取数据时也要指定相同的分隔符</span>array([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>],       [<span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>],       [<span class="hljs-number">5.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>],       [<span class="hljs-number">7.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">9.</span>, <span class="hljs-number">9.</span>]])</code></pre><h3><span id="3x05-numpy-loadtxt"><font color="#1BC3FB">【3x05】numpy.loadtxt()</font></span></h3><p><code>numpy.loadtxt()</code> 函数用于读取文本文件（txt）里面的内容。</p><p>基本语法：<code>numpy.loadtxt(fname[, dtype=&lt;class 'float'&gt;, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None])</code></p><p>重要参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>fname</td><td>要读取的文件，文件名或生成器。如果文件扩展名是 <code>.gz</code> 或 <code>.bz2</code>，则首先将文件解压缩，注意，生成器应返回字节字符串</td></tr><tr><td>dtype</td><td>可选项，结果数组的数据类型</td></tr><tr><td>comments</td><td>str 或 str 序列，可选项，用于指示注释开始的字符或字符列表</td></tr><tr><td>delimiter</td><td>str 类型，可选项，指定分隔符</td></tr><tr><td>skiprows</td><td>int 类型，可选项，跳过前 n 行，一般用于跳过第一行表头</td></tr><tr><td>usecols</td><td>int 类型的索引值，读取指定的列</td></tr><tr><td>unpack</td><td>bool 值，可选项，如果为True，则会对返回的数组进行转置</td></tr><tr><td>ndmin</td><td>int 类型，可选项，返回的数组将至少具有 ndmin 维度，否则一维轴将被压缩</td></tr><tr><td>encoding</td><td>str 类型，可选项，用于解码输入文件的编码</td></tr><tr><td>max_rows</td><td>int 类型，可选项，读取 skiprows 行之后的最大行内容。默认值是读取所有行</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>np.savetxt(<span class="hljs-string">&#x27;D:\\file\\outfile.txt&#x27;</span>, a)<span class="hljs-meta">&gt;&gt;&gt; </span>np.loadtxt(<span class="hljs-string">&#x27;D:\\file\\outfile.txt&#x27;</span>)array([<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>])</code></pre><h3><span id="3x06-numpy-genfromtxt"><font color="#1BC3FB">【3x06】numpy.genfromtxt()</font></span></h3><p><code>numpy.genfromtxt()</code> 函数同样用于读取文本文件（txt）里面的内容。该函数比 <code>loadtxt()</code> 函数功能更加强大，<code>genfromtxt()</code> 主要面向结构数组和缺失数据处理。</p><p>官方文档介绍：<a href="https://numpy.org/doc/1.18/reference/generated/numpy.genfromtxt.html">https://numpy.org/doc/1.18/reference/generated/numpy.genfromtxt.html</a></p><p>推荐文章：<a href="https://www.cnblogs.com/Simplelee/p/8975763.html">https://www.cnblogs.com/Simplelee/p/8975763.html</a></p><p>主要语法：<code>numpy.genfromtxt(fname[, dtype=&lt;class 'float'&gt;, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, encoding='bytes'])</code></p><p>主要参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>fname</td><td>要读取的文件，文件名或生成器。如果文件扩展名是 <code>.gz</code> 或 <code>.bz2</code>，则首先将文件解压缩，注意，生成器应返回字节字符串</td></tr><tr><td>dtype</td><td>可选项，结果数组的数据类型</td></tr><tr><td>comments</td><td>str 或 str 序列，可选项，用于指示注释开始的字符或字符列表</td></tr><tr><td>delimiter</td><td>str 类型，可选项，指定分隔符</td></tr><tr><td>skip_header</td><td>int 类型，可选项，文件开头要跳过的行数</td></tr><tr><td>skip_footer</td><td>int 类型，可选项，文件末尾要跳过的行数</td></tr><tr><td>converters</td><td>变量，可选项，将列的数据转换为值的一组函数<br>还可以为丢失的数据提供默认值：<code>converters = &#123;3: lambda s: float(s or 0)&#125;</code></td></tr><tr><td>missing_values</td><td>变量，可选项，与缺少的数据相对应的字符串集，默认情况下使用空格表示缺失</td></tr><tr><td>filling_values</td><td>变量，可选项，缺少数据时用作默认值的一组值</td></tr><tr><td>usecols</td><td>序列，可选项，读取指定的列</td></tr><tr><td>encoding</td><td>str 类型，可选项，用于解码输入文件的编码</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>np.savetxt(<span class="hljs-string">&#x27;D:\\file\\outfile.txt&#x27;</span>, a)<span class="hljs-meta">&gt;&gt;&gt; </span>np.genfromtxt(<span class="hljs-string">&#x27;D:\\file\\outfile.txt&#x27;</span>)array([<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>])&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0.5</span>).reshape(<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>np.savetxt(<span class="hljs-string">&#x27;D:\\file\\outfile2.txt&#x27;</span>, b, fmt=<span class="hljs-string">&quot;%d&quot;</span>, delimiter=<span class="hljs-string">&quot;,&quot;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>np.genfromtxt(<span class="hljs-string">&#x27;D:\\file\\outfile2.txt&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)array([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>],       [<span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">4.</span>],       [<span class="hljs-number">5.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>],       [<span class="hljs-number">7.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">9.</span>, <span class="hljs-number">9.</span>]])</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105511641</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> NumPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 NumPy（五）：数学 / 算术 / 统计 / 排序 / 条件 / 判断函数合集</title>
      <link href="/article/012/"/>
      <url>/article/012/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-numpy-han-shu-su-cha-biao-font"><font color="#FF0000">【1x00】NumPy 函数速查表</font></a></li><li><a href="#font-color-ff0000-2x00-numpy-shu-xue-han-shu-font"><font color="#FF0000">【2x00】NumPy 数学函数</font></a><ul><li><a href="#font-color-1bc3fb-2x01-sin-cos-tan-font"><font color="#1BC3FB">【2x01】sin() / cos() / tan()</font></a></li><li><a href="#font-color-1bc3fb-2x02-arcsin-arccos-arctan-font"><font color="#1BC3FB">【2x02】arcsin() / arccos() / arctan()</font></a></li><li><a href="#font-color-1bc3fb-2x03-around-rint-floor-ceil-font"><font color="#1BC3FB">【2x03】around() / rint() / floor() / ceil()</font></a></li></ul></li><li><a href="#font-color-ff0000-3x00-numpy-suan-zhu-han-shu-font"><font color="#FF0000">【3x00】NumPy 算术函数</font></a><ul><li><a href="#font-color-1bc3fb-3x01-add-subtract-multiply-divide-font"><font color="#1BC3FB">【3x01】add() / subtract() / multiply() / divide()</font></a></li><li><a href="#font-color-1bc3fb-3x02-reciprocal-power-mod-remainder-font"><font color="#1BC3FB">【3x02】reciprocal() / power() / mod() / remainder()</font></a></li><li><a href="#font-color-1bc3fb-3x03-absolute-isnan-font"><font color="#1BC3FB">【3x03】absolute() / isnan()</font></a></li></ul></li><li><a href="#font-color-ff0000-4x00-numpy-tong-ji-han-shu-font"><font color="#FF0000">【4x00】NumPy 统计函数</font></a><ul><li><a href="#font-color-1bc3fb-4x01-amax-amin-font"><font color="#1BC3FB">【4x01】amax() / amin()</font></a></li><li><a href="#font-color-1bc3fb-4x02-argmax-argmin-font"><font color="#1BC3FB">【4x02】argmax() / argmin()</font></a></li><li><a href="#font-color-1bc3fb-4x03-sum-font"><font color="#1BC3FB">【4x03】sum()</font></a></li><li><a href="#font-color-1bc3fb-4x04-cumsum-cumprod-font"><font color="#1BC3FB">【4x04】cumsum() / cumprod()</font></a></li><li><a href="#font-color-1bc3fb-4x05-ptp-font"><font color="#1BC3FB">【4x05】ptp()</font></a></li><li><a href="#font-color-1bc3fb-4x06-percentile-font"><font color="#1BC3FB">【4x06】percentile()</font></a></li><li><a href="#font-color-1bc3fb-4x07-median-font"><font color="#1BC3FB">【4x07】median()</font></a></li><li><a href="#font-color-1bc3fb-4x08-mean-font"><font color="#1BC3FB">【4x08】mean()</font></a></li><li><a href="#font-color-1bc3fb-4x09-average-font"><font color="#1BC3FB">【4x09】average()</font></a></li><li><a href="#font-color-1bc3fb-4x10-std-var-font"><font color="#1BC3FB">【4x10】std() / var()</font></a></li></ul></li><li><a href="#font-color-ff0000-5x00-numpy-pai-xu-han-shu-font"><font color="#FF0000">【5x00】NumPy 排序函数</font></a><ul><li><a href="#font-color-1bc3fb-5x01-sort-font"><font color="#1BC3FB">【5x01】sort()</font></a></li><li><a href="#font-color-1bc3fb-5x02-msort-font"><font color="#1BC3FB">【5x02】msort()</font></a></li><li><a href="#font-color-1bc3fb-5x03-argsort-font"><font color="#1BC3FB">【5x03】argsort()</font></a></li><li><a href="#font-color-1bc3fb-5x04-lexsort-font"><font color="#1BC3FB">【5x04】lexsort()</font></a></li><li><a href="#font-color-1bc3fb-5x05-sort-complex-font"><font color="#1BC3FB">【5x05】sort_complex()</font></a></li><li><a href="#font-color-1bc3fb-5x06-partition-font"><font color="#1BC3FB">【5x06】partition()</font></a></li><li><a href="#font-color-1bc3fb-5x07-argpartition-font"><font color="#1BC3FB">【5x07】argpartition()</font></a></li><li><a href="#font-color-1bc3fb-5x08-unique-font"><font color="#1BC3FB">【5x08】unique()</font></a></li></ul></li><li><a href="#font-color-ff0000-6x00-numpy-tiao-jian-han-shu-font"><font color="#FF0000">【6x00】NumPy 条件函数</font></a><ul><li><a href="#font-color-1bc3fb-6x01-nonzero-font"><font color="#1BC3FB">【6x01】nonzero()</font></a></li><li><a href="#font-color-1bc3fb-6x02-where-font"><font color="#1BC3FB">【6x02】where()</font></a></li><li><a href="#font-color-1bc3fb-6x03-extract-font"><font color="#1BC3FB">【6x03】extract()</font></a></li></ul></li><li><a href="#font-color-ff0000-7x00-numpy-pan-duan-han-shu-font"><font color="#FF0000">【7x00】NumPy 判断函数</font></a><ul><li><a href="#font-color-1bc3fb-7x01-any-all-font"><font color="#1BC3FB">【7x01】any() / all()</font></a></li></ul></li></ul><!-- tocstop --><hr><p>NumPy 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/008/">Python 数据分析三剑客之 NumPy（一）：理解 NumPy / 数组基础</a></li><li><a href="https://www.itbob.cn/article/009/">Python 数据分析三剑客之 NumPy（二）：数组索引 / 切片 / 广播 / 拼接 / 分割</a></li><li><a href="https://www.itbob.cn/article/010/">Python 数据分析三剑客之 NumPy（三）：数组的迭代与位运算</a></li><li><a href="https://www.itbob.cn/article/011/">Python 数据分析三剑客之 NumPy（四）：字符串函数总结与对比</a></li><li><a href="https://www.itbob.cn/article/012/">Python 数据分析三剑客之 NumPy（五）：数学 / 算术 / 统计 / 排序 / 条件 / 判断函数合集</a></li><li><a href="https://www.itbob.cn/article/013/">Python 数据分析三剑客之 NumPy（六）：矩阵 / 线性代数库与 IO 操作</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105398131</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-numpy-han-shu-su-cha-biao"><font color="#FF0000">【1x00】NumPy 函数速查表</font></span></h2><table>    <tr>        <td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">NumPy 三角函数</font></strong></td>    </tr>    <tr>        <th><font color="#FF0000">函数</font></th>        <th><font color="#FF0000">描述</font></th>    </tr>    <tr>        <td>sin()</td>        <td>正弦函数</td>    </tr>    <tr>        <td>cos()</td>        <td>余弦函数</td>    </tr>    <tr>        <td>tan()</td>        <td>正切函数</td>    </tr>    <tr>        <td>arcsin()</td>        <td>反正弦函数</td>    </tr>    <tr>        <td>arccos()</td>        <td>反余弦函数</td>    </tr>    <tr>        <td>arctan()</td>        <td>反正切函数</td>    </tr>    <tr>        <td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">NumPy 舍入函数</font></strong></td>    </tr>    <tr>        <th><font color="#FF0000">函数</font></th>        <th><font color="#FF0000">描述</font></th>    </tr>    <tr>        <td>around()</td>        <td>将指定数字四舍五入到指定的小数位</td>    </tr>    <tr>        <td>rint()</td>        <td>将指定数字四舍五入到最近的整数</td>    </tr>    <tr>        <td>floor()</td>        <td>返回小于或者等于指定表达式的最大整数，即向下取整</td>    </tr>    <tr>        <td>ceil()</td>        <td>返回大于或者等于指定表达式的最小整数，即向上取整</td>    </tr>    <tr>        <td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">NumPy 算术函数</font></strong></td>    </tr>    <tr>        <th><font color="#FF0000">函数</font></th>        <th><font color="#FF0000">描述</font></th>    </tr>    <tr>        <td>add()</td>        <td>数组元素加法运算</td>    </tr>    <tr>        <td>subtract()</td>        <td>数组元素减法运算</td>    </tr>    <tr>        <td>multiply()</td>        <td>数组元素乘法运算</td>    </tr>    <tr>        <td>divide()</td>        <td>数组元素除法运算</td>    </tr>    <tr>        <td>reciprocal()</td>        <td>返回数组元素的倒数</td>    </tr>    <tr>        <td>power()</td>        <td>返回数组元素的乘幂</td>    </tr>    <tr>        <td>mod()</td>        <td>返回数组元素的相除后的余数</td>    </tr>    <tr>        <td>remainder()</td>        <td>返回数组元素的相除后的余数</td>    </tr>    <tr>        <td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">NumPy 统计函数</font></strong></td>    </tr>    <tr>        <th><font color="#FF0000">函数</font></th>        <th><font color="#FF0000">描述</font></th>    </tr>    <tr>        <td>amax()</td>        <td>计算数组元素沿指定轴的最大值</td>    </tr>    <tr>        <td>amin()</td>        <td>计算数组元素沿指定轴的最小值</td>    </tr>    <tr>        <td>argmax()</td>        <td>计算数组元素沿指定轴的最大值的索引值</td>    </tr>    <tr>        <td>argmin()</td>        <td>计算数组元素沿指定轴的最小值的索引值</td>    </tr>    <tr>        <td>sum()</td>        <td>计算数组中所有元素的和</td>    </tr>    <tr>        <td>cumsum()</td>        <td>返回一个一维数组，每个元素都是之前所有元素的累加和</td>    </tr>    <tr>        <td>cumprod()</td>        <td>返回一个一维数组，每个元素都是之前所有元素的累乘积</td>    </tr>    <tr>        <td>ptp()</td>        <td>计算数组元素最大值与最小值的差</td>    </tr>    <tr>        <td>percentile()</td>        <td>计算多维数组的任意百分位数</td>    </tr>    <tr>        <td>median()</td>        <td>计算数组元素的中位数</td>    </tr>    <tr>        <td>mean()</td>        <td>计算数组元素的算术平均值</td>    </tr>    <tr>        <td>average()</td>        <td>计算数组元素的加权平均值</td>    </tr>    <tr>        <td>std()</td>        <td>计算数组元素的标准差</td>    </tr>    <tr>        <td>var()</td>        <td>计算数组元素的方差</td>    </tr>        <td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">NumPy 排序函数</font></strong></td>    <tr>        <td>sort()</td>        <td>将原数组元素按照从小到大排序</td>    </tr>    <tr>        <td>msort()</td>        <td>将原数组元素按照第一个轴的从小到大排序</td>    </tr>    <tr>        <td>argsort()</td>        <td>将元素从小到大排列，提取对应的索引值并返回</td>    </tr>    <tr>        <td>lexsort()</td>        <td>将多个序列按照从小到大排序，返回其索引值</td>    </tr>    <tr>        <td>sort_complex()</td>        <td>对复数数组进行从小到大排序</td>    </tr>    <tr>        <td>partition()</td>        <td>对数组进行分区排序</td>    </tr>    <tr>        <td>argpartition()</td>        <td>对数组进行分区排序，返回元素的索引值</td>    </tr>    <tr>        <td>unique()</td>        <td>将数组元素去重后返回从小到大的排序结果</td>    </tr>        <td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">NumPy 条件函数</font></strong></td>    <tr>        <td>nonzero()</td>        <td>返回原数组中非零元素的索引值</td>    </tr>    <tr>        <td>where()</td>        <td>返回数组中满足指定条件的元素的索引值</td>    </tr>    <tr>        <td>extract()</td>        <td>返回数组中满足指定条件的元素</td>    </tr>        <td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">NumPy 判断函数</font></strong></td>    <tr>        <td>any()</td>        <td>至少有一个元素满足指定条件，则返回 True，否则返回 False</td>    </tr>    <tr>        <td>all()</td>        <td>所有的元素满足指定条件，则返回 True，否则返回 False</td>    </tr></table><h2><span id="2x00-numpy-shu-xue-han-shu"><font color="#FF0000">【2x00】NumPy 数学函数</font></span></h2><p>NumPy 数学函数包含三角函数、舍入函数等。</p><h3><span id="2x01-sin-cos-tan"><font color="#1BC3FB">【2x01】sin() / cos() / tan()</font></span></h3><p><code>numpy.sin()</code>、<code>numpy.cos()</code>、<code>numpy.tan()</code> 分别对应<font color="#FF0000"><strong>正弦函数</strong></font>、<font color="#FF0000"><strong>余弦函数</strong></font>、<font color="#FF0000"><strong>正切函数</strong></font>。</p><p>在求三角函数时，会先将角度转化成弧度，在 NumPy 中的转化公式：<code>角度 * numpy.pi/180</code></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">60</span> ,<span class="hljs-number">90</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.sin(a*np.pi/<span class="hljs-number">180</span>))[<span class="hljs-number">0.</span>         <span class="hljs-number">0.5</span>        <span class="hljs-number">0.70710678</span> <span class="hljs-number">0.8660254</span>  <span class="hljs-number">1.</span>        ]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.cos(a*np.pi/<span class="hljs-number">180</span>))[<span class="hljs-number">1.00000000e+00</span> <span class="hljs-number">8.66025404e-01</span> <span class="hljs-number">7.07106781e-01</span> <span class="hljs-number">5.00000000e-01</span> <span class="hljs-number">6.12323400e-17</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.tan(a*np.pi/<span class="hljs-number">180</span>))[<span class="hljs-number">0.00000000e+00</span> <span class="hljs-number">5.77350269e-01</span> <span class="hljs-number">1.00000000e+00</span> <span class="hljs-number">1.73205081e+00</span> <span class="hljs-number">1.63312394e+16</span>]</code></pre><hr><h3><span id="2x02-arcsin-arccos-arctan"><font color="#1BC3FB">【2x02】arcsin() / arccos() / arctan()</font></span></h3><p><code>numpy.arcsin()</code>、<code>numpy.arccos()</code>、<code>numpy.arctan()</code> 分别对应<font color="#FF0000"><strong>反正弦函数</strong></font>、<font color="#FF0000"><strong>反余弦函数</strong></font>、<font color="#FF0000"><strong>反正切函数</strong></font>。</p><p>在求三角函数时，会先将角度转化成弧度，在 NumPy 中的转化公式：<code>角度 * numpy.pi/180</code></p><p>arcsin、arccos、arctan 接收的参数是三角函数值，函数返回给定角度的 sin，cos 和 tan 的反三角函数，如果 sinθ=x，那么 arcsinx=θ，其他类似，这些函数的结果可以通过 <code>numpy.degrees()</code> 函数将弧度转换为角度。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">60</span> ,<span class="hljs-number">90</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>a_sin = np.sin(a*np.pi/<span class="hljs-number">180</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>a_arcsin = np.arcsin(a_sin)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a_sin)                                           <span class="hljs-comment"># 角度的正弦值</span>[<span class="hljs-number">0.</span>         <span class="hljs-number">0.5</span>        <span class="hljs-number">0.70710678</span> <span class="hljs-number">0.8660254</span>  <span class="hljs-number">1.</span>        ]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a_arcsin)                                        <span class="hljs-comment"># 角度的反正弦值，返回值的单位为弧度</span>[<span class="hljs-number">0.</span>         <span class="hljs-number">0.52359878</span> <span class="hljs-number">0.78539816</span> <span class="hljs-number">1.04719755</span> <span class="hljs-number">1.57079633</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.degrees(a_arcsin))                            <span class="hljs-comment"># 弧度转化为角度</span>[ <span class="hljs-number">0.</span> <span class="hljs-number">30.</span> <span class="hljs-number">45.</span> <span class="hljs-number">60.</span> <span class="hljs-number">90.</span>]</code></pre><hr><h3><span id="2x03-around-rint-floor-ceil"><font color="#1BC3FB">【2x03】around() / rint() / floor() / ceil()</font></span></h3><p>1、<code>numpy.around()</code> 函数将指定数字四舍五入到<font color="#FF0000"><strong>指定的小数位</strong></font>，可指定保留的小数位数。</p><p>基本语法：<code>numpy.around(a[, decimals=0, out=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>输入数组</td></tr><tr><td>decimals</td><td>int 类型，可选项，舍入的小数位数，默认值为 0，如果为负，整数将四舍五入到小数点左侧的位置</td></tr><tr><td>out</td><td>ndarray 对象，可选项，放置结果的备用输出数组。它必须具有与预期输出相同的形状，但是如有必要，将强制转换输出值的类型</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">13</span>, <span class="hljs-number">1.4</span>, <span class="hljs-number">6.23</span>, <span class="hljs-number">12.834</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.around(a))[<span class="hljs-number">13.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">6.</span> <span class="hljs-number">13.</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.around(a, decimals=<span class="hljs-number">1</span>))[<span class="hljs-number">13.</span>   <span class="hljs-number">1.4</span>  <span class="hljs-number">6.2</span> <span class="hljs-number">12.8</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.around(a, decimals=-<span class="hljs-number">1</span>))[<span class="hljs-number">10.</span>  <span class="hljs-number">0.</span> <span class="hljs-number">10.</span> <span class="hljs-number">10.</span>]</code></pre><p>2、<code>numpy.rint()</code> 函数将指定数字四舍五入到<font color="#FF0000"><strong>最近的整数</strong></font>，不保留小数位。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.rint([-<span class="hljs-number">1.7</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">1.7</span>, <span class="hljs-number">2.0</span>]))[-<span class="hljs-number">2.</span> -<span class="hljs-number">2.</span> -<span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">2.</span>  <span class="hljs-number">2.</span>  <span class="hljs-number">2.</span>]</code></pre><p>3、<code>numpy.floor()</code> 函数会返回小于或者等于指定表达式的最大整数，即<font color="#FF0000"><strong>向下取整</strong></font>。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.floor([-<span class="hljs-number">1.7</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">1.7</span>, <span class="hljs-number">2.0</span>]))[-<span class="hljs-number">2.</span> -<span class="hljs-number">2.</span> -<span class="hljs-number">1.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">2.</span>]</code></pre><p>4、<code>numpy.ceil()</code> 函数会返回大于或者等于指定表达式的最小整数，即<font color="#FF0000"><strong>向上取整</strong></font>。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.ceil([-<span class="hljs-number">1.7</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">0.2</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">1.7</span>, <span class="hljs-number">2.0</span>]))[-<span class="hljs-number">1.</span> -<span class="hljs-number">1.</span> -<span class="hljs-number">0.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">2.</span>  <span class="hljs-number">2.</span>  <span class="hljs-number">2.</span>]</code></pre><h2><span id="3x00-numpy-suan-zhu-han-shu"><font color="#FF0000">【3x00】NumPy 算术函数</font></span></h2><p>NumPy 算术函数包含了基本的加减乘除运算、求倒数、幂、余数等。</p><h3><span id="3x01-add-subtract-multiply-divide"><font color="#1BC3FB">【3x01】add() / subtract() / multiply() / divide()</font></span></h3><p><code>add()</code>、<code>subtract()</code>、<code>multiply()</code>、<code>divide()</code> 分别对应 <code>NumPy</code> 中的<font color="#FF0000"><strong>加减乘除</strong></font>运算。</p><p>注意：两个数组必须具有相同的形状或符合数组的广播规则才能进行运算。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.add(a, b))[[ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>] [ <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span>] [<span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.subtract(a, b))[[-<span class="hljs-number">5</span> -<span class="hljs-number">4</span> -<span class="hljs-number">3</span>] [-<span class="hljs-number">2</span> -<span class="hljs-number">1</span>  <span class="hljs-number">0</span>] [ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.multiply(a, b))[[ <span class="hljs-number">0</span>  <span class="hljs-number">5</span> <span class="hljs-number">10</span>] [<span class="hljs-number">15</span> <span class="hljs-number">20</span> <span class="hljs-number">25</span>] [<span class="hljs-number">30</span> <span class="hljs-number">35</span> <span class="hljs-number">40</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.divide(a, b))[[<span class="hljs-number">0.</span>  <span class="hljs-number">0.2</span> <span class="hljs-number">0.4</span>] [<span class="hljs-number">0.6</span> <span class="hljs-number">0.8</span> <span class="hljs-number">1.</span> ] [<span class="hljs-number">1.2</span> <span class="hljs-number">1.4</span> <span class="hljs-number">1.6</span>]]</code></pre><h3><span id="3x02-reciprocal-power-mod-remainder"><font color="#1BC3FB">【3x02】reciprocal() / power() / mod() / remainder()</font></span></h3><p>1、<code>numpy.reciprocal()</code> 函数用于返回各数组元素的<font color="#FF0000"><strong>倒数</strong></font>。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.reciprocal([<span class="hljs-number">0.25</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2.10</span>]))[<span class="hljs-number">4.</span>         <span class="hljs-number">0.25</span>       <span class="hljs-number">1.</span>         <span class="hljs-number">0.47619048</span>]</code></pre><p>2、<code>numpy.power()</code> 函数将第一个数组中的元素作为底数，计算它与第二个数组中相应元素的<font color="#FF0000"><strong>幂</strong></font>。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.power(a, b))[<span class="hljs-number">125</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span>]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.power(a, <span class="hljs-number">2</span>))[   <span class="hljs-number">25</span>   <span class="hljs-number">100</span> <span class="hljs-number">10000</span>]</code></pre><p>3、<code>numpy.mod()</code> 与 <code> numpy.remainder()</code> 都可以计算数组中相应元素相除后的<font color="#FF0000"><strong>余数</strong></font>。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.mod(a, b))[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.remainder(a, b))[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.mod(a, <span class="hljs-number">6</span>))[<span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.remainder(a, <span class="hljs-number">9</span>))[<span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span>]</code></pre><h3><span id="3x03-absolute-isnan"><font color="#1BC3FB">【3x03】absolute() / isnan()</font></span></h3><p>1、<code>numpy.absolute()</code> 函数用于计算<font color="#FF0000"><strong>元素的绝对值</strong></font>。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.absolute([-<span class="hljs-number">1.2</span>, <span class="hljs-number">1.2</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">10</span>]))[ <span class="hljs-number">1.2</span>  <span class="hljs-number">1.2</span> <span class="hljs-number">13.</span>  <span class="hljs-number">10.</span> ]</code></pre><p>2、<code>numpy.isnan()</code> 函数用于<font color="#FF0000"><strong>判断元素是否为 NaN（Not a Number）</strong></font>。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.isnan(np.nan)<span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.isnan(np.inf)<span class="hljs-literal">False</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.isnan([np.nan, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, np.nan]))[ <span class="hljs-literal">True</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span>  <span class="hljs-literal">True</span>]</code></pre><h2><span id="4x00-numpy-tong-ji-han-shu"><font color="#FF0000">【4x00】NumPy 统计函数</font></span></h2><p>NumPy 统计函数包含了计算最大值、最小值、最大值与最小值的差、百分位数、中位数、算术平均值、加权平均值、标准差与方差等。</p><h3><span id="4x01-amax-amin"><font color="#1BC3FB">【4x01】amax() / amin()</font></span></h3><p><code>numpy.amax()</code> 和 <code>numpy.amin()</code> 函数分别用于计算数组中的元素沿指定轴的<font color="#FF0000"><strong>最大值</strong></font>和<font color="#FF0000"><strong>最小值</strong></font>。</p><p>基本语法：</p><p><code>numpy.amax(a[, axis=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;])</code></p><p><code>numpy.amin(a[, axis=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;])</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型</td></tr><tr><td>out</td><td>ndarray 对象，可选项，放置结果的备用输出数组，必须具有与预期输出数组相同的形状和缓冲区长度</td></tr><tr><td>keepdims</td><td>bool 类型，可选项，是否保持数组的二维特性</td></tr><tr><td>initial</td><td>初始值标量，可选项，如果设置了标量，则除了元素之间的比较外，还会和标量进行对比</td></tr><tr><td>where</td><td>比较条件，通常和 initial 参数一起使用<br>如果当前是 amax 函数，where 为 True 时则会比较最大值， Flase 则会比较最小值<br>该参数含义比较模糊，参考资料较少，准确描述请参考<a href="https://numpy.org/doc/1.18/reference/generated/numpy.amax.html">官方文档</a></td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">2</span> <span class="hljs-number">4</span>] [<span class="hljs-number">8</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.amax(a))<span class="hljs-number">9</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.amax(a, axis=<span class="hljs-number">0</span>))                                  <span class="hljs-comment"># 元素按行比较</span>[<span class="hljs-number">8</span> <span class="hljs-number">9</span>]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.amax(a, axis=<span class="hljs-number">0</span>, keepdims=<span class="hljs-literal">True</span>))                   <span class="hljs-comment"># 元素按行比较并保持数组的二维特性</span>[[<span class="hljs-number">8</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.amax(a, axis=<span class="hljs-number">1</span>))                                  <span class="hljs-comment"># 元素按列比较</span>[<span class="hljs-number">4</span> <span class="hljs-number">9</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.amax(a, axis=<span class="hljs-number">1</span>, initial=<span class="hljs-number">5</span>))                       <span class="hljs-comment"># 元素按列比较（包括标量一起比较）</span>[<span class="hljs-number">5</span> <span class="hljs-number">9</span>]</code></pre><h3><span id="4x02-argmax-argmin"><font color="#1BC3FB">【4x02】argmax() / argmin()</font></span></h3><p><code>numpy.argmax()</code> 和 <code>numpy.argmin()</code> 函数分别沿指定轴返回<font color="#FF0000"><strong>最大元素和最小元素的索引值</strong></font>。</p><p>基本语法：<code>numpy.argmax(a[, axis=None, out=None])</code>；<code>numpy.argmin(a[, axis=None, out=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型，若未指定，则在操作前会将数组展开</td></tr><tr><td>out</td><td>可选项，放置结果的备用输出数组，必须具有与预期输出数组相同的形状和缓冲区长度</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">70</span>],[<span class="hljs-number">80</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>],[<span class="hljs-number">50</span>,<span class="hljs-number">90</span>,<span class="hljs-number">60</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">70</span>] [<span class="hljs-number">80</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span>] [<span class="hljs-number">50</span> <span class="hljs-number">90</span> <span class="hljs-number">60</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (np.argmax(a))<span class="hljs-number">7</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.argmin(a))<span class="hljs-number">5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.argmax(a, axis=<span class="hljs-number">0</span>))[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.argmin(a, axis=<span class="hljs-number">0</span>))[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]</code></pre><h3><span id="4x03-sum"><font color="#1BC3FB">【4x03】sum()</font></span></h3><p><code>numpy.sum()</code> 函数用于计算所有元素的<font color="#FF0000"><strong>和</strong></font>。</p><p>基本语法：<code>numpy.sum(a, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型，若未指定则运算前会将数组展平</td></tr><tr><td>dtype</td><td>指定数据类型，可选项</td></tr><tr><td>out</td><td>可选项，放置结果的备用输出数组，必须具有与预期输出数组相同的形状和缓冲区长度</td></tr><tr><td>keepdims</td><td>bool 类型，可选项，是否保持数组的二维特性</td></tr><tr><td>initial</td><td>初始值标量，可选项，如果设置了标量，则除了元素之间的求和外，还会和标量进行求和</td></tr><tr><td>where</td><td>求和条件，总和中要包括的元素</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">5</span>]]))<span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">5</span>]], axis=<span class="hljs-number">0</span>))[<span class="hljs-number">0</span> <span class="hljs-number">6</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">5</span>]], axis=<span class="hljs-number">1</span>))[<span class="hljs-number">1</span> <span class="hljs-number">5</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [np.nan, <span class="hljs-number">5</span>]], where=[<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>], axis=<span class="hljs-number">1</span>))[<span class="hljs-number">1.</span> <span class="hljs-number">5.</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>([<span class="hljs-number">10</span>], initial=<span class="hljs-number">5</span>))<span class="hljs-number">15</span></code></pre><h3><span id="4x04-cumsum-cumprod"><font color="#1BC3FB">【4x04】cumsum() / cumprod()</font></span></h3><p><code>numpy.cumsum()</code>：返回一个一维数组，每个元素都是之前所有元素的<font color="#FF0000"><strong>累加和</strong></font>。<br><code>numpy.cumprod()</code>：返回一个一维数组，每个元素都是之前所有元素的<font color="#FF0000"><strong>累乘积</strong></font>。</p><p>基本语法：<code>numpy.cumsum(a, axis=None, dtype=None, out=None)</code>；<code>numpy.cumprod(a, axis=None, dtype=None, out=None)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型，若未指定则运算前会将数组展平</td></tr><tr><td>dtype</td><td>指定数据类型，可选项</td></tr><tr><td>out</td><td>可选项，放置结果的备用输出数组，必须具有与预期输出数组相同的形状和缓冲区长度</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.cumsum(a))[ <span class="hljs-number">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">15</span> <span class="hljs-number">21</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.cumsum(a, axis=<span class="hljs-number">0</span>))[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.cumsum(a, axis=<span class="hljs-number">1</span>))[[ <span class="hljs-number">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">6</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">9</span> <span class="hljs-number">15</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.cumprod(a))[  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">6</span>  <span class="hljs-number">24</span> <span class="hljs-number">120</span> <span class="hljs-number">720</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.cumprod(a, axis=<span class="hljs-number">0</span>))[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span> <span class="hljs-number">10</span> <span class="hljs-number">18</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.cumprod(a, axis=<span class="hljs-number">1</span>))[[  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">6</span>] [  <span class="hljs-number">4</span>  <span class="hljs-number">20</span> <span class="hljs-number">120</span>]]</code></pre><h3><span id="4x05-ptp"><font color="#1BC3FB">【4x05】ptp()</font></span></h3><p><code>numpy.ptp()</code> 函数用于计算数组中元素<font color="#FF0000"><strong>最大值与最小值的差</strong></font>。</p><p>基本语法：<code>numpy.ptp(a[, axis=None, out=None, keepdims=&lt;no value&gt;])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型</td></tr><tr><td>out</td><td>可选项，放置结果的备用输出数组，必须具有与预期输出数组相同的形状和缓冲区长度</td></tr><tr><td>keepdims</td><td>bool 类型，可选项，是否保持数组的二维特性</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span>] [<span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span>] [<span class="hljs-number">2</span> <span class="hljs-number">9</span> <span class="hljs-number">4</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.ptp(a))<span class="hljs-number">7</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.ptp(a, axis=<span class="hljs-number">0</span>))[<span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.ptp(a, axis=<span class="hljs-number">1</span>))[<span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.ptp(a, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>))[[<span class="hljs-number">6</span>] [<span class="hljs-number">4</span>] [<span class="hljs-number">7</span>]]</code></pre><h3><span id="4x06-percentile"><font color="#1BC3FB">【4x06】percentile()</font></span></h3><p><code>numpy.percentile()</code> 函数用于计算一个多维数组的任意<font color="#FF0000"><strong>百分位数</strong></font>。</p><p>百分位数：统计学术语，如果将一组数据从小到大排序，并计算相应的累计百分位，则某一百分位所对应数据的值就称为这一百分位的百分位数。可表示为：一组 n 个观测值按数值大小排列。如：处于 p% 位置的值称第 p 百分位数。</p><p>基本语法：<code>numpy.percentile(a, q[, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>q</td><td>要计算的百分位数，在 [0, 100] 之间</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型</td></tr><tr><td>out</td><td>可选项，放置结果的备用输出数组，必须具有与预期输出数组相同的形状和缓冲区长度</td></tr><tr><td>overwrite_input</td><td>bool 值，可选项，如果为True，则允许通过中间计算来修改输入数组 a 以节省内存<br>在这种情况下，此操作完成后 a 的内容是不确定的</td></tr><tr><td>interpolation</td><td>可选项，指定当所需百分比位于两个数据点 <code>i&lt;j</code> 之间时要使用的插值方法：<br><font color="#ff0000"><strong>linear</strong></font>：<code>i + (j - i) * fraction</code>，其中 fraction 是由 i 和 j 包围的索引的分数部分<br><font color="#ff0000"><strong>lower</strong></font>：<code>i</code>；<font color="#ff0000"><strong>higher</strong></font>：<code>j</code>；<font color="#ff0000"><strong>nearest</strong></font>：<code>i</code> 或 <code>j</code>，以最近者为准；<font color="#ff0000"><strong>midpoint</strong></font>：<code>(i + j) / 2</code></td></tr><tr><td>keepdims</td><td>bool 类型，可选项，是否保持数组的二维特性</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">10</span>  <span class="hljs-number">7</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">3</span>  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.percentile(a, <span class="hljs-number">50</span>))<span class="hljs-number">3.5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.percentile(a, <span class="hljs-number">50</span>, axis=<span class="hljs-number">0</span>))[<span class="hljs-number">6.5</span> <span class="hljs-number">4.5</span> <span class="hljs-number">2.5</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.percentile(a, <span class="hljs-number">50</span>, axis=<span class="hljs-number">1</span>))[<span class="hljs-number">7.</span> <span class="hljs-number">2.</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.percentile(a, <span class="hljs-number">50</span>, axis=<span class="hljs-number">1</span>, keepdims=<span class="hljs-literal">True</span>))[[<span class="hljs-number">7.</span>] [<span class="hljs-number">2.</span>]]</code></pre><h3><span id="4x07-median"><font color="#1BC3FB">【4x07】median()</font></span></h3><p><code>numpy.median()</code> 函数用于计算数组元素的<font color="#FF0000"><strong>中位数</strong></font>。</p><p>基本语法：<code>numpy.median(a[, axis=None, out=None, overwrite_input=False, keepdims=False])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型</td></tr><tr><td>out</td><td>可选项，放置结果的备用输出数组，必须具有与预期输出数组相同的形状和缓冲区长度</td></tr><tr><td>overwrite_input</td><td>bool 值，可选项，如果为True，则允许通过中间计算来修改输入数组 a 以节省内存<br>在这种情况下，此操作完成后 a 的内容是不确定的</td></tr><tr><td>keepdims</td><td>bool 类型，可选项，是否保持数组的二维特性</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">10</span>  <span class="hljs-number">7</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">3</span>  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>]]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.median(a))<span class="hljs-number">3.5</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.median(a, axis=<span class="hljs-number">0</span>))[<span class="hljs-number">6.5</span> <span class="hljs-number">4.5</span> <span class="hljs-number">2.5</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.median(a, axis=<span class="hljs-number">1</span>))[<span class="hljs-number">7.</span> <span class="hljs-number">2.</span>]</code></pre><h3><span id="4x08-mean"><font color="#1BC3FB">【4x08】mean()</font></span></h3><p><code>numpy.mean()</code> 函数计算数组中元素的<font color="#FF0000"><strong>算术平均值</strong></font>。</p><p>算术平均值：沿轴的元素的总和除以元素的数量。</p><p>基本语法：<code>numpy.mean(a[, axis=None, dtype=None, out=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型</td></tr><tr><td>dtype</td><td>可选项，用于计算平均值的类型</td></tr><tr><td>out</td><td>可选项，放置结果的备用输出数组，必须具有与预期输出数组相同的形状和缓冲区长度</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">10</span>  <span class="hljs-number">7</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">3</span>  <span class="hljs-number">2</span>  <span class="hljs-number">1</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.mean(a))<span class="hljs-number">4.5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.mean(a, axis=<span class="hljs-number">0</span>))[<span class="hljs-number">6.5</span> <span class="hljs-number">4.5</span> <span class="hljs-number">2.5</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.mean(a, axis=<span class="hljs-number">1</span>))[<span class="hljs-number">7.</span> <span class="hljs-number">2.</span>]</code></pre><h3><span id="4x09-average"><font color="#1BC3FB">【4x09】average()</font></span></h3><p><code>numpy.average()</code> 函数根据在另一个数组中给出的各自的权重来计算数组中元素的<font color="#FF0000"><strong>加权平均值</strong></font>。</p><p>加权平均值：将各数值乘以相应的权数，然后加总求和得到总体值，再除以总的单位数。</p><p>例如：现有数组 <code>[1, 2, 3, 4]</code>，相应的权重为 <code>[5, 6, 7, 8]</code>，则计算方法为：<code>（1*5+2*6+3*7+4*8）/（5+6+7+8）≈ 2.6923</code></p><p>基本语法：<code>numpy.average(a[, axis=None, weights=None, returned=False])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型</td></tr><tr><td>weights</td><td>可选项，与 a 中的值相关联的权重数组，如果 weights=None，则 a 中的所有数据都具有 1 的权重，相当于 <code>mean</code> 函数</td></tr><tr><td>returned</td><td>可选项，bool 类型，默认为 False，如果为 True，则返回元组 <code>(加权平均值, 权重)</code>，否则只返回加权平均值</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.average(a))          <span class="hljs-comment"># 不指定权重时相当于 mean 函数</span><span class="hljs-number">2.5</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.average(a, weights=[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]))<span class="hljs-number">2.6923076923076925</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.average(a, weights=[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>], returned=<span class="hljs-literal">True</span>))(<span class="hljs-number">2.6923076923076925</span>, <span class="hljs-number">26.0</span>)</code></pre><h3><span id="4x10-std-var"><font color="#1BC3FB">【4x10】std() / var()</font></span></h3><p><code>numpy.std()</code> 和 <code>numpy.var()</code> 分别用于计算数组元素的<font color="#FF0000"><strong>标准差</strong></font>与<font color="#FF0000"><strong>方差</strong></font>。</p><p>标准差是一组数据平均值分散程度的一种度量，标准差是方差的算术平方根。</p><p>方差为 S<sup>2</sup>，标准差为 S，计算公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>S</mi><mn>2</mn></msup><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">S^2 = \frac {1} {n} \sum_{i=1} ^ {n} (x_i - \overline {x})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo>=</mo><msqrt><msup><mi>S</mi><mn>2</mn></msup></msqrt></mrow><annotation encoding="application/x-tex">S = \sqrt {S^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.0361em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0039em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9639em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0361em;"><span></span></span></span></span></span></span></span></span></span></p><p>基本语法：</p><p><code>numpy.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;)</code></p><p><code>numpy.var(a[, axis=None, dtype=None, out=None, ddof=0, keepdims=&lt;no value&gt;])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型</td></tr><tr><td>dtype</td><td>可选项，值的数据类型</td></tr><tr><td>out</td><td>可选项，放置结果的备用输出数组，必须具有与预期输出数组相同的形状和缓冲区长度</td></tr><tr><td>ddof</td><td>自由度（Delta Degrees of Freedom），计算中使用的除数是 N-ddof，其中 N 表示元素的数量，ddof 默认为零</td></tr><tr><td>keepdims</td><td>bool 类型，可选项，是否保持数组的二维特性</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.std(a))<span class="hljs-number">1.118033988749895</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.std(a, axis=<span class="hljs-number">0</span>))[<span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.std(a, axis=<span class="hljs-number">1</span>))[<span class="hljs-number">0.5</span> <span class="hljs-number">0.5</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.var(a))<span class="hljs-number">1.25</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.var(a, axis=<span class="hljs-number">0</span>))[<span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.var(a, axis=<span class="hljs-number">1</span>))[<span class="hljs-number">0.25</span> <span class="hljs-number">0.25</span>]</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105398131</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="5x00-numpy-pai-xu-han-shu"><font color="#FF0000">【5x00】NumPy 排序函数</font></span></h2><p>NumPy 排序函数中可以指定使用的排序方法，各种分类算法的特征在于它们的平均速度，最坏情况下的性能，工作空间大小以及它们是否稳定，三种算法对比如下：</p><table><thead><tr><th>方法</th><th>速度</th><th>最坏情况</th><th>工作空间</th><th>稳定性</th></tr></thead><tbody><tr><td>快速排序（quicksort）</td><td>1</td><td>O(n^2)</td><td>0</td><td>no</td></tr><tr><td>归并排序（mergesort）</td><td>2</td><td>O(n*log(n))</td><td>~n/2</td><td>yes</td></tr><tr><td>堆排序（heapsort）</td><td>3</td><td>O(n*log(n))</td><td>0</td><td>no</td></tr></tbody></table><h3><span id="5x01-sort"><font color="#1BC3FB">【5x01】sort()</font></span></h3><p><code>numpy.sort()</code> 函数会将原数组元素<font color="#FF0000"><strong>从小到大排序</strong></font>，返回输入数组的排序副本。</p><p>基本语法：<code>numpy.sort(a[, axis=-1, kind='quicksort', order=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要排序的数组</td></tr><tr><td>axis</td><td>要排序的轴，可选项，如果为 None，则在排序之前会将数组展平，默认值为 -1，它沿着最后一个轴排序</td></tr><tr><td>kind</td><td>排序算法，可选项，默认值为快速排序（quicksort）</td></tr><tr><td>order</td><td>字符串或者字符串列表，可选项，若指定 order 值，将按照该字段进行排序</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.sort(a))[[<span class="hljs-number">1</span> <span class="hljs-number">4</span>] [<span class="hljs-number">1</span> <span class="hljs-number">3</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.sort(a, axis=<span class="hljs-literal">None</span>))   <span class="hljs-comment"># 数组将展平</span>[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.sort(a, axis=<span class="hljs-number">0</span>))[[<span class="hljs-number">1</span> <span class="hljs-number">1</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.sort(a, axis=<span class="hljs-number">1</span>))[[<span class="hljs-number">1</span> <span class="hljs-number">4</span>] [<span class="hljs-number">1</span> <span class="hljs-number">3</span>]]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>dtype = [(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;S10&#x27;</span>), (<span class="hljs-string">&#x27;height&#x27;</span>, <span class="hljs-built_in">float</span>), (<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-built_in">int</span>)]<span class="hljs-meta">&gt;&gt;&gt; </span>values = [(<span class="hljs-string">&#x27;Arthur&#x27;</span>, <span class="hljs-number">1.8</span>, <span class="hljs-number">41</span>), (<span class="hljs-string">&#x27;Lancelot&#x27;</span>, <span class="hljs-number">1.9</span>, <span class="hljs-number">38</span>), (<span class="hljs-string">&#x27;Galahad&#x27;</span>, <span class="hljs-number">1.7</span>, <span class="hljs-number">38</span>)]<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array(values, dtype=dtype)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[(<span class="hljs-string">b&#x27;Arthur&#x27;</span>, <span class="hljs-number">1.8</span>, <span class="hljs-number">41</span>) (<span class="hljs-string">b&#x27;Lancelot&#x27;</span>, <span class="hljs-number">1.9</span>, <span class="hljs-number">38</span>) (<span class="hljs-string">b&#x27;Galahad&#x27;</span>, <span class="hljs-number">1.7</span>, <span class="hljs-number">38</span>)]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.sort(a, order=<span class="hljs-string">&#x27;height&#x27;</span>))                <span class="hljs-comment"># 按 height 排序</span>[(<span class="hljs-string">b&#x27;Galahad&#x27;</span>, <span class="hljs-number">1.7</span>, <span class="hljs-number">38</span>) (<span class="hljs-string">b&#x27;Arthur&#x27;</span>, <span class="hljs-number">1.8</span>, <span class="hljs-number">41</span>) (<span class="hljs-string">b&#x27;Lancelot&#x27;</span>, <span class="hljs-number">1.9</span>, <span class="hljs-number">38</span>)]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.sort(a, order=[<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;height&#x27;</span>]))      <span class="hljs-comment"># 按 age 排序，如果 age 相等，则按 height 排序</span>[(<span class="hljs-string">b&#x27;Galahad&#x27;</span>, <span class="hljs-number">1.7</span>, <span class="hljs-number">38</span>) (<span class="hljs-string">b&#x27;Lancelot&#x27;</span>, <span class="hljs-number">1.9</span>, <span class="hljs-number">38</span>) (<span class="hljs-string">b&#x27;Arthur&#x27;</span>, <span class="hljs-number">1.8</span>, <span class="hljs-number">41</span>)]</code></pre><h3><span id="5x02-msort"><font color="#1BC3FB">【5x02】msort()</font></span></h3><p><code>numpy.msort()</code> 函数将数组<font color="#FF0000"><strong>按第一个轴从小到大排序</strong></font>，返回排序后的数组副本，相当于 <code>numpy.sort(a, axis=0)</code></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.msort([[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]]))[[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>] [<span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.sort([[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]], axis=<span class="hljs-number">0</span>))[[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>] [<span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]]</code></pre><h3><span id="5x03-argsort"><font color="#1BC3FB">【5x03】argsort()</font></span></h3><p><code>numpy.argsort()</code> 函数将原数组元素<font color="#FF0000"><strong>从小到大排列</strong></font>，提取其对应在原数组中的<font color="#FF0000"><strong>索引值</strong></font>并返回。</p><p>举例：原数组为：<code>[3, 1, 2]</code>，从小到大排列：<code>[1, 2, 3]</code>，排列后的各元素在原数组中对应的索引值：<code>[1, 2, 0]</code></p><p>基本语法：<code>numpy.argsort(a[, axis=-1, kind=None, order=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要排序的数组</td></tr><tr><td>axis</td><td>要排序的轴，可选项，如果为 None，则在排序之前会将数组展平，默认值为 -1，它沿着最后一个轴排序</td></tr><tr><td>kind</td><td>排序算法，可选项，默认值为快速排序（quicksort）</td></tr><tr><td>order</td><td>字符串或者字符串列表，可选项，若指定 order 值，将按照该字段进行排序</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.argsort(a))[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.argsort(b))[[<span class="hljs-number">0</span> <span class="hljs-number">1</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.argsort(b, axis=<span class="hljs-number">0</span>))[[<span class="hljs-number">0</span> <span class="hljs-number">1</span>] [<span class="hljs-number">1</span> <span class="hljs-number">0</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.argsort(b, axis=<span class="hljs-number">1</span>))[[<span class="hljs-number">0</span> <span class="hljs-number">1</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span>]]</code></pre><h3><span id="5x04-lexsort"><font color="#1BC3FB">【5x04】lexsort()</font></span></h3><p><code>numpy.lexsort()</code> 函数使用键序列执行间接稳定排序，用于<font color="#FF0000"><strong>对多个序列进行排序，返回其索引值</strong></font>。</p><p>基本语法：<code>numpy.lexsort(keys, axis=-1)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>keys</td><td>类似于 <code>(k, N)</code> 的要排序的数组</td></tr><tr><td>axis</td><td>指定要排序的轴，默认对最后一个轴进行排序</td></tr></tbody></table><p>举例：现有数组 <code>a = [1,5,1,4,3,4,4]</code>，<code>b = [9,4,0,4,0,2,1]</code>，利用 lexsort() 函数排序后的结果为：<code>[2,0,4,6,5,3,1]</code>，排序过程如下：</p><p>假设数组 a1 为语文成绩：<code>a1 = [1,5,1,4,3,4,4]</code><br>假设数组 b1 为数学成绩：<code>b1 = [9,4,0,4,0,2,1]</code><br>数组索引值 c1 为同学姓名： <code>c1 = [0,1,2,3,4,5,6]</code></p><p><font color="#FF0000"><strong>1、首先按照语文成绩进行排名：</strong></font><br>语文成绩（数组 a）从小到大排名：<code>a2 =  [1,1,3,4,4,4,5]</code>，对应的学生姓名（索引值）为：<code>c2 = [0,2,4,3,5,6,1]</code>，现在可以看到：<br><font color="#1BC3FB"><strong>0</strong></font>、<font color="#1BC3FB"><strong>2</strong></font> 同学的语文成绩都一样，均为 <font color="#32CD32"><strong>1</strong></font><br><font color="#1BC3FB"><strong>3</strong></font>、<font color="#1BC3FB"><strong>5</strong></font>、<font color="#1BC3FB"><strong>6</strong></font> 同学的语文成绩都一样，均为 <font color="#32CD32"><strong>4</strong></font></p><p><font color="#FF0000"><strong>2、接下来，对于语文成绩相同的，按照他们的数学成绩再次进行排名：</strong></font><br><font color="#1BC3FB"><strong>0</strong></font>、<font color="#1BC3FB"><strong>2</strong></font> 同学对应的数学成绩分别为：<font color="#32CD32"><strong>9</strong></font> 和 <font color="#32CD32"><strong>0</strong></font>，从小到大再次排序，即 <font color="#1BC3FB"><strong>0</strong></font> 排在 <font color="#1BC3FB"><strong>2</strong></font> 的后面，对应的学生姓名为 <code>c3 = [2,0,4,3,5,6,1]</code><br><font color="#1BC3FB"><strong>3</strong></font>、<font color="#1BC3FB"><strong>5</strong></font>、<font color="#1BC3FB"><strong>6</strong></font> 同学对应的数学成绩分别为：<font color="#32CD32"><strong>4</strong></font>、<font color="#32CD32"><strong>2</strong></font>、<font color="#32CD32"><strong>1</strong></font>，从小到大再次排序后，对应的学生姓名为 <code>c4 = [2,0,4,6,5,3,1]</code>，即最终结果。</p><p>简单来说，先对数组 a 从小到大排序，提取排序后元素对应的索引值，排序后元素有相同的，再根据数组 b 从小到大排序，得到最终的索引值。</p><p>以上步骤用 <code>numpy.lexsort()</code> 函数实现如下：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>b = [<span class="hljs-number">9</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>c1 = np.lexsort((a,b))    <span class="hljs-comment"># 先按 b 排序，再按照 a 排序</span><span class="hljs-meta">&gt;&gt;&gt; </span>c2 = np.lexsort((b,a))    <span class="hljs-comment"># 先按 a 排序，再按照 b 排序</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(c1)[<span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(c2)[<span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>([(a[i],b[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c1])[(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">9</span>)]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>([(a[i],b[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c2])[(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">9</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">4</span>)]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>first_names = (<span class="hljs-string">&#x27;Hertz&#x27;</span>, <span class="hljs-string">&#x27;Galilei&#x27;</span>, <span class="hljs-string">&#x27;Hertz&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>second_names = (<span class="hljs-string">&#x27;Heinrich&#x27;</span>, <span class="hljs-string">&#x27;Galileo&#x27;</span>, <span class="hljs-string">&#x27;Gustav&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.lexsort((second_names, first_names)))   <span class="hljs-comment"># 按照字母对应的 ascii 码从小到大进行排序</span>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span>]</code></pre><h3><span id="5x05-sort-complex"><font color="#1BC3FB">【5x05】sort_complex()</font></span></h3><p><code>numpy.sort_complex()</code> 函数先使用实部，再使用虚部<font color="#FF0000"><strong>对复数数组进行排序</strong></font>。</p><p>复数：把形如 z=a+bi（a,b 均为实数）的数称为复数，其中 a 称为实部，b 称为虚部，i 称为虚数单位。</p><p>基本语法：<code>numpy.sort_complex(a)</code></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.sort_complex([<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]))[<span class="hljs-number">1.</span>+<span class="hljs-number">0.j</span> <span class="hljs-number">2.</span>+<span class="hljs-number">0.j</span> <span class="hljs-number">3.</span>+<span class="hljs-number">0.j</span> <span class="hljs-number">5.</span>+<span class="hljs-number">0.j</span> <span class="hljs-number">6.</span>+<span class="hljs-number">0.j</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.sort_complex([<span class="hljs-number">1</span> + <span class="hljs-number">2j</span>, <span class="hljs-number">2</span> - <span class="hljs-number">1j</span>, <span class="hljs-number">3</span> - <span class="hljs-number">2j</span>, <span class="hljs-number">3</span> - <span class="hljs-number">3j</span>, <span class="hljs-number">3</span> + <span class="hljs-number">5j</span>]))[<span class="hljs-number">1.</span>+<span class="hljs-number">2.j</span> <span class="hljs-number">2.</span>-<span class="hljs-number">1.j</span> <span class="hljs-number">3.</span>-<span class="hljs-number">3.j</span> <span class="hljs-number">3.</span>-<span class="hljs-number">2.j</span> <span class="hljs-number">3.</span>+<span class="hljs-number">5.j</span>]</code></pre><h3><span id="5x06-partition"><font color="#1BC3FB">【5x06】partition()</font></span></h3><p><code>numpy.partition()</code> 函数用于对数组进行<font color="#FF0000"><strong>分区排序</strong></font>，返回数组的分区副本。</p><p>基本语法：<code>numpy.partition(a, kth[, axis=-1, kind='introselect', order=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待排序数组</td></tr><tr><td>kth</td><td>整数或者整数序列，原数组元素中从小到大的第 k 个元素，在排序后的数组中，仍然处于第 k 位置<br>小于该元素的位于该元素的左边，大于该元素的位于该元素的右边，左右两边没有特别的排序要求</td></tr><tr><td>axis</td><td>指定要排序的轴，可选项，默认对最后一个轴进行排序</td></tr><tr><td>kind</td><td>排序算法，可选项，默认值为快速排序（quicksort）</td></tr><tr><td>order</td><td>字符串或者字符串列表，可选项，若指定 order 值，将按照该字段进行排序</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.partition(a, <span class="hljs-number">3</span>))       <span class="hljs-comment"># 原数组元素中从小到大的第 3 个元素，排序后仍然处于第 3 位置，小于 3 的在前面，大于 3 的在后面，前后无特别排序要求</span>[<span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.partition(a, (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)))  <span class="hljs-comment"># 小于 1 的在前面，大于 3 的在后面，1 和 3 之间的在中间</span>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]</code></pre><h3><span id="5x07-argpartition"><font color="#1BC3FB">【5x07】argpartition()</font></span></h3><p><code>numpy.argpartition()</code> 函数用于对数组进行<font color="#FF0000"><strong>分区排序</strong></font>，返回重组后的<font color="#FF0000"><strong>索引值数组</strong></font>。</p><p>利用该函数可以很快地找出第 k 大的数的位置，以及大于 k（排在 k 后面）和小于 k（排在 k 前面）的数的位置。</p><p>基本语法：<code>numpy.argpartition(a[, kth, axis=-1, kind='introselect', order=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待排序数组</td></tr><tr><td>kth</td><td>整数或者整数序列，原数组元素中从小到大的第 k 个元素，在排序后的数组中，仍然处于第 k 位置<br>小于该元素的位于该元素的左边，大于该元素的位于该元素的右边，左右两边没有特别的排序要求</td></tr><tr><td>axis</td><td>指定要排序的轴，可选项，默认对最后一个轴进行排序</td></tr><tr><td>kind</td><td>排序算法，可选项，默认值为快速排序（quicksort）</td></tr><tr><td>order</td><td>字符串或者字符串列表，可选项，若指定 order 值，将按照该字段进行排序</td></tr></tbody></table><p>以下实例将找到数组的第 3 小（索引值 2）的值和第 2 大（索引值 -2）的值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">46</span>, <span class="hljs-number">57</span>, <span class="hljs-number">23</span>, <span class="hljs-number">39</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">120</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[np.argpartition(a, <span class="hljs-number">2</span>)[<span class="hljs-number">2</span>]])<span class="hljs-number">10</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[np.argpartition(a, -<span class="hljs-number">2</span>)[-<span class="hljs-number">2</span>]])<span class="hljs-number">57</span></code></pre><h3><span id="5x08-unique"><font color="#1BC3FB">【5x08】unique()</font></span></h3><p><code>numpy.unique()</code> 函数<font color="#FF0000"><strong>找到唯一值并返回从小到大的排序结果</strong></font>，类似于 Python 的 set 集合。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.unique([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]))[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.unique(a, axis=<span class="hljs-number">0</span>))[[<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]]</code></pre><h2><span id="6x00-numpy-tiao-jian-han-shu"><font color="#FF0000">【6x00】NumPy 条件函数</font></span></h2><h3><span id="6x01-nonzero"><font color="#1BC3FB">【6x01】nonzero()</font></span></h3><p><code>numpy.nonzero()</code> 函数将返回原数组中<font color="#FF0000"><strong>非零元素的索引值</strong></font>。</p><p>基本语法：<code>numpy.nonzero(a)</code></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.nonzero(a))(array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>], dtype=int32),  array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], dtype=int32))</code></pre><p>返回两个数组，其中的元素一一对应，比如数字 <code>3</code> 的索引值为 <code>(0,0)</code>，数字 <code>4</code> 的索引值为 <code>(1,1)</code></p><h3><span id="6x02-where"><font color="#1BC3FB">【6x02】where()</font></span></h3><p><code>numpy.where()</code> 函数<font color="#FF0000"><strong>返回数组中满足指定条件的元素的索引值</strong></font>。</p><p>基本语法：<code>numpy.where(condition[, x, y])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>condition</td><td>判断条件，如果满足该条件，则产生 x，否则产生 y，若未指定 x 与 y，则返回满足该条件元素的索引值</td></tr><tr><td>x, y</td><td>返回的值为数组对象，如果满足 condition，则产生 x，否则产生 y</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>])&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.where(a&gt;<span class="hljs-number">8</span>))(array([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>], dtype=int32),)         <span class="hljs-comment"># 返回满足 a&gt;8 的元素的索引值</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.where(a&gt;<span class="hljs-number">8</span>, a, <span class="hljs-number">10</span>*a))              <span class="hljs-comment"># 如果原数组中的元素 a&gt;8，则返回 a，否则返回 10*a</span>[<span class="hljs-number">12</span> <span class="hljs-number">70</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">21</span> <span class="hljs-number">50</span> <span class="hljs-number">11</span> <span class="hljs-number">10</span>]</code></pre><h3><span id="6x03-extract"><font color="#1BC3FB">【6x03】extract()</font></span></h3><p><code>numpy.extract()</code> 函数<font color="#FF0000"><strong>返回数组中满足指定条件的元素</strong></font>。</p><p>基本语法：<code>numpy.extract(condition, arr)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>condition</td><td>判断条件</td></tr><tr><td>arr</td><td>原数组</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.extract(a&gt;<span class="hljs-number">8</span>, a))[<span class="hljs-number">12</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">21</span> <span class="hljs-number">11</span>]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">9</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>] [<span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>condition = np.mod(a,<span class="hljs-number">2</span>) == <span class="hljs-number">0</span>     <span class="hljs-comment"># 定义筛选条件（余数为 0，即偶数）</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(condition)[[ <span class="hljs-literal">True</span> <span class="hljs-literal">False</span>  <span class="hljs-literal">True</span>] [<span class="hljs-literal">False</span>  <span class="hljs-literal">True</span> <span class="hljs-literal">False</span>] [ <span class="hljs-literal">True</span> <span class="hljs-literal">False</span>  <span class="hljs-literal">True</span>]]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.extract(condition, a))[<span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span>]</code></pre><h2><span id="7x00-numpy-pan-duan-han-shu"><font color="#FF0000">【7x00】NumPy 判断函数</font></span></h2><h3><span id="7x01-any-all"><font color="#1BC3FB">【7x01】any() / all()</font></span></h3><p><code>numpy.any()</code>：如果<font color="#FF0000"><strong>至少有一个</strong></font>元素满足指定条件，则返回 True，否则返回 False。</p><p><code>numpy.all()</code>：如果<font color="#FF0000"><strong>所有</strong></font>的元素满足指定条件，则返回 True，否则返回 False。</p><p>基本语法：<code>numpy.any(a[, axis=None, out=None, keepdims=&lt;no value&gt;])</code>；<code>numpy.all(a[, axis=None, out=None, keepdims=&lt;no value&gt;])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待处理的数组对象</td></tr><tr><td>axis</td><td>指定轴，可选项，整数或者整数元组类型</td></tr><tr><td>out</td><td>可选项，放置结果的备用输出数组，必须具有与预期输出数组相同的形状和缓冲区长度</td></tr><tr><td>keepdims</td><td>bool 类型，可选项，是否保持数组的二维特性</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">any</span>([[<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>], [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>]]))<span class="hljs-literal">True</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([-<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">any</span>(a&lt;<span class="hljs-number">0</span>))<span class="hljs-literal">True</span></code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">all</span>([[<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>], [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>]]))<span class="hljs-literal">False</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([-<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">all</span>(a&lt;<span class="hljs-number">0</span>))<span class="hljs-literal">False</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105398131</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> NumPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 NumPy（四）：字符串函数总结与对比</title>
      <link href="/article/011/"/>
      <url>/article/011/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-01-numpy-zi-fu-chuan-han-shu-su-cha-biao-font"><font color="#ff0000">【01】NumPy 字符串函数速查表</font></a></li><li><a href="#font-color-ff0000-02-numpy-char-add-font"><font color="#ff0000">【02】numpy.char.add()</font></a></li><li><a href="#font-color-ff0000-03-numpy-char-join-font"><font color="#ff0000">【03】numpy.char.join()</font></a></li><li><a href="#font-color-ff0000-04-numpy-char-mod-font"><font color="#ff0000">【04】numpy.char.mod()</font></a></li><li><a href="#font-color-ff0000-05-numpy-char-multiply-font"><font color="#ff0000">【05】numpy.char.multiply()</font></a></li><li><a href="#font-color-ff0000-06-numpy-char-capitalize-font"><font color="#ff0000">【06】numpy.char.capitalize()</font></a></li><li><a href="#font-color-ff0000-07-numpy-char-title-font"><font color="#ff0000">【07】numpy.char.title()</font></a></li><li><a href="#font-color-ff0000-08-numpy-char-lower-font"><font color="#ff0000">【08】numpy.char.lower()</font></a></li><li><a href="#font-color-ff0000-09-numpy-char-upper-font"><font color="#ff0000">【09】numpy.char.upper()</font></a></li><li><a href="#font-color-ff0000-10-numpy-char-swapcase-font"><font color="#ff0000">【10】numpy.char.swapcase()</font></a></li><li><a href="#font-color-ff0000-11-numpy-char-center-font"><font color="#ff0000">【11】numpy.char.center()</font></a></li><li><a href="#font-color-ff0000-12-numpy-char-ljust-font"><font color="#ff0000">【12】numpy.char.ljust()</font></a></li><li><a href="#font-color-ff0000-13-numpy-char-rjust-font"><font color="#ff0000">【13】numpy.char.rjust()</font></a></li><li><a href="#font-color-ff0000-14-numpy-char-zfill-font"><font color="#ff0000">【14】numpy.char.zfill()</font></a></li><li><a href="#font-color-ff0000-15-numpy-char-strip-font"><font color="#ff0000">【15】numpy.char.strip()</font></a></li><li><a href="#font-color-ff0000-16-numpy-char-lstrip-font"><font color="#ff0000">【16】numpy.char.lstrip()</font></a></li><li><a href="#font-color-ff0000-17-numpy-char-rstrip-font"><font color="#ff0000">【17】numpy.char.rstrip()</font></a></li><li><a href="#font-color-ff0000-18-numpy-char-partition-font"><font color="#ff0000">【18】numpy.char.partition()</font></a></li><li><a href="#font-color-ff0000-19-numpy-char-rpartition-font"><font color="#ff0000">【19】numpy.char.rpartition()</font></a></li><li><a href="#font-color-ff0000-20-numpy-char-split-font"><font color="#ff0000">【20】numpy.char.split()</font></a></li><li><a href="#font-color-ff0000-21-numpy-char-rsplit-font"><font color="#ff0000">【21】numpy.char.rsplit()</font></a></li><li><a href="#font-color-ff0000-22-numpy-char-replace-font"><font color="#ff0000">【22】numpy.char.replace()</font></a></li><li><a href="#font-color-ff0000-23-numpy-char-splitlines-font"><font color="#ff0000">【23】numpy.char.splitlines()</font></a></li><li><a href="#font-color-ff0000-24-numpy-char-translate-font"><font color="#ff0000">【24】numpy.char.translate()</font></a></li><li><a href="#font-color-ff0000-25-numpy-char-encode-font"><font color="#ff0000">【25】numpy.char.encode()</font></a></li><li><a href="#font-color-ff0000-26-numpy-char-decode-font"><font color="#ff0000">【26】numpy.char.decode()</font></a></li></ul><!-- tocstop --><hr><p>NumPy 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/008/">Python 数据分析三剑客之 NumPy（一）：理解 NumPy / 数组基础</a></li><li><a href="https://www.itbob.cn/article/009/">Python 数据分析三剑客之 NumPy（二）：数组索引 / 切片 / 广播 / 拼接 / 分割</a></li><li><a href="https://www.itbob.cn/article/010/">Python 数据分析三剑客之 NumPy（三）：数组的迭代与位运算</a></li><li><a href="https://www.itbob.cn/article/011/">Python 数据分析三剑客之 NumPy（四）：字符串函数总结与对比</a></li><li><a href="https://www.itbob.cn/article/012/">Python 数据分析三剑客之 NumPy（五）：数学 / 算术 / 统计 / 排序 / 条件 / 判断函数合集</a></li><li><a href="https://www.itbob.cn/article/013/">Python 数据分析三剑客之 NumPy（六）：矩阵 / 线性代数库与 IO 操作</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105350414</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="01-numpy-zi-fu-chuan-han-shu-su-cha-biao"><font color="#ff0000">【01】NumPy 字符串函数速查表</font></span></h2><p>和 Python 一样，NumPy 也可以进行字符串相关操作。字符串函数在字符数组类（<code>numpy.char</code>）中定义。</p><table><tr><td bgcolor="#7FFFD4">NumPy 字符串函数速查表</td></tr></table><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>对两个数组的字符串元素进行连接</td></tr><tr><td>join()</td><td>通过指定分隔符来连接数组中的元素</td></tr><tr><td>mod()</td><td>格式化字符串，相当于 Python 字符串中的 % 和 format</td></tr><tr><td>multiply()</td><td>按照给定值返回元素多重连接后的字符串</td></tr><tr><td>capitalize()</td><td>将字符串（字符串可同时包含字母和数字，只要是连续的都会被视为一个同字符串）第一个字母转换为大写</td></tr><tr><td>title()</td><td>将单词（仅包含字母，若同时包含数字和字母，则数字之后元素被视为另一个单词）第一个字母转换为大写</td></tr><tr><td>lower()</td><td>将数组中所有的元素转换为小写</td></tr><tr><td>upper()</td><td>将数组中所有的元素转换为大写</td></tr><tr><td>swapcase()</td><td>将数组中每个元素字母大写转为小写，小写转为大写</td></tr><tr><td>center()</td><td>居中字符串，并使用指定字符在左右侧进行填充</td></tr><tr><td>ljust()</td><td>左对齐字符串，并使用指定字符在右侧进行填充</td></tr><tr><td>rjust()</td><td>右对齐字符串，并使用指定字符在左侧进行填充</td></tr><tr><td>zfill()</td><td>在数组元素的左边填充指定个数的数字 0</td></tr><tr><td>strip()</td><td>移除数组每个元素开头和者结尾处的特定字符</td></tr><tr><td>lstrip()</td><td>移除数组每个元素开头（最左边）的特定字符</td></tr><tr><td>rstrip()</td><td>移除数组每个元素结尾（最右边）的特定字符</td></tr><tr><td>partition()</td><td>指定分割符对字符串进行分割（从最左边的分割符开始分割，仅分割一次，返回三个元素）</td></tr><tr><td>rpartition()</td><td>指定分割符对字符串进行分割（从最右边的分割符开始分割，仅分割一次，返回三个元素）</td></tr><tr><td>split()</td><td>指定分割符对字符串进行分割（从最左边的分割符开始分割，可指定分割次数，返回多个元素）</td></tr><tr><td>rsplit()</td><td>指定分割符对字符串进行分割（从最右边的分割符开始分割，可指定分割次数，返回多个元素）</td></tr><tr><td>replace()</td><td>使用新字符串替换原字符串中的子字符串</td></tr><tr><td>splitlines()</td><td>以换行符作为分隔符来分割字符串</td></tr><tr><td>translate()</td><td>将数组元素字符串按照给定的转换表进行映射</td></tr><tr><td>encode()</td><td>编码操作，数组元素依次调用 str.encode</td></tr><tr><td>decode()</td><td>解码操作，数组元素依次调用 str.decode</td></tr></tbody></table><h2><span id="02-numpy-char-add"><font color="#ff0000">【02】numpy.char.add()</font></span></h2><p>numpy.char.add() 函数用于对两个数组的字符串元素进行连接。</p><p>基本语法：<code>numpy.char.add(x1, x2)</code>，数组 x1 和 x2 必须具有相同的形状。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x1</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>x2</td><td>要处理的 str 或 unicode 数组</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.add([<span class="hljs-string">&#x27;hello&#x27;</span>],[<span class="hljs-string">&#x27; world&#x27;</span>]))[<span class="hljs-string">&#x27;hello world&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.add([<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>], [<span class="hljs-string">&#x27; 456&#x27;</span>, <span class="hljs-string">&#x27; def&#x27;</span>]))[<span class="hljs-string">&#x27;123 456&#x27;</span> <span class="hljs-string">&#x27;abc def&#x27;</span>]</code></pre><h2><span id="03-numpy-char-join"><font color="#ff0000">【03】numpy.char.join()</font></span></h2><p>numpy.char.join() 函数通过指定分隔符来连接数组中的元素。</p><p>基本语法：<code>numpy.char.join(sep1, seq2)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>seq1</td><td>分割符，str 或 unicode 数组</td></tr><tr><td>seq2</td><td>被分割的 str 或 unicode 数组</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.join(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>))p-y-t-h-o-n&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.join([<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>],[<span class="hljs-string">&#x27;python&#x27;</span>,<span class="hljs-string">&#x27;java&#x27;</span>]))[<span class="hljs-string">&#x27;p+y+t+h+o+n&#x27;</span> <span class="hljs-string">&#x27;j-a-v-a&#x27;</span>]</code></pre><h2><span id="04-numpy-char-mod"><font color="#ff0000">【04】numpy.char.mod()</font></span></h2><p>numpy.char.mod() 函数用于格式化字符串，相当于 Python 字符串中的 % 和 format。</p><p>基本语法：<code>numpy.char.mod(value , a)</code></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.mod(<span class="hljs-string">&#x27;value=%.2f&#x27;</span>, np.arange(<span class="hljs-number">6</span>)))[<span class="hljs-string">&#x27;value=0.00&#x27;</span> <span class="hljs-string">&#x27;value=1.00&#x27;</span> <span class="hljs-string">&#x27;value=2.00&#x27;</span> <span class="hljs-string">&#x27;value=3.00&#x27;</span> <span class="hljs-string">&#x27;value=4.00&#x27;</span> <span class="hljs-string">&#x27;value=5.00&#x27;</span>]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.mod(<span class="hljs-string">&#x27;value=%.4f&#x27;</span>, [[<span class="hljs-number">1.1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3.021</span>], [<span class="hljs-number">4.12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6.1</span>]]))[[<span class="hljs-string">&#x27;value=1.1000&#x27;</span> <span class="hljs-string">&#x27;value=2.0000&#x27;</span> <span class="hljs-string">&#x27;value=3.0210&#x27;</span>] [<span class="hljs-string">&#x27;value=4.1200&#x27;</span> <span class="hljs-string">&#x27;value=5.0000&#x27;</span> <span class="hljs-string">&#x27;value=6.1000&#x27;</span>]]</code></pre><h2><span id="05-numpy-char-multiply"><font color="#ff0000">【05】numpy.char.multiply()</font></span></h2><p>numpy.char.multiply() 函数用于元素的多重连接，即返回 <code>a*i</code>。</p><p>基本语法：<code>numpy.char.multiply(a, i)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>i</td><td>整数数组</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.multiply(<span class="hljs-string">&#x27;Python &#x27;</span>, <span class="hljs-number">4</span>))Python Python Python Python</code></pre><h2><span id="06-numpy-char-capitalize"><font color="#ff0000">【06】numpy.char.capitalize()</font></span></h2><p>numpy.char.capitalize() 函数将字符串第一个字母转换为大写。</p><p>基本语法：<code>numpy.char.capitalize(a)</code></p><p>参数解释：<code>a</code>：要处理的 str 或 unicode 数组。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.capitalize(<span class="hljs-string">&#x27;python&#x27;</span>))Python<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.capitalize([<span class="hljs-string">&#x27;a1b2&#x27;</span>,<span class="hljs-string">&#x27;1b2a&#x27;</span>,<span class="hljs-string">&#x27;b2a1&#x27;</span>,<span class="hljs-string">&#x27;2a1b&#x27;</span>]))[<span class="hljs-string">&#x27;A1b2&#x27;</span> <span class="hljs-string">&#x27;1b2a&#x27;</span> <span class="hljs-string">&#x27;B2a1&#x27;</span> <span class="hljs-string">&#x27;2a1b&#x27;</span>]</code></pre><h2><span id="07-numpy-char-title"><font color="#ff0000">【07】numpy.char.title()</font></span></h2><p>numpy.char.title() 函数将数组元素字符串的每个单词的第一个字母转换为大写。<font color="#ff0000">注意：如果一个字符串中间有非字母，则非字母之后的字符串会被视为另一个单词。</font></p><p>基本语法：<code>numpy.char.title(a)</code></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.title(<span class="hljs-string">&#x27;i love python!&#x27;</span>))I Love Python!<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.title(<span class="hljs-string">&#x27;a1bc2def3h&#x27;</span>))A1Bc2Def3H<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.title([<span class="hljs-string">&#x27;a1bc&#x27;</span>, <span class="hljs-string">&#x27;a 1bc&#x27;</span>, <span class="hljs-string">&#x27;a1 bc&#x27;</span>, <span class="hljs-string">&#x27;a1b c&#x27;</span>]))[<span class="hljs-string">&#x27;A1Bc&#x27;</span> <span class="hljs-string">&#x27;A 1Bc&#x27;</span> <span class="hljs-string">&#x27;A1 Bc&#x27;</span> <span class="hljs-string">&#x27;A1B C&#x27;</span>]</code></pre><h2><span id="08-numpy-char-lower"><font color="#ff0000">【08】numpy.char.lower()</font></span></h2><p>numpy.char.lower() 函数将数组中所有的元素转换为小写。</p><p>基本语法：<code>numpy.char.lower(a)</code></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.lower(<span class="hljs-string">&#x27;PYTHON&#x27;</span>))python<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.lower([<span class="hljs-string">&#x27;PYTHON&#x27;</span>, <span class="hljs-string">&#x27;A123C&#x27;</span>, <span class="hljs-string">&#x27;Ba1A&#x27;</span>]))[<span class="hljs-string">&#x27;python&#x27;</span> <span class="hljs-string">&#x27;a123c&#x27;</span> <span class="hljs-string">&#x27;ba1a&#x27;</span>]</code></pre><h2><span id="09-numpy-char-upper"><font color="#ff0000">【09】numpy.char.upper()</font></span></h2><p>numpy.char.upper() 函数将数组中所有的元素转换为大写。</p><p>基本语法：<code>numpy.char.upper(a)</code></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.upper(<span class="hljs-string">&#x27;python&#x27;</span>))PYTHON<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.upper([<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;a123c&#x27;</span>, <span class="hljs-string">&#x27;ba1A&#x27;</span>]))[<span class="hljs-string">&#x27;PYTHON&#x27;</span> <span class="hljs-string">&#x27;A123C&#x27;</span> <span class="hljs-string">&#x27;BA1A&#x27;</span>]</code></pre><h2><span id="10-numpy-char-swapcase"><font color="#ff0000">【10】numpy.char.swapcase()</font></span></h2><p>numpy.char.swapcase() 函数将数组中每个元素字母大写转为小写，小写转为大写。</p><p>基本语法：<code>numpy.char.swapcase(a)</code></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.swapcase(<span class="hljs-string">&#x27;Abc123DEf456gHI&#x27;</span>))aBC123deF456Ghi<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.swapcase([<span class="hljs-string">&#x27;Abc&#x27;</span>, <span class="hljs-string">&#x27;1De&#x27;</span>, <span class="hljs-string">&#x27;23F&#x27;</span>, <span class="hljs-string">&#x27;Ghi&#x27;</span>]))[<span class="hljs-string">&#x27;aBC&#x27;</span> <span class="hljs-string">&#x27;1dE&#x27;</span> <span class="hljs-string">&#x27;23f&#x27;</span> <span class="hljs-string">&#x27;gHI&#x27;</span>]</code></pre><h2><span id="11-numpy-char-center"><font color="#ff0000">【11】numpy.char.center()</font></span></h2><p>numpy.char.center() 函数用于<font color="#FF000000"><strong>居中</strong></font>字符串，并使用指定字符在<font color="#FF000000"><strong>左右侧</strong></font>进行填充。</p><p>基本语法：<code>numpy.char.center(a, width[, fillchar=' '])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>width</td><td>int 类型，结果字符串的总长度</td></tr><tr><td>fillchar</td><td>可选项，str 或 unicode 数组，要使用的填充字符，默认为空格</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.center(<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-number">10</span>))  python  <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.center(<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-number">12</span>, fillchar=<span class="hljs-string">&#x27;-&#x27;</span>))---python---<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.center(<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-number">11</span>, fillchar=<span class="hljs-string">&#x27;-&#x27;</span>))---python--</code></pre><h2><span id="12-numpy-char-ljust"><font color="#ff0000">【12】numpy.char.ljust()</font></span></h2><p>numpy.char.ljust() 函数用于<font color="#FF000000"><strong>左对齐</strong></font>字符串，并使用指定字符在<font color="#FF000000"><strong>右侧</strong></font>进行填充。</p><p>基本语法：<code>numpy.char.ljust(a, width[, fillchar=' '])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>width</td><td>int 类型，结果字符串的总长度</td></tr><tr><td>fillchar</td><td>可选项，str 或 unicode 数组，要使用的填充字符，默认为空格</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.ljust(<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-number">10</span>, fillchar=<span class="hljs-string">&#x27;-&#x27;</span>))python----</code></pre><h2><span id="13-numpy-char-rjust"><font color="#ff0000">【13】numpy.char.rjust()</font></span></h2><p>numpy.char.ljust() 函数用于<font color="#FF000000"><strong>右对齐</strong></font>字符串，并使用指定字符在<font color="#FF000000"><strong>左侧</strong></font>进行填充。</p><p>基本语法：<code>numpy.char.rjust(a, width[, fillchar=' '])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>width</td><td>int 类型，结果字符串的总长度</td></tr><tr><td>fillchar</td><td>可选项，str 或 unicode 数组，要使用的填充字符，默认为空格</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.rjust(<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-number">10</span>, fillchar=<span class="hljs-string">&#x27;-&#x27;</span>))----python</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105350414</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="14-numpy-char-zfill"><font color="#ff0000">【14】numpy.char.zfill()</font></span></h2><p>numpy.char.zfill() 函数在数组元素的左边填充指定个数的数字 0。</p><p>基本语法：<code>numpy.char.zfill(a, width)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>width</td><td>int 类型，数组字符串在左边填充 0 后整个字符串的宽度<br>如果宽度小于原字符串的宽度，则结果会去掉原字符串中多余的元素</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.zfill(<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-number">3</span>))pyt<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.zfill(<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-number">10</span>))0000python</code></pre><h2><span id="15-numpy-char-strip"><font color="#ff0000">【15】numpy.char.strip()</font></span></h2><p>numpy.char.strip() 函数用于移除开头和结尾处的特定字符。</p><p>基本语法：<code>numpy.char.strip(a[, chars=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>chars</td><td>可选项，str 类型，指定要删除的字符集，如果省略或者为 None，则默认为删除空白</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.strip(<span class="hljs-string">&#x27;alibaba&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>))libab<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.strip([<span class="hljs-string">&#x27;Alibaba&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;ABBA&#x27;</span>],<span class="hljs-string">&#x27;a&#x27;</span>))[<span class="hljs-string">&#x27;Alibab&#x27;</span> <span class="hljs-string">&#x27;dmin&#x27;</span> <span class="hljs-string">&#x27;jav&#x27;</span> <span class="hljs-string">&#x27;ABBA&#x27;</span>]</code></pre><h2><span id="16-numpy-char-lstrip"><font color="#ff0000">【16】numpy.char.lstrip()</font></span></h2><p>numpy.char.lstrip() 函数用于移除数组每个元素最右边的特定字符。</p><p>基本语法：<code>numpy.char.lstrip(a[, chars=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>chars</td><td>可选项，str 类型，指定要删除的字符集，如果省略或者为 None，则默认为删除空白</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.lstrip(<span class="hljs-string">&#x27;alibaba&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>))libaba<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.lstrip([<span class="hljs-string">&#x27;Alibaba&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;aBBa&#x27;</span>],<span class="hljs-string">&#x27;a&#x27;</span>))[<span class="hljs-string">&#x27;Alibaba&#x27;</span> <span class="hljs-string">&#x27;dmin&#x27;</span> <span class="hljs-string">&#x27;java&#x27;</span> <span class="hljs-string">&#x27;BBa&#x27;</span>]</code></pre><h2><span id="17-numpy-char-rstrip"><font color="#ff0000">【17】numpy.char.rstrip()</font></span></h2><p>numpy.char.rstrip() 函数用于移除数组每个元素最右边的特定字符。</p><p>基本语法：<code>numpy.char.rstrip(a[, chars=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>chars</td><td>可选项，str 类型，指定要删除的字符集，如果省略或者为 None，则默认为删除空白</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.rstrip(<span class="hljs-string">&#x27;alibaba&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>))alibab<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.rstrip([<span class="hljs-string">&#x27;Alibaba&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;aBBa&#x27;</span>],<span class="hljs-string">&#x27;a&#x27;</span>))[<span class="hljs-string">&#x27;Alibab&#x27;</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-string">&#x27;jav&#x27;</span> <span class="hljs-string">&#x27;aBB&#x27;</span>]</code></pre><h2><span id="18-numpy-char-partition"><font color="#ff0000">【18】numpy.char.partition()</font></span></h2><p>numpy.char.partition() 函数通过指定分割符对字符串进行分割，从<font color="#FF0000"><strong>最左边</strong></font>第一次出现的分割符开始分割，仅分割一次，返回三个元素。</p><p>基本语法：<code>numpy.char.partition(a, sep)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>sep</td><td>分割字符，str 或 unicode 类型，返回三个元素：分割字符前的字符，分割字符，分割字符后的字符<br>如果元素包含多个分割字符，以<font color="#FF0000"><strong>最左边</strong></font>的为准，如果找不到分隔符，则返回三个元素：<font color="#FF0000"><strong>字符串本身以及两个空字符串</strong></font></td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.partition(<span class="hljs-string">&#x27;111a222&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>))[<span class="hljs-string">&#x27;111&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;222&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.partition(<span class="hljs-string">&#x27;111a222a333&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>))[<span class="hljs-string">&#x27;111&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;222a333&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.partition(<span class="hljs-string">&#x27;111a222a333&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>))[<span class="hljs-string">&#x27;111a222a333&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.partition([<span class="hljs-string">&#x27;111a222&#x27;</span>, <span class="hljs-string">&#x27;23a45&#x27;</span>],<span class="hljs-string">&#x27;a&#x27;</span>))[[<span class="hljs-string">&#x27;111&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;222&#x27;</span>] [<span class="hljs-string">&#x27;23&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;45&#x27;</span>]]</code></pre><h2><span id="19-numpy-char-rpartition"><font color="#ff0000">【19】numpy.char.rpartition()</font></span></h2><p>numpy.char.partition() 函数通过指定分割符对字符串进行分割，从<font color="#FF0000"><strong>最右边</strong></font>第一次出现的分割符开始分割，仅分割一次，返回三个元素。</p><p>基本语法：<code>numpy.char.rpartition(a, sep)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>sep</td><td>分割字符，str 或 unicode 类型，返回三个元素：分割字符前的字符，分割字符，分割字符后的字符<br>如果元素包含多个分割字符，以<font color="#FF0000"><strong>最右边</strong></font>的为准，如果找不到分隔符，则返回三个元素：<font color="#FF0000"><strong>两个空字符串以及字符串本身</strong></font></td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.rpartition(<span class="hljs-string">&#x27;111a222a333&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>))[<span class="hljs-string">&#x27;111a222&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;333&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.rpartition(<span class="hljs-string">&#x27;111a222a333&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>))[<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;111a222a333&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.rpartition([<span class="hljs-string">&#x27;111a222a333&#x27;</span>, <span class="hljs-string">&#x27;23a45&#x27;</span>],<span class="hljs-string">&#x27;a&#x27;</span>))[[<span class="hljs-string">&#x27;111a222&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;333&#x27;</span>] [<span class="hljs-string">&#x27;23&#x27;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;45&#x27;</span>]]</code></pre><h2><span id="20-numpy-char-split"><font color="#ff0000">【20】numpy.char.split()</font></span></h2><p>numpy.char.split() 函数通过指定分割符对字符串进行分割，从<font color="#FF0000"><strong>最左边</strong></font>的分割符开始分割，可指定分割次数，返回多个元素。</p><p>基本语法：<code>numpy.char.split(a[, sep=None, maxsplit=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>sep</td><td>分隔符，可选项，str 或者 unicode 类型，如果 sep 未指定或者为 None，则默认为空格</td></tr><tr><td>maxsplit</td><td>可选项，int 类型，如果指定 maxsplit，则最多完成 maxsplit 次分割</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.split(<span class="hljs-string">&#x27;I love python!&#x27;</span>))[<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;python!&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.split(<span class="hljs-string">&#x27;www.itrhx.com&#x27;</span>, sep=<span class="hljs-string">&#x27;.&#x27;</span>))[<span class="hljs-string">&#x27;www&#x27;</span>, <span class="hljs-string">&#x27;itrhx&#x27;</span>, <span class="hljs-string">&#x27;com&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.split(<span class="hljs-string">&#x27;one.two.itrhx.com&#x27;</span>, sep=<span class="hljs-string">&#x27;.&#x27;</span>, maxsplit=<span class="hljs-number">2</span>))[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;itrhx.com&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.split(<span class="hljs-string">&#x27;one.two.itrhx.com&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">2</span>))[<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;itrhx.com&#x27;</span>]</code></pre><h2><span id="21-numpy-char-rsplit"><font color="#ff0000">【21】numpy.char.rsplit()</font></span></h2><p>numpy.char.split() 函数通过指定分割符对字符串进行分割，从<font color="#FF0000"><strong>最右边</strong></font>的分割符开始分割，可指定分割次数，返回多个元素。</p><p>基本语法：<code>numpy.char.rsplit(a[, sep=None, maxsplit=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>sep</td><td>分隔符，可选项，str 或者 unicode 类型，如果 sep 未指定或者为 None，则默认为空格</td></tr><tr><td>maxsplit</td><td>可选项，int 类型，如果指定 maxsplit，则最多完成 maxsplit 次分割</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.rsplit(<span class="hljs-string">&#x27;one.two.itrhx.com&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">2</span>))[<span class="hljs-string">&#x27;one.two&#x27;</span>, <span class="hljs-string">&#x27;itrhx&#x27;</span>, <span class="hljs-string">&#x27;com&#x27;</span>]</code></pre><h2><span id="22-numpy-char-replace"><font color="#ff0000">【22】numpy.char.replace()</font></span></h2><p>numpy.char.replace() 函数可以使用新字符串来替换原字符串中的子字符串。</p><p>基本语法：<code>numpy.char.replace(a, old, new[, count=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>old</td><td>旧的字符串，即要替换的字符串，str 或 unicode 类型</td></tr><tr><td>new</td><td>新的字符串，即替换的字符串，str 或 unicode 类型</td></tr><tr><td>count</td><td>int 类型，如果指定该值 N，则会替换 old 中出现的前 N 个字符串</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.replace(<span class="hljs-string">&#x27;i like python&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>))i like java<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.replace(<span class="hljs-string">&#x27;aaaaaaa&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, count=<span class="hljs-number">3</span>))bbbaaaa&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.replace(<span class="hljs-string">&#x27;a111a11a1a111aa&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, count=<span class="hljs-number">3</span>))A111A11A1a111aa</code></pre><h2><span id="23-numpy-char-splitlines"><font color="#ff0000">【23】numpy.char.splitlines()</font></span></h2><p>numpy.char.splitlines() 函数以换行符作为分隔符来分割字符串，并返回数组。</p><p>基本语法：<code>numpy.char.splitlines(a[, keepends=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>keepends</td><td>如果指定 keepends 为 True，则换行符会包含在结果列表中，否则不包含</td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.splitlines(<span class="hljs-string">&#x27;hi python!\nhi java!&#x27;</span>))[<span class="hljs-string">&#x27;hi python!&#x27;</span>, <span class="hljs-string">&#x27;hi java!&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.splitlines(<span class="hljs-string">&#x27;hi python!\nhi java!&#x27;</span>, keepends=<span class="hljs-literal">True</span>))[<span class="hljs-string">&#x27;hi python!\n&#x27;</span>, <span class="hljs-string">&#x27;hi java!&#x27;</span>]</code></pre><h2><span id="24-numpy-char-translate"><font color="#ff0000">【24】numpy.char.translate()</font></span></h2><p>numpy.char.translate() 函数将数组元素字符串按照给定的转换表进行映射。</p><p>基本语法：<code>numpy.char.translate(a, table[, deletechars=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>table</td><td>包含 256 个字符的映射表，映射表通过 <code>str.maketrans()</code> 方法转换而来</td></tr><tr><td>deletechars</td><td>可选项，str 类型，字符串中要过滤的字符列表</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>intab = <span class="hljs-string">&#x27;abcdef&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>outtab = <span class="hljs-string">&#x27;123456&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>table = <span class="hljs-built_in">str</span>.maketrans(intab, outtab)    <span class="hljs-comment">#  制作映射表</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.translate(<span class="hljs-string">&#x27;this is a translate example!&#x27;</span>, table))this <span class="hljs-keyword">is</span> <span class="hljs-number">1</span> tr1nsl1t5 5x1mpl5!</code></pre><h2><span id="25-numpy-char-encode"><font color="#ff0000">【25】numpy.char.encode()</font></span></h2><p>numpy.char.encode() 函数用于编码操作，数组元素依次调用 str.encode，可以使用 Python 标准库中的编解码器。</p><p>基本语法：<code>numpy.char.encode(a[, encoding=None, errors=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>encoding</td><td>编码名称，可选项，str 类型，默认编码为 utf-8</td></tr><tr><td>errors</td><td>指定如何处理编码错误，可选项，str 类型</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.encode(<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;cp500&#x27;</span>))<span class="hljs-string">b&#x27;\x97\xa8\xa3\x88\x96\x95&#x27;</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.encode([<span class="hljs-string">&#x27;aAaAaA&#x27;</span>, <span class="hljs-string">&#x27;  aA  &#x27;</span>, <span class="hljs-string">&#x27;abBABba&#x27;</span>], <span class="hljs-string">&#x27;cp037&#x27;</span>))[<span class="hljs-string">b&#x27;\x81\xc1\x81\xc1\x81\xc1&#x27;</span> <span class="hljs-string">b&#x27;@@\x81\xc1@@&#x27;</span> <span class="hljs-string">b&#x27;\x81\x82\xc2\xc1\xc2\x82\x81&#x27;</span>]</code></pre><h2><span id="26-numpy-char-decode"><font color="#ff0000">【26】numpy.char.decode()</font></span></h2><p>numpy.char.decode() 函数用于解码操作，数组元素依次调用 str.decode，可以使用 Python 标准库中的编解码器。</p><p>基本语法：<code>numpy.char.decode(a[, encoding=None, errors=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>要处理的 str 或 unicode 数组</td></tr><tr><td>encoding</td><td>编码名称，可选项，str 类型，默认编码为 utf-8</td></tr><tr><td>errors</td><td>指定如何处理编码错误，可选项，str 类型</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.decode(<span class="hljs-string">b&#x27;\x97\xa8\xa3\x88\x96\x95&#x27;</span>, <span class="hljs-string">&#x27;cp500&#x27;</span>))python&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.char.decode([<span class="hljs-string">b&#x27;\x81\xc1\x81\xc1\x81\xc1&#x27;</span> <span class="hljs-string">b&#x27;@@\x81\xc1@@&#x27;</span> <span class="hljs-string">b&#x27;\x81\x82\xc2\xc1\xc2\x82\x81&#x27;</span>], <span class="hljs-string">&#x27;cp500&#x27;</span>))[<span class="hljs-string">&#x27;aAaAaA  aA  abBABba&#x27;</span>]</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105350414</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> NumPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 NumPy（三）：数组的迭代与位运算</title>
      <link href="/article/010/"/>
      <url>/article/010/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-numpy-nditer-die-dai-qi-dui-xiang-font"><font color="#ff0000">【1x00】numpy.nditer 迭代器对象</font></a><ul><li><a href="#font-color-1bc3fb-1x01-dan-shu-zu-de-die-dai-font"><font color="#1BC3FB">【1x01】单数组的迭代</font></a></li><li><a href="#font-color-1bc3fb-1x02-kong-zhi-die-dai-shun-xu-font"><font color="#1BC3FB">【1x02】控制迭代顺序</font></a></li><li><a href="#font-color-1bc3fb-1x03-xiu-gai-shu-zu-yuan-su-font"><font color="#1BC3FB">【1x03】修改数组元素</font></a></li><li><a href="#font-color-1bc3fb-1x04-shi-yong-wai-bu-xun-huan-font"><font color="#1BC3FB">【1x04】使用外部循环</font></a></li><li><a href="#font-color-1bc3fb-1x05-gen-zong-yuan-su-suo-yin-font"><font color="#1BC3FB">【1x05】跟踪元素索引</font></a></li><li><a href="#font-color-1bc3fb-1x06-guang-bo-shu-zu-die-dai-font"><font color="#1BC3FB">【1x06】广播数组迭代</font></a></li></ul></li><li><a href="#font-color-ff0000-2x00-numpy-wei-yun-suan-font"><font color="#ff0000">【2x00】NumPy 位运算</font></a><ul><li><a href="#font-color-1bc3fb-2x01-numpy-bitwise-and-font"><font color="#1BC3FB">【2x01】numpy.bitwise_and()</font></a></li><li><a href="#font-color-1bc3fb-2x02-numpy-bitwise-or-font"><font color="#1BC3FB">【2x02】numpy.bitwise_or()</font></a></li><li><a href="#font-color-1bc3fb-2x03-numpy-bitwise-xor-font"><font color="#1BC3FB">【2x03】numpy.bitwise_xor()</font></a></li><li><a href="#font-color-1bc3fb-2x04-numpy-invert-font"><font color="#1BC3FB">【2x04】numpy.invert()</font></a></li><li><a href="#font-color-1bc3fb-2x05-numpy-left-shift-font"><font color="#1BC3FB">【2x05】numpy.left_shift()</font></a></li><li><a href="#font-color-1bc3fb-2x06-numpy-right-shift-font"><font color="#1BC3FB">【2x06】numpy.right_shift()</font></a></li></ul></li></ul><!-- tocstop --><hr><p>NumPy 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/008/">Python 数据分析三剑客之 NumPy（一）：理解 NumPy / 数组基础</a></li><li><a href="https://www.itbob.cn/article/009/">Python 数据分析三剑客之 NumPy（二）：数组索引 / 切片 / 广播 / 拼接 / 分割</a></li><li><a href="https://www.itbob.cn/article/010/">Python 数据分析三剑客之 NumPy（三）：数组的迭代与位运算</a></li><li><a href="https://www.itbob.cn/article/011/">Python 数据分析三剑客之 NumPy（四）：字符串函数总结与对比</a></li><li><a href="https://www.itbob.cn/article/012/">Python 数据分析三剑客之 NumPy（五）：数学 / 算术 / 统计 / 排序 / 条件 / 判断函数合集</a></li><li><a href="https://www.itbob.cn/article/013/">Python 数据分析三剑客之 NumPy（六）：矩阵 / 线性代数库与 IO 操作</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105185337</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-numpy-nditer-die-dai-qi-dui-xiang"><font color="#ff0000">【1x00】numpy.nditer 迭代器对象</font></span></h2><p>numpy.nditer 是 NumPy 的迭代器对象，迭代器对象提供了许多灵活的方法来访问一个或多个数组中的所有元素，简单来说，迭代器最基本的任务就是完成对数组元素的访问。</p><h3><span id="1x01-dan-shu-zu-de-die-dai"><font color="#1BC3FB">【1x01】单数组的迭代</font></span></h3><p>单数组迭代示例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(a):    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)    <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span></code></pre><p>注意：默认对数组元素的访问顺序，既不是以标准 C（行优先） 也不是 Fortran 顺序（列优先），选择的顺序是和数组内存布局一致的，这样做是为了提高访问效率，反映了默认情况下只需要访问每个元素而不关心特定排序的想法。以下用一个数组的转置来理解这种访问机制。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>b = a.T<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[<span class="hljs-number">0</span> <span class="hljs-number">5</span>] [<span class="hljs-number">1</span> <span class="hljs-number">6</span>] [<span class="hljs-number">2</span> <span class="hljs-number">7</span>] [<span class="hljs-number">3</span> <span class="hljs-number">8</span>] [<span class="hljs-number">4</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>c = a.T.copy(order=<span class="hljs-string">&#x27;C&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(c)[[<span class="hljs-number">0</span> <span class="hljs-number">5</span>] [<span class="hljs-number">1</span> <span class="hljs-number">6</span>] [<span class="hljs-number">2</span> <span class="hljs-number">7</span>] [<span class="hljs-number">3</span> <span class="hljs-number">8</span>] [<span class="hljs-number">4</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(a):    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)    <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(b):    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)    <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(c):    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)    <span class="hljs-number">0</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span></code></pre><p>例子中 a 是一个 2 行 5 列的数组，b 数组对 a 进行了转置，而 c 数组则是对 a 进行转置后按照 C order（行优先）的形式复制到新内存中储存，b 数组虽然进行了转置操作，但是其元素在内存当中的储存顺序仍然和 a 一样，所以对其迭代的效果也和 a 一样，c 数组元素在新内存当中的储存顺序不同于 a 和 b，因此对其迭代的效果也不一样。</p><h3><span id="1x02-kong-zhi-die-dai-shun-xu"><font color="#1BC3FB">【1x02】控制迭代顺序</font></span></h3><p>如果想要按照特定顺序来对数组进行迭代，nditer 同样也提供了 order 参数，可选值为：<code>C</code> <code>F</code> <code>A</code> <code>K</code></p><ul><li><code>numpy.nditer(a, order='C')</code>：标准 C 顺序，即行优先；</li><li><code>numpy.nditer(a, order='F')</code>： Fortran 顺序，即列优先；</li><li><code>numpy.nditer(a, order='A')</code>：如果所有数组都是 Fortran 顺序的，则 A 表示以 F 顺序，否则以 C 顺序；</li><li><code>numpy.nditer(a, order='K')</code>：默认值，保持原数组在内存当中的顺序。</li></ul><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>] [ <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(a, order=<span class="hljs-string">&#x27;C&#x27;</span>):    <span class="hljs-built_in">print</span>(i, end= <span class="hljs-string">&#x27; &#x27;</span>)    <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(a, order=<span class="hljs-string">&#x27;F&#x27;</span>):    <span class="hljs-built_in">print</span>(i, end= <span class="hljs-string">&#x27; &#x27;</span>)    <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">11</span> <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(a, order=<span class="hljs-string">&#x27;K&#x27;</span>):    <span class="hljs-built_in">print</span>(i, end= <span class="hljs-string">&#x27; &#x27;</span>)    <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span></code></pre><h3><span id="1x03-xiu-gai-shu-zu-yuan-su"><font color="#1BC3FB">【1x03】修改数组元素</font></span></h3><p>nditer 对象提供了可选参数 <code>op_flags</code>，默认情况下，该参数值为 <code>readonly</code>（只读），如果在遍历数组的同时，要实现对数组中元素值的修改，则可指定 <code>op_flags</code> 值为 <code>readwrite</code>（读写） 或者 <code>writeonly</code>（只读）。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(a, op_flags=[<span class="hljs-string">&#x27;readwrite&#x27;</span>]):        i[...] = i+<span class="hljs-number">1</span>    <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>] [ <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span>]]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>li = []<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>] [ <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(a, op_flags=[<span class="hljs-string">&#x27;readwrite&#x27;</span>]):        li.append(i*<span class="hljs-number">2</span>)    <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(li)[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">20</span>, <span class="hljs-number">22</span>]</code></pre><h3><span id="1x04-shi-yong-wai-bu-xun-huan"><font color="#1BC3FB">【1x04】使用外部循环</font></span></h3><p>nditer 对象支持 <code>flags</code> 参数，该参数最常用的值是 <code>external_loop</code>，表示使给定的值为具有多个值的一维数组。</p><p>通俗来讲，当 Ndarray 的顺序和遍历的顺序一致时，就会将所有元素组成一个一维数组返回；当 Ndarray 的顺序和遍历的顺序不一致时，则返回每次遍历的一维数组</p><p>官方介绍：<a href="https://docs.scipy.org/doc/numpy/reference/arrays.nditer.html#using-an-external-loop">https://docs.scipy.org/doc/numpy/reference/arrays.nditer.html#using-an-external-loop</a></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>], [<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]], order=<span class="hljs-string">&#x27;C&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(a, flags=[<span class="hljs-string">&#x27;external_loop&#x27;</span>], order=<span class="hljs-string">&#x27;C&#x27;</span> ):        <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)    [ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>] <span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.nditer(a, flags=[<span class="hljs-string">&#x27;external_loop&#x27;</span>], order=<span class="hljs-string">&#x27;F&#x27;</span> ):        <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)    [<span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span>] [<span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span>] [ <span class="hljs-number">2</span>  <span class="hljs-number">6</span> <span class="hljs-number">10</span>] [ <span class="hljs-number">3</span>  <span class="hljs-number">7</span> <span class="hljs-number">11</span>]</code></pre><h3><span id="1x05-gen-zong-yuan-su-suo-yin"><font color="#1BC3FB">【1x05】跟踪元素索引</font></span></h3><p>在迭代期间，我们有可能希望在计算中使用当前元素的索引值，同样可以通过指定 <code>flags</code> 参数的取值来实现：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>c_index</code></td><td>跟踪 C 顺序索引</td></tr><tr><td><code>f_index</code></td><td>跟踪 Fortran 顺序索引</td></tr><tr><td><code>multi_index</code></td><td>跟踪多个索引或每个迭代维度一个索引的元组（多重索引）</td></tr></tbody></table><p>在以下实例当中：</p><p>当参数为 <code>c_index</code> 和 <code>f_index</code> 时，<code>it.index</code> 用于输出元素的索引值</p><p>当参数为 <code>multi_index</code> 时，<code>it.multi_index</code>  用于输出元素的索引值</p><p><code>it.iternext()</code> 表示进入下一次迭代，直到迭代完成为止</p><p><code>multi_index</code> 可理解为对迭代对象进行多重索引</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>it = np.nditer(a, flags=[<span class="hljs-string">&#x27;c_index&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> it.finished:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d &lt;%s&gt;&#x27;</span> %(it[<span class="hljs-number">0</span>], it.index))        it.iternext()    <span class="hljs-number">0</span> &lt;<span class="hljs-number">0</span>&gt;<span class="hljs-literal">True</span><span class="hljs-number">1</span> &lt;<span class="hljs-number">1</span>&gt;<span class="hljs-literal">True</span><span class="hljs-number">2</span> &lt;<span class="hljs-number">2</span>&gt;<span class="hljs-literal">True</span><span class="hljs-number">3</span> &lt;<span class="hljs-number">3</span>&gt;<span class="hljs-literal">True</span><span class="hljs-number">4</span> &lt;<span class="hljs-number">4</span>&gt;<span class="hljs-literal">True</span><span class="hljs-number">5</span> &lt;<span class="hljs-number">5</span>&gt;<span class="hljs-literal">False</span></code></pre><p><img src="https://cdn.itbob.cn/img/article/009/01.png" alt="01"></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>it = np.nditer(a, flags=[<span class="hljs-string">&#x27;f_index&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> it.finished:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d &lt;%s&gt;&#x27;</span> %(it[<span class="hljs-number">0</span>], it.index))        it.iternext()    <span class="hljs-number">0</span> &lt;<span class="hljs-number">0</span>&gt;<span class="hljs-literal">True</span><span class="hljs-number">1</span> &lt;<span class="hljs-number">2</span>&gt;<span class="hljs-literal">True</span><span class="hljs-number">2</span> &lt;<span class="hljs-number">4</span>&gt;<span class="hljs-literal">True</span><span class="hljs-number">3</span> &lt;<span class="hljs-number">1</span>&gt;<span class="hljs-literal">True</span><span class="hljs-number">4</span> &lt;<span class="hljs-number">3</span>&gt;<span class="hljs-literal">True</span><span class="hljs-number">5</span> &lt;<span class="hljs-number">5</span>&gt;<span class="hljs-literal">False</span></code></pre><p><img src="https://cdn.itbob.cn/img/article/009/02.png" alt="02"></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>it = np.nditer(a, flags=[<span class="hljs-string">&#x27;multi_index&#x27;</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> it.finished:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d &lt;%s&gt;&#x27;</span> %(it[<span class="hljs-number">0</span>], it.multi_index))        it.iternext()    <span class="hljs-number">0</span> &lt;(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)&gt;<span class="hljs-literal">True</span><span class="hljs-number">1</span> &lt;(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)&gt;<span class="hljs-literal">True</span><span class="hljs-number">2</span> &lt;(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)&gt;<span class="hljs-literal">True</span><span class="hljs-number">3</span> &lt;(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)&gt;<span class="hljs-literal">True</span><span class="hljs-number">4</span> &lt;(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)&gt;<span class="hljs-literal">True</span><span class="hljs-number">5</span> &lt;(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)&gt;<span class="hljs-literal">False</span></code></pre><p><img src="https://cdn.itbob.cn/img/article/009/03.png" alt="03"></p><h3><span id="1x06-guang-bo-shu-zu-die-dai"><font color="#1BC3FB">【1x06】广播数组迭代</font></span></h3><p>如果两个数组满足<a href="https://itrhx.blog.csdn.net/article/details/104988137#font_colorff00004x00NumPy_font_429">广播原则</a>，nditer 对象能够同时迭代它们，即广播数组迭代（多数组的迭代）。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> m, n <span class="hljs-keyword">in</span> np.nditer([a,b]):    <span class="hljs-built_in">print</span>(m,n)    <span class="hljs-number">0</span> <span class="hljs-number">0</span><span class="hljs-number">1</span> <span class="hljs-number">1</span><span class="hljs-number">2</span> <span class="hljs-number">2</span><span class="hljs-number">0</span> <span class="hljs-number">3</span><span class="hljs-number">1</span> <span class="hljs-number">4</span><span class="hljs-number">2</span> <span class="hljs-number">5</span></code></pre><p>如果两个数组不满足广播原则，将会抛出异常：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> m, n <span class="hljs-keyword">in</span> np.nditer([a,b]):        <span class="hljs-built_in">print</span>(m,n)    Traceback (most recent call last):  File <span class="hljs-string">&quot;&lt;pyshell#55&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;    <span class="hljs-keyword">for</span> m, n <span class="hljs-keyword">in</span> np.nditer([a,b]):ValueError: operands could <span class="hljs-keyword">not</span> be broadcast together <span class="hljs-keyword">with</span> shapes (<span class="hljs-number">4</span>,) (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105185337</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="2x00-numpy-wei-yun-suan"><font color="#ff0000">【2x00】NumPy 位运算</font></span></h2><p>由于位运算是直接对整数在内存中的二进制位进行操作，所以有必要先了解一下如何来表示数字的二进制。</p><p>在 Python 中，提供了一个内置函数 <code>bin()</code>，将整数转换为以 <code>0b</code> 为前缀的二进制字符串，如果要去掉 <code>0b</code> 前缀，则可以使用 <code>format</code> 方法，因为返回的是字符串，所以也可以使用切片等其他方法去掉前缀。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">bin</span>(<span class="hljs-number">3</span>)<span class="hljs-string">&#x27;0b11&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">format</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<span class="hljs-string">&#x27;11&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;<span class="hljs-number">3</span>:b&#125;</span>&#x27;</span><span class="hljs-string">&#x27;11&#x27;</span></code></pre><p>除了内置函数以外，NumPy 还提供了一个 <code>numpy.binary_repr</code> 函数，该函数的作用也是以字符串形式返回输入数字的二进制表示形式。</p><p>基本语法：<code>numpy.binary_repr(num, width=None)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>num</td><td>要表示的数，只能是整数形式</td></tr><tr><td>width</td><td>可选项，对于负数，如果未指定 width，则会在前面添加减号，如果指定了 width，则返回该宽度的负数的二进制补码</td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">3</span>)<span class="hljs-string">&#x27;11&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(-<span class="hljs-number">3</span>)<span class="hljs-string">&#x27;-11&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(-<span class="hljs-number">3</span>, width=<span class="hljs-number">4</span>)<span class="hljs-string">&#x27;1101&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">3</span>, width=<span class="hljs-number">4</span>)<span class="hljs-string">&#x27;0011&#x27;</span></code></pre><hr><p>以下是 NumPy 数组当中用到的位运算函数，各函数与其对应的用操作符计算的作用相同。</p><table><thead><tr><th>函数</th><th>描述</th><th>操作符</th></tr></thead><tbody><tr><td><code>bitwise_and</code></td><td>对数组元素进行按位<font color="#FF0000"><strong>与（AND）</strong></font>操作</td><td>&amp;</td></tr><tr><td><code>bitwise_or</code></td><td>对数组元素进行按位<font color="#FF0000"><strong>或（OR）</strong></font>操作</td><td>|</td></tr><tr><td><code>bitwise_xor</code></td><td>对数组元素执行按位<font color="#FF0000"><strong>异或（XOR）</strong></font>操作</td><td>^</td></tr><tr><td><code>invert</code></td><td>对数组元素执行按位<font color="#FF0000"><strong>取反（NOT）</strong></font>操作</td><td>~</td></tr><tr><td><code>left_shift</code></td><td>将数组元素的二进制形式向<font color="#FF0000"><strong>左移</strong></font>动指定位，右侧附加相等数量的 0</td><td>&lt;&lt;</td></tr><tr><td><code>right_shift</code></td><td>将数组元素的二进制形式向<font color="#FF0000"><strong>右移</strong></font>动指定位，左侧附加相等数量的 0</td><td>&gt;&gt;</td></tr></tbody></table><h3><span id="2x01-numpy-bitwise-and"><font color="#1BC3FB">【2x01】numpy.bitwise_and()</font></span></h3><p>numpy.bitwise_and() 函数对数组元素进行按位与（AND）操作。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">10</span>), np.binary_repr(<span class="hljs-number">15</span>)(<span class="hljs-string">&#x27;1010&#x27;</span>, <span class="hljs-string">&#x27;1111&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_and(<span class="hljs-number">10</span>, <span class="hljs-number">15</span>)<span class="hljs-number">10</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">10</span>)<span class="hljs-string">&#x27;1010&#x27;</span></code></pre><p>numpy.bitwise_and() 函数还支持多个元素同时进行按位与操作：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_and([<span class="hljs-number">14</span>,<span class="hljs-number">3</span>], <span class="hljs-number">13</span>)array([<span class="hljs-number">12</span>,  <span class="hljs-number">1</span>], dtype=int32)</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_and([<span class="hljs-number">11</span>,<span class="hljs-number">7</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">25</span>])array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], dtype=int32)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>np.array([<span class="hljs-number">11</span>,<span class="hljs-number">7</span>]) &amp; np.array([<span class="hljs-number">4</span>,<span class="hljs-number">25</span>])    <span class="hljs-comment"># 函数与 &amp; 操作符作用一样</span>array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], dtype=int32)</code></pre><p>还可以传入布尔值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_and([<span class="hljs-literal">True</span>,<span class="hljs-literal">False</span>,<span class="hljs-literal">True</span>],[<span class="hljs-literal">True</span>,<span class="hljs-literal">True</span>,<span class="hljs-literal">True</span>])array([ <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>])</code></pre><h3><span id="2x02-numpy-bitwise-or"><font color="#1BC3FB">【2x02】numpy.bitwise_or()</font></span></h3><p>numpy.bitwise_or() 函数对数组元素进行按位或（OR）操作。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">10</span>), np.binary_repr(<span class="hljs-number">14</span>)(<span class="hljs-string">&#x27;1010&#x27;</span>, <span class="hljs-string">&#x27;1110&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_or(<span class="hljs-number">10</span>, <span class="hljs-number">14</span>)<span class="hljs-number">14</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">14</span>)<span class="hljs-string">&#x27;1110&#x27;</span></code></pre><p>和按位与操作一样，numpy.bitwise_or() 函数也支持传入布尔值和多个元素同时进行操作：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_or([<span class="hljs-number">33</span>,<span class="hljs-number">4</span>], <span class="hljs-number">1</span>)array([<span class="hljs-number">33</span>,  <span class="hljs-number">5</span>], dtype=int32)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_or([<span class="hljs-number">33</span>,<span class="hljs-number">4</span>], [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])array([<span class="hljs-number">33</span>,  <span class="hljs-number">6</span>], dtype=int32)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_or(np.array([<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">255</span>]), np.array([<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>]))array([  <span class="hljs-number">6</span>,   <span class="hljs-number">5</span>, <span class="hljs-number">255</span>], dtype=int32)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>np.array([<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">255</span>]) | np.array([<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>])   <span class="hljs-comment"># 函数与 | 运算符作用相同</span>array([  <span class="hljs-number">6</span>,   <span class="hljs-number">5</span>, <span class="hljs-number">255</span>], dtype=int32)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_or([<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>], [<span class="hljs-literal">False</span>,<span class="hljs-literal">True</span>])array([ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>])</code></pre><h3><span id="2x03-numpy-bitwise-xor"><font color="#1BC3FB">【2x03】numpy.bitwise_xor()</font></span></h3><p>numpy.bitwise_xor() 函数对数组元素执行按位异或（XOR）操作。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">bin</span>(<span class="hljs-number">13</span>), <span class="hljs-built_in">bin</span>(<span class="hljs-number">17</span>)(<span class="hljs-string">&#x27;0b1101&#x27;</span>, <span class="hljs-string">&#x27;0b10001&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_xor(<span class="hljs-number">13</span>,<span class="hljs-number">17</span>)<span class="hljs-number">28</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">bin</span>(<span class="hljs-number">28</span>)<span class="hljs-string">&#x27;0b11100&#x27;</span></code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_xor([<span class="hljs-number">31</span>,<span class="hljs-number">3</span>], <span class="hljs-number">5</span>)array([<span class="hljs-number">26</span>,  <span class="hljs-number">6</span>], dtype=int32)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_xor([<span class="hljs-number">31</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])array([<span class="hljs-number">26</span>,  <span class="hljs-number">5</span>], dtype=int32)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>np.array([<span class="hljs-number">31</span>,<span class="hljs-number">3</span>]) ^ np.array([<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])    <span class="hljs-comment"># 函数与 ^ 运算符作用相同</span>array([<span class="hljs-number">26</span>,  <span class="hljs-number">5</span>], dtype=int32)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>np.bitwise_xor([<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>], [<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>])array([ <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>])</code></pre><h3><span id="2x04-numpy-invert"><font color="#1BC3FB">【2x04】numpy.invert()</font></span></h3><p>numpy.invert() 函数将对数组元素执行按位取反（NOT）操作，注意<font color="#FF0000"><strong>按位取反</strong></font>和<font color="#FF0000"><strong>取反</strong></font>操作不同。</p><p><font color="#FF0000"><strong>按位取反通用公式：~x = -(x+1)</strong></font></p><p>我们将原来的数称为 A，按位取反后的数称为 B，按位取反的步骤如下：<br>先求 A 的补码，对 A 的补码每一位取反（包括符号位），得到的数为 B 的补码，将 B 的补码转换为 B 的原码得到最终结果。</p><p>分情况具体讨论：</p><table><tr><td bgcolor="#7FFFD4">正数按位取反步骤</td></tr></table><p>1、将其转换成二进制形式；<br>2、求其补码（正数的原码、反码、补码都相同）；<br>3、将补码每一位进行取反操作（包括符号位）；<br><font color="#008B00">【经过步骤 3 后的结果为一个二进制形式的负数补码，接下来将这个负数补码转换成原码（负数原码到补码的逆运算）】</font><br>4、对步骤 3 得到的负数 -1 得到反码；<br>5、对步骤 4 得到的反码再进行取反得到原码；<br>6、将步骤 5 得到的原码转回十进制即是最终结果。</p><table><tr><td bgcolor="#7FFFD4">负数按位取反步骤</td></tr></table><p>1、将其转换成二进制形式；<br>2、求其补码（先求其反码、符号位不变，末尾 +1 得到其补码）；<br>3、将补码每一位进行取反操作（包括符号位）；<br><font color="#008B00">【经过步骤 3 后的结果为一个二进制形式的正数，接下来将这个正数转换成原码即可】</font><br>4、由于正数的原码、反码、补码都相同，所以直接将其转换成十进制即为最终结果。</p><p><font color="#FF0000"><strong>注意：第 3 步的取反操作，包括符号位都要取反，与求反码不同，求反码时符号位不变。</strong></font></p><p>具体计算举例（二进制前 4 位为符号位）：</p><table><tr><td bgcolor="#7FFFD4">9 的按位取反</td></tr></table><p>① 原码：0000 1001<br>② 反码：0000 1001<br>③ 补码：0000 1001<br>④ 取反：<font color="#FF0000">1111 0110</font>    （包括符号位一起取反，得到新的补码）<br>⑤ 反码：1111 0101    （将新的补码 -1 得到其反码）<br>⑥ 原码：1111 1010    （将反码取反得到原码）<br>⑦ 转为十进制：-10</p><table><tr><td bgcolor="#7FFFD4">-9 的按位取反</td></tr></table><p>① 原码：1111 1001<br>② 反码：1111 0110<br>③ 补码：1111 0111<br>④ 取反：<font color="#FF0000">0000 1000</font>    （包括符号位一起取反，得到新的补码）<br>⑤ 原码：0000 1000    （由于新的补码为正数，所以原码补码相同）<br>⑥ 转为十进制：8</p><hr><p>其他关于按位取反操作的知识：</p><ul><li><p><a href="https://blog.csdn.net/xiexievv/article/details/8124108">按位取反运计算方法</a></p></li><li><p><a href="https://baijiahao.baidu.com/s?id=1631845959953469880">[干货]按位取反怎么算？~图文详解</a></p></li></ul><hr><p>Python 代码应用示例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">9</span>, width=<span class="hljs-number">8</span>)<span class="hljs-string">&#x27;00001001&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.invert(<span class="hljs-number">9</span>)-<span class="hljs-number">10</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.invert(-<span class="hljs-number">9</span>)<span class="hljs-number">8</span></code></pre><h3><span id="2x05-numpy-left-shift"><font color="#1BC3FB">【2x05】numpy.left_shift()</font></span></h3><p>numpy.left_shift() 函数将数组元素的二进制形式向左移动指定位，右侧附加相等数量的 0。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">10</span>, width=<span class="hljs-number">8</span>)<span class="hljs-string">&#x27;00001010&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.left_shift(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<span class="hljs-number">40</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> &lt;&lt; <span class="hljs-number">2</span>         <span class="hljs-comment"># numpy.left_shift 函数相当于 Python 当中的 &lt;&lt; 运算符</span><span class="hljs-number">40</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">40</span>, width=<span class="hljs-number">8</span>)<span class="hljs-string">&#x27;00101000&#x27;</span></code></pre><h3><span id="2x06-numpy-right-shift"><font color="#1BC3FB">【2x06】numpy.right_shift()</font></span></h3><p>numpy.right_shift() 函数将数组元素的二进制形式向右移动指定位，左侧附加相等数量的 0</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">10</span>, width=<span class="hljs-number">8</span>)<span class="hljs-string">&#x27;00001010&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.right_shift(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> &gt;&gt; <span class="hljs-number">2</span>         <span class="hljs-comment"># numpy.right_shift 函数相当于 Python 当中的 &gt;&gt; 运算符</span><span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.binary_repr(<span class="hljs-number">2</span>, width=<span class="hljs-number">8</span>)<span class="hljs-string">&#x27;00000010&#x27;</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/105185337</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> NumPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 NumPy（二）：数组索引 / 切片 / 广播 / 拼接 / 分割</title>
      <link href="/article/009/"/>
      <url>/article/009/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-ren-shi-numpy-zhong-de-nan-he-inf-font"><font color="#ff0000">【1x00】认识 Numpy 中的 nan 和 inf</font></a><ul><li><a href="#font-color-1bc3fb-1x01-pan-duan-shi-fou-wei-nan-he-inf-font"><font color="#1BC3FB">【1x01】判断是否为 nan 和 inf</font></a></li><li><a href="#font-color-1bc3fb-1x02-tong-ji-shu-zu-zhong-nan-de-ge-shu-font"><font color="#1BC3FB">【1x02】统计数组中 nan 的个数</font></a></li><li><a href="#font-color-1bc3fb-1x03-tong-ji-shu-zu-zhong-inf-de-ge-shu-font"><font color="#1BC3FB">【1x03】统计数组中 inf 的个数</font></a></li><li><a href="#font-color-1bc3fb-1x04-ti-huan-inf-he-nan-font"><font color="#1BC3FB">【1x04】替换 inf 和 nan</font></a></li></ul></li><li><a href="#font-color-ff0000-2x00-numpy-suo-yin-font"><font color="#ff0000">【2x00】NumPy 索引</font></a><ul><li><a href="#font-color-1bc3fb-2x01-huo-qu-ju-ti-yuan-su-font"><font color="#1BC3FB">【2x01】获取具体元素</font></a></li><li><a href="#font-color-1bc3fb-2x02-huo-qu-xing-huo-lie-font"><font color="#1BC3FB">【2x02】获取行或列</font></a></li><li><a href="#font-color-1bc3fb-2x03-bu-er-suo-yin-font"><font color="#1BC3FB">【2x03】布尔索引</font></a></li><li><a href="#font-color-1bc3fb-2x04-hua-shi-suo-yin-font"><font color="#1BC3FB">【2x04】花式索引</font></a></li></ul></li><li><a href="#font-color-ff0000-3x00-numpy-qie-pian-font"><font color="#ff0000">【3x00】NumPy 切片</font></a></li><li><a href="#font-color-ff0000-4x00-numpy-shu-zu-yun-suan-yi-ji-guang-bo-yuan-ze-font"><font color="#ff0000">【4x00】NumPy 数组运算以及广播原则</font></a></li><li><a href="#font-color-ff0000-5x00-shu-zu-de-pin-jie-yu-yuan-su-de-tian-jia-font"><font color="#FF0000">【5x00】数组的拼接与元素的添加</font></a><ul><li><a href="#font-color-1bc3fb-5x01-jiang-shu-zu-zhuan-huan-cheng-lie-biao-pin-jie-wan-cheng-zai-zhuan-huan-cheng-shu-zu-font"><font color="#1BC3FB">【5x01】将数组转换成列表，拼接完成再转换成数组</font></a></li><li><a href="#font-color-1bc3fb-5x02-numpy-append-font"><font color="#1BC3FB">【5x02】numpy.append()</font></a></li><li><a href="#font-color-1bc3fb-5x03-numpy-concatenate-font"><font color="#1BC3FB">【5x03】numpy.concatenate()</font></a></li><li><a href="#font-color-1bc3fb-5x04-numpy-stack-font"><font color="#1BC3FB">【5x04】numpy.stack()</font></a></li><li><a href="#font-color-1bc3fb-5x05-numpy-vstack-font"><font color="#1BC3FB">【5x05】numpy.vstack()</font></a></li><li><a href="#font-color-1bc3fb-5x06-numpy-hstack-font"><font color="#1BC3FB">【5x06】numpy.hstack()</font></a></li><li><a href="#font-color-1bc3fb-5x07-numpy-dstack-font"><font color="#1BC3FB">【5x07】numpy.dstack()</font></a></li><li><a href="#font-color-1bc3fb-5x08-yi-shang-ji-chong-fang-fa-de-qu-bie-font"><font color="#1BC3FB">【5x08】以上几种方法的区别</font></a></li><li><a href="#font-color-1bc3fb-5x09-numpy-insert-font"><font color="#1BC3FB">【5x09】numpy.insert()</font></a></li><li><a href="#font-color-1bc3fb-5x10-numpy-r-font"><font color="#1BC3FB">【5x10】numpy.r_</font></a></li><li><a href="#font-color-1bc3fb-5x11-numpy-c-font"><font color="#1BC3FB">【5x11】numpy.c_</font></a></li></ul></li><li><a href="#font-color-ff0000-6x00-shu-zu-de-fen-ge-yu-yuan-su-de-shan-chu-font"><font color="#FF0000">【6x00】数组的分割与元素的删除</font></a><ul><li><a href="#font-color-1bc3fb-6x01-numpy-split-font"><font color="#1BC3FB">【6x01】numpy.split()</font></a></li><li><a href="#font-color-1bc3fb-6x02-numpy-array-split-font"><font color="#1BC3FB">【6x02】numpy.array_split()</font></a></li><li><a href="#font-color-1bc3fb-6x03-numpy-vsplit-font"><font color="#1BC3FB">【6x03】numpy.vsplit()</font></a></li><li><a href="#font-color-1bc3fb-6x04-numpy-hsplit-font"><font color="#1BC3FB">【6x04】numpy.hsplit()</font></a></li><li><a href="#font-color-1bc3fb-6x05-numpy-dsplit-font"><font color="#1BC3FB">【6x05】numpy.dsplit()</font></a></li><li><a href="#font-color-1bc3fb-6x06-numpy-delete-font"><font color="#1BC3FB">【6x06】numpy.delete()</font></a></li><li><a href="#font-color-1bc3fb-6x07-numpy-unique-font"><font color="#1BC3FB">【6x07】numpy.unique()</font></a></li></ul></li></ul><!-- tocstop --><hr><p>NumPy 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/008/">Python 数据分析三剑客之 NumPy（一）：理解 NumPy / 数组基础</a></li><li><a href="https://www.itbob.cn/article/009/">Python 数据分析三剑客之 NumPy（二）：数组索引 / 切片 / 广播 / 拼接 / 分割</a></li><li><a href="https://www.itbob.cn/article/010/">Python 数据分析三剑客之 NumPy（三）：数组的迭代与位运算</a></li><li><a href="https://www.itbob.cn/article/011/">Python 数据分析三剑客之 NumPy（四）：字符串函数总结与对比</a></li><li><a href="https://www.itbob.cn/article/012/">Python 数据分析三剑客之 NumPy（五）：数学 / 算术 / 统计 / 排序 / 条件 / 判断函数合集</a></li><li><a href="https://www.itbob.cn/article/013/">Python 数据分析三剑客之 NumPy（六）：矩阵 / 线性代数库与 IO 操作</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/104988137</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-ren-shi-numpy-zhong-de-nan-he-inf"><font color="#ff0000">【1x00】认识 Numpy 中的 nan 和 inf</font></span></h2><p>nan（NAN，Nan）：全称 not a number，即不是一个数字<br>inf（-inf，inf）：全称 infinity，inf 表示正无穷，-inf 表示负无穷</p><p>以下情况 Numpy 中会出现 nan：</p><ul><li>当读取本地的文件为 float 的时候，如果有缺失，就会出现 nan</li><li>当做了一个不合适的计算的时候（如：无穷大减去无穷大）</li></ul><p>以下情况会出现 inf 或者 -inf：</p><ul><li>比如一个数字除以 0，在 Python 中直接会报错，但在 Numpy 中则是一个 inf 或者 -inf</li></ul><p>指定一个 nan 或者 inf：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.nan<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.inf<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)nan<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)inf<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(a)&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">float</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">type</span>(<span class="hljs-params">b</span>)</span><span class="hljs-class">&lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">float</span>&#x27;&gt;</span></code></pre><p>注意两个 nan 并不相等，而两个 inf 是相等的</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>np.nan == np.nan<span class="hljs-literal">False</span><span class="hljs-meta">&gt;&gt;&gt; </span>np.inf == np.inf<span class="hljs-literal">True</span></code></pre><p>nan 和任何值计算都为 nan：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, np.nan, <span class="hljs-number">4</span>, np.nan])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a+b)[ <span class="hljs-number">2.</span>  <span class="hljs-number">4.</span> nan  <span class="hljs-number">8.</span> nan]</code></pre><h3><span id="1x01-pan-duan-shi-fou-wei-nan-he-inf"><font color="#1BC3FB">【1x01】判断是否为 nan 和 inf</font></span></h3><ul><li>isnan：判断元素是否为 nan（非数字）</li><li>isinf：判断元素是否为正无穷大或负无穷大</li><li>isposinf：判断元素是否为正无穷大</li><li>isneginf：判断元素是否为负无穷大</li><li>isfinite：判断元素是否为有限的（不是非数字，正无穷大和负无穷大中的一个）</li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [np.nan, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, np.nan], [<span class="hljs-number">9</span> ,np.nan, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1.</span>  <span class="hljs-number">2.</span>  <span class="hljs-number">3.</span>  <span class="hljs-number">4.</span>] [nan  <span class="hljs-number">6.</span>  <span class="hljs-number">7.</span> nan] [ <span class="hljs-number">9.</span> nan <span class="hljs-number">10.</span> <span class="hljs-number">11.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>np.isnan(a)array([[<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>],       [ <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>],       [<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]])</code></pre><h3><span id="1x02-tong-ji-shu-zu-zhong-nan-de-ge-shu"><font color="#1BC3FB">【1x02】统计数组中 nan 的个数</font></span></h3><p>1、利用 <code>np.count_nonzero</code> 方法，结合两个 nan 不相等的属性，可以判断数组中 nan 的个数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [np.nan, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, np.nan], [<span class="hljs-number">9</span> ,np.nan, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1.</span>  <span class="hljs-number">2.</span>  <span class="hljs-number">3.</span>  <span class="hljs-number">4.</span>] [nan  <span class="hljs-number">6.</span>  <span class="hljs-number">7.</span> nan] [ <span class="hljs-number">9.</span> nan <span class="hljs-number">10.</span> <span class="hljs-number">11.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>np.count_nonzero(a != a)    <span class="hljs-comment"># 判断 nan 的个数，a != a 即为 nan，nan != nan</span><span class="hljs-number">3</span></code></pre><p>2、<code>isnan()</code> 方法可以判断哪些是 nan，再结合 <code>np.count_nonzero</code> 方法可以判断数组中 nan 的个数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [np.nan, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, np.nan], [<span class="hljs-number">9</span> ,np.nan, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1.</span>  <span class="hljs-number">2.</span>  <span class="hljs-number">3.</span>  <span class="hljs-number">4.</span>] [nan  <span class="hljs-number">6.</span>  <span class="hljs-number">7.</span> nan] [ <span class="hljs-number">9.</span> nan <span class="hljs-number">10.</span> <span class="hljs-number">11.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>np.isnan(a)                        <span class="hljs-comment"># np.isnan(a) 与 a != a 效果相同，判断那些是 nan</span>array([[<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>],       [ <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>],       [<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>np.count_nonzero(np.isnan(a))<span class="hljs-number">3</span></code></pre><p>3、利用 <code>collections</code> 模块的 <code>Counter</code> 方法来统计 nan 的个数（此方法仅适用于一维数组）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, np.nan, <span class="hljs-number">4</span>, np.nan])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(Counter(np.isnan(a)))Counter(&#123;<span class="hljs-literal">False</span>: <span class="hljs-number">3</span>, <span class="hljs-literal">True</span>: <span class="hljs-number">2</span>&#125;)</code></pre><h3><span id="1x03-tong-ji-shu-zu-zhong-inf-de-ge-shu"><font color="#1BC3FB">【1x03】统计数组中 inf 的个数</font></span></h3><p>1、<code>isinf()</code> 方法可以判断哪些是 inf，再结合 <code>np.count_nonzero</code> 方法可以判断数组中 inf 的个数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [np.inf, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, -np.inf], [<span class="hljs-number">9</span> ,-np.inf, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[  <span class="hljs-number">1.</span>   <span class="hljs-number">2.</span>   <span class="hljs-number">3.</span>   <span class="hljs-number">4.</span>] [ inf   <span class="hljs-number">6.</span>   <span class="hljs-number">7.</span> -inf] [  <span class="hljs-number">9.</span> -inf  <span class="hljs-number">10.</span>  <span class="hljs-number">11.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>np.isinf(a)array([[<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>],       [ <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>],       [<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>np.count_nonzero(np.isinf(a))<span class="hljs-number">3</span></code></pre><p>2、利用 <code>collections</code> 模块的 <code>Counter</code> 方法来统计 inf 的个数（此方法仅适用于一维数组）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, np.inf, <span class="hljs-number">4</span>, -np.inf])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(Counter(np.isinf(a)))Counter(&#123;<span class="hljs-literal">False</span>: <span class="hljs-number">3</span>, <span class="hljs-literal">True</span>: <span class="hljs-number">2</span>&#125;)</code></pre><h3><span id="1x04-ti-huan-inf-he-nan"><font color="#1BC3FB">【1x04】替换 inf 和 nan</font></span></h3><p><code>numpy.nan_to_num()</code> 方法可以将 nan 替换为零，将 inf 替换为有限数。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, np.nan, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [np.inf, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, -np.inf], [<span class="hljs-number">9</span> ,-np.inf, <span class="hljs-number">10</span>, np.nan]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[  <span class="hljs-number">1.</span>  nan   <span class="hljs-number">3.</span>   <span class="hljs-number">4.</span>] [ inf   <span class="hljs-number">6.</span>   <span class="hljs-number">7.</span> -inf] [  <span class="hljs-number">9.</span> -inf  <span class="hljs-number">10.</span>  nan]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.nan_to_num(a))[[ <span class="hljs-number">1.00000000e+000</span>  <span class="hljs-number">0.00000000e+000</span>  <span class="hljs-number">3.00000000e+000</span>  <span class="hljs-number">4.00000000e+000</span>] [ <span class="hljs-number">1.79769313e+308</span>  <span class="hljs-number">6.00000000e+000</span>  <span class="hljs-number">7.00000000e+000</span> -<span class="hljs-number">1.79769313e+308</span>] [ <span class="hljs-number">9.00000000e+000</span> -<span class="hljs-number">1.79769313e+308</span>  <span class="hljs-number">1.00000000e+001</span>  <span class="hljs-number">0.00000000e+000</span>]]</code></pre><p>如果要将 nan 和 inf 替换成特定的值，则可以用以下方法：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, np.nan, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [np.inf, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, -np.inf], [<span class="hljs-number">9</span> ,-np.inf, <span class="hljs-number">10</span>, np.nan]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[  <span class="hljs-number">1.</span>  nan   <span class="hljs-number">3.</span>   <span class="hljs-number">4.</span>] [ inf   <span class="hljs-number">6.</span>   <span class="hljs-number">7.</span> -inf] [  <span class="hljs-number">9.</span> -inf  <span class="hljs-number">10.</span>  nan]]<span class="hljs-meta">&gt;&gt;&gt; </span>loc_nan = np.isnan(a)<span class="hljs-meta">&gt;&gt;&gt; </span>loc_inf = np.isinf(a)<span class="hljs-meta">&gt;&gt;&gt; </span>a[loc_nan] = <span class="hljs-number">111</span><span class="hljs-meta">&gt;&gt;&gt; </span>a[loc_inf] = <span class="hljs-number">222</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[  <span class="hljs-number">1.</span> <span class="hljs-number">111.</span>   <span class="hljs-number">3.</span>   <span class="hljs-number">4.</span>] [<span class="hljs-number">222.</span>   <span class="hljs-number">6.</span>   <span class="hljs-number">7.</span> <span class="hljs-number">222.</span>] [  <span class="hljs-number">9.</span> <span class="hljs-number">222.</span>  <span class="hljs-number">10.</span> <span class="hljs-number">111.</span>]]</code></pre><h2><span id="2x00-numpy-suo-yin"><font color="#ff0000">【2x00】NumPy 索引</font></span></h2><h3><span id="2x01-huo-qu-ju-ti-yuan-su"><font color="#1BC3FB">【2x01】获取具体元素</font></span></h3><p>NumPy 的索引和 Python 列表的索引类似，可以通过中括号指定索引获取第 i 个值（从 0 开始计数）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>])<span class="hljs-number">1</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>])<span class="hljs-number">3</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[-<span class="hljs-number">1</span>])<span class="hljs-number">4</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[-<span class="hljs-number">2</span>])<span class="hljs-number">3</span></code></pre><p>在多维数组中，可以用逗号分隔的索引元组获取具体某个元素：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>] [<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<span class="hljs-number">6</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>, -<span class="hljs-number">2</span>])<span class="hljs-number">2</span></code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>], [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]], [[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>], [<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>]], [[<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>], [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>]  [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>]] [[ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]  [<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>]] [[<span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span>]  [<span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<span class="hljs-number">7</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>])<span class="hljs-number">12</span></code></pre><h3><span id="2x02-huo-qu-xing-huo-lie"><font color="#1BC3FB">【2x02】获取行或列</font></span></h3><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>] [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>] [<span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>])       <span class="hljs-comment"># 取一整行</span>[<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>, :])    <span class="hljs-comment"># 取一整行，效果同上</span>[<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>, ...])  <span class="hljs-comment"># 取一整行，效果同上</span>[<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[:, <span class="hljs-number">2</span>])    <span class="hljs-comment"># 取一整列</span>[ <span class="hljs-number">3</span>  <span class="hljs-number">6</span>  <span class="hljs-number">9</span> <span class="hljs-number">12</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[..., <span class="hljs-number">2</span>])  <span class="hljs-comment"># 取一整列，效果同上</span>[ <span class="hljs-number">3</span>  <span class="hljs-number">6</span>  <span class="hljs-number">9</span> <span class="hljs-number">12</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])     <span class="hljs-comment"># 取多行</span>[[<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>] [<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[:, <span class="hljs-number">0</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment"># 取多列</span>[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>] [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>] [<span class="hljs-number">10</span> <span class="hljs-number">11</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>], :])  <span class="hljs-comment"># 取第一、三行和所有列</span>[[ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>] [<span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[:, [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]])  <span class="hljs-comment"># 取第零、二列和所有行</span>[[ <span class="hljs-number">1</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">6</span>] [ <span class="hljs-number">7</span>  <span class="hljs-number">9</span>] [<span class="hljs-number">10</span> <span class="hljs-number">12</span>]]</code></pre><h3><span id="2x03-bu-er-suo-yin"><font color="#1BC3FB">【2x03】布尔索引</font></span></h3><p>除了直接获取元素以外，还可以通过一个布尔数组来索引目标数组，即通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组。</p><p>以下实例将筛选出大于 6 的元素：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>] [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>] [<span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[a &gt; <span class="hljs-number">6</span>])[ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]</code></pre><p>以下实例使用取补运算符 <code>~</code> 来过滤掉 inf：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, np.inf, <span class="hljs-number">3</span>, -np.inf, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[  <span class="hljs-number">1.</span>   <span class="hljs-number">2.</span>  inf   <span class="hljs-number">3.</span> -inf   <span class="hljs-number">4.</span>   <span class="hljs-number">5.</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[~np.isinf(a)])[<span class="hljs-number">1.</span> <span class="hljs-number">2.</span> <span class="hljs-number">3.</span> <span class="hljs-number">4.</span> <span class="hljs-number">5.</span>]</code></pre><h3><span id="2x04-hua-shi-suo-yin"><font color="#1BC3FB">【2x04】花式索引</font></span></h3><p>花式索引：传递一个索引数组来一次性获得多个数组元素，花式索引总是将数据复制到新数组中。</p><p>花式索引根据索引数组的值作为目标数组的某个轴的下标来取值。对于使用一维整型数组作为索引，如果目标是一维数组，那么索引的结果就是对应位置的元素；如果目标是二维数组，那么就是对应下标的行。</p><p>花式索引结果的形状与<strong>索引数组</strong>的形状一致，而不是与<strong>被索引数组</strong>的形状一致。</p><p>一维数组中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>([a[<span class="hljs-number">0</span>], a[<span class="hljs-number">2</span>], a[-<span class="hljs-number">1</span>]])[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>ind = [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[ind])[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span>]</code></pre><p>二维数组中的应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>] [ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>([a[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], a[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], a[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])[<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>row = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])       <span class="hljs-comment"># 行</span><span class="hljs-meta">&gt;&gt;&gt; </span>col = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])       <span class="hljs-comment"># 列</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[row, col])[ <span class="hljs-number">2</span>  <span class="hljs-number">7</span> <span class="hljs-number">12</span>]</code></pre><h2><span id="3x00-numpy-qie-pian"><font color="#ff0000">【3x00】NumPy 切片</font></span></h2><p>Ndarray 数组对象基于 <code>0 - n</code> 的下标进行索引，与 Python 中列表的切片操作一样，NumPy 的切片也可以通过冒号分隔切片参数 <code>[start:stop:step]</code> 来进行切片操作，另外，NumPy 也提供了一个内置函数 <code>slice(start, stop, step)</code> 来进行切片操作。</p><p>slice 方法应用：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">10</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-built_in">slice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>)    <span class="hljs-comment"># 从索引 2 开始到索引 8 停止，步长为 2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[b])[<span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span>]</code></pre><p>通过冒号分隔切片参数 <code>[start:stop:step]</code> 来进行切片：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">12</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>:<span class="hljs-number">9</span>:<span class="hljs-number">2</span>])        <span class="hljs-comment"># 从索引 1 开始到索引 9 停止，步长为 2</span>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">5</span>:])[ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]     <span class="hljs-comment"># 从索引 5 开始一直到最后一个元素</span></code></pre><p>二数组中的切片，格式类似于 <code>a[start:stop:step, start:stop:step]</code>，以逗号来分割行与列。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span> ,<span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>], [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>] [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>] [<span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>] [<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>] [<span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>])       <span class="hljs-comment"># 按照行从索引 0 开始到索引 4 停止，步长为 2</span>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>,...])   <span class="hljs-comment"># 与上述方法相同，... 与 : 作用相同</span>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[...,<span class="hljs-number">1</span>:])      <span class="hljs-comment"># 按照列从索引 1 开始一直到最后一个元素</span>[[ <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>] [ <span class="hljs-number">8</span>  <span class="hljs-number">9</span>] [<span class="hljs-number">11</span> <span class="hljs-number">12</span>] [<span class="hljs-number">14</span> <span class="hljs-number">15</span>] [<span class="hljs-number">17</span> <span class="hljs-number">18</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>,<span class="hljs-number">1</span>:])   <span class="hljs-comment"># 分别按照行从索引 1 开始到索引 5 停止，步长为 2，按照列从索引 1 开始一直到最后一个元素</span>[[ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>] [<span class="hljs-number">11</span> <span class="hljs-number">12</span>]]</code></pre><p>三数组中的切片，格式类似于 <code>a[start:stop:step, start:stop:step, start:stop:step]</code>，以逗号来分割块、行与列。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>], [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]], [[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>], [<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>]], [[<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>], [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>]  [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>]] [[ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]  [<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>]] [[<span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span>]  [<span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>,:,<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># 取索引为 1 的块数、所有行、索引为 0 到 2 的列</span>[[ <span class="hljs-number">9</span> <span class="hljs-number">10</span>] [<span class="hljs-number">13</span> <span class="hljs-number">14</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>,:,:])     <span class="hljs-comment"># 取索引为 1 的块数、所有行与列</span>[[ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>] [<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>,...,:])   <span class="hljs-comment"># ... 与 : 作用相同</span>[[ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>] [<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>]]</code></pre><h2><span id="4x00-numpy-shu-zu-yun-suan-yi-ji-guang-bo-yuan-ze"><font color="#ff0000">【4x00】NumPy 数组运算以及广播原则</font></span></h2><p>NumPy 数组与数之间、数组与数组之间都支持加减乘除的计算。</p><ul><li><p>对于<strong>数组与数</strong>之间的计算，由于 NumPy 的广播机制，加减乘除都会对数组的每一个元素进行操作。</p></li><li><p>对于<strong>数组与数组</strong>之间的计算，相同维度的，相同位置元素之间会进行计算，不同维度的，将自动触发广播机制。</p></li></ul><p><font color="#ff0000"><strong>广播（Broadcast）原则：</strong></font>如果两个数组的后缘维度（trailing dimension，即从末尾开始算起的维度）的轴长度相符，或其中的一方的长度为 1，则认为它们是广播兼容的。广播会在缺失和（或）长度为 1 的维度上进行。</p><p>通俗理解，以下情况的两个数组均可进行广播：</p><p><font color="#ff0000">1、两个数组各维度大小从后往前比对均一致：</font></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.ones((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.ones((<span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>((a+b).shape)(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>c = np.ones((<span class="hljs-number">3</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>d = np.ones((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>((c+d).shape)(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>e = np.ones((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>f = np.ones((<span class="hljs-number">4</span>, <span class="hljs-number">2</span>))<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>((e+f).shape)Traceback (most recent call last):  File <span class="hljs-string">&quot;&lt;pyshell#16&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;    <span class="hljs-built_in">print</span>((e+f).shape)ValueError: operands could <span class="hljs-keyword">not</span> be broadcast together <span class="hljs-keyword">with</span> shapes (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) (<span class="hljs-number">4</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 因为 e 和 f 维度大小此前往后对比不一致，所以会抛出异常</span></code></pre><p><font color="#ff0000">2、两个数组存在一些维度大小不相等时，在其中一个数组中，这个不相等的维度大小为 1：</font></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.ones((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.ones((<span class="hljs-number">4</span>, <span class="hljs-number">1</span>))<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>((a+b).shape)(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<span class="hljs-comment"># 此时虽然 a 与 b 的维度大小此前往后对比不一致，但是 b 数组的这个维度大小为 1，所以仍然可以相加</span></code></pre><p>那么当两个数组之间可以进行广播的时候，具体是怎样广播、怎样计算的呢？以下通过代码和图解来更进一步理解广播机制：</p><p><font color="#ff0000">数组与数之间的运算：</font></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a+<span class="hljs-number">1</span>)     <span class="hljs-comment"># 对数组每一个元素都 +1</span>[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a-<span class="hljs-number">1</span>)     <span class="hljs-comment"># 对数组每一个元素都 -1</span>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a*<span class="hljs-number">2</span>)     <span class="hljs-comment"># 对数组每一个元素都 *1</span>[ <span class="hljs-number">2</span>  <span class="hljs-number">4</span>  <span class="hljs-number">6</span>  <span class="hljs-number">8</span> <span class="hljs-number">10</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a/<span class="hljs-number">2</span>)     <span class="hljs-comment"># 对数组每一个元素都 /1</span>[<span class="hljs-number">0.5</span> <span class="hljs-number">1.</span>  <span class="hljs-number">1.5</span> <span class="hljs-number">2.</span>  <span class="hljs-number">2.5</span>]</code></pre><p><font color="#ff0000">相同维度的数组与数组之间的运算：</font></p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>], [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>] [ <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[<span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>] [<span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a+b)[[<span class="hljs-number">12</span> <span class="hljs-number">14</span> <span class="hljs-number">16</span> <span class="hljs-number">18</span> <span class="hljs-number">20</span>] [<span class="hljs-number">22</span> <span class="hljs-number">24</span> <span class="hljs-number">26</span> <span class="hljs-number">28</span> <span class="hljs-number">30</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b-a)[[<span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span>] [<span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a*b)[[ <span class="hljs-number">11</span>  <span class="hljs-number">24</span>  <span class="hljs-number">39</span>  <span class="hljs-number">56</span>  <span class="hljs-number">75</span>] [ <span class="hljs-number">96</span> <span class="hljs-number">119</span> <span class="hljs-number">144</span> <span class="hljs-number">171</span> <span class="hljs-number">200</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b/a)[[<span class="hljs-number">11.</span>          <span class="hljs-number">6.</span>          <span class="hljs-number">4.33333333</span>  <span class="hljs-number">3.5</span>         <span class="hljs-number">3.</span>        ] [ <span class="hljs-number">2.66666667</span>  <span class="hljs-number">2.42857143</span>  <span class="hljs-number">2.25</span>        <span class="hljs-number">2.11111111</span>  <span class="hljs-number">2.</span>        ]]</code></pre><p><font color="#ff0000">不同维度的数组与数组之间的运算：</font></p><p>实例一：一个<font color="#ff0000"><strong>二维数组</strong></font>与一个<font color="#ff0000"><strong>一维数组</strong></font>相加，此时就会触发广播机制，代码与图解如下：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>] [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>] [<span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[<span class="hljs-number">20</span> <span class="hljs-number">20</span> <span class="hljs-number">20</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a+b)[[<span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span>] [<span class="hljs-number">24</span> <span class="hljs-number">25</span> <span class="hljs-number">26</span>] [<span class="hljs-number">27</span> <span class="hljs-number">28</span> <span class="hljs-number">29</span>] [<span class="hljs-number">30</span> <span class="hljs-number">31</span> <span class="hljs-number">32</span>]]</code></pre><p><img src="https://cdn.itbob.cn/img/article/009/01.png" alt="01"></p><p>实例二：一个 <font color="#ff0000"><strong>4 行 3 列</strong></font>的二维数组与一个 <font color="#ff0000"><strong>4 行 1 列</strong></font>的二维数组相加，此时就会触发广播机制，代码与图解如下：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>] [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>] [<span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[<span class="hljs-number">1</span>] [<span class="hljs-number">2</span>] [<span class="hljs-number">3</span>] [<span class="hljs-number">4</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a+b)[[ <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>] [<span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>] [<span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>]]</code></pre><p><img src="https://cdn.itbob.cn/img/article/009/02.png" alt="02"></p><p>实例三：一个 <font color="#ff0000"><strong>3 块 4 行 2 列，即 shape=(3, 4, 2)</strong></font> 的三维数组与一个 <font color="#ff0000"><strong>1 块 4 行 2 列，即 shape=(1, 4, 2)</strong></font> 的三维数组相加，此时就会触发广播机制，代码与图解如下：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]], [[<span class="hljs-number">9</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>], [<span class="hljs-number">15</span>, <span class="hljs-number">16</span>]], [[<span class="hljs-number">17</span>, <span class="hljs-number">18</span>], [<span class="hljs-number">19</span>, <span class="hljs-number">20</span>], [<span class="hljs-number">21</span>, <span class="hljs-number">22</span>], [<span class="hljs-number">23</span>, <span class="hljs-number">24</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>]  [ <span class="hljs-number">3</span>  <span class="hljs-number">4</span>]  [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>]  [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>]] [[ <span class="hljs-number">9</span> <span class="hljs-number">10</span>]  [<span class="hljs-number">11</span> <span class="hljs-number">12</span>]  [<span class="hljs-number">13</span> <span class="hljs-number">14</span>]  [<span class="hljs-number">15</span> <span class="hljs-number">16</span>]] [[<span class="hljs-number">17</span> <span class="hljs-number">18</span>]  [<span class="hljs-number">19</span> <span class="hljs-number">20</span>]  [<span class="hljs-number">21</span> <span class="hljs-number">22</span>]  [<span class="hljs-number">23</span> <span class="hljs-number">24</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]  [<span class="hljs-number">3</span> <span class="hljs-number">4</span>]  [<span class="hljs-number">5</span> <span class="hljs-number">6</span>]  [<span class="hljs-number">7</span> <span class="hljs-number">8</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.shape)(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b.shape)(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a+b)[[[ <span class="hljs-number">2</span>  <span class="hljs-number">4</span>]  [ <span class="hljs-number">6</span>  <span class="hljs-number">8</span>]  [<span class="hljs-number">10</span> <span class="hljs-number">12</span>]  [<span class="hljs-number">14</span> <span class="hljs-number">16</span>]] [[<span class="hljs-number">10</span> <span class="hljs-number">12</span>]  [<span class="hljs-number">14</span> <span class="hljs-number">16</span>]  [<span class="hljs-number">18</span> <span class="hljs-number">20</span>]  [<span class="hljs-number">22</span> <span class="hljs-number">24</span>]] [[<span class="hljs-number">18</span> <span class="hljs-number">20</span>]  [<span class="hljs-number">22</span> <span class="hljs-number">24</span>]  [<span class="hljs-number">26</span> <span class="hljs-number">28</span>]  [<span class="hljs-number">30</span> <span class="hljs-number">32</span>]]]</code></pre><p><img src="https://cdn.itbob.cn/img/article/009/03.png" alt="03"></p><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/104988137</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="5x00-shu-zu-de-pin-jie-yu-yuan-su-de-tian-jia"><font color="#FF0000">【5x00】数组的拼接与元素的添加</font></span></h2><h3><span id="5x01-jiang-shu-zu-zhuan-huan-cheng-lie-biao-pin-jie-wan-cheng-zai-zhuan-huan-cheng-shu-zu"><font color="#1BC3FB">【5x01】将数组转换成列表，拼接完成再转换成数组</font></span></h3><p>数组的拼接，可以先将数组转成列表，利用列表的拼接函数，如：append()、extend() 等进行拼接处理，然后再将列表转成数组即可。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>a_list = <span class="hljs-built_in">list</span>(a)<span class="hljs-meta">&gt;&gt;&gt; </span>b_list = <span class="hljs-built_in">list</span>(b)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b_list:    a_list.append(i)    <span class="hljs-meta">&gt;&gt;&gt; </span>a_list[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array(a_list)<span class="hljs-meta">&gt;&gt;&gt; </span>aarray([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])</code></pre><h3><span id="5x02-numpy-append"><font color="#1BC3FB">【5x02】numpy.append()</font></span></h3><p>numpy.append() 方法可以将一个数组附加到另一个数组的尾部，与 Python 列表中的 append 方法类似，仅支持两个数组之间的拼接，不能一次性拼接多个数组。</p><p>基本语法：<code>numpy.append(a, values, axis=None)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>被添加元素的目标数组</td></tr><tr><td>values</td><td>要添加元素的目标数组，即将该数组添加到 a 数组的尾部<br><font color="#FF0000"><strong>如果指定了 axis 的值，则要求该数组的维度必须与 a 相同</strong></font></td></tr><tr><td>axis</td><td>指定轴，按照指定轴的方向进行拼接<br>如果未指定轴，则在使用前会将 a 和 values 都展平</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.append(a, b))                 <span class="hljs-comment"># 两个一维数组进行拼接</span>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.append(a, b))                 <span class="hljs-comment"># 一维数组与二维数组进行拼接</span>[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]], [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>], [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.append(a, b))                <span class="hljs-comment"># 二维数组与三维数组进行拼接</span>[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(np.append(a, b)))          <span class="hljs-comment"># 拼接后的数组仍然是一个 ndarray 对象</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>指定 axis 的值举例（指定了 axis 的值，要求两个数组的维度必须相同）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.append(a, b, axis=<span class="hljs-number">0</span>))       <span class="hljs-comment"># a、b 均为二维数组，指定 axis 值为 0</span>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>] [<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.append(a, b, axis=<span class="hljs-number">0</span>))      <span class="hljs-comment"># a 为二维数组，b 为一维数组，指定 axis 值为 0，此时会报错</span>Traceback (most recent call last):  ...  ...ValueError: <span class="hljs-built_in">all</span> the <span class="hljs-built_in">input</span> arrays must have same number of dimensions, ...</code></pre><h3><span id="5x03-numpy-concatenate"><font color="#1BC3FB">【5x03】numpy.concatenate()</font></span></h3><p>numpy.concatenate() 方法能够一次完成多个相同形状数组的拼接。该方法效率更高，适合大规模的数据拼接。</p><p>基本语法：<code>numpy.concatenate((a1, a2, ...), axis=0)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a1, a2, …</td><td>要拼接的多个数组，<font color="#FF0000"><strong>要求各数组形状相同</strong></font></td></tr><tr><td>axis</td><td>指定轴，按照指定轴的方向进行拼接，默认为 0 轴</td></tr></tbody></table><p><font color="#FF0000"><strong>要求各数组形状相同</strong></font>举例：如果 axis=0，则要求 1 轴（竖轴）相同，如果 axis=1，则要求 0 轴（横轴）相同。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.array([[<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>]])        <span class="hljs-comment"># 三个二维数组的 1 轴（竖轴）相同</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.concatenate((a, b, c)))    <span class="hljs-comment"># 三个二维数组默认沿 0 轴（横轴）进行拼接</span>[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>] [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>] [<span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>] [<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>] [<span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span>]]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>], [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.array([[<span class="hljs-number">15</span>, <span class="hljs-number">16</span>], [<span class="hljs-number">17</span>, <span class="hljs-number">18</span>]])          <span class="hljs-comment"># 三个二维数组的 0 轴（横轴）相同</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.concatenate((a, b, c), axis=<span class="hljs-number">1</span>))    <span class="hljs-comment"># 三个二维数组沿 1 轴（竖轴）进行拼接</span>[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>] [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span>]]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>], [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.array([[<span class="hljs-number">15</span>, <span class="hljs-number">16</span>], [<span class="hljs-number">17</span>, <span class="hljs-number">18</span>]])          <span class="hljs-comment"># 三个二维数组的 0 轴（横轴）相同</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.concatenate((a, b, c), axis=<span class="hljs-number">0</span>))    <span class="hljs-comment"># 三个二维数组沿 0 轴（横轴）进行拼接将会报错</span>Traceback (most recent call last):  ...  ...ValueError: <span class="hljs-built_in">all</span> the <span class="hljs-built_in">input</span> array dimensions <span class="hljs-keyword">for</span> the concatenation axis must match exactly, ...</code></pre><h3><span id="5x04-numpy-stack"><font color="#1BC3FB">【5x04】numpy.stack()</font></span></h3><p>numpy.stack() 方法用于沿新轴连接数组序列。</p><p>基本语法：<code>numpy.stack(arrays, axis=0)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arrays</td><td>相同形状的数组序列</td></tr><tr><td>axis</td><td>返回数组中的轴，输入数组将沿着该轴来进行堆叠</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.stack((a, b),axis=<span class="hljs-number">0</span>))[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.stack((a, b),axis=<span class="hljs-number">1</span>))[[<span class="hljs-number">1</span> <span class="hljs-number">4</span>] [<span class="hljs-number">2</span> <span class="hljs-number">5</span>] [<span class="hljs-number">3</span> <span class="hljs-number">6</span>]]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.stack((a,b),axis=<span class="hljs-number">0</span>))[[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]  [<span class="hljs-number">3</span> <span class="hljs-number">4</span>]] [[<span class="hljs-number">5</span> <span class="hljs-number">6</span>]  [<span class="hljs-number">7</span> <span class="hljs-number">8</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.stack((a,b),axis=<span class="hljs-number">1</span>))[[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]  [<span class="hljs-number">5</span> <span class="hljs-number">6</span>]] [[<span class="hljs-number">3</span> <span class="hljs-number">4</span>]  [<span class="hljs-number">7</span> <span class="hljs-number">8</span>]]]</code></pre><h3><span id="5x05-numpy-vstack"><font color="#1BC3FB">【5x05】numpy.vstack()</font></span></h3><p>numpy.vstack() 方法通过垂直堆叠来生成数组。</p><p>基本语法：<code>numpy.vstack(tup)</code></p><p>参数解释：tup：数组序列，如果是一维数组进行堆叠，则数组长度必须相同，其它数组除了<font color="#FF0000"><strong>第一个轴（axis=0）</strong></font>的长度可以不同外，其它轴的长度必须相同。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.vstack((a,b)))[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.vstack((a,b)))       <span class="hljs-comment"># 一维数组长度不一样时将抛出异常</span>Traceback (most recent call last):  ...  ...ValueError: <span class="hljs-built_in">all</span> the <span class="hljs-built_in">input</span> array dimensions <span class="hljs-keyword">for</span> the concatenation axis must match exactly, ...</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>a.shape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>b.shape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.vstack((a,b)))[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span>] [<span class="hljs-number">7</span> <span class="hljs-number">8</span>]]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>a.shape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>b.shape(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.vstack((a,b)))    <span class="hljs-comment"># 第一个轴（axis=0）可以不同，其它轴必须相同</span>[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>] [ <span class="hljs-number">3</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>] [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>] [ <span class="hljs-number">9</span> <span class="hljs-number">10</span>]]</code></pre><h3><span id="5x06-numpy-hstack"><font color="#1BC3FB">【5x06】numpy.hstack()</font></span></h3><p>numpy.hstack() 方法通过水平堆叠来生成数组。</p><p>基本语法：<code>numpy.hstack(tup)</code></p><p>参数解释：tup：数组序列，除了一维数组的堆叠可以是不同长度外，其它数组堆叠时，除了<font color="#FF0000"><strong>第二个轴（axis=1）</strong></font>的长度可以不同外，其它轴的长度必须相同。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.hstack((a,b)))[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>a.shape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>b.shape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.hstack((a,b)))[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>a.shape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>b.shape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.hstack((a,b)))       <span class="hljs-comment"># 第二个轴（axis=1）可以不同，其它轴必须相同</span>[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>] [ <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span>]]</code></pre><h3><span id="5x07-numpy-dstack"><font color="#1BC3FB">【5x07】numpy.dstack()</font></span></h3><p>numpy.dstack() 方法会沿着第三个维度拼接数组。</p><p>基本语法：<code>numpy.dstack(tup)</code></p><p>参数解释：tup：数组序列，除了<font color="#FF0000"><strong>第三个轴（axis=2）</strong></font>的长度可以不同外，其它轴的长度必须相同。一维或二维数组必须具有相同的形状。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[[<span class="hljs-number">9</span>], [<span class="hljs-number">10</span>]], [[<span class="hljs-number">11</span>], [<span class="hljs-number">12</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span>a.shape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>b.shape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.dstack((a,b)))     <span class="hljs-comment"># a 与 b 的第三个轴（axis=2）一个是 2，另一个是 1，可以不同，但其他轴必须相同</span>[[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">9</span>]  [ <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span class="hljs-number">10</span>]] [[ <span class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">11</span>]  [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span> <span class="hljs-number">12</span>]]]</code></pre><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[[<span class="hljs-number">9</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span>a.shape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>b.shape(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.dstack((a,b)))    <span class="hljs-comment"># a 与 b 的第一个轴（axis=0）不同，将会抛出异常</span>[[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">9</span>]  [ <span class="hljs-number">3</span>  <span class="hljs-number">4</span> <span class="hljs-number">10</span>]] [[ <span class="hljs-number">5</span>  <span class="hljs-number">6</span> <span class="hljs-number">11</span>]  [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span> <span class="hljs-number">12</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.dstack((a,b)))Traceback (most recent call last):  ...  ...ValueError: <span class="hljs-built_in">all</span> the <span class="hljs-built_in">input</span> array dimensions <span class="hljs-keyword">for</span> the concatenation axis must match exactly, ...</code></pre><h3><span id="5x08-yi-shang-ji-chong-fang-fa-de-qu-bie"><font color="#1BC3FB">【5x08】以上几种方法的区别</font></span></h3><ul><li><code>concatenate()</code> 方法在 <code>axis=0</code> 的时候相当于 <code>vstack()</code> 方法；</li><li><code>concatenate()</code> 方法在 <code>axis=1</code> 的时候相当于 <code>hstack()</code> 方法；</li><li><code>concatenate()</code> 方法在 <code>axis=2</code> 的时候相当于 <code>dstack()</code> 方法；</li><li><code>concatenate()</code> 方法<font color="#FF0000"><strong>不会</strong></font>生成一个新的维度，且数组的维度不一定相同，而 stack() 方法<font color="#FF0000"><strong>会</strong></font>生成一个新的维度，并且要求所有数组形状都要一样。</li></ul><p><code>concatenate()</code> 方法与 <code>stack()</code> 方法比较：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.stack((a, b), axis=<span class="hljs-number">0</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>d = np.concatenate((a, b), axis=<span class="hljs-number">0</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>a.shape(<span class="hljs-number">3</span>,)<span class="hljs-meta">&gt;&gt;&gt; </span>b.shape(<span class="hljs-number">3</span>,)<span class="hljs-meta">&gt;&gt;&gt; </span>c.shape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>d.shape(<span class="hljs-number">6</span>,)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(c)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(d)[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]</code></pre><h3><span id="5x09-numpy-insert"><font color="#1BC3FB">【5x09】numpy.insert()</font></span></h3><p>numpy.insert() 方法沿指定轴在指定索引之前插入值。</p><p>基本语法：<code>numpy.insert(arr, obj, values, axis=None)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arr</td><td>原数组</td></tr><tr><td>obj</td><td>索引值，将在其之前插入值</td></tr><tr><td>values</td><td>要插入的值</td></tr><tr><td>axis</td><td>轴，将沿着该轴进行插入操作，如果未指定，则插入前，原数组会被展开，变为一维数组</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.insert(a, <span class="hljs-number">3</span>, [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]))          <span class="hljs-comment"># 未指定 axis 参数，在插入之前原数组会被展开</span>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.insert(a, <span class="hljs-number">1</span>, [<span class="hljs-number">0</span>], axis = <span class="hljs-number">0</span>))   <span class="hljs-comment"># 沿 0 轴广播插入</span>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.insert(a, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, axis = <span class="hljs-number">1</span>))    <span class="hljs-comment"># 沿 1 轴广播插入</span>[[ <span class="hljs-number">1</span> <span class="hljs-number">11</span>  <span class="hljs-number">2</span>] [ <span class="hljs-number">3</span> <span class="hljs-number">11</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">5</span> <span class="hljs-number">11</span>  <span class="hljs-number">6</span>]]</code></pre><h3><span id="5x10-numpy-r"><font color="#1BC3FB">【5x10】numpy.r_</font></span></h3><p>numpy.r_：<code>r</code> 为 <code>row（行）</code> 的缩写，即按照行连接两个矩阵，要求列数相等。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>np.r_[a, b]array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],       [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],       [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],       [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])</code></pre><h3><span id="5x11-numpy-c"><font color="#1BC3FB">【5x11】numpy.c_</font></span></h3><p>numpy.c_：<code>c</code> 为 <code>column（列）</code> 的缩写，即按照列连接两个矩阵，要求行数相等。</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>np.c_[a, b]array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],       [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]])</code></pre><h2><span id="6x00-shu-zu-de-fen-ge-yu-yuan-su-de-shan-chu"><font color="#FF0000">【6x00】数组的分割与元素的删除</font></span></h2><h3><span id="6x01-numpy-split"><font color="#1BC3FB">【6x01】numpy.split()</font></span></h3><p>numpy.split() 方法可以沿特定的轴将数组<font color="#FF0000"><strong>均等</strong></font>的分割为子数组。如果不能等分，将抛出异常。</p><p>基本语法：<code>numpy.split(ary, indices_or_sections, axis=0)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ary</td><td>被分割的数组</td></tr><tr><td>indices_or_sections</td><td>如果是一个整数 N，则该数组将沿 axis <font color="#FF0000"><strong>均分</strong></font>为 N 个数组<br>如果是一维整数数组，则数组元素代表每个分割点位置（左闭右开），N 个分裂点会得到 N + 1 个子数组</td></tr><tr><td>axis</td><td>沿着哪个维度进行分割，默认为 0，横向分割；为 1 时，纵向分割</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">10</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.split(a, <span class="hljs-number">5</span>))              <span class="hljs-comment"># 将数组分为五个大小相等的子数组</span>[array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]),  array([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]),  array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]),  array([<span class="hljs-number">6</span>, <span class="hljs-number">7</span>]),  array([<span class="hljs-number">8</span>, <span class="hljs-number">9</span>])]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.split(a, <span class="hljs-number">4</span>))              <span class="hljs-comment"># 无法等分的情况下将抛出异常</span>Traceback (most recent call last):  ...  ...ValueError: array split does <span class="hljs-keyword">not</span> result <span class="hljs-keyword">in</span> an equal division&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.split(a, [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>]))        <span class="hljs-comment"># 分割点为索引 4 和 8 的位置，相当于 a[:4]、a[4:8]、a[8:]</span>[array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]),  array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]),  array([<span class="hljs-number">8</span>, <span class="hljs-number">9</span>])]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.split(a, <span class="hljs-number">5</span>, axis=<span class="hljs-number">1</span>))     <span class="hljs-comment"># 指定 axis=1，按照纵向分割数组</span>[array([[<span class="hljs-number">1</span>],         [<span class="hljs-number">6</span>]]), array([[<span class="hljs-number">2</span>],  [<span class="hljs-number">7</span>]]), array([[<span class="hljs-number">3</span>],  [<span class="hljs-number">8</span>]]), array([[<span class="hljs-number">4</span>],  [<span class="hljs-number">9</span>]]), array([[ <span class="hljs-number">5</span>],  [<span class="hljs-number">10</span>]])]</code></pre><h3><span id="6x02-numpy-array-split"><font color="#1BC3FB">【6x02】numpy.array_split()</font></span></h3><p>numpy.array_split() 的用法和作用都与 split() 方法一致，都可以用一个整数或者整数列表来分割数组。</p><p>两者的区别：如果输入的是一个 int 类型的数字，那么在 split() 方法中，数组必须是均等的分割，否则就会报错，而在 array_split() 方法中是可以进行不均等的分割的。</p><p>基本语法：<code>numpy.array_split(ary, indices_or_sections, axis=0)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ary</td><td>被分割的数组</td></tr><tr><td>indices_or_sections</td><td>如果是一个整数 N，则该数组将沿 axis 分割为 N 个数组，<font color="#FF0000"><strong>可以不是均分的</strong></font><br>如果是一维整数数组，则数组元素代表每个分割点位置（左闭右开），N 个分裂点会得到 N + 1 个子数组</td></tr><tr><td>axis</td><td>沿着哪个维度进行分割，默认为 0，横向分割；为 1 时，纵向分割</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.array_split(a, <span class="hljs-number">3</span>))[array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]), array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]), array([<span class="hljs-number">6</span>, <span class="hljs-number">7</span>])]   <span class="hljs-comment"># 可以是不均分的</span>&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.array_split(a, <span class="hljs-number">4</span>))[array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]), array([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]), array([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]), array([<span class="hljs-number">7</span>])]</code></pre><h3><span id="6x03-numpy-vsplit"><font color="#1BC3FB">【6x03】numpy.vsplit()</font></span></h3><p>numpy.vsplit() 方法相当于 split() 方法在 <font color="#FF0000">axis=0</font> 时的效果，即横向分割数组。</p><p>基本语法：<code>numpy.vsplit(ary, indices_or_sections)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ary</td><td>被分割的数组</td></tr><tr><td>indices_or_sections</td><td>如果是一个整数 N，则该数组将沿 axis 分为 N 个相等的数组<br>如果是一维整数数组，则数组元素代表每个分割点位置（左闭右开），N 个分裂点会得到 N + 1 个子数组</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.vsplit(a, <span class="hljs-number">2</span>))[array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],         [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]), array([[ <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],  [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.vsplit(a, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]))[array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]), array([[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],  [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]), array([[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])]</code></pre><h3><span id="6x04-numpy-hsplit"><font color="#1BC3FB">【6x04】numpy.hsplit()</font></span></h3><p>numpy.hsplit() 方法相当于 split() 方法在 <font color="#FF0000">axis=1</font> 时的效果，即纵向分割数组。</p><p>基本语法：<code>numpy.hsplit(ary, indices_or_sections)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ary</td><td>被分割的数组</td></tr><tr><td>indices_or_sections</td><td>如果是一个整数 N，则该数组将沿 axis 分为 N 个相等的数组<br>如果是一维整数数组，则数组元素代表每个分割点位置（左闭右开），N 个分裂点会得到 N + 1 个子数组</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.hsplit(a, <span class="hljs-number">5</span>))[array([[<span class="hljs-number">1</span>],         [<span class="hljs-number">6</span>]]),  array([[<span class="hljs-number">2</span>],  [<span class="hljs-number">7</span>]]), array([[<span class="hljs-number">3</span>],  [<span class="hljs-number">8</span>]]), array([[<span class="hljs-number">4</span>],  [<span class="hljs-number">9</span>]]), array([[ <span class="hljs-number">5</span>],  [<span class="hljs-number">10</span>]])]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.hsplit(a, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]))[array([[<span class="hljs-number">1</span>],         [<span class="hljs-number">6</span>]]), array([[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>],  [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]), array([[ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>],  [ <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])]</code></pre><h3><span id="6x05-numpy-dsplit"><font color="#1BC3FB">【6x05】numpy.dsplit()</font></span></h3><p>numpy.dsplit() 方法相当于 split() 方法在 <font color="#FF0000">axis=2</font> 时的效果，即沿第三轴将数组拆分为多个子数组。</p><p>基本语法：<code>numpy.dsplit(ary, indices_or_sections)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ary</td><td>被分割的数组</td></tr><tr><td>indices_or_sections</td><td>如果是一个整数 N，则该数组将沿 axis 分为 N 个相等的数组<br>如果是一维整数数组，则数组元素代表每个分割点位置（左闭右开），N 个分裂点会得到 N + 1 个子数组</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>]  [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>]] [[ <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]  [<span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.dsplit(a, <span class="hljs-number">2</span>))[array([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>],          [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>]],          [[ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],          [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>]]]),  array([[[ <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],   [ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>]],   [[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>],   [<span class="hljs-number">14</span>, <span class="hljs-number">15</span>]]])]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.dsplit(a, [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>]))[array([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>],          [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>]],          [[ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>],          [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]]]), array([[[ <span class="hljs-number">3</span>],   [ <span class="hljs-number">7</span>]],   [[<span class="hljs-number">11</span>],   [<span class="hljs-number">15</span>]]]),  array([], shape=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>), dtype=int32)]</code></pre><h3><span id="6x06-numpy-delete"><font color="#1BC3FB">【6x06】numpy.delete()</font></span></h3><p>numpy.delete() 方法返回一个从原数组中删除了指定子数组的新数组。</p><p>基本语法：<code>numpy.delete(arr，obj，axis=None)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arr</td><td>原数组</td></tr><tr><td>obj</td><td>可以是切片、整数或整数数组形式，表示沿指定轴删除的子数组的索引<br>当 obj 为切片形式时，要用 <code>np.s_[:]</code> 的格式</td></tr><tr><td>axis</td><td>轴，将沿着该轴进行插入操作，如果未指定，则插入前，原数组会被展开，变为一维数组</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.delete(a, <span class="hljs-number">8</span>))          <span class="hljs-comment"># 未指定 axis 参数，在插入之前原数组会被展开，然后再删除索引为 8 的元素</span>[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.delete(a, <span class="hljs-number">1</span>, axis=<span class="hljs-number">0</span>))  <span class="hljs-comment"># 指定 axis=0，删除索引值为 1 即第二行</span>[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.delete(a, <span class="hljs-number">1</span>, axis=<span class="hljs-number">1</span>))  <span class="hljs-comment"># 指定 axis=1，删除索引值为 1 即第二列</span>[[ <span class="hljs-number">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">5</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>] [ <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.delete(a, np.s_[:<span class="hljs-number">2</span>], axis=<span class="hljs-number">1</span>)) <span class="hljs-comment"># 切片形式，删除前两列</span>[[ <span class="hljs-number">3</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>] [<span class="hljs-number">11</span> <span class="hljs-number">12</span>]]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.delete(a, [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>], axis=<span class="hljs-number">1</span>))    <span class="hljs-comment"># 数组形式，删除索引值为 0 和 2 的列</span>[[ <span class="hljs-number">2</span>  <span class="hljs-number">4</span>] [ <span class="hljs-number">6</span>  <span class="hljs-number">8</span>] [<span class="hljs-number">10</span> <span class="hljs-number">12</span>]]</code></pre><h3><span id="6x07-numpy-unique"><font color="#1BC3FB">【6x07】numpy.unique()</font></span></h3><p>numpy.unique() 方法用于去除数组中的重复元素。</p><p>基本语法：<code>numpy.unique(arr, return_index=False, return_inverse=False, return_counts=False, axis=None)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arr</td><td>原数组，如果不是一维数组则会被展开为一维数组</td></tr><tr><td>return_index</td><td>如果为 true，则返回新列表元素在旧列表中的位置（下标），并以列表形式储</td></tr><tr><td>return_inverse</td><td>如果为 true，则返回旧列表元素在新列表中的位置（下标），并以列表形式储</td></tr><tr><td>return_counts</td><td>如果为 true，则返回去重数组中的元素在原数组中的出现次数</td></tr><tr><td>axis</td><td>指定轴</td></tr></tbody></table><p>应用举例：</p><p>未指定 axis 值，原数组将会被展开：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.unique(a))[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.unique(b))[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]</code></pre><p>指定 axis 值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>] [<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>] [<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.unique(a, axis=<span class="hljs-number">0</span>))    <span class="hljs-comment"># 删除相同的行</span>[[<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>] [<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.unique(a, axis=<span class="hljs-number">1</span>))    <span class="hljs-comment"># 删除相同的列</span>[[<span class="hljs-number">0</span> <span class="hljs-number">1</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span>] [<span class="hljs-number">3</span> <span class="hljs-number">2</span>] [<span class="hljs-number">6</span> <span class="hljs-number">5</span>]]</code></pre><p>return_counts 为 True 时，返回去重数组中的元素在原数组中的出现次数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.unique(a, return_counts=<span class="hljs-literal">True</span>))(array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]), array([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], dtype=int64))<span class="hljs-comment"># 前一个 array 表示去重后的数组，后一个 array 表示每一个元素在原数组中出现的次数</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/104988137</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> NumPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 数据分析三剑客之 NumPy（一）：理解 NumPy / 数组基础</title>
      <link href="/article/008/"/>
      <url>/article/008/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#font-color-ff0000-1x00-liao-jie-numpy-font"><font color="#ff0000">【1x00】了解 NumPy</font></a></li><li><a href="#font-color-ff0000-2x00-numpy-shu-zu-yu-python-lie-biao-de-qu-bie-font"><font color="#ff0000">【2x00】NumPy 数组与 Python 列表的区别</font></a></li><li><a href="#font-color-ff0000-3x00-li-jie-numpy-ndarray-dui-xiang-font"><font color="#ff0000">【3x00】理解 NumPy Ndarray 对象</font></a></li><li><a href="#font-color-ff0000-4x00-li-jie-bu-tong-wei-du-de-shu-zu-font"><font color="#FF0000">【4x00】理解不同维度的数组</font></a></li><li><a href="#font-color-ff0000-5x00-chuang-jian-ndarray-dui-xiang-chuang-jian-shu-zu-font"><font color="#FF0000">【5x00】创建 Ndarray 对象（创建数组）</font></a><ul><li><a href="#font-color-00cd00-5x01-yi-zhang-biao-kuai-su-liao-jie-chuang-jian-shu-zu-de-bu-tong-fang-fa-font"><font color="#00CD00">【5x01】一张表快速了解创建数组的不同方法</font></a></li><li><a href="#font-color-1bc3fb-5x02-numpy-array-font"><font color="#1BC3FB">【5x02】numpy.array()</font></a></li><li><a href="#font-color-1bc3fb-5x03-numpy-asarray-font"><font color="#1BC3FB">【5x03】numpy.asarray()</font></a></li><li><a href="#font-color-1bc3fb-5x04-numpy-arange-font"><font color="#1BC3FB">【5x04】numpy.arange()</font></a></li><li><a href="#font-color-1bc3fb-5x05-numpy-linspace-font"><font color="#1BC3FB">【5x05】numpy.linspace()</font></a></li><li><a href="#font-color-1bc3fb-5x06-numpy-logspace-font"><font color="#1BC3FB">【5x06】numpy.logspace()</font></a></li><li><a href="#font-color-1bc3fb-5x07-numpy-empty-font"><font color="#1BC3FB">【5x07】numpy.empty()</font></a></li><li><a href="#font-color-1bc3fb-5x08-numpy-zeros-font"><font color="#1BC3FB">【5x08】numpy.zeros()</font></a></li><li><a href="#font-color-1bc3fb-5x09-numpy-ones-font"><font color="#1BC3FB">【5x09】numpy.ones()</font></a></li><li><a href="#font-color-1bc3fb-5x10-numpy-eye-font"><font color="#1BC3FB">【5x10】numpy.eye()</font></a></li><li><a href="#font-color-1bc3fb-5x11-numpy-frombuffer-font"><font color="#1BC3FB">【5x11】numpy.frombuffer()</font></a></li><li><a href="#font-color-1bc3fb-5x12-numpy-fromiter-font"><font color="#1BC3FB">【5x12】numpy.fromiter()</font></a></li></ul></li><li><a href="#font-color-ff0000-6x00-gai-bian-shu-zu-de-wei-du-huo-zhe-xing-zhuang-font"><font color="#FF0000">【6x00】改变数组的维度或者形状</font></a><ul><li><a href="#font-color-1bc3fb-6x01-numpy-reshape-font"><font color="#1BC3FB">【6x01】numpy.reshape()</font></a></li><li><a href="#font-color-1bc3fb-6x02-numpy-ravel-font"><font color="#1BC3FB">【6x02】numpy.ravel()</font></a></li><li><a href="#font-color-1bc3fb-6x03-numpy-resize-font"><font color="#1BC3FB">【6x03】numpy.resize()</font></a></li><li><a href="#font-color-1bc3fb-6x04-numpy-ndarray-flatten-font"><font color="#1BC3FB">【6x04】numpy.ndarray.flatten()</font></a></li><li><a href="#font-color-1bc3fb-6x05-numpy-ndarray-shape-font"><font color="#1BC3FB">【6x05】numpy.ndarray.shape</font></a></li><li><a href="#font-color-1bc3fb-6x06-numpy-ndarray-transpose-numpy-ndarray-t-font"><font color="#1BC3FB">【6x06】numpy.ndarray.transpose() &amp; numpy.ndarray.T</font></a></li><li><a href="#font-color-1bc3fb-6x07-numpy-swapaxes-font"><font color="#1BC3FB">【6x07】numpy.swapaxes()</font></a></li></ul></li><li><a href="#font-color-ff0000-7x00-numpy-shu-ju-lei-xing-font"><font color="#FF0000">【7x00】NumPy 数据类型</font></a></li><li><a href="#font-color-ff0000-8x00-numpy-shu-zu-shu-xing-font"><font color="#FF0000">【8x00】NumPy 数组属性</font></a></li></ul><!-- tocstop --><hr><p>NumPy 系列文章：</p><ul><li><a href="https://www.itbob.cn/article/008/">Python 数据分析三剑客之 NumPy（一）：理解 NumPy / 数组基础</a></li><li><a href="https://www.itbob.cn/article/009/">Python 数据分析三剑客之 NumPy（二）：数组索引 / 切片 / 广播 / 拼接 / 分割</a></li><li><a href="https://www.itbob.cn/article/010/">Python 数据分析三剑客之 NumPy（三）：数组的迭代与位运算</a></li><li><a href="https://www.itbob.cn/article/011/">Python 数据分析三剑客之 NumPy（四）：字符串函数总结与对比</a></li><li><a href="https://www.itbob.cn/article/012/">Python 数据分析三剑客之 NumPy（五）：数学 / 算术 / 统计 / 排序 / 条件 / 判断函数合集</a></li><li><a href="https://www.itbob.cn/article/013/">Python 数据分析三剑客之 NumPy（六）：矩阵 / 线性代数库与 IO 操作</a></li></ul><hr><p>专栏：</p><ul><li>NumPy 专栏：<a href="https://itrhx.blog.csdn.net/category_9780393.html">https://itrhx.blog.csdn.net/category_9780393.html</a></li><li>Pandas 专栏：<a href="https://itrhx.blog.csdn.net/category_9780397.html">https://itrhx.blog.csdn.net/category_9780397.html</a></li><li>Matplotlib 专栏：<a href="https://itrhx.blog.csdn.net/category_9780418.html">https://itrhx.blog.csdn.net/category_9780418.html</a></li></ul><br>推荐学习资料与网站：<br><br><ul><li>NumPy 官方中文网：<a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></li><li>Pandas 官方中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></li><li>Matplotlib 官方中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn/</a></li><li>NumPy、Matplotlib、Pandas 速查表：<a href="https://github.com/TRHX/Python-quick-reference-table">https://github.com/TRHX/Python-quick-reference-table</a></li></ul><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/104870084</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="1x00-liao-jie-numpy"><font color="#ff0000">【1x00】了解 NumPy</font></span></h2><p>NumPy 是使用 Python 进行科学计算的基础包，支持大量的维度数组与矩阵运算，对数组运算提供大量的数学函数库。NumPy 重在数值计算，是大部分 Python 科学计算库的基础库，多用于在大型、多维数组上执行数值运算。</p><p>NumPy 主要包含如下的内容：</p><ul><li>一个强大的 N 维数组对象（Ndarray）；</li><li>复杂的广播功能函数；</li><li>集成 C/C++/Fortran 代码的工具；</li><li>具有线性代数、傅里叶变换、随机数生成等功能。</li></ul><h2><span id="2x00-numpy-shu-zu-yu-python-lie-biao-de-qu-bie"><font color="#ff0000">【2x00】NumPy 数组与 Python 列表的区别</font></span></h2><p>Numpy 使用 Ndarray 对象来处理多维数组，Python 列表通常存储一维数组，通过列表的嵌套也可以实现多维数组。</p><p>Numpy 的 Ndarray 对象是一个快速而灵活的大数据容器。Numpy 专门针对数组的操作和运算进行了设计，所以数组的存储效率和输入输出性能远优于 Python 中的嵌套列表，数组越大，Numpy 的优势就越明显。</p><p>通常 Numpy 数组中的所有元素的类型都是相同的，而 Python 列表中的元素类型是任意的，所以在通用性能方面 Numpy 数组不及 Python 列表，但在科学计算中，可以省掉很多循环语句，代码使用方面比 Python 列表简单的多。</p><p>Python 列表的元素不同类型举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>l = [<span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">3.2</span>, <span class="hljs-number">5</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>[<span class="hljs-built_in">type</span>(item) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> l][&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">bool</span>&#x27;&gt;, &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">str</span>&#x27;&gt;, &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">float</span>&#x27;&gt;, &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">int</span>&#x27;&gt;]</span></code></pre><p>Python 列表中的每一项必须包含各自的类型信息、引用计数和其他信息，也就是说，每一项都是一个完整的 Python 对象，同时，Python 列表还包含一个指向指针块的指针，其中的每一个指针对应一个完整的 Python 对象，另外，列表的优势是灵活，因为每个列表元素是一个包含数据和类型信息的完整结构体。相反 NumPy 数组缺乏这种灵活性，但是 NumPy 却能更有效地存储和操作数据。</p><p><img src="https://fastly.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A62/01.png" alt="01"></p><h2><span id="3x00-li-jie-numpy-ndarray-dui-xiang"><font color="#ff0000">【3x00】理解 NumPy Ndarray 对象</font></span></h2><p>NumPy 提供了一个 N 维数组类型，即 Ndarray，它是一系列同类型数据的集合，是用于存放同类型元素的多维数组，以 0 下标为开始进行集合中元素的索引，所有 Ndarray 中的每个元素在内存中都有相同存储大小的区域。</p><p>Ndarray 内部由以下内容组成：</p><ul><li>一个指向数据（内存或内存映射文件中的一块数据）的指针；</li><li>数据类型或 dtype，描述在数组中的固定大小值的格子；</li><li>一个表示数组形状（shape）的元组，表示各维度大小的元组；</li><li>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要“跨过”的字节数。</li></ul><p><img src="https://fastly.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A62/02.png" alt="02"></p><h2><span id="4x00-li-jie-bu-tong-wei-du-de-shu-zu"><font color="#FF0000">【4x00】理解不同维度的数组</font></span></h2><p>NumPy 数组的维数称为秩（rank），秩就是轴的数量，即数组的维度，一维数组的秩为 1，二维数组的秩为 2，以此类推。</p><p>在 NumPy 中，每一个线性的数组称为是一个轴（axis），也就是维度（dimensions）。比如说，二维数组相当于是两个一维数组，其中第一个一维数组中每个元素又是一个一维数组。所以一维数组就是 NumPy 中的轴（axis），第一个轴相当于是底层数组，第二个轴是底层数组里的数组。而轴的数量 — 秩，就是数组的维数。</p><p>很多时候可以声明 axis，axis=0，表示沿着第 0 轴进行操作，即对每一列进行操作；axis=1，表示沿着第 1 轴进行操作，即对每一行进行操作。</p><p>一维数组：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.shape)(<span class="hljs-number">4</span>,)</code></pre><p><img src="https://fastly.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A62/03.png" alt="03"></p><hr><p>二维数组：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.shape)(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)</code></pre><blockquote><p>a.shape 输出数组的维度，对于此二维数组，可以理解为 2 行 4 列。</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A62/04.png" alt="04"></p><hr><p>三维数组：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>], [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]], [[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>], [<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>]], [[<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>], [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>]  [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>]] [[ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]  [<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>]] [[<span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span>]  [<span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.shape)(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>)</code></pre><blockquote><p>a.shape 输出数组的维度，对于此三维数组，可以理解为 3 块，每块有 2 行 4 列。</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A62/05.png" alt="05"></p><p>有网友对三维数组的这个图有疑问，认为横线应该是 axis=0，竖线是 axis=1，斜线是 axis=2，这个确实有点儿绕，不要受到前面一维二维的影响，我把我的理解又画了一张图出来，另外大家可以尝试去取三维数组里面的某个值，多想一下就可以理解了。欢迎各位大佬一起交流学习！</p><p><img src="https://fastly.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A62/06.png" alt="06"></p><h2><span id="5x00-chuang-jian-ndarray-dui-xiang-chuang-jian-shu-zu"><font color="#FF0000">【5x00】创建 Ndarray 对象（创建数组）</font></span></h2><h3><span id="5x01-yi-zhang-biao-kuai-su-liao-jie-chuang-jian-shu-zu-de-bu-tong-fang-fa"><font color="#00CD00">【5x01】一张表快速了解创建数组的不同方法</font></span></h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>numpy.array()</td><td>将输入数据（列表、元组、Ndarray 等）转换为数组形式<br><font color="#0000FF"><strong>当数据源为 Ndarray 时，该方法仍然会 copy 出一个副本，占用新的内存</strong></font></td></tr><tr><td>numpy.asarray()</td><td>将输入数据（列表、元组、Ndarray 等）转换为数组形式<br><font color="#0000FF"><strong>当数据源为 Ndarray 时，该方法不会 copy 出一个副本，不占用新的内存</strong></font></td></tr><tr><td>numpy.arange()</td><td>创建一个一维数组，该数组由一个等差数列构成<br><font color="#B22222"><strong>通过指定开始值、终值和步长创建等差数列，得到的结果数组不包含终值</strong></font></td></tr><tr><td>numpy.linspace()</td><td>创建一个一维数组，该数组由一个等差数列构成<br><font color="#B22222"><strong>通过指定开始值、终值和元素个数创建等差数列，可通过 endpoint 参数指定是否包含终值</strong></font></td></tr><tr><td>numpy.logspace()</td><td>创建一个一维数组，该数组由一个等比数列构成</td></tr><tr><td>numpy.empty()</td><td>创建一个指定形状、数据类型且未初始化的数组</td></tr><tr><td>numpy.zeros()</td><td>创建一个指定大小的数组，数组元素以 0 来填充</td></tr><tr><td>numpy.ones()</td><td>创建一个指定大小的数组，数组元素以 1 来填充</td></tr><tr><td>numpy.eye()</td><td>创建一个对角矩阵数组，返回一个二维数组，对角线上值为 1，其余位置为 0</td></tr><tr><td>numpy.frombuffer()</td><td>将缓冲区解释为一维数组，接受 buffer 输入参数，以流的形式读入并转化成 Ndarray 对象</td></tr><tr><td>numpy.fromiter()</td><td>从可迭代对象中建立 Ndarray 对象，返回一个一维数组</td></tr></tbody></table><h3><span id="5x02-numpy-array"><font color="#1BC3FB">【5x02】numpy.array()</font></span></h3><p>调用 NumPy 的 array 方法即可创建一个 Ndarray 对象，即创建一个数组。</p><p>基本语法：<code>numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>object</td><td>数组或嵌套的数列</td></tr><tr><td>dtype</td><td>数组元素的数据类型，可选</td></tr><tr><td>copy</td><td>对象是否需要复制，可选</td></tr><tr><td>order</td><td>创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）</td></tr><tr><td>subok</td><td>默认返回一个与基类类型一致的数组</td></tr><tr><td>ndmin</td><td>指定生成数组的最小维度</td></tr></tbody></table><p>创建一个一维数组：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>创建一个二维数组：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>创建一个三维数组：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]], [[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>], [<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>]  [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>]] [[ <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>]  [<span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]]]</code></pre><h3><span id="5x03-numpy-asarray"><font color="#1BC3FB">【5x03】numpy.asarray()</font></span></h3><p>numpy.asarray() 方法将输入数据（列表、元组、Ndarray 等）转换为数组形式，与 numpy.array() 方法类似，但 asarray 参数比 array 少两个，另外最大的区别是<font color="#FF0000"><strong>当数据源为 Ndarray 时</strong></font>，array 方法仍然会 copy 出一个副本，占用新的内存，但 asarray 方法不会。</p><p>基本语法：<code>numpy.asarray(a, dtype=None, order=None)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待转换对象，可以是列表，元组，列表元组，元组列表，多维数组等</td></tr><tr><td>dtype</td><td>可选项，指定数据类型</td></tr><tr><td>order</td><td>可选项，以行优先（C）或列优先（F）的顺序存储多维数据在内存中</td></tr></tbody></table><p>将列表转换为 Ndarray：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>n = np.asarray(l)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(n)[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(n))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>将元组转换为 Ndarray：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>l = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>n = np.asarray(l)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(n)[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(n))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>将元组列表转换为 Ndarray：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>l = [(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)]<span class="hljs-meta">&gt;&gt;&gt; </span>n = np.asarray(l)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(n)[(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(n))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>指定 dtype 参数：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>n = np.asarray(l, dtype=<span class="hljs-built_in">float</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(n)[<span class="hljs-number">1.</span> <span class="hljs-number">2.</span> <span class="hljs-number">3.</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(n))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>numpy.asarray() 方法和 numpy.array() 的区别演示：</p><p>当输入数据为列表、元组等格式时，两者没有区别，都可以将其转为数组格式：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array(a)<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.asarray(a)<span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">0</span>, [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))                <span class="hljs-comment"># a 为列表</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">b</span>)                      # 列表对象 <span class="hljs-title">a</span> 的值改变，<span class="hljs-title">array</span> 方法得到的值不会改变</span><span class="hljs-class">[[1 2 3]</span><span class="hljs-class"> [4 5 6]</span><span class="hljs-class"> [7 8 9]]</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">c</span>)                      # 列表对象 <span class="hljs-title">a</span> 的值改变，<span class="hljs-title">asarray</span> 方法得到的值不会改变</span><span class="hljs-class">[[1 2 3]</span><span class="hljs-class"> [4 5 6]</span><span class="hljs-class"> [7 8 9]]</span></code></pre><p>当输入数据为 Ndarray 时，array 方法仍然会 copy 出一个副本，占用新的内存，但 asarray 方法不会：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array(a)<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.asarray(a)<span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>] [<span class="hljs-number">1.</span> <span class="hljs-number">2.</span> <span class="hljs-number">1.</span>] [<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))               <span class="hljs-comment"># a 为 Ndarray 对象</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">b</span>)                     # <span class="hljs-title">Ndarray</span> 对象 <span class="hljs-title">a</span> 的值改变，<span class="hljs-title">array</span> 方法得到的值不会改变</span><span class="hljs-class">[[1. 1. 1.]</span><span class="hljs-class"> [1. 1. 1.]</span><span class="hljs-class"> [1. 1. 1.]]</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">c</span>)                     # <span class="hljs-title">Ndarray</span> 对象 <span class="hljs-title">a</span> 的值改变，<span class="hljs-title">asarray</span> 方法得到的值也将改变</span><span class="hljs-class">[[1. 1. 1.]</span><span class="hljs-class"> [1. 2. 1.]</span><span class="hljs-class"> [1. 1. 1.]]</span></code></pre><h3><span id="5x04-numpy-arange"><font color="#1BC3FB">【5x04】numpy.arange()</font></span></h3><p>numpy.arange() 方法用于创建一个一维数组，在指定的间隔内返回均匀间隔的数字并组成数组（Ndarray 对象），即该数组是一个等差数列构成的。arange() 类似 Python 的 range()，但是 arange() 的步长可以为小数，而 range() 的步长只能是整数。</p><p>基本语法：<code>numpy.arange([start, ]stop, [step, ]dtype=None)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>起始值，数字，可选项，默认起始值为 0，生成的元素包括起始值</td></tr><tr><td>stop</td><td>结束值，数字，生成的元素不包括结束值</td></tr><tr><td>step</td><td>步长，数字，可选项， 默认步长为 1，如果指定了 step，则必须给出 start</td></tr><tr><td>dtype</td><td>输出数组的类型，如果未给出 dtype，则从其他输入参数推断数据类型</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">5</span>)        <span class="hljs-comment"># 相当于 np.array([0, 1, 2, 3, 4])</span><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.arange(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)     <span class="hljs-comment"># 相当于 np.array([2, 3, 4])</span><span class="hljs-meta">&gt;&gt;&gt; </span>c = np.arange(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a = %s\nb = %s\nc = %s&#x27;</span> %(a,b,c))a = [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]b = [<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]c = [<span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span>]</code></pre><h3><span id="5x05-numpy-linspace"><font color="#1BC3FB">【5x05】numpy.linspace()</font></span></h3><p>numpy.linspace() 方法用于创建一个一维数组，在指定的间隔内返回均匀间隔的数字并组成数组（Ndarray 对象），即该数组是一个等差数列构成的。linspace() 方法类似于 arange()，两者除了参数有差别以外，还有以下的区别：</p><ul><li><p>arange() 方法类似于内置函数 range()，通过指定<strong>开始值、终值和<font color="#FF0000">步长</font></strong>创建表示等差数列的一维数组，得到的结果数组不包含终值。</p></li><li><p>linspace() 通过指定<strong>开始值、终值和<font color="#FF0000">元素个数</font></strong>创建表示等差数列的一维数组，可以通过 endpoint 参数指定是否包含终值，默认值为True，即包含终值。</p></li></ul><p>基本语法：<code>numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>序列的起始值</td></tr><tr><td>stop</td><td>序列的终止值，如果 endpoint 为 True，则该值将包含于数列中</td></tr><tr><td>num</td><td>可选项，int 类型，要生成的等步长的样本数量，即元素个数，默认为 50</td></tr><tr><td>endpoint</td><td>可选项，bool 类型，该值为 True 时，数列中将包含 stop 值，反之则不包含，默认为 True</td></tr><tr><td>retstep</td><td>可选项，bool 类型，该值为 True 时，生成的数组中会显示间距，反之则不显示，默认为 False</td></tr><tr><td>dtype</td><td>可选项，Ndarray 的数据类型</td></tr><tr><td>axis</td><td>可选项，int 类型，结果中的轴用于存储样本。仅当 start 或 stop 类似于数组时才相关<br>默认情况下为 0，采样将沿着在开始处插入的新轴进行，使用 -1 来获得轴的末端</td></tr></tbody></table><p>应用举例：</p><p>不指定 num 值，将默认生成 50 个元素，数列中将包含 stop 值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.linspace(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[ <span class="hljs-number">1.</span>          <span class="hljs-number">1.18367347</span>  <span class="hljs-number">1.36734694</span>  <span class="hljs-number">1.55102041</span>  <span class="hljs-number">1.73469388</span>  <span class="hljs-number">1.91836735</span>  <span class="hljs-number">2.10204082</span>  <span class="hljs-number">2.28571429</span>  <span class="hljs-number">2.46938776</span>  <span class="hljs-number">2.65306122</span>  <span class="hljs-number">2.83673469</span>  <span class="hljs-number">3.02040816</span>  <span class="hljs-number">3.20408163</span>  <span class="hljs-number">3.3877551</span>   <span class="hljs-number">3.57142857</span>  <span class="hljs-number">3.75510204</span>  <span class="hljs-number">3.93877551</span>  <span class="hljs-number">4.12244898</span>  <span class="hljs-number">4.30612245</span>  <span class="hljs-number">4.48979592</span>  <span class="hljs-number">4.67346939</span>  <span class="hljs-number">4.85714286</span>  <span class="hljs-number">5.04081633</span>  <span class="hljs-number">5.2244898</span>  <span class="hljs-number">5.40816327</span>  <span class="hljs-number">5.59183673</span>  <span class="hljs-number">5.7755102</span>   <span class="hljs-number">5.95918367</span>  <span class="hljs-number">6.14285714</span>  <span class="hljs-number">6.32653061</span>  <span class="hljs-number">6.51020408</span>  <span class="hljs-number">6.69387755</span>  <span class="hljs-number">6.87755102</span>  <span class="hljs-number">7.06122449</span>  <span class="hljs-number">7.24489796</span>  <span class="hljs-number">7.42857143</span>  <span class="hljs-number">7.6122449</span>   <span class="hljs-number">7.79591837</span>  <span class="hljs-number">7.97959184</span>  <span class="hljs-number">8.16326531</span>  <span class="hljs-number">8.34693878</span>  <span class="hljs-number">8.53061224</span>  <span class="hljs-number">8.71428571</span>  <span class="hljs-number">8.89795918</span>  <span class="hljs-number">9.08163265</span>  <span class="hljs-number">9.26530612</span>  <span class="hljs-number">9.44897959</span>  <span class="hljs-number">9.63265306</span>  <span class="hljs-number">9.81632653</span> <span class="hljs-number">10.</span>        ]</code></pre><p>指定 num 值为 10，将生成 10 个元素，数列中将包含 stop 值：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.linspace(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[ <span class="hljs-number">1.</span>  <span class="hljs-number">2.</span>  <span class="hljs-number">3.</span>  <span class="hljs-number">4.</span>  <span class="hljs-number">5.</span>  <span class="hljs-number">6.</span>  <span class="hljs-number">7.</span>  <span class="hljs-number">8.</span>  <span class="hljs-number">9.</span> <span class="hljs-number">10.</span>]</code></pre><p>指定 endpoint 值为 False，retstep 值为 True，数列中不包含 stop 值，生成的数组中会显示间距：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.linspace(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, endpoint=<span class="hljs-literal">False</span>, retstep=<span class="hljs-literal">True</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)(array([<span class="hljs-number">1.</span> , <span class="hljs-number">1.9</span>, <span class="hljs-number">2.8</span>, <span class="hljs-number">3.7</span>, <span class="hljs-number">4.6</span>, <span class="hljs-number">5.5</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">7.3</span>, <span class="hljs-number">8.2</span>, <span class="hljs-number">9.1</span>]), <span class="hljs-number">0.9</span>)</code></pre><p>指定 dtype 类型为 int：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.linspace(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, endpoint=<span class="hljs-literal">False</span>, retstep=<span class="hljs-literal">True</span>, dtype=<span class="hljs-built_in">int</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)(array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]), <span class="hljs-number">0.9</span>)</code></pre><h3><span id="5x06-numpy-logspace"><font color="#1BC3FB">【5x06】numpy.logspace()</font></span></h3><p>numpy.logspace() 方法用于创建一个一维数组，该数组由一个等比数列构成。</p><p>基本语法：<code>numpy.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>序列的起始值</td></tr><tr><td>stop</td><td>序列的终止值，如果 endpoint 为 True，则该值将包含于数列中</td></tr><tr><td>num</td><td>可选项，int 类型，要生成的等步长的样本数量，即元素个数，默认为 50</td></tr><tr><td>endpoint</td><td>可选项，bool 类型，该值为 True 时，数列中将包含 stop 值，反之则不包含，默认为 True</td></tr><tr><td>base</td><td>可选项，float 类型，对数 log 的底数，即取对数的时候 log 的下标 ，默认为 10.0</td></tr><tr><td>dtype</td><td>可选项，Ndarray 的数据类型</td></tr><tr><td>axis</td><td>可选项，int 类型，结果中的轴用于存储样本。仅当 start 或 stop 类似于数组时才相关<br>默认情况下为 0，采样将沿着在开始处插入的新轴进行，使用 -1 来获得轴的末端</td></tr></tbody></table><p>应用举例：</p><p>指定起始值为 0，,终止值为 9，<font color="#FF0000"><strong>base 默认值为 10</strong></font>，代表的是 <font color="#FF0000"><strong>10</strong></font> 的幂，即 0 代表 <font color="#FF0000"><strong>10</strong></font> 的 0 次方，9 代表 <font color="#FF0000"><strong>10</strong></font> 的 9 次方：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.logspace(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, num = <span class="hljs-number">10</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">1.e+00</span> <span class="hljs-number">1.e+01</span> <span class="hljs-number">1.e+02</span> <span class="hljs-number">1.e+03</span> <span class="hljs-number">1.e+04</span> <span class="hljs-number">1.e+05</span> <span class="hljs-number">1.e+06</span> <span class="hljs-number">1.e+07</span> <span class="hljs-number">1.e+08</span> <span class="hljs-number">1.e+09</span>]</code></pre><p>指定起始值为 0，,终止值为 9，<font color="#FF0000"><strong>base 值为 2</strong></font>，代表的是 <font color="#FF0000"><strong>2</strong></font> 的幂，即 0 代表 <font color="#FF0000"><strong>2</strong></font> 的 0 次方，9 代表 <font color="#FF0000"><strong>2</strong></font> 的 9 次方：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.logspace(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, num = <span class="hljs-number">10</span>, base = <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[  <span class="hljs-number">1.</span>   <span class="hljs-number">2.</span>   <span class="hljs-number">4.</span>   <span class="hljs-number">8.</span>  <span class="hljs-number">16.</span>  <span class="hljs-number">32.</span>  <span class="hljs-number">64.</span> <span class="hljs-number">128.</span> <span class="hljs-number">256.</span> <span class="hljs-number">512.</span>]</code></pre><p>起始值和终止值都可以为 float 类型：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.logspace(<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, num = <span class="hljs-number">10</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[ <span class="hljs-number">10.</span>          <span class="hljs-number">12.91549665</span>  <span class="hljs-number">16.68100537</span>  <span class="hljs-number">21.5443469</span>   <span class="hljs-number">27.82559402</span>  <span class="hljs-number">35.93813664</span>  <span class="hljs-number">46.41588834</span>  <span class="hljs-number">59.94842503</span>  <span class="hljs-number">77.42636827</span> <span class="hljs-number">100.</span>        ]</code></pre><p>定义 dtype 属性值为 int 类型：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np          <span class="hljs-meta">&gt;&gt;&gt; </span>a = np.logspace(<span class="hljs-number">0.0</span>, <span class="hljs-number">9.0</span>, num = <span class="hljs-number">10</span>, base = <span class="hljs-number">2</span>, dtype = <span class="hljs-built_in">int</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">4</span>   <span class="hljs-number">8</span>  <span class="hljs-number">16</span>  <span class="hljs-number">32</span>  <span class="hljs-number">64</span> <span class="hljs-number">128</span> <span class="hljs-number">256</span> <span class="hljs-number">512</span>]</code></pre><h3><span id="5x07-numpy-empty"><font color="#1BC3FB">【5x07】numpy.empty()</font></span></h3><p>numpy.empty() 方法可用来创建一个指定形状（shape）、数据类型（dtype）且未初始化的数组。</p><p>基本语法：<code>numpy.empty(shape, dtype = float, order = 'C')</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>shape</td><td>数组形状</td></tr><tr><td>dtype</td><td>数据类型，可选</td></tr><tr><td>order</td><td>以行优先（C）或列优先（F）的顺序存储多维数据在内存中</td></tr></tbody></table><p>创建一个一维空数组（传递一个参数即可，代表数组长度，数组元素为随机值，因为它们未初始化）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.empty(<span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">3.538e-321</span> <span class="hljs-number">3.538e-321</span> <span class="hljs-number">0.000e+000</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">a</span> = <span class="hljs-title">np</span>.<span class="hljs-title">empty</span>(<span class="hljs-params"><span class="hljs-number">3</span>, dtype = <span class="hljs-built_in">int</span></span>)   # 定义类型为整数</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">a</span>)</span><span class="hljs-class">[716   0 716]</span></code></pre><p>创建一个二维空数组（传递两个参数，分别代表行数和列数）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.empty([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">6.23042070e-307</span> <span class="hljs-number">3.56043053e-307</span>] [<span class="hljs-number">1.37961641e-306</span> <span class="hljs-number">1.11258854e-306</span>] [<span class="hljs-number">8.90100843e-307</span> <span class="hljs-number">1.11261027e-306</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>创建一个三维空数组（传递三个参数，分别代表块数、每一块的行数和列数）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.empty([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]  [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]] [[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]  [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]] [[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]  [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]]]</code></pre><h3><span id="5x08-numpy-zeros"><font color="#1BC3FB">【5x08】numpy.zeros()</font></span></h3><p>numpy.zeros() 方法用于创建指定大小的数组，数组元素以 0 来填充。</p><p>基本语法：<code>numpy.zeros(shape, dtype = float, order = 'C')</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>shape</td><td>数组形状</td></tr><tr><td>dtype</td><td>数据类型，可选</td></tr><tr><td>order</td><td>以行优先（C）或列优先（F）的顺序存储多维数据在内存中</td></tr></tbody></table><p>创建一个一维数组（传递一个参数即可，代表数组长度，数组元素以 0 填充）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.zeros(<span class="hljs-number">5</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">a</span> = <span class="hljs-title">np</span>.<span class="hljs-title">zeros</span>(<span class="hljs-params"><span class="hljs-number">5</span>, dtype = <span class="hljs-built_in">int</span></span>)    # 定义类型为整数</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">a</span>)</span><span class="hljs-class">[0 0 0 0 0]</span></code></pre><p>创建一个二维数组（传递两个参数，分别代表行数和列数）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.zeros([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>创建一个三维空数组（传递三个参数，分别代表块数、每一块的行数和列数）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.zeros([<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]  [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]] [[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]  [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]] [[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]  [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]] [[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]  [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><h3><span id="5x09-numpy-ones"><font color="#1BC3FB">【5x09】numpy.ones()</font></span></h3><p>numpy.ones() 方法用于创建指定大小的数组，数组元素以 1 来填充。</p><p>基本语法：<code>numpy.ones(shape, dtype = None, order = 'C')</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>shape</td><td>数组形状</td></tr><tr><td>dtype</td><td>数据类型，可选</td></tr><tr><td>order</td><td>以行优先（C）或列优先（F）的顺序存储多维数据在内存中</td></tr></tbody></table><p>创建一个一维数组（传递一个参数即可，代表数组长度，数组元素以 0 填充）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.ones(<span class="hljs-number">5</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt; </span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">a</span> = <span class="hljs-title">np</span>.<span class="hljs-title">ones</span>(<span class="hljs-params"><span class="hljs-number">5</span>, dtype = <span class="hljs-built_in">int</span></span>)   # 定义类型为整数</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">a</span>)</span><span class="hljs-class">[1 1 1 1 1]</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>(<span class="hljs-params">a</span>)</span>)</span><span class="hljs-class">&lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>创建一个二维数组（传递两个参数，分别代表行数和列数）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.ones([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>] [<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><p>创建一个三维数组（传递三个参数，分别代表块数、每一块的行数和列数）：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.ones([<span class="hljs-number">3</span>, <span class="hljs-number">2</span> ,<span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]  [<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]] [[<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]  [<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]] [[<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]  [<span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span> <span class="hljs-number">1.</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><h3><span id="5x10-numpy-eye"><font color="#1BC3FB">【5x10】numpy.eye()</font></span></h3><p>numpy.eye() 方法用于创建对角矩阵数组，返回一个二维数组，对角线上值为 1，其余位置为 0。</p><p>基本语法：<code>numpy.eye(N, M=None, k=0, dtype=&lt;class 'float'&gt;, order='C')</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>N</td><td>int 类型，目标数组的行数</td></tr><tr><td>M</td><td>int 类型，可选项，目标数组的列数，如果未指定，则默认与行数（N）相同</td></tr><tr><td>k</td><td>int 类型，可选项，对角线索引，0（默认值）为主对角线，正值为上对角线，负值为下对角线<br>简单来说可以理解成将值为 1 的对角线向左右平移 k 个单位，默认值 0 即对角线为 1，k 为正值右移，负值左移</td></tr><tr><td>dtype</td><td>可选项，返回数组的数据类型</td></tr><tr><td>order</td><td>可选项，以行优先（C）或列优先（F）的顺序存储多维数据在内存中</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.eye(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>))           <span class="hljs-comment"># 创建一个对角矩阵</span>[[<span class="hljs-number">1.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">1.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">1.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">1.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">1.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.eye(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, k=<span class="hljs-number">1</span>))      <span class="hljs-comment"># 将值为 1 的对角线向右移 1 个单位</span>[[<span class="hljs-number">0.</span> <span class="hljs-number">1.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">1.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">1.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">1.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.eye(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, k=-<span class="hljs-number">2</span>))     <span class="hljs-comment"># 将值为 1 的对角线向右左移 2 个单位</span>[[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">1.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">1.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>] [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">1.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.eye(<span class="hljs-number">5</span>, dtype=<span class="hljs-built_in">int</span>))  <span class="hljs-comment"># 指定为 int 类型</span>[[<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>]]</code></pre><h3><span id="5x11-numpy-frombuffer"><font color="#1BC3FB">【5x11】numpy.frombuffer()</font></span></h3><p>numpy.frombuffer() 方法将缓冲区解释为一维数组，接受 buffer 输入参数，以流的形式读入转化成 ndarray 对象。当 buffer 是字符串时，Python3 默认 str 是 Unicode 类型，所以要转成 bytestring，即在原 str 前加上 b。</p><p>基本语法：<code>numpy.frombuffer(buffer, dtype=float, count=-1, offset=0)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>buffer</td><td>可以是任意对象，会以流的形式读入</td></tr><tr><td>dtype</td><td>可选项，返回数组的数据类型</td></tr><tr><td>count</td><td>可选项，读取的数据数量，默认为 -1，即读取缓冲区中所有数据</td></tr><tr><td>offset</td><td>可选项，读取的起始位置，以字节为单位，默认为 0</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-string">b&#x27;I love python!&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.frombuffer(a, dtype=<span class="hljs-string">&#x27;S1&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[<span class="hljs-string">b&#x27;I&#x27;</span> <span class="hljs-string">b&#x27; &#x27;</span> <span class="hljs-string">b&#x27;l&#x27;</span> <span class="hljs-string">b&#x27;o&#x27;</span> <span class="hljs-string">b&#x27;v&#x27;</span> <span class="hljs-string">b&#x27;e&#x27;</span> <span class="hljs-string">b&#x27; &#x27;</span> <span class="hljs-string">b&#x27;p&#x27;</span> <span class="hljs-string">b&#x27;y&#x27;</span> <span class="hljs-string">b&#x27;t&#x27;</span> <span class="hljs-string">b&#x27;h&#x27;</span> <span class="hljs-string">b&#x27;o&#x27;</span> <span class="hljs-string">b&#x27;n&#x27;</span> <span class="hljs-string">b&#x27;!&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.frombuffer(a, dtype=<span class="hljs-string">&#x27;S1&#x27;</span>, count=<span class="hljs-number">5</span>)              <span class="hljs-comment"># 指定要读取的数据量</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[<span class="hljs-string">b&#x27;I&#x27;</span> <span class="hljs-string">b&#x27; &#x27;</span> <span class="hljs-string">b&#x27;l&#x27;</span> <span class="hljs-string">b&#x27;o&#x27;</span> <span class="hljs-string">b&#x27;v&#x27;</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.frombuffer(a, dtype=<span class="hljs-string">&#x27;S1&#x27;</span>, count=<span class="hljs-number">5</span>, offset=<span class="hljs-number">6</span>)    <span class="hljs-comment"># 指定读取数据的起始位置</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[<span class="hljs-string">b&#x27; &#x27;</span> <span class="hljs-string">b&#x27;p&#x27;</span> <span class="hljs-string">b&#x27;y&#x27;</span> <span class="hljs-string">b&#x27;t&#x27;</span> <span class="hljs-string">b&#x27;h&#x27;</span>]&gt;&gt;&gt;<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-string">b&#x27;\x01\x02&#x27;</span><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.frombuffer(a, dtype=<span class="hljs-string">&#x27;uint8&#x27;</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]</code></pre><h3><span id="5x12-numpy-fromiter"><font color="#1BC3FB">【5x12】numpy.fromiter()</font></span></h3><p>numpy.fromiter() 方法可以从可迭代对象中建立 Ndarray 对象，返回一个一维数组。</p><p>基本语法：<code>numpy.fromiter(iterable, dtype, count=-1)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>iterable</td><td>可迭代对象</td></tr><tr><td>dtype</td><td>返回数组的数据类型</td></tr><tr><td>count</td><td>读取的数据数量，默认为 -1，即读取所有数据</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>l = <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>i = <span class="hljs-built_in">iter</span>(l)                              <span class="hljs-comment"># iter() 方法用于生成迭代器</span><span class="hljs-meta">&gt;&gt;&gt; </span>n = np.fromiter(i, dtype=<span class="hljs-built_in">float</span>)          <span class="hljs-comment"># 从可迭代对象中建立 Ndarray 对象</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(l, <span class="hljs-built_in">type</span>(l))<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>) &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">range</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">i, <span class="hljs-built_in">type</span>(<span class="hljs-params">i</span>)</span>)</span><span class="hljs-class">&lt;<span class="hljs-title">range_iterator</span> <span class="hljs-title">object</span> <span class="hljs-title">at</span> 0<span class="hljs-title">x00000163E75DCA70</span>&gt; &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">range_iterator</span>&#x27;&gt;</span><span class="hljs-class">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-params">n, <span class="hljs-built_in">type</span>(<span class="hljs-params">n</span>)</span>)</span><span class="hljs-class">[0. 1. 2. 3. 4.] &lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">numpy</span>.<span class="hljs-title">ndarray</span>&#x27;&gt;</span></code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/104870084</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr><h2><span id="6x00-gai-bian-shu-zu-de-wei-du-huo-zhe-xing-zhuang"><font color="#FF0000">【6x00】改变数组的维度或者形状</font></span></h2><h3><span id="6x01-numpy-reshape"><font color="#1BC3FB">【6x01】numpy.reshape()</font></span></h3><p>numpy.reshape() 方法用于重新调整数组的维数（重塑）。</p><p>基本语法：<code>numpy.reshape(a, newshape, order='C')</code></p><p>参数解释：</p><p><font color="#FF0000"><strong>a</strong></font>：要重塑的数组</p><p><font color="#FF0000"><strong>newshape</strong></font>：重塑后的形状，新形状应与原始形状兼容。如果是整数，则结果将是该长度的一维数组。一个形状维度可以是-1。在这种情况下，将根据数组的长度和剩余维度推断该值。举个例子，原数组 a 是一个 4 行 n 列的二维数组，现在要将其转换成只有 1 行的一维数组，由于不清楚原二维数组有多少列，也就不清楚一共有多少元素，所以可以使用 <code>np.reshape(a, (1, -1))</code> 语句将其转化为一维数组，其中 -1 会让程序自动计算有多少列，此概念将在后面举例具体说明。</p><p><font color="#FF0000"><strong>order</strong></font>：可选值为 C、F、A，使用索引顺序读取 a 的元素，并按照索引顺序将元素放到变换后的的数组中，默认参数为 C。</p><p><strong><code>C</code> 指的是用类 C 写的读/索引顺序的元素，最后一个维度变化最快，第一个维度变化最慢。横着读，横着写，优先读/写一行。</strong></p><p><strong><code>F</code> 是指用 FORTRAN 类索引顺序读/写元素，最后一个维度变化最慢，第一个维度变化最快。竖着读，竖着写，优先读/写一列。注意，C 和 F 选项不考虑底层数组的内存布局，只引用索引的顺序。</strong></p><p><strong><code>A</code> 选项所生成的数组的效果与原数组 a 的数据存储方式有关，如果数据是按照 FORTRAN 存储的话，它的生成效果与 F 相同，否则与 C 相同。</strong></p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>])  <span class="hljs-comment"># 创建一个一维数组</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.reshape(a, (<span class="hljs-number">2</span>,<span class="hljs-number">4</span>))         <span class="hljs-comment"># 重塑为一个二维数组</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.reshape(a, (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>))       <span class="hljs-comment"># 重塑为一个三维数组</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(c)[[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]  [<span class="hljs-number">3</span> <span class="hljs-number">4</span>]] [[<span class="hljs-number">5</span> <span class="hljs-number">6</span>]  [<span class="hljs-number">7</span> <span class="hljs-number">8</span>]]]</code></pre><p>添加 order 参数举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])   <span class="hljs-comment"># 创建一个二维数组</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.reshape(a, <span class="hljs-number">6</span>, order=<span class="hljs-string">&#x27;C&#x27;</span>)    <span class="hljs-comment"># 按照行优先</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.reshape(a, <span class="hljs-number">6</span>, order=<span class="hljs-string">&#x27;F&#x27;</span>)    <span class="hljs-comment"># 按照列优先</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[<span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span>]</code></pre><p>另外，reshape 方法新生成的数组和原数组共用一个内存，不管改变哪个都会互相影响：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>])<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.reshape(a, (<span class="hljs-number">2</span>,<span class="hljs-number">4</span>))<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">0</span>] = <span class="hljs-number">666</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[<span class="hljs-number">666</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[<span class="hljs-number">666</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>] [  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>   <span class="hljs-number">8</span>]]</code></pre><p>newshape 重塑后的形状维度可以是 -1，简单举例：</p><ul><li><p><code>reshape(1,-1)</code>：将原数组转化成一行 N 列</p></li><li><p><code>reshape(2,-1)</code>：将原数组转换成两行 N 列</p></li><li><p><code>reshape(-1,1)</code>：将原数组转换成一列 N 行</p></li><li><p><code>reshape(-1,2)</code>：将原数组转化成两列 N 行</p></li></ul><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.arange(<span class="hljs-number">16</span>)                     <span class="hljs-comment"># 生成一个由 0-15 组成的一维数组</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>]<span class="hljs-meta">&gt;&gt;&gt; </span>b = np.reshape(a, (<span class="hljs-number">2</span>,<span class="hljs-number">8</span>))             <span class="hljs-comment"># 将一维数组 a 转换成一个 2 行 8 列的二维数组 b</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(b)[[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>] [ <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>c = np.reshape(b, (<span class="hljs-number">8</span>,-<span class="hljs-number">1</span>))           <span class="hljs-comment"># 将二维数组 b 转换成 8 行的格式，程序自动计算列数（列数：16/8=2）</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(c)[[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>] [ <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>] [ <span class="hljs-number">6</span>  <span class="hljs-number">7</span>] [ <span class="hljs-number">8</span>  <span class="hljs-number">9</span>] [<span class="hljs-number">10</span> <span class="hljs-number">11</span>] [<span class="hljs-number">12</span> <span class="hljs-number">13</span>] [<span class="hljs-number">14</span> <span class="hljs-number">15</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span>d = np.reshape(c, (-<span class="hljs-number">1</span>,<span class="hljs-number">4</span>))          <span class="hljs-comment"># 将二维数组 c 转换成 4 列的格式，程序自动计算行数（行数：16/4=4）</span><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(d)[[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>] [ <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>] [ <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>] [<span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span>]]</code></pre><h3><span id="6x02-numpy-ravel"><font color="#1BC3FB">【6x02】numpy.ravel()</font></span></h3><p>numpy.ravel() 方法用于完成展平的操作。</p><p>基本语法：<code>numpy.ravel(a, order='C')</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待转换的数组</td></tr><tr><td>order</td><td>值可以是 <code>C</code> <code>F</code> <code>A</code> <code>K</code>，含义与 reshape 方法中参数的一样，与 reshape 方法不同的是多了个值 <code>K</code><br><code>K</code> 表示按顺序在内存中读取元素，但在跨距为负时会反转数据</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>], [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]], [[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>], [<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>]], [[<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>], [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>]  [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>]] [[ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]  [<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>]] [[<span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span>]  [<span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.ravel())[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span> <span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.ravel(a))[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span> <span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>]</code></pre><h3><span id="6x03-numpy-resize"><font color="#1BC3FB">【6x03】numpy.resize()</font></span></h3><p>numpy.resize() 方法会<font color="#FF0000"><strong>直接修改所操作的数组</strong></font>，返回具有指定形状的新数组，如果新数组大于原始数组，则新数组将填充 a 的重复副本。</p><p>基本语法：<code>numpy.resize(a, new_shape)</code></p><p>参数解释：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>待转换的数组</td></tr><tr><td>new_shape</td><td>新数组的大小形状</td></tr></tbody></table><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.resize(a, (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)))[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.resize(a, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)))[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>] [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.resize(a, (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)))[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>]]</code></pre><h3><span id="6x04-numpy-ndarray-flatten"><font color="#1BC3FB">【6x04】numpy.ndarray.flatten()</font></span></h3><p>numpy.ndarray.flatten() 方法恰如其名，flatten 就是展平的意思，与 ravel 函数的功能相同，二者的不同之处在于：flatten 方法会请求分配新的内存来保存结果，而 ravel 方法只是返回数组的一个视图（view）。</p><p>基本语法：<code>ndarray.flatten(order='C')</code></p><p>其 order 参数的值可以是 <code>C</code> <code>F</code> <code>A</code> <code>K</code>，含义与 reshape 和 ravel 方法中参数的一样.</p><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>], [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]], [[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>], [<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>]], [[<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>], [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>]  [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>]] [[ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]  [<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>]] [[<span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span>]  [<span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.flatten())[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span> <span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>]</code></pre><h3><span id="6x05-numpy-ndarray-shape"><font color="#1BC3FB">【6x05】numpy.ndarray.shape</font></span></h3><p>numpy.ndarray.shape 本来是 Ndarray 对象的一个属性，但可以通过直接用一个正整数元组对其赋值来设置数组的维度：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>], [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]], [[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>], [<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>]], [[<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>], [<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>]]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>]  [ <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>]] [[ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]  [<span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>]] [[<span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span>]  [<span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>]]]<span class="hljs-meta">&gt;&gt;&gt; </span>a.shape = (<span class="hljs-number">3</span>, <span class="hljs-number">8</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>] [ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span>] [<span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span> <span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span> <span class="hljs-number">24</span>]]</code></pre><h3><span id="6x06-numpy-ndarray-transpose-amp-numpy-ndarray-t"><font color="#1BC3FB">【6x06】numpy.ndarray.transpose() &amp; numpy.ndarray.T</font></span></h3><p>ndarray.transpose() 和 ndarray.T 方法的作用是对数组进行转置，即原来的行变成列，原来的列变成行。</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>], [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>] [ <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>] [<span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.transpose())[[ <span class="hljs-number">0</span>  <span class="hljs-number">6</span> <span class="hljs-number">12</span>] [ <span class="hljs-number">1</span>  <span class="hljs-number">7</span> <span class="hljs-number">13</span>] [ <span class="hljs-number">2</span>  <span class="hljs-number">8</span> <span class="hljs-number">14</span>] [ <span class="hljs-number">3</span>  <span class="hljs-number">9</span> <span class="hljs-number">15</span>] [ <span class="hljs-number">4</span> <span class="hljs-number">10</span> <span class="hljs-number">16</span>] [ <span class="hljs-number">5</span> <span class="hljs-number">11</span> <span class="hljs-number">17</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.T)[[ <span class="hljs-number">0</span>  <span class="hljs-number">6</span> <span class="hljs-number">12</span>] [ <span class="hljs-number">1</span>  <span class="hljs-number">7</span> <span class="hljs-number">13</span>] [ <span class="hljs-number">2</span>  <span class="hljs-number">8</span> <span class="hljs-number">14</span>] [ <span class="hljs-number">3</span>  <span class="hljs-number">9</span> <span class="hljs-number">15</span>] [ <span class="hljs-number">4</span> <span class="hljs-number">10</span> <span class="hljs-number">16</span>] [ <span class="hljs-number">5</span> <span class="hljs-number">11</span> <span class="hljs-number">17</span>]]</code></pre><h3><span id="6x07-numpy-swapaxes"><font color="#1BC3FB">【6x07】numpy.swapaxes()</font></span></h3><p>numpy.swapaxes() 方法用于对换数组的两个轴</p><p>基本语法：<code>numpy.swapaxes(a, axis1, axis2)</code></p><p>参数解释：a 为原始数组，axis1、axis2 分别对应两个轴，类型为整数</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>], [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>] [ <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>] [<span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.swapaxes(a, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>))       <span class="hljs-comment"># 交换 1 轴和 0 轴，此处相当于数组的转置，与【6x06】效果相同</span>[[ <span class="hljs-number">0</span>  <span class="hljs-number">6</span> <span class="hljs-number">12</span>] [ <span class="hljs-number">1</span>  <span class="hljs-number">7</span> <span class="hljs-number">13</span>] [ <span class="hljs-number">2</span>  <span class="hljs-number">8</span> <span class="hljs-number">14</span>] [ <span class="hljs-number">3</span>  <span class="hljs-number">9</span> <span class="hljs-number">15</span>] [ <span class="hljs-number">4</span> <span class="hljs-number">10</span> <span class="hljs-number">16</span>] [ <span class="hljs-number">5</span> <span class="hljs-number">11</span> <span class="hljs-number">17</span>]]</code></pre><h2><span id="7x00-numpy-shu-ju-lei-xing"><font color="#FF0000">【7x00】NumPy 数据类型</font></span></h2><p>NumPy 数组包含同一类型的值，支持的数据类型比 Python 内置的类型更多，构建一个数组时，可以用一个字符串参数 dtype 来指定数据类型：</p><pre><code class="hljs python">np.zeros(<span class="hljs-number">10</span>, dtype=<span class="hljs-string">&#x27;int16&#x27;</span>)</code></pre><pre><code class="hljs python">np.zeros(<span class="hljs-number">10</span>, dtype=np.int16)</code></pre><table><thead><tr><th>数据类型</th><th style="text-align:left"><center>描述</center></th></tr></thead><tbody><tr><td>bool_</td><td style="text-align:left">              <font color="#FF0000"><strong>布尔值</strong></font>（True 或者 False），用一个字节存储</td></tr><tr><td>int_</td><td style="text-align:left">              <font color="#FF0000"><strong>默认的整型</strong></font>（类似于 C 语言中的 long，通常情况下是 int32 或 int64）</td></tr><tr><td>intc</td><td style="text-align:left">              <font color="#FF0000"><strong>同 C 语言的 int 相同</strong></font>（通常是 int32 或 int64）</td></tr><tr><td>intp</td><td style="text-align:left">              <font color="#FF0000"><strong>用作索引的整型</strong></font>（和 C 语言的 ssize_t 相同，通常情况下是 int32 或 int64）</td></tr><tr><td>int8</td><td style="text-align:left">              <font color="#FF0000"><strong>字节</strong></font>（byte，范围从 –128 到 127），可用 i1 缩写代替</td></tr><tr><td>int16</td><td style="text-align:left">              <font color="#FF0000"><strong>整型</strong></font>（范围从 –32768 到 32767），可用 i2 缩写代替</td></tr><tr><td>int32</td><td style="text-align:left">              <font color="#FF0000"><strong>整型</strong></font>（范围从 –2147483648 到 2147483647），可用 i4 缩写代替</td></tr><tr><td>int64</td><td style="text-align:left">              <font color="#FF0000"><strong>整型</strong></font>（范围从 –9223372036854775808 到 9223372036854775807），可用 i8 缩写代替</td></tr><tr><td>uint8</td><td style="text-align:left">              <font color="#FF0000"><strong>无符号整型</strong></font>（范围从 0 到 255）</td></tr><tr><td>uint16</td><td style="text-align:left">              <font color="#FF0000"><strong>无符号整型</strong></font>（范围从 0 到 65535）</td></tr><tr><td>uint32</td><td style="text-align:left">              <font color="#FF0000"><strong>无符号整型</strong></font>（范围从 0 到 4294967295）</td></tr><tr><td>uint64</td><td style="text-align:left">              <font color="#FF0000"><strong>无符号整型</strong></font>（范围从 0 到 18446744073709551615）</td></tr><tr><td>float_</td><td style="text-align:left">              <font color="#FF0000"><strong>float64</strong></font> 的简化形式</td></tr><tr><td>float16</td><td style="text-align:left">              <font color="#FF0000"><strong>半精度浮点型</strong></font>，包括：1 比特位符号，5 比特位指数，10 比特位尾数</td></tr><tr><td>float32</td><td style="text-align:left">              <font color="#FF0000"><strong>单精度浮点型</strong></font>，包括：1 比特位符号，8 比特位指数，23 比特位尾数</td></tr><tr><td>float64</td><td style="text-align:left">              <font color="#FF0000"><strong>双精度浮点型</strong></font>，包括：1 比特位符号，11 比特位指数，52 比特位尾数</td></tr><tr><td>complex_</td><td style="text-align:left">              <font color="#FF0000"><strong>complex128</strong></font> 的简化形式</td></tr><tr><td>complex64</td><td style="text-align:left">              <font color="#FF0000"><strong>复数</strong></font>，表示双 32 位浮点数（实数部分和虚数部分）</td></tr><tr><td>complex128</td><td style="text-align:left">              <font color="#FF0000"><strong>复数</strong></font>，表示双 64 位浮点数（实数部分和虚数部分）</td></tr></tbody></table><h2><span id="8x00-numpy-shu-zu-shu-xing"><font color="#FF0000">【8x00】NumPy 数组属性</font></span></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>ndarray.ndim</td><td>秩，即轴的数量或维度的数量，一维数组的秩为 1，二维数组的秩为 2，以此类推</td></tr><tr><td>ndarray.shape</td><td>数组的维度，对于矩阵，n 行 m 列</td></tr><tr><td>ndarray.size</td><td>数组元素的总个数，相当于 .shape 中 n*m 的值</td></tr><tr><td>ndarray.dtype</td><td>ndarray 对象的元素类型</td></tr><tr><td>ndarray.itemsize</td><td>ndarray 对象中每个元素的大小，以字节为单位</td></tr><tr><td>ndarray.flags</td><td>ndarray 对象的内存信息</td></tr><tr><td>ndarray.real</td><td>ndarray元素的实部</td></tr><tr><td>ndarray.imag</td><td>ndarray 元素的虚部</td></tr><tr><td>ndarray.data</td><td>包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性</td></tr></tbody></table><p>其中 ndarray.flags 包含以下属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>C_CONTIGUOUS (C)</code></td><td>数据是在一个单一的 C 风格的连续段中</td></tr><tr><td><code>F_CONTIGUOUS (F)</code></td><td>数据是在一个单一的 Fortran 风格的连续段中</td></tr><tr><td><code>OWNDATA (O)</code></td><td>数组拥有它所使用的内存或从另一个对象中借用它</td></tr><tr><td><code>WRITEABLE (W)</code></td><td>数据区域可以被写入，将该值设置为 False，则数据为只读</td></tr><tr><td><code>ALIGNED (A)</code></td><td>数据和所有元素都适当地对齐到硬件上</td></tr><tr><td><code>UPDATEIFCOPY (U)</code></td><td>这个数组是其它数组的一个副本，当这个数组被释放时，原数组的内容将被更新</td></tr></tbody></table><p>应用举例：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.flags)  C_CONTIGUOUS : <span class="hljs-literal">True</span>  F_CONTIGUOUS : <span class="hljs-literal">True</span>  OWNDATA : <span class="hljs-literal">True</span>  WRITEABLE : <span class="hljs-literal">True</span>  ALIGNED : <span class="hljs-literal">True</span>  WRITEBACKIFCOPY : <span class="hljs-literal">False</span>  UPDATEIFCOPY : <span class="hljs-literal">False</span></code></pre><p>ndarray.shape 查看数组维度以及更改数组形状：</p><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.shape)(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-meta">&gt;&gt;&gt; </span>a.shape = (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.shape)(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)</code></pre><hr><pre><code class="hljs yaml"><span class="hljs-string">这里是一段物理防爬虫文本，请读者忽略。</span><span class="hljs-string">本文原创首发于</span> <span class="hljs-string">CSDN，作者</span> <span class="hljs-string">ITBOB。</span><span class="hljs-string">博客首页：https://itrhx.blog.csdn.net/</span><span class="hljs-string">本文链接：https://itrhx.blog.csdn.net/article/details/104870084</span><span class="hljs-string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> NumPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客提交百度、谷歌搜索引擎收录</title>
      <link href="/article/007/"/>
      <url>/article/007/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#xie-zai-qian-mian">写在前面</a></li><li><a href="#cha-kan-wang-zhan-shi-fou-bei-shou-lu">查看网站是否被收录</a></li><li><a href="#bai-du-zi-yuan-ping-tai-tian-jia-wang-zhan">百度资源平台添加网站</a></li><li><a href="#ti-jiao-bai-du-sou-suo">提交百度搜索</a><ul><li><a href="#zhu-dong-tui-song">主动推送</a></li><li><a href="#zi-dong-tui-song">自动推送</a></li><li><a href="#sitemap">sitemap</a></li><li><a href="#shou-dong-ti-jiao">手动提交</a></li></ul></li><li><a href="#ti-jiao-gu-ge-sou-suo">提交谷歌搜索</a></li></ul><!-- tocstop --><hr><h2><span id="xie-zai-qian-mian">写在前面</span></h2><p>网站在没有提交搜索引擎收录之前，直接搜索你网站的内容是搜不到的，只有提交搜索引擎之后，搜索引擎才能收录你的站点，通过爬虫抓取你网站的东西，<font color="#ff0000">对于 hexo 博客来说，如果你是部署在 GitHub Pages，那么你是无法被百度收录的，因为 GitHub 禁止了百度爬虫</font>，最常见的解决办法是双线部署到 Coding Pages 和 GitHub Pages，因为百度爬虫可以爬取到 Coding 上的内容，从而实现百度收录，如果你的 hexo 博客还没有实现双线部署，请参考：<a href="https://blog.csdn.net/qq_36759224/article/details/100879609">《Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS》</a>，另外百度收录的所需的时间较长，大约半个月左右才会看到效果！</p><hr><h2><span id="cha-kan-wang-zhan-shi-fou-bei-shou-lu">查看网站是否被收录</span></h2><p>首先我们可以输入 <code>site:域名</code> 来查看域名是否被搜索引擎收录，如下图所示，表示没有收录：</p><p><img src="https://cdn.itbob.cn/img/article/007/01.png" alt="01"></p><hr><h2><span id="bai-du-zi-yuan-ping-tai-tian-jia-wang-zhan">百度资源平台添加网站</span></h2><p>访问<a href="https://ziyuan.baidu.com/">百度搜索资源平台官网</a>，注册或者登陆百度账号，依次选择【用户中心】-【站点管理】，添加你的网站，在添加站点时会让你选择协议头（http 或者 https），如果选择 https，它会验证你的站点，大约能在一天之内完成，我的网站已经实现了全站 https，因此选择了 https 协议，但是不知道为什么始终验证失败，实在是无解，只能选择 http 协议了，如果你的站点也实现了全站 https，也可以尝试一下</p><p><img src="https://cdn.itbob.cn/img/article/007/02.png" alt="02"></p><p>之后会让你验证网站所有权，提供三种验证方式：</p><ul><li>文件验证：下载给定的文件，将其放到本地<font color="#ff0000">主题目录 source 文件夹</font>，然后部署上去完成验证</li><li>HTML 标签验证：一般是给一个 meta 标签，放到首页 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间即可完成验证</li><li>CNAME 验证：个人觉得这种方法最简单，去域名 DNS 添加一个 CNAME 记录即可完成验证</li></ul><p><img src="https://cdn.itbob.cn/img/article/007/03.png" alt="03"></p><p><img src="https://cdn.itbob.cn/img/article/007/04.png" alt="04"></p><hr><h2><span id="ti-jiao-bai-du-sou-suo">提交百度搜索</span></h2><p>百度提供了自动提交和手动提交两种方式，其中自动提交又分为主动推送、自动推送和 sitemap 三种方式，以下是官方给出的解释：</p><ul><li><p>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录</p></li><li><p>自动推送：是轻量级链接提交组件，将自动推送的 JS 代码放置在站点每一个页面源代码中，当页面被访问时，页面链接会自动推送给百度，有利于新页面更快被百度发现</p></li><li><p>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送</p></li><li><p>手动提交：如果您不想通过程序提交，那么可以采用此种方式，手动将链接提交给百度</p></li></ul><p>四种提交方式对比：</p><table><thead><tr><th style="text-align:center">方式</th><th style="text-align:center">主动推送</th><th style="text-align:center">自动推送</th><th style="text-align:center">Sitemap</th><th style="text-align:center">手动提交</th></tr></thead><tbody><tr><td style="text-align:center">速度</td><td style="text-align:center">最快</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">开发成本</td><td style="text-align:center">高</td><td style="text-align:center">低</td><td style="text-align:center">中</td><td style="text-align:center">不需开发</td></tr><tr><td style="text-align:center">可提交量</td><td style="text-align:center">低</td><td style="text-align:center">高</td><td style="text-align:center">高</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">是否建议提交历史连接</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">和其他提交方法是否有冲突</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td></tr></tbody></table><p><strong>个人推荐同时使用主动推送和 sitemap 方式</strong>，下面将逐一介绍这四种提交方式的具体实现方法</p><hr><h3><span id="zhu-dong-tui-song">主动推送</span></h3><p>在博客根目录安装插件 <code>npm install hexo-baidu-url-submit --save</code>，然后在根目录 <code>_config.yml</code> 文件里写入以下配置：</p><pre><code class="hljs txt">baidu_url_submit:  count: 1               # 提交最新的多少个链接  host: www.itrhx.com    # 在百度站长平台中添加的域名  token: your_token      # 秘钥  path: baidu_urls.txt   # 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>其中的 <code>token</code> 可以在【链接提交】-【自动提交】-【主动推送】下面看到，接口调用地址最后面 <code>token=xxxxx</code> 即为你的 <code>token</code></p><p><img src="https://cdn.itbob.cn/img/article/007/05.png" alt="05"></p><p>同样是在根目录的 <code>_config.yml</code> 文件，大约第 17 行处，url 要改为在百度站长平台添加的域名，也就是你网站的首页地址：</p><pre><code class="hljs txt"># URLurl: https://www.itrhx.comroot: /permalink: :year/:month/:day/:title/</code></pre><p>最后，加入新的 deployer：</p><pre><code class="hljs txt">deploy:- type: git  repository:    github: git@github.com:TRHX/TRHX.github.io.git  # 这是原来的 github 配置    coding: git@git.dev.tencent.com:TRHX/TRHX.git   # 这是原来的 coding 配置  branch: master- type: baidu_url_submitter                         # 这是新加的主动推送</code></pre><p>最后执行 <code>hexo g -d</code> 部署一遍即可实现主动推送，推送成功的标志是：在执行部署命令最后会显示类似如下代码：</p><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;remain&quot;</span>:4999953,<span class="hljs-string">&quot;success&quot;</span>:47&#125;INFO  Deploy <span class="hljs-keyword">done</span>: baidu_url_submitter</code></pre><p>这表示有 47 个页面已经主动推送成功，remain 的意思是当天剩余的可推送 url 条数</p><p>主动推送相关原理介绍：</p><ul><li>新链接的产生：hexo generate 会产生一个文本文件，里面包含最新的链接</li><li>新链接的提交：hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎</li></ul><p>该插件的 GitHub 地址：<a href="https://github.com/huiwang/hexo-baidu-url-submit">https://github.com/huiwang/hexo-baidu-url-submit</a></p><hr><h3><span id="zi-dong-tui-song">自动推送</span></h3><p>关于自动推送百度官网给出的解释是：自动推送是百度搜索资源平台为提高站点新增网页发现速度推出的工具，安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度</p><p><img src="https://cdn.itbob.cn/img/article/007/06.png" alt="06"></p><p>此时要注意，有些 hexo 主题集成了这项功能，比如 next 主题，在 <code>themes\next\layout_scripts\</code> 下有个 <code>baidu_push.swig</code> 文件，我们只需要把如下代码粘贴到该文件，然后在主题配置文件设置 <code>baidu_push: true</code> 即可</p><pre><code class="hljs js">&#123;% <span class="hljs-keyword">if</span> theme.baidu_push %&#125;&lt;script&gt;(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">var</span> bp = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);    <span class="hljs-keyword">var</span> curProtocol = <span class="hljs-built_in">window</span>.location.protocol.split(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">0</span>];    <span class="hljs-keyword">if</span> (curProtocol === <span class="hljs-string">&#x27;https&#x27;</span>) &#123;        bp.src = <span class="hljs-string">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;            &#125;    <span class="hljs-keyword">else</span> &#123;        bp.src = <span class="hljs-string">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;    &#125;    <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;script&quot;</span>)[<span class="hljs-number">0</span>];    s.parentNode.insertBefore(bp, s);&#125;)();&lt;/script&gt;&#123;% endif %&#125;</code></pre><p>然而大部分主题是没有集成这项功能的，对于大部分主题来说，我们可以把以下代码粘贴到 <code>head.ejs</code> 文件的 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间即可，从而实现自动推送（比如我使用的是 <a href="https://xaoxuu.com/wiki/material-x/">Material X</a> 主题，那么只需要把代码粘贴到 <code>\themes\material-x\layout\_partial\head.ejs</code> 中即可）</p><pre><code class="hljs js">&lt;script&gt;(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">var</span> bp = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);    <span class="hljs-keyword">var</span> curProtocol = <span class="hljs-built_in">window</span>.location.protocol.split(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">0</span>];    <span class="hljs-keyword">if</span> (curProtocol === <span class="hljs-string">&#x27;https&#x27;</span>) &#123;        bp.src = <span class="hljs-string">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;    &#125;    <span class="hljs-keyword">else</span> &#123;        bp.src = <span class="hljs-string">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;    &#125;    <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;script&quot;</span>)[<span class="hljs-number">0</span>];    s.parentNode.insertBefore(bp, s);&#125;)();&lt;/script&gt;</code></pre><hr><h3><span id="sitemap">sitemap</span></h3><p>首先我们要使用以下命令生成一个网站地图：</p><pre><code class="hljs bash">npm install hexo-generator-sitemap --save     npm install hexo-generator-baidu-sitemap --save</code></pre><p>这里也注意一下，将根目录的 <code>_config.yml</code> 文件，大约第 17 行处，url 改为在百度站长平台添加的域名，也就是你网站的首页地址：</p><pre><code class="hljs txt"># URLurl: https://www.itrhx.comroot: /permalink: :year/:month/:day/:title/</code></pre><p>然后使用命令 <code>hexo g -d</code> 将网站部署上去，然后访问 <code>你的首页/sitemap.xml</code> 或者 <code>你的首页/baidusitemap.xml</code> 就可以看到网站地图了</p><p>比如我的是：<a href="https://www.itrhx.com/baidusitemap.xml">https://www.itrhx.com/baidusitemap.xml</a> 或者 <a href="https://www.itrhx.com/sitemap.xml">https://www.itrhx.com/sitemap.xml</a></p><p>其中 <code>sitemap.xml</code> 文件是搜索引擎通用的 sitemap 文件，<code>baidusitemap.xml</code> 是百度专用的 sitemap 文件</p><p>然后来到百度站长平台的 sitemap 提交页面，将你的 sitemap 地址提交即可，如果成功的话状态会显示为正常，初次提交要等几分钟，sitemap.xml 相比 baidusitemap.xml 来说等待时间也会更长，如果以后你博客有新的文章或其他页面，可以点击<strong>手动更新文件</strong>，更新一下新的 sitemap</p><p><img src="https://cdn.itbob.cn/img/article/007/07.png" alt="07"></p><hr><h3><span id="shou-dong-ti-jiao">手动提交</span></h3><p>手动提交不需要其他额外操作，直接把需要收录的页面的 url 提交即可，这种方法效率较低，更新较慢，不推荐使用</p><p><img src="https://cdn.itbob.cn/img/article/007/08.png" alt="08"></p><hr><h2><span id="ti-jiao-gu-ge-sou-suo">提交谷歌搜索</span></h2><p>提交谷歌搜索引擎比较简单，在提交之前，我们依然可以使用 <code>site:域名</code> 查看网站是否被收录，我的网站搭建了有差不多一年了，之前也没提交过收录，不过谷歌爬虫的确是强大，即使没有提交过，现在也能看到有一百多条结果了：</p><p><img src="https://cdn.itbob.cn/img/article/007/09.png" alt="09"></p><p>接下来我们将网站提交谷歌搜索引擎搜索，进入<a href="https://www.google.com/webmasters/">谷歌站长平台</a>，登录你的谷歌账号之后会让你验证网站所有权：</p><p><img src="https://cdn.itbob.cn/img/article/007/10.png" alt="10"></p><p>有两种验证方式，分别是网域和网址前缀，两种资源类型区别如下：</p><table><thead><tr><th></th><th style="text-align:left"><center>网址前缀资源</center></th><th style="text-align:left"><center>网域资源</center></th></tr></thead><tbody><tr><td>说明</td><td style="text-align:left">仅包含具有指定前缀（包括协议 http/https）的网址。如果希望资源匹配任何协议或子网域（http/https/www./m. 等），建议改为添加网域资源。</td><td style="text-align:left">包括所有子网域（m、www 等）和多种协议（http、https、ftp）的网域级资源。</td></tr><tr><td>验证</td><td style="text-align:left">多种类型</td><td style="text-align:left">仅 DNS 记录验证</td></tr><tr><td>示例</td><td style="text-align:left">资源 <a href="http://example.com/">http://example.com/</a><br><br><font color="#ff0000">✔</font> <a href="http://example.com/dresses/1234">http://example.com/dresses/1234</a><br><font color="#ff0000">X</font> <a href="https://example.com/dresses/1234">https://example.com/dresses/1234</a><br><font color="#ff0000">X</font> <a href="http://www.example.com/dresses/1234">http://www.example.com/dresses/1234</a></td><td style="text-align:left">资源 <a href="http://example.com">example.com</a><br><br><font color="#ff0000">✔</font> <a href="http://example.com/dresses/1234">http://example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="https://example.com/dresses/1234">https://example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="http://www.example.com/dresses/1234">http://www.example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="http://support.m.example.com/dresses/1234">http://support.m.example.com/dresses/1234</a></td></tr></tbody></table><p>由对比可知选择网域资源验证方式比较好，只需要一个域名就可以匹配到多种格式的 URL，之后会给你一个 TXT 的记录值，复制它到你域名 DNS 增加一个 TXT 记录，点击验证即可</p><p><img src="https://cdn.itbob.cn/img/article/007/11.png" alt="11"></p><p>提交谷歌收录比较简单，选择站点地图，将我们之前生成的 sitemap 提交就行了，过几分钟刷新一下看到成功字样表示提交成功！</p><p><img src="https://cdn.itbob.cn/img/article/007/12.png" alt="12"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github + jsDelivr + PicGo 打造稳定快速、高效免费图床</title>
      <link href="/article/006/"/>
      <url>/article/006/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#qian-yan">前言</a></li><li><a href="#xin-jian-github-cang-ku">新建 GitHub 仓库</a></li><li><a href="#sheng-cheng-token">生成 Token</a></li><li><a href="#pei-zhi-picgo">配置 PicGo</a></li><li><a href="#jin-xing-gao-xiao-chuang-zuo">进行高效创作</a></li></ul><!-- tocstop --><hr><h2><span id="qian-yan">前言</span></h2><p>图床是个啥东西就不用过多介绍了，先来对比一下各路图床：</p><ul><li><strong>微博图床</strong>：以前用的人比较多，从2019年4月开始开启了防盗链，凉凉；</li><li><strong><a href="http://SM.MS">SM.MS</a></strong>：运营四年多了，也变得越来越慢了，到了晚上直接打不开图片，速度堪忧；</li><li><strong>其他小众图床</strong>：随时有挂掉的风险；</li><li><strong>Imgur 等国外图床</strong>：国内访问速度太慢，随时有被墙的风险；</li><li><strong>大厂储存服务</strong>：例如七牛云、又拍云、腾讯云COS、阿里云OSS等，容量限制，操作繁琐，又是实名认证又是域名备案的，麻烦，而且还要花钱（有钱又不怕麻烦的当我没说）。</li></ul><p>因此，GitHub 图床是个不错的选择，利用 jsDelivr CDN 加速访问（jsDelivr 是一个免费开源的 CDN 解决方案），PicGo 工具一键上传，操作简单高效，GitHub 和 jsDelivr 都是大厂，不用担心跑路问题，不用担心速度和容量问题，而且完全免费，可以说是目前免费图床的最佳解决方案！</p><hr><h2><span id="xin-jian-github-cang-ku">新建 GitHub 仓库</span></h2><p>登录/注册GitHub，新建一个仓库，填写好仓库名，仓库描述，根据需求选择是否为仓库初始化一个 <a href="http://README.md">README.md</a> 描述文件</p><p><img src="https://cdn.itbob.cn/img/article/006/01.jpg" alt="01"></p><p><img src="https://cdn.itbob.cn/img/article/006/02.jpg" alt="02"></p><hr><h2><span id="sheng-cheng-token">生成 Token</span></h2><p>在主页依次选择【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，填写好描述，勾选【repo】，然后点击【Generate token】生成一个Token，注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页</p><p><img src="https://cdn.itbob.cn/img/article/006/03.jpg" alt="03"></p><p><img src="https://cdn.itbob.cn/img/article/006/04.jpg" alt="04"></p><p><img src="https://cdn.itbob.cn/img/article/006/05.jpg" alt="05"></p><p><img src="https://cdn.itbob.cn/img/article/006/06.jpg" alt="06"></p><p><img src="https://cdn.itbob.cn/img/article/006/07.jpg" alt="07"></p><h2><span id="pei-zhi-picgo">配置 PicGo</span></h2><p>前往<a href="https://github.com/Molunerfinn/picgo/releases">下载PicGo</a>，安装好后开始配置图床</p><p><img src="https://cdn.itbob.cn/img/article/006/08.jpg" alt="08"></p><ul><li><p><font color="#FF000">设定仓库名：</font>按照【用户名/图床仓库名】的格式填写</p></li><li><p><font color="#FF000">设定分支名：</font>【master】</p></li><li><p><font color="#FF000">设定Token：</font>粘贴之前生成的【Token】</p></li><li><p><font color="#FF000">指定存储路径：</font>填写想要储存的路径，如【ITRHX-PIC/】，这样就会在仓库下创建一个名为 ITRHX-PIC 的文件夹，图片将会储存在此文件夹中</p></li><li><p><font color="#FF000">设定自定义域名：</font>它的作用是，在图片上传后，PicGo 会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，并放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为 <code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code>，上传完毕后，我们就可以通过 <code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径</code> 加速访问我们的图片了，比如上图的图片链接为：<a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.jpg">https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.jpg</a></p></li></ul><p>关于 jsDelivr 具体是如何引用资源的可以参考我的另一篇博客：<a href="https://www.itbob.cn/article/004/">《免费CDN：jsDelivr + Github》</a></p><hr><h2><span id="jin-xing-gao-xiao-chuang-zuo">进行高效创作</span></h2><p>配置好PicGo后，我们就可以进行高效创作了，将图片拖拽到上传区，将会自动上传并复制访问链接，将链接粘贴到博文中就行了，访问速度杠杠的，此外PicGo还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，PicGo还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站 ICP 备案和公安备案流程</title>
      <link href="/article/005/"/>
      <url>/article/005/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/article/005/Website-Approve.png" alt="Website-Approve"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#icp-bei-an">ICP备案</a><ul><li><a href="#tian-xie-xin-xi-yan-zheng-bei-an-lei-xing">填写信息验证备案类型</a></li><li><a href="#chan-pin-yan-zheng">产品验证</a></li><li><a href="#tian-xie-wang-zhan-xin-xi">填写网站信息</a></li><li><a href="#shang-chuan-zi-liao">上传资料</a></li><li><a href="#ren-lian-he-yan-huo-mu-bu-pai-zhao-he-yan">人脸核验或幕布拍照核验</a></li><li><a href="#ti-jiao-guan-ju-duan-xin-he-yan">提交管局、短信核验</a></li><li><a href="#icp-bei-an-wan-cheng">ICP 备案完成</a></li></ul></li><li><a href="#gong-an-bei-an">公安备案</a><ul><li><a href="#yong-hu-zhu-ce-deng-lu">用户注册、登录</a></li><li><a href="#xin-ban-wang-zhan-bei-an-shen-qing">新办网站备案申请</a></li><li><a href="#tian-xie-wang-zhan-ji-ben-xin-xi">填写网站基本信息</a></li><li><a href="#tian-xie-wang-zhan-fu-ze-ren-xin-xi">填写网站负责人信息</a></li><li><a href="#tong-yi-ze-ren-shu-bing-ti-jiao-shen-he">同意责任书并提交审核</a></li></ul></li></ul><!-- tocstop --><hr><p>网站备案分为ICP备案和公安备案</p><ul><li><p>ICP备案：ICP备案的目的就是为了防止在网上从事非法的网站经营活动，打击不良互联网信息的传播，如果网站不备案的话，很有可能被查处以后关停。根据中华人民共和国信息产业部第十二次部务会议审议通过的《非经营性互联网信息服务备案管理办法》条例，在中华人民共和国境内提供非经营性互联网信息服务，应当办理备案。未经备案，不得在中华人民共和国境内从事非经营性互联网信息服务。而对于没有备案的网站将予以罚款或关闭。</p></li><li><p>公安备案：网站备案是根据国家法律法规需要网站的所有者向国家有关部门申请的备案，公安局备案是其中一种。公安局备案一般按照各地公安机关指定的地点和方式进行，操作流程会比ICP备案流程简单，主要是已登记为主。</p></li></ul><p>以百度官网为例，其中<code>京公安网备11000002000001</code>就是公安备案，<code>京ICP证030173号 </code>就是ICP备案</p><p><img src="https://cdn.itbob.cn/img/article/005/01.png" alt="01"></p><h2><span id="icp-bei-an">ICP备案</span></h2><p>一般在域名服务商那里都会有代备案系统，下面以阿里云为例，进入备案系统：</p><p><img src="https://cdn.itbob.cn/img/article/005/02.jpg" alt="02"></p><h3><span id="tian-xie-xin-xi-yan-zheng-bei-an-lei-xing">填写信息验证备案类型</span></h3><p>备案主办单位填写，个人就选个人，企业就选企业，按照实际信息填写：</p><p><img src="https://cdn.itbob.cn/img/article/005/03.jpg" alt="03"></p><h3><span id="chan-pin-yan-zheng">产品验证</span></h3><p>对搭建备案网站的云服务器进行验证，如果你在阿里云购买了相关产品，就选择相应的产品类型和实例进行验证，也可以勾选<code>已有备案服务号</code>，填写服务号进行验证，备案服务号可以通过备案控制台进行申请，具体操作可以参考官方文档<a href="https://help.aliyun.com/knowledge_detail/36938.html">《申请备案服务号》</a>，也有的小伙伴没有在任何地方购买过服务器等相关产品，比如单纯搭建一个 <a href="https://blog.csdn.net/qq_36759224/article/details/82121420">Github Pages + Hexo</a> 轻量级的个人博客，这种博客没有后端，不需要服务器，但是要备案怎么办？这种情况也好解决，去某宝买一个服务号就行了。</p><p><img src="https://cdn.itbob.cn/img/article/005/04.jpg" alt="04"></p><p><img src="https://cdn.itbob.cn/img/article/005/05.jpg" alt="05"></p><h3><span id="tian-xie-wang-zhan-xin-xi">填写网站信息</span></h3><p>填写网站信息以及办理备案的个人或者单位的真实信息，在填写网站名称的时候要<font color="#FF0000">特别注意！特别注意！特别注意！不满足要求的话是会被打回的！</font>不能使用姓名、地名、成语、不能包含公司、组织等企业性质的词语…具体要求可以参考官方文档<a href="https://help.aliyun.com/knowledge_detail/36948.html?spm=a2c4g.11186623.6.573.6e1369a5ZNlC0v">《填写主体信息和网站信息》</a>。</p><p><img src="https://cdn.itbob.cn/img/article/005/06.jpg" alt="06"></p><p><img src="https://cdn.itbob.cn/img/article/005/07.png" alt="07"></p><h3><span id="shang-chuan-zi-liao">上传资料</span></h3><p>根据要求，上传证件照片或证件彩色扫描件。身份证好说，拍好了上传就行了，注意《网站备案信息真实性核验单》需要你<font color="#FF0000">下载并打印在一张A4纸上，使用黑色签字笔填写，不能涂改</font>，具体可参照所给的示例进行填写，填写完成后再拍照上传。企业网站类似，提交备案后会在一个工作日内进行初审。</p><p><img src="https://cdn.itbob.cn/img/article/005/08.jpg" alt="08"></p><p><img src="https://cdn.itbob.cn/img/article/005/09.jpg" alt="09"></p><p><img src="https://cdn.itbob.cn/img/article/005/10.jpg" alt="10"></p><h3><span id="ren-lian-he-yan-huo-mu-bu-pai-zhao-he-yan">人脸核验或幕布拍照核验</span></h3><p>根据不同地域管局要求及核验平台的支持情况，使用人脸识别进行核验，或者申请专用幕布进行幕布拍照核验</p><table><thead><tr><th style="text-align:center">地区</th><th style="text-align:left">核验要求</th></tr></thead><tbody><tr><td style="text-align:center">上海、福建地区用户</td><td style="text-align:left">需使用阿里云APP进行人脸核验。如果使用PC端发起的备案申请，请根据界面提示下载阿里云APP进行人脸核验。</td></tr><tr><td style="text-align:center">广东、辽宁、安徽、重庆地区用户</td><td style="text-align:left">首次备案、新增网站：支持使用阿里云APP进行人脸核验或通过阿里云备案平台（PC端）进行幕布拍照核验。<br>其他备案类型：需通过阿里云备案平台（PC端）进行幕布拍照核验。</td></tr><tr><td style="text-align:center">其他地区用户</td><td style="text-align:left">通过阿里云备案平台（PC端）进行幕布拍照核验。</td></tr></tbody></table><p>以幕布拍照核验为例，如果你没有阿里云的幕布，就需要申请幕布（免费的），邮寄很快，大约两三天就到了，等收到幕布后，按照要求进行拍照，<font color="#FF0000">一定要仔细阅读拍照说明！一定要仔细阅读拍照说明！一定要仔细阅读拍照说明！不合格依旧会被打回！</font>拍照完成后上传即可。</p><p><img src="https://cdn.itbob.cn/img/article/005/11.jpg" alt="11"></p><p><img src="https://cdn.itbob.cn/img/article/005/12.jpg" alt="12"></p><p><img src="https://cdn.itbob.cn/img/article/005/13.png" alt="13"></p><h3><span id="ti-jiao-guan-ju-duan-xin-he-yan">提交管局、短信核验</span></h3><p>当照片审核通过后，就会提交到管局，工信部要求部分省市成为手机号码短信核验试点省市，相应省市的用户在阿里云备案平台提交备案申请且初审完成后，会收到工信部发送的核验短信，短信包含验证码和验证地址，需要在收到短信的24小时内完成短信核验，备案申请才能进入管局审核。<br>需短信核验省份：</p><ul><li>2017年12月18日起：天津、甘肃、西藏、宁夏、海南、新疆、青海被列为试点省份。</li><li>2018年9月10日起：浙江、四川、福建、陕西、重庆、广西、云南被列为试点省份。</li><li>2018年9月24日起：山东、河南、安徽、湖南、山西、黑龙江、内蒙古、湖北被列为试点省份。</li></ul><p><img src="https://cdn.itbob.cn/img/article/005/14.jpg" alt="14"></p><h3><span id="icp-bei-an-wan-cheng">ICP 备案完成</span></h3><p>整个备案过程中会有阿里云的客服打电话给你，进行信息确认，备案申请信息成功提交管局系统后，管局审核一般为 3 - 20 个工作日（亲测很快，不到一个周就通过了），审核通过后会收到阿里云的邮件通知。</p><p><img src="https://cdn.itbob.cn/img/article/005/15.jpg" alt="15"></p><h2><span id="gong-an-bei-an">公安备案</span></h2><p>公安备案个人觉得比ICP备案还要麻烦，自己在公安备案的时候，最开始申请了一个月也没给我处理（大概是地方原因，所在的市比较小，估计都没几个人办过网站，网警也不太负责），与ICP备案最大的不同，如果你是交互式网站的话，公安备案是需要你去公安机关当面审核的，这也是比较麻烦的一点。</p><h3><span id="yong-hu-zhu-ce-deng-lu">用户注册、登录</span></h3><p>登录<a href="http://www.beian.gov.cn">全国互联网安全管理服务平台</a>，选择联网备案登录，注册账号并登录</p><p><img src="https://cdn.itbob.cn/img/article/005/16.jpg" alt="16"></p><h3><span id="xin-ban-wang-zhan-bei-an-shen-qing">新办网站备案申请</span></h3><p>点击新办网站申请，按实填写网站开办主体，上传身份证正反照和手持身份证件照。</p><p><img src="https://cdn.itbob.cn/img/article/005/17.jpg" alt="17"></p><p><img src="https://cdn.itbob.cn/img/article/005/18.jpg" alt="18"></p><h3><span id="tian-xie-wang-zhan-ji-ben-xin-xi">填写网站基本信息</span></h3><p>按实填写网站基本信息，需要注意的地方：</p><p><font color="#FF0000">IP：</font>IP地址为阿里云/腾讯云的公网IP地址，请不要填写内网IP。<br><font color="#FF0000">域名证书：</font>以阿里云为例，进入【域名控制台】，点击域名后面的【管理】，选择【域名证书下载】即可，其它服务商类似。<br><font color="#FF0000">网络接入/域名注册服务商：</font>若办理公安备案的域名是通过<a href="https://www.aliyun.com/">阿里云</a>完成的工信部备案，则按照以下填写：</p><p>网络接入服务商：</p><ul><li>接入商所属地区管辖：境内</li><li>接入商所属区域 ：浙江省 杭州市 滨江区</li><li>名称：阿里云计算有限公司</li><li>网站接入方式：租赁虚拟空间</li></ul><p>域名注册服务商：</p><ul><li>域名商所属地区管辖：境内</li><li>域名服务商所属区域：浙江省 杭州市 余杭区</li><li>名称：阿里云计算有限公司（原万网）</li></ul><p>也可以通过点击后面的<code>查询网络接入\域名注册服务商</code>直接选择相应服务商，其他服务商类似</p><p><font color="#FF0000">服务类型：</font>交互式服务指：为互联网用户提供信息发布、交流互动等服务，包括但不限于论坛、博客、微博、网络购物、网上支付等服务类型，此项选择是否提供互联网交互服务将会直接影响到后面是否需要去公安局当面核验，若选择<code>是</code>，当地网警会打电话叫你去公安局当面核验，还需要填写《交互式服务安全检查表》等各种文件，总之是比较麻烦的，个人小网站，博客什么的建议选择<code>否</code>，选择<code>www服务</code>，这样的话不用去当面核验，审核下来也比较快，企业单位用户建议选择交互式。</p><p>其他信息如实填写即可！</p><p><img src="https://cdn.itbob.cn/img/article/005/19.png" alt="19"></p><h3><span id="tian-xie-wang-zhan-fu-ze-ren-xin-xi">填写网站负责人信息</span></h3><p>填写网站安全负责人和网站应急联络人相关信息，网站应急联络人直接勾选同主体负责人后会自动填入。</p><p><img src="https://cdn.itbob.cn/img/article/005/20.jpg" alt="20"></p><h3><span id="tong-yi-ze-ren-shu-bing-ti-jiao-shen-he">同意责任书并提交审核</span></h3><p>《互联网信息服务单位网络安全责任告知书》有30秒的强制阅读时间，建议认真阅读一下告知书的内容。然后勾选我已阅读，点击提交即可。随后可以看到审核状态，不同地区政策有所不同，会有当地的网警联系网站负责人的，审核通过后记得在网站首页底部张贴公安机关核发的备案图标！</p><p><img src="https://cdn.itbob.cn/img/article/005/21.png" alt="21"></p><p><img src="https://cdn.itbob.cn/img/article/005/22.png" alt="22"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费 CDN：jsDelivr + Github</title>
      <link href="/article/004/"/>
      <url>/article/004/</url>
      
        <content type="html"><![CDATA[<h2><span id="wen-zhang-mu-lu">文章目录</span></h2><!-- toc --><ul><li><a href="#xin-jian-github-cang-ku">新建 Github 仓库</a></li><li><a href="#ke-long-github-cang-ku-dao-ben-di">克隆 Github 仓库到本地</a></li><li><a href="#shang-chuan-zi-yuan">上传资源</a></li><li><a href="#fa-bu-cang-ku">发布仓库</a></li><li><a href="#tong-guo-jsdelivr-yin-yong-zi-yuan">通过 jsDelivr 引用资源</a></li></ul><!-- tocstop --><hr><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。</p><hr><h2><span id="xin-jian-github-cang-ku">新建 Github 仓库</span></h2><p><img src="https://cdn.itbob.cn/img/article/004/01.jpg" alt="01"></p><h2><span id="ke-long-github-cang-ku-dao-ben-di">克隆 Github 仓库到本地</span></h2><p>点击 Clone or download，一键复制仓库地址</p><p><img src="https://cdn.itbob.cn/img/article/004/04.jpg" alt="04"></p><p>在本地目录右键 Git Bash Here，执行以下命令：</p> <pre><code class="hljs git">git clone 一键复制的仓库地址</code></pre><h2><span id="shang-chuan-zi-yuan">上传资源</span></h2><p>复制需要上传的资源到本地 git 仓库（注：jsDelivr 不支持加载超过 20M 的资源），在本地 git 仓库目录下右键 Git Bash Here，执行以下命令：</p><pre><code class="hljs git">git status                    //查看状态git add .                     //添加所有文件到暂存区git commit -m &#x27;第一次提交&#x27;      //把文件提交到仓库git push                      //推送至远程仓库</code></pre><h2><span id="fa-bu-cang-ku">发布仓库</span></h2><p>点击release发布</p><p><img src="https://cdn.itbob.cn/img/article/004/02.jpg" alt="02"></p><p>自定义发布版本号</p><p><img src="https://cdn.itbob.cn/img/article/004/03.jpg" alt="03"></p><h2><span id="tong-guo-jsdelivr-yin-yong-zi-yuan">通过 jsDelivr 引用资源</span></h2><p><font color="red">2022-05-22 更新：原引用的域名为 <a href="http://cdn.jsdelivr.net">cdn.jsdelivr.net</a>，可能部分地区会因为 DNS 污染导致无法访问，参见 <a href="https://github.com/jsdelivr/jsdelivr/issues/18397">Issues 18397</a>，目前更换域名为 <a href="http://fastly.jsdelivr.net">fastly.jsdelivr.net</a> 可用。</font></p><p>使用方法：<a href="https://fastly.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@%E5%8F%91%E5%B8%83%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84">https://fastly.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</a><br>例如：</p><ul><li><a href="https://fastly.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@1.0/images/trhx.png">https://fastly.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@1.0/images/trhx.png</a></li><li><a href="https://fastly.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css">https://fastly.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css</a></li><li><a href="https://fastly.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4">https://fastly.jsdelivr.net/gh/moezx/cdn@3.1.3//The Pet Girl of Sakurasou.mp4</a></li></ul><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下：</p><ul><li><p>加载任何Github发布、提交或分支：<br><a href="https://fastly.jsdelivr.net/gh/user/repo@version/file">https://fastly.jsdelivr.net/gh/user/repo@version/file</a></p></li><li><p>加载 jQuery v3.2.1：<br><a href="https://fastly.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js">https://fastly.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</a></p></li><li><p>使用版本范围而不是特定版本<br><a href="https://fastly.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js">https://fastly.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js</a><br><a href="https://fastly.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js">https://fastly.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js</a></p></li><li><p>完全省略该版本以获取最新版本：<br><a href="https://fastly.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js">https://fastly.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</a></p></li><li><p>将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成：<br><a href="https://fastly.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js">https://fastly.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js</a></p></li><li><p>在末尾添加 / 以获取资源目录列表：<br><a href="https://fastly.jsdelivr.net/gh/jquery/jquery/">https://fastly.jsdelivr.net/gh/jquery/jquery/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客主题个性化</title>
      <link href="/article/003/"/>
      <url>/article/003/</url>
      
        <content type="html"><![CDATA[<blockquote><p>建立了两个 Hexo 博客交流群，有问题可在群里互相交流学习！点击群号可一键加群！<br>Hexo 博客交流一群（<a href="https://qm.qq.com/cgi-bin/qm/qr?k=m5RvZThuF0U70_3nJwz-GoE7Ujbi0J35&amp;jump_from=webapi">924812033</a>）、Hexo 博客交流二群（<a href="https://qm.qq.com/cgi-bin/qm/qr?k=AVUjFgrXV3YA9s4JflWIYyDvt8GFG9rz&amp;jump_from=webapi">735861501</a>）</p></blockquote><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#xie-zai-qian-mian">写在前面</a></li><li><a href="#tian-jia-ping-lun-xi-tong">添加评论系统</a></li><li><a href="#tian-jia-qia-tong-ren-wu">添加卡通人物</a></li><li><a href="#zi-ding-yi-shu-biao-zhi-zhen-yang-shi">自定义鼠标指针样式</a></li><li><a href="#tian-jia-shu-biao-dian-ji-ai-xin-xiao-guo">添加鼠标点击爱心效果</a></li><li><a href="#tian-jia-shu-biao-dian-ji-xian-shi-zi-ti-xiao-guo">添加鼠标点击显示字体效果</a></li><li><a href="#tian-jia-shu-biao-dian-ji-yan-hua-bao-zha-xiao-guo">添加鼠标点击烟花爆炸效果</a></li><li><a href="#tian-jia-cai-se-gun-dong-bian-huan-zi-ti">添加彩色滚动变换字体</a></li><li><a href="#tian-jia-zi-shu-tong-ji-he-yue-du-shi-chang">添加字数统计和阅读时长</a></li><li><a href="#tian-jia-bei-jing-yin-le">添加背景音乐</a></li><li><a href="#tian-jia-wang-zhan-yun-xing-shi-jian">添加网站运行时间</a></li><li><a href="#tian-jia-bai-du-tong-ji">添加百度统计</a></li><li><a href="#liu-lan-qi-wang-ye-biao-ti-e-gao">浏览器网页标题恶搞</a></li><li><a href="#bei-jing-tian-jia-dong-tai-xian-tiao-xiao-guo">背景添加动态线条效果</a></li><li><a href="#tian-jia-ren-ti-shi-zhong">添加人体时钟</a></li><li><a href="#tian-jia-rss-ding-yue">添加RSS订阅</a></li><li><a href="#tian-jia-wang-zhan-xue-hua-piao-luo-xiao-guo">添加网站雪花飘落效果</a></li><li><a href="#tian-jia-fork-me-on-github-xiao-guo">添加 Fork me on GitHub 效果</a></li><li><a href="#tian-jia-bei-jing-dong-tai-cai-dai-xiao-guo">添加背景动态彩带效果</a></li><li><a href="#tian-jia-bei-jing-dai-ma-yu-te-xiao">添加背景代码雨特效</a></li><li><a href="#zi-ding-yi-yi-ge-bu-shi-yong-zhu-ti-mo-ban-xuan-ran-de-du-li-ye-mian">自定义一个不使用主题模板渲染的独立页面</a></li><li><a href="#geng-gai-ben-di-yu-lan-duan-kou-hao">更改本地预览端口号</a></li><li><a href="#wei-wan-dai-xu">未完待续…</a></li></ul><!-- tocstop --><hr><h2><span id="xie-zai-qian-mian">写在前面</span></h2><p>本文将讲述一些博客主题的美化、实用功能的添加，本文以作者 <a href="https://luuman.github.io/Home/H1/index.html">luuman</a> 的 <a href="https://github.com/luuman/hexo-theme-spfk">spfk</a> 主题和作者 <a href="https://xaoxuu.com/">xaoxuu</a> 的 <a href="https://xaoxuu.com/wiki/material-x/">Material X</a> 主题（远古版本，现已改名 <a href="https://github.com/volantis-x/hexo-theme-volantis/">Volantis</a>）为例，文章会不定时进行更新。文章涉及有关参考资料、教程、链接如有侵权请联系我删除！</p><p>本文在CSDN的链接：<a href="https://itrhx.blog.csdn.net/article/details/85420403">《Hexo 博客优化之博客美化》</a>、<a href="https://itrhx.blog.csdn.net/article/details/85010191">《Hexo 博客优化之实用功能添加》</a>，Hexo 博客专栏，从前期搭建到后期美化，帮您解决常见问题：<a href="https://itrhx.blog.csdn.net/category_9285510.html">《Hexo 博客搭建》</a>，对你有帮助就点个赞吧❤️</p><p><font color="#FF0000"><strong>请注意：</strong></font>不同主题可能方法有些不同，相同主题不同版本，配置方法也有所差异！</p><p><font color="#FF0000"><strong>博客美化前提条件：</strong></font>有一定的前端基础，了解 HTML、CSS、JS，了解 CSS 预处理语言 Sass、Less、Stylus，搞懂 hexo 的目录结构。</p><p><font color="#FF0000"><strong>博客美化通用步骤：</strong></font>选定主题，认真阅读主题文档，分析主题目录结构，了解每个文件是对应网页哪个部分的，认真阅读美化教程，美化教程本质上只为你提供核心代码和思路，具体代码要添加到哪个地方，需要你自己搞懂主题结构，添加到需要的、合适的位置！</p><p><font color="#FF0000"><strong>博客美化终极奥秘：</strong></font>创作第一，体验第二，避免繁杂，简洁为上！</p><hr><h2><span id="tian-jia-ping-lun-xi-tong">添加评论系统</span></h2><p>主流的评论系统有很多，比如：网易云跟帖、多说、友言、畅言、来必力（LiveRe）、Disqus、Valine、Gitment等等，目前网易云跟帖、多说、友言都已经关闭了，还有些可能需要翻墙，比较麻烦，百度了一下，最后还是选择了来必力评论系统</p><p>进入<a href="https://livere.com">来必力官网</a>，注册一个账号（注册时可能需要翻墙）</p><p><img src="https://cdn.itbob.cn/img/article/003/001.jpg" alt="001"></p><p>注册完毕之后，登录，进入安装页面，选择 City 免费版安装，安装之后你会得到一段代码</p><p><img src="https://cdn.itbob.cn/img/article/003/002.jpg" alt="002"></p><p><img src="https://cdn.itbob.cn/img/article/003/003.jpg" alt="003"></p><p><img src="https://cdn.itbob.cn/img/article/003/004.jpg" alt="004"></p><p>我们打开主题文件下的 <font color="#FF0000">_config.yml</font> 文件，添加如下代码：</p><p><img src="https://cdn.itbob.cn/img/article/003/005.png" alt="005"></p><p>在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\comments</font> 文件夹下新建一个 <font color="#FF0000">livere.ejs</font> 的文件，在里面填写来必力提供的代码：</p><pre><code class="hljs JavaScript">&lt;!-- 来必力City版安装代码 --&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lv-container&quot;</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">data-uid</span>=<span class="hljs-string">&quot;这里是你的uid&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d, s</span>) </span>&#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="hljs-number">0</span>];</span></span><span class="javascript"><span class="xml">    </span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> LivereTower === <span class="hljs-string">&#x27;function&#x27;</span>) &#123; <span class="hljs-keyword">return</span>; &#125;</span></span><span class="javascript"><span class="xml">    </span></span><span class="javascript"><span class="xml">        j = d.createElement(s);</span></span><span class="javascript"><span class="xml">        j.src = <span class="hljs-string">&#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;</span>;</span></span><span class="javascript"><span class="xml">        j.async = <span class="hljs-literal">true</span>;</span></span><span class="javascript"><span class="xml">    </span></span><span class="javascript"><span class="xml">        e.parentNode.insertBefore(j, e);</span></span><span class="javascript"><span class="xml">        &#125;)(<span class="hljs-built_in">document</span>, <span class="hljs-string">&#x27;script&#x27;</span>);</span></span><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>&lt;!-- City版安装代码已完成 --&gt;</code></pre><p>打开 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\article.ejs </font>文件，在适当位置添加如下红框中的代码：</p><p><img src="https://cdn.itbob.cn/img/article/003/006.jpg" alt="006"></p><p>完成以上操作之后，我们就可以使用来必力评论系统了</p><p><img src="https://cdn.itbob.cn/img/article/003/007.jpg" alt="007"></p><hr><h2><span id="tian-jia-qia-tong-ren-wu">添加卡通人物</span></h2><p>我在逛别人博客的时候偶然发现右下角居然有一个萌萌的卡通人物，还能根据你鼠标位置摇头，瞬间被吸引到了，赶紧也给自己博客添加一个吧！<a href="https://github.com/EYHN/hexo-helper-live2d">点击此处</a>进入该项目地址</p><p>输入如下命令获取 live2d ：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install --save hexo-helper-live2d</span></code></pre><p>输入以下命令，下载相应的模型，将 <font color="#FF0000">packagename</font> 更换成模型名称即可，更多模型选择请<a href="https://github.com/xiazeyu/live2d-widget-models">点击此处</a>，各个模型的预览请<a href="https://huaji8.top/post/live2d-plugin-2.0/">访问原作者的博客</a></p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install packagename</span></code></pre><p>打开站点目录下的 <font color="#FF0000">_config.yml</font> 文件，添加如下代码：</p><pre><code class="hljs yaml"><span class="hljs-attr">live2d:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span>  <span class="hljs-attr">model:</span>    <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-haruto</span> <span class="hljs-comment">#模型选择</span>  <span class="hljs-attr">display:</span>    <span class="hljs-attr">position:</span> <span class="hljs-string">right</span>  <span class="hljs-comment">#模型位置</span>    <span class="hljs-attr">width:</span> <span class="hljs-number">150</span>       <span class="hljs-comment">#模型宽度</span>    <span class="hljs-attr">height:</span> <span class="hljs-number">300</span>      <span class="hljs-comment">#模型高度</span>  <span class="hljs-attr">mobile:</span>    <span class="hljs-attr">show:</span> <span class="hljs-literal">false</span>      <span class="hljs-comment">#是否在手机端显示</span></code></pre><p>设置好过后我们就拥有了一个卡通人物</p><p><img src="https://cdn.itbob.cn/img/article/003/008.jpg" alt="008"></p><hr><h2><span id="zi-ding-yi-shu-biao-zhi-zhen-yang-shi">自定义鼠标指针样式</span></h2><p>在 <font color="#FF0000"> \themes\material-x\source\less\_base.less</font> 文件 body 样式里写入如下代码：</p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;    <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://fastly.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur</span>),auto;    <span class="hljs-attribute">background-color</span>: @theme_background;    ......    ......&#125;</code></pre><p>鼠标指针可以用 Axialis CursorWorkshop 这个软件自己制作，不同主题具体放的文件有所不同，确保在博客主体 body 的 CSS 文件中即可，其中的鼠标指针链接可替换成自己的，首先尝试加载 <a href="https://fastly.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur">https://fastly.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur</a> ，如果该文件不存在或由于其他原因无效，那么 auto 会被使用，也就是自动默认效果，图片格式为.ico、.ani、.cur，建议使用.cur，如果使用.ani或者其他格式无效，原因是浏览器兼容问题，请阅读<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Basic_User_Interface/Using_URL_values_for_the_cursor_property">参考文档</a>或者参考以下兼容表：</p><table><thead><tr><th style="text-align:center">浏览器</th><th style="text-align:center">最低版本</th><th style="text-align:center">格式</th></tr></thead><tbody><tr><td style="text-align:center">Internet Explorer</td><td style="text-align:center">6.0</td><td style="text-align:center">.cur / .ani</td></tr><tr><td style="text-align:center">Firefox (Gecko), Windows and Linux</td><td style="text-align:center">1.5 (1.8)</td><td style="text-align:center">.cur / .png / .gif / .jpg</td></tr><tr><td style="text-align:center">Firefox (Gecko)</td><td style="text-align:center">4.0 (2.0)</td><td style="text-align:center">.cur / .png / .gif / .jpg / .svg</td></tr><tr><td style="text-align:center">Opera</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">Safari (Webkit)</td><td style="text-align:center">3.0 (522-523)</td><td style="text-align:center">.cur / .png / .gif / .jpg</td></tr></tbody></table><p>拓展阅读：<a href="https://blog.csdn.net/ixygj197875/article/details/79338360">《CSS 鼠标样式 cursor属性》</a> （By：歪脖先生的博客）</p><hr><h2><span id="tian-jia-shu-biao-dian-ji-ai-xin-xiao-guo">添加鼠标点击爱心效果</span></h2><p>在<font color="#FF0000"> \themes\hexo-theme-spfk\source\js</font> 下新建文件 <font color="#FF0000">love.js</font>，在 <font color="#FF0000">love.js</font> 文件中添加以下代码：</p><pre><code class="hljs JavaScript">!<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e, t, a</span>) </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params"></span>) </span>&#123;        c(<span class="hljs-string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),        o(),        r()    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">r</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = <span class="hljs-number">0</span>; e &lt; d.length; e++) d[e].alpha &lt;= <span class="hljs-number">0</span> ? (t.body.removeChild(d[e].el), d.splice(e, <span class="hljs-number">1</span>)) : (d[e].y--, d[e].scale += <span class="hljs-number">.004</span>, d[e].alpha -= <span class="hljs-number">.013</span>, d[e].el.style.cssText = <span class="hljs-string">&quot;left:&quot;</span> + d[e].x + <span class="hljs-string">&quot;px;top:&quot;</span> + d[e].y + <span class="hljs-string">&quot;px;opacity:&quot;</span> + d[e].alpha + <span class="hljs-string">&quot;;transform:scale(&quot;</span> + d[e].scale + <span class="hljs-string">&quot;,&quot;</span> + d[e].scale + <span class="hljs-string">&quot;) rotate(45deg);background:&quot;</span> + d[e].color + <span class="hljs-string">&quot;;z-index:99999&quot;</span>);        requestAnimationFrame(r)    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">o</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> t = <span class="hljs-string">&quot;function&quot;</span> == <span class="hljs-keyword">typeof</span> e.onclick &amp;&amp; e.onclick;        e.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;            t &amp;&amp; t(),            i(e)        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">i</span>(<span class="hljs-params">e</span>) </span>&#123;        <span class="hljs-keyword">var</span> a = t.createElement(<span class="hljs-string">&quot;div&quot;</span>);        a.className = <span class="hljs-string">&quot;heart&quot;</span>,        d.push(&#123;            <span class="hljs-attr">el</span>: a,            <span class="hljs-attr">x</span>: e.clientX - <span class="hljs-number">5</span>,            <span class="hljs-attr">y</span>: e.clientY - <span class="hljs-number">5</span>,            <span class="hljs-attr">scale</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">alpha</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">color</span>: s()        &#125;),        t.body.appendChild(a)    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params">e</span>) </span>&#123;        <span class="hljs-keyword">var</span> a = t.createElement(<span class="hljs-string">&quot;style&quot;</span>);        a.type = <span class="hljs-string">&quot;text/css&quot;</span>;        <span class="hljs-keyword">try</span> &#123;            a.appendChild(t.createTextNode(e))        &#125; <span class="hljs-keyword">catch</span>(t) &#123;            a.styleSheet.cssText = e        &#125;        t.getElementsByTagName(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>].appendChild(a)    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rgb(&quot;</span> + ~~ (<span class="hljs-number">255</span> * <span class="hljs-built_in">Math</span>.random()) + <span class="hljs-string">&quot;,&quot;</span> + ~~ (<span class="hljs-number">255</span> * <span class="hljs-built_in">Math</span>.random()) + <span class="hljs-string">&quot;,&quot;</span> + ~~ (<span class="hljs-number">255</span> * <span class="hljs-built_in">Math</span>.random()) + <span class="hljs-string">&quot;)&quot;</span>    &#125;    <span class="hljs-keyword">var</span> d = [];    e.requestAnimationFrame = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">return</span> e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame ||        <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;            <span class="hljs-built_in">setTimeout</span>(e, <span class="hljs-number">1e3</span> / <span class="hljs-number">60</span>)        &#125;    &#125; (),    n()&#125; (<span class="hljs-built_in">window</span>, <span class="hljs-built_in">document</span>);</code></pre><p>在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\layout.ejs</font> 文件末尾添加以下代码：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 页面点击小红心 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/love.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>完成以上操作后，当我们点击鼠标的时候就可以看见爱心的特效了</p><p><img src="https://cdn.itbob.cn/img/article/003/009.jpg" alt="009"></p><hr><h2><span id="tian-jia-shu-biao-dian-ji-xian-shi-zi-ti-xiao-guo">添加鼠标点击显示字体效果</span></h2><p>在<font color="#FF0000"> \themes\hexo-theme-spfk\source\js</font> 下新建文件 <font color="#FF0000">click_show_text.js</font>，在 <font color="#FF0000">click_show_text.js</font> 文件中添加以下代码：</p><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> a_idx = <span class="hljs-number">0</span>;jQuery(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>) </span>&#123;    $(<span class="hljs-string">&quot;body&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;        <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>        (<span class="hljs-string">&quot;富强&quot;</span>, <span class="hljs-string">&quot;民主&quot;</span>, <span class="hljs-string">&quot;文明&quot;</span>, <span class="hljs-string">&quot;和谐&quot;</span>, <span class="hljs-string">&quot;自由&quot;</span>, <span class="hljs-string">&quot;平等&quot;</span>, <span class="hljs-string">&quot;公正&quot;</span>, <span class="hljs-string">&quot;法治&quot;</span>, <span class="hljs-string">&quot;爱国&quot;</span>, <span class="hljs-string">&quot;敬业&quot;</span>, <span class="hljs-string">&quot;诚信&quot;</span>, <span class="hljs-string">&quot;友善&quot;</span>);        <span class="hljs-keyword">var</span> $i = $(<span class="hljs-string">&quot;&lt;span/&gt;&quot;</span>).text(a[a_idx]);        a_idx = (a_idx + <span class="hljs-number">1</span>) % a.length;        <span class="hljs-keyword">var</span> x = e.pageX,        y = e.pageY;        $i.css(&#123;            <span class="hljs-string">&quot;z-index&quot;</span>: <span class="hljs-number">5</span>,            <span class="hljs-string">&quot;top&quot;</span>: y - <span class="hljs-number">20</span>,            <span class="hljs-string">&quot;left&quot;</span>: x,            <span class="hljs-string">&quot;position&quot;</span>: <span class="hljs-string">&quot;absolute&quot;</span>,            <span class="hljs-string">&quot;font-weight&quot;</span>: <span class="hljs-string">&quot;bold&quot;</span>,            <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;#FF0000&quot;</span>        &#125;);        $(<span class="hljs-string">&quot;body&quot;</span>).append($i);        $i.animate(&#123;            <span class="hljs-string">&quot;top&quot;</span>: y - <span class="hljs-number">180</span>,            <span class="hljs-string">&quot;opacity&quot;</span>: <span class="hljs-number">0</span>        &#125;,      <span class="hljs-number">3000</span>,      <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;          $i.remove();      &#125;);    &#125;);    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&#x27;delay()&#x27;</span>, <span class="hljs-number">2000</span>);&#125;);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delay</span>(<span class="hljs-params"></span>) </span>&#123;    $(<span class="hljs-string">&quot;.buryit&quot;</span>).removeAttr(<span class="hljs-string">&quot;onclick&quot;</span>);&#125;</code></pre><p>其中的社会主义核心价值观可以根据你自己的创意替换为其他文字</p><p>如果想要每次点击显示的文字为不同颜色，可以将其中 <code>color</code> 值进行如下更改：</p><pre><code class="hljs js"><span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;rgb(&quot;</span> + ~~(<span class="hljs-number">255</span> * <span class="hljs-built_in">Math</span>.random()) + <span class="hljs-string">&quot;,&quot;</span> + ~~(<span class="hljs-number">255</span> * <span class="hljs-built_in">Math</span>.random()) + <span class="hljs-string">&quot;,&quot;</span> + ~~(<span class="hljs-number">255</span> * <span class="hljs-built_in">Math</span>.random()) + <span class="hljs-string">&quot;)&quot;</span></code></pre><p>然后在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\layout.ejs</font> 文件末尾添加以下代码：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!--单击显示文字--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/click_show_text.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>最终实现效果如下：</p><p><img src="https://cdn.itbob.cn/img/article/003/010.png" alt="010"></p><hr><h2><span id="tian-jia-shu-biao-dian-ji-yan-hua-bao-zha-xiao-guo">添加鼠标点击烟花爆炸效果</span></h2><p>在 <font color="#FF0000">\themes\material-x\source\js</font> 目录下新建一个 <font color="#FF0000">fireworks.js</font> 的文件，里面写入以下代码：</p><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateCoords</span>(<span class="hljs-params">e</span>) </span>&#123;    pointerX = (e.clientX || e.touches[<span class="hljs-number">0</span>].clientX) - canvasEl.getBoundingClientRect().left,    pointerY = e.clientY || e.touches[<span class="hljs-number">0</span>].clientY - canvasEl.getBoundingClientRect().top&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setParticuleDirection</span>(<span class="hljs-params">e</span>) </span>&#123;    <span class="hljs-keyword">var</span> t = anime.random(<span class="hljs-number">0</span>, <span class="hljs-number">360</span>) * <span class="hljs-built_in">Math</span>.PI / <span class="hljs-number">180</span>,    a = anime.random(<span class="hljs-number">50</span>, <span class="hljs-number">180</span>),    n = [ - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>][anime.random(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)] * a;    <span class="hljs-keyword">return</span> &#123;        <span class="hljs-attr">x</span>: e.x + n * <span class="hljs-built_in">Math</span>.cos(t),        <span class="hljs-attr">y</span>: e.y + n * <span class="hljs-built_in">Math</span>.sin(t)    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createParticule</span>(<span class="hljs-params">e, t</span>) </span>&#123;    <span class="hljs-keyword">var</span> a = &#123;&#125;;    <span class="hljs-keyword">return</span> a.x = e,    a.y = t,    a.color = colors[anime.random(<span class="hljs-number">0</span>, colors.length - <span class="hljs-number">1</span>)],    a.radius = anime.random(<span class="hljs-number">16</span>, <span class="hljs-number">32</span>),    a.endPos = setParticuleDirection(a),    a.draw = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        ctx.beginPath(),        ctx.arc(a.x, a.y, a.radius, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI, !<span class="hljs-number">0</span>),        ctx.fillStyle = a.color,        ctx.fill()    &#125;,    a&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createCircle</span>(<span class="hljs-params">e, t</span>) </span>&#123;    <span class="hljs-keyword">var</span> a = &#123;&#125;;    <span class="hljs-keyword">return</span> a.x = e,    a.y = t,    a.color = <span class="hljs-string">&quot;#F00&quot;</span>,    a.radius = <span class="hljs-number">0.1</span>,    a.alpha = <span class="hljs-number">0.5</span>,    a.lineWidth = <span class="hljs-number">6</span>,    a.draw = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        ctx.globalAlpha = a.alpha,        ctx.beginPath(),        ctx.arc(a.x, a.y, a.radius, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI, !<span class="hljs-number">0</span>),        ctx.lineWidth = a.lineWidth,        ctx.strokeStyle = a.color,        ctx.stroke(),        ctx.globalAlpha = <span class="hljs-number">1</span>    &#125;,    a&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderParticule</span>(<span class="hljs-params">e</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = <span class="hljs-number">0</span>; t &lt; e.animatables.length; t++) &#123;        e.animatables[t].target.draw()    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animateParticules</span>(<span class="hljs-params">e, t</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = createCircle(e, t), n = [], i = <span class="hljs-number">0</span>; i &lt; numberOfParticules; i++) &#123;        n.push(createParticule(e, t))    &#125;    anime.timeline().add(&#123;        <span class="hljs-attr">targets</span>: n,        <span class="hljs-attr">x</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;            <span class="hljs-keyword">return</span> e.endPos.x        &#125;,        <span class="hljs-attr">y</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;            <span class="hljs-keyword">return</span> e.endPos.y        &#125;,        <span class="hljs-attr">radius</span>: <span class="hljs-number">0.1</span>,        <span class="hljs-attr">duration</span>: anime.random(<span class="hljs-number">1200</span>, <span class="hljs-number">1800</span>),        <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;easeOutExpo&quot;</span>,        <span class="hljs-attr">update</span>: renderParticule    &#125;).add(&#123;        <span class="hljs-attr">targets</span>: a,        <span class="hljs-attr">radius</span>: anime.random(<span class="hljs-number">80</span>, <span class="hljs-number">160</span>),        <span class="hljs-attr">lineWidth</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">alpha</span>: &#123;            <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;linear&quot;</span>,            <span class="hljs-attr">duration</span>: anime.random(<span class="hljs-number">600</span>, <span class="hljs-number">800</span>)        &#125;,        <span class="hljs-attr">duration</span>: anime.random(<span class="hljs-number">1200</span>, <span class="hljs-number">1800</span>),        <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;easeOutExpo&quot;</span>,        <span class="hljs-attr">update</span>: renderParticule,        <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>    &#125;)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">e, t</span>) </span>&#123;    <span class="hljs-keyword">var</span> a;    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> n = <span class="hljs-built_in">this</span>,        i = <span class="hljs-built_in">arguments</span>;        <span class="hljs-built_in">clearTimeout</span>(a),        a = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;            e.apply(n, i)        &#125;,        t)    &#125;&#125;<span class="hljs-keyword">var</span> canvasEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.fireworks&quot;</span>);<span class="hljs-keyword">if</span> (canvasEl) &#123;    <span class="hljs-keyword">var</span> ctx = canvasEl.getContext(<span class="hljs-string">&quot;2d&quot;</span>),    numberOfParticules = <span class="hljs-number">30</span>,    pointerX = <span class="hljs-number">0</span>,    pointerY = <span class="hljs-number">0</span>,    tap = <span class="hljs-string">&quot;mousedown&quot;</span>,    colors = [<span class="hljs-string">&quot;#FF1461&quot;</span>, <span class="hljs-string">&quot;#18FF92&quot;</span>, <span class="hljs-string">&quot;#5A87FF&quot;</span>, <span class="hljs-string">&quot;#FBF38C&quot;</span>],    setCanvasSize = debounce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        canvasEl.width = <span class="hljs-number">2</span> * <span class="hljs-built_in">window</span>.innerWidth,        canvasEl.height = <span class="hljs-number">2</span> * <span class="hljs-built_in">window</span>.innerHeight,        canvasEl.style.width = <span class="hljs-built_in">window</span>.innerWidth + <span class="hljs-string">&quot;px&quot;</span>,        canvasEl.style.height = <span class="hljs-built_in">window</span>.innerHeight + <span class="hljs-string">&quot;px&quot;</span>,        canvasEl.getContext(<span class="hljs-string">&quot;2d&quot;</span>).scale(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)    &#125;,    <span class="hljs-number">500</span>),    render = anime(&#123;        <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span> / <span class="hljs-number">0</span>,        <span class="hljs-attr">update</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;            ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvasEl.width, canvasEl.height)        &#125;    &#125;);    <span class="hljs-built_in">document</span>.addEventListener(tap,    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;        <span class="hljs-string">&quot;sidebar&quot;</span> !== e.target.id &amp;&amp; <span class="hljs-string">&quot;toggle-sidebar&quot;</span> !== e.target.id &amp;&amp; <span class="hljs-string">&quot;A&quot;</span> !== e.target.nodeName &amp;&amp; <span class="hljs-string">&quot;IMG&quot;</span> !== e.target.nodeName &amp;&amp; (render.play(), updateCoords(e), animateParticules(pointerX, pointerY))    &#125;,    !<span class="hljs-number">1</span>),    setCanvasSize(),    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>, setCanvasSize, !<span class="hljs-number">1</span>)&#125;<span class="hljs-meta">&quot;use strict&quot;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateCoords</span>(<span class="hljs-params">e</span>) </span>&#123;    pointerX = (e.clientX || e.touches[<span class="hljs-number">0</span>].clientX) - canvasEl.getBoundingClientRect().left,    pointerY = e.clientY || e.touches[<span class="hljs-number">0</span>].clientY - canvasEl.getBoundingClientRect().top&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setParticuleDirection</span>(<span class="hljs-params">e</span>) </span>&#123;    <span class="hljs-keyword">var</span> t = anime.random(<span class="hljs-number">0</span>, <span class="hljs-number">360</span>) * <span class="hljs-built_in">Math</span>.PI / <span class="hljs-number">180</span>,    a = anime.random(<span class="hljs-number">50</span>, <span class="hljs-number">180</span>),    n = [ - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>][anime.random(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)] * a;    <span class="hljs-keyword">return</span> &#123;        <span class="hljs-attr">x</span>: e.x + n * <span class="hljs-built_in">Math</span>.cos(t),        <span class="hljs-attr">y</span>: e.y + n * <span class="hljs-built_in">Math</span>.sin(t)    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createParticule</span>(<span class="hljs-params">e, t</span>) </span>&#123;    <span class="hljs-keyword">var</span> a = &#123;&#125;;    <span class="hljs-keyword">return</span> a.x = e,    a.y = t,    a.color = colors[anime.random(<span class="hljs-number">0</span>, colors.length - <span class="hljs-number">1</span>)],    a.radius = anime.random(<span class="hljs-number">16</span>, <span class="hljs-number">32</span>),    a.endPos = setParticuleDirection(a),    a.draw = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        ctx.beginPath(),        ctx.arc(a.x, a.y, a.radius, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI, !<span class="hljs-number">0</span>),        ctx.fillStyle = a.color,        ctx.fill()    &#125;,    a&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createCircle</span>(<span class="hljs-params">e, t</span>) </span>&#123;    <span class="hljs-keyword">var</span> a = &#123;&#125;;    <span class="hljs-keyword">return</span> a.x = e,    a.y = t,    a.color = <span class="hljs-string">&quot;#F00&quot;</span>,    a.radius = <span class="hljs-number">0.1</span>,    a.alpha = <span class="hljs-number">0.5</span>,    a.lineWidth = <span class="hljs-number">6</span>,    a.draw = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        ctx.globalAlpha = a.alpha,        ctx.beginPath(),        ctx.arc(a.x, a.y, a.radius, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI, !<span class="hljs-number">0</span>),        ctx.lineWidth = a.lineWidth,        ctx.strokeStyle = a.color,        ctx.stroke(),        ctx.globalAlpha = <span class="hljs-number">1</span>    &#125;,    a&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderParticule</span>(<span class="hljs-params">e</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = <span class="hljs-number">0</span>; t &lt; e.animatables.length; t++) &#123;        e.animatables[t].target.draw()    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animateParticules</span>(<span class="hljs-params">e, t</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = createCircle(e, t), n = [], i = <span class="hljs-number">0</span>; i &lt; numberOfParticules; i++) &#123;        n.push(createParticule(e, t))    &#125;    anime.timeline().add(&#123;        <span class="hljs-attr">targets</span>: n,        <span class="hljs-attr">x</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;            <span class="hljs-keyword">return</span> e.endPos.x        &#125;,        <span class="hljs-attr">y</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;            <span class="hljs-keyword">return</span> e.endPos.y        &#125;,        <span class="hljs-attr">radius</span>: <span class="hljs-number">0.1</span>,        <span class="hljs-attr">duration</span>: anime.random(<span class="hljs-number">1200</span>, <span class="hljs-number">1800</span>),        <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;easeOutExpo&quot;</span>,        <span class="hljs-attr">update</span>: renderParticule    &#125;).add(&#123;        <span class="hljs-attr">targets</span>: a,        <span class="hljs-attr">radius</span>: anime.random(<span class="hljs-number">80</span>, <span class="hljs-number">160</span>),        <span class="hljs-attr">lineWidth</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">alpha</span>: &#123;            <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;linear&quot;</span>,            <span class="hljs-attr">duration</span>: anime.random(<span class="hljs-number">600</span>, <span class="hljs-number">800</span>)        &#125;,        <span class="hljs-attr">duration</span>: anime.random(<span class="hljs-number">1200</span>, <span class="hljs-number">1800</span>),        <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;easeOutExpo&quot;</span>,        <span class="hljs-attr">update</span>: renderParticule,        <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>    &#125;)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">e, t</span>) </span>&#123;    <span class="hljs-keyword">var</span> a;    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> n = <span class="hljs-built_in">this</span>,        i = <span class="hljs-built_in">arguments</span>;        <span class="hljs-built_in">clearTimeout</span>(a),        a = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;            e.apply(n, i)        &#125;,        t)    &#125;&#125;<span class="hljs-keyword">var</span> canvasEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.fireworks&quot;</span>);<span class="hljs-keyword">if</span> (canvasEl) &#123;    <span class="hljs-keyword">var</span> ctx = canvasEl.getContext(<span class="hljs-string">&quot;2d&quot;</span>),    numberOfParticules = <span class="hljs-number">30</span>,    pointerX = <span class="hljs-number">0</span>,    pointerY = <span class="hljs-number">0</span>,    tap = <span class="hljs-string">&quot;mousedown&quot;</span>,    colors = [<span class="hljs-string">&quot;#FF1461&quot;</span>, <span class="hljs-string">&quot;#18FF92&quot;</span>, <span class="hljs-string">&quot;#5A87FF&quot;</span>, <span class="hljs-string">&quot;#FBF38C&quot;</span>],    setCanvasSize = debounce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        canvasEl.width = <span class="hljs-number">2</span> * <span class="hljs-built_in">window</span>.innerWidth,        canvasEl.height = <span class="hljs-number">2</span> * <span class="hljs-built_in">window</span>.innerHeight,        canvasEl.style.width = <span class="hljs-built_in">window</span>.innerWidth + <span class="hljs-string">&quot;px&quot;</span>,        canvasEl.style.height = <span class="hljs-built_in">window</span>.innerHeight + <span class="hljs-string">&quot;px&quot;</span>,        canvasEl.getContext(<span class="hljs-string">&quot;2d&quot;</span>).scale(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)    &#125;,    <span class="hljs-number">500</span>),    render = anime(&#123;        <span class="hljs-attr">duration</span>: <span class="hljs-number">1</span> / <span class="hljs-number">0</span>,        <span class="hljs-attr">update</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;            ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvasEl.width, canvasEl.height)        &#125;    &#125;);    <span class="hljs-built_in">document</span>.addEventListener(tap,    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;        <span class="hljs-string">&quot;sidebar&quot;</span> !== e.target.id &amp;&amp; <span class="hljs-string">&quot;toggle-sidebar&quot;</span> !== e.target.id &amp;&amp; <span class="hljs-string">&quot;A&quot;</span> !== e.target.nodeName &amp;&amp; <span class="hljs-string">&quot;IMG&quot;</span> !== e.target.nodeName &amp;&amp; (render.play(), updateCoords(e), animateParticules(pointerX, pointerY))    &#125;,    !<span class="hljs-number">1</span>),    setCanvasSize(),    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>, setCanvasSize, !<span class="hljs-number">1</span>)&#125;;</code></pre><p>然后在 <font color="#FF0000">\themes\material-x\layout\layout.ejs</font> 文件中写入以下代码：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fireworks&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/fireworks.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>最终效果：</p><p><img src="https://cdn.itbob.cn/img/article/003/011.gif" alt="011"></p><hr><h2><span id="tian-jia-cai-se-gun-dong-bian-huan-zi-ti">添加彩色滚动变换字体</span></h2><p>在你想要添加彩色滚动变换字体的地方写入以下代码即可，其中文字可自行更改：</p><pre><code class="hljs JavaScript">&lt;div id=<span class="hljs-string">&quot;binft&quot;</span>&gt;&lt;/div&gt;  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> binft = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">r</span>) </span>&#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">t</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> b[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * b.length)]</span></span><span class="javascript"><span class="xml">      &#125;  </span></span><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">94</span> * <span class="hljs-built_in">Math</span>.random() + <span class="hljs-number">33</span>)</span></span><span class="javascript"><span class="xml">      &#125;</span></span><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params">r</span>) </span>&#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-built_in">document</span>.createDocumentFragment(), i = <span class="hljs-number">0</span>; r &gt; i; i++) &#123;</span></span><span class="javascript"><span class="xml">          <span class="hljs-keyword">var</span> l = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;span&quot;</span>);</span></span><span class="javascript"><span class="xml">          l.textContent = e(), l.style.color = t(), n.appendChild(l)</span></span><span class="javascript"><span class="xml">        &#125;</span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> n</span></span><span class="javascript"><span class="xml">      &#125;</span></span><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">i</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">var</span> t = o[c.skillI];</span></span><span class="javascript"><span class="xml">        c.step ? c.step-- : (c.step = g, c.prefixP &lt; l.length ? (c.prefixP &gt;= <span class="hljs-number">0</span> &amp;&amp; (c.text += l[c.prefixP]), c.prefixP++) : <span class="hljs-string">&quot;forward&quot;</span> === c.direction ? c.skillP &lt; t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = <span class="hljs-string">&quot;backward&quot;</span>, c.delay = a) : c.skillP &gt; <span class="hljs-number">0</span> ? (c.text = c.text.slice(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>), c.skillP--) : (c.skillI = (c.skillI + <span class="hljs-number">1</span>) % o.length, c.direction = <span class="hljs-string">&quot;forward&quot;</span>)), r.textContent = c.text, r.appendChild(n(c.prefixP &lt; l.length ? <span class="hljs-built_in">Math</span>.min(s, s + c.prefixP) : <span class="hljs-built_in">Math</span>.min(s, t.length - c.skillP))), <span class="hljs-built_in">setTimeout</span>(i, d)</span></span><span class="javascript"><span class="xml">      &#125;</span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">var</span> l = <span class="hljs-string">&quot;&quot;</span>,</span></span><span class="javascript"><span class="xml">      o = [<span class="hljs-string">&quot;青青陵上柏，磊磊涧中石。&quot;</span>, <span class="hljs-string">&quot;人生天地间，忽如远行客。&quot;</span>,<span class="hljs-string">&quot;斗酒相娱乐，聊厚不为薄。&quot;</span>, <span class="hljs-string">&quot;驱车策驽马，游戏宛与洛。&quot;</span>,<span class="hljs-string">&quot;洛中何郁郁，冠带自相索。&quot;</span>,<span class="hljs-string">&quot;长衢罗夹巷，王侯多第宅。&quot;</span>,<span class="hljs-string">&quot;两宫遥相望，双阙百余尺。&quot;</span>,<span class="hljs-string">&quot;极宴娱心意，戚戚何所迫？&quot;</span>].map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">r</span>) </span>&#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">return</span> r + <span class="hljs-string">&quot;&quot;</span></span></span><span class="javascript"><span class="xml">      &#125;),</span></span><span class="javascript"><span class="xml">      a = <span class="hljs-number">2</span>,</span></span><span class="javascript"><span class="xml">      g = <span class="hljs-number">1</span>,</span></span><span class="javascript"><span class="xml">      s = <span class="hljs-number">5</span>,</span></span><span class="javascript"><span class="xml">      d = <span class="hljs-number">75</span>,</span></span><span class="javascript"><span class="xml">      b = [<span class="hljs-string">&quot;rgb(110,64,170)&quot;</span>, <span class="hljs-string">&quot;rgb(150,61,179)&quot;</span>, <span class="hljs-string">&quot;rgb(191,60,175)&quot;</span>, <span class="hljs-string">&quot;rgb(228,65,157)&quot;</span>, <span class="hljs-string">&quot;rgb(254,75,131)&quot;</span>, <span class="hljs-string">&quot;rgb(255,94,99)&quot;</span>, <span class="hljs-string">&quot;rgb(255,120,71)&quot;</span>, <span class="hljs-string">&quot;rgb(251,150,51)&quot;</span>, <span class="hljs-string">&quot;rgb(226,183,47)&quot;</span>, <span class="hljs-string">&quot;rgb(198,214,60)&quot;</span>, <span class="hljs-string">&quot;rgb(175,240,91)&quot;</span>, <span class="hljs-string">&quot;rgb(127,246,88)&quot;</span>, <span class="hljs-string">&quot;rgb(82,246,103)&quot;</span>, <span class="hljs-string">&quot;rgb(48,239,130)&quot;</span>, <span class="hljs-string">&quot;rgb(29,223,163)&quot;</span>, <span class="hljs-string">&quot;rgb(26,199,194)&quot;</span>, <span class="hljs-string">&quot;rgb(35,171,216)&quot;</span>, <span class="hljs-string">&quot;rgb(54,140,225)&quot;</span>, <span class="hljs-string">&quot;rgb(76,110,219)&quot;</span>, <span class="hljs-string">&quot;rgb(96,84,200)&quot;</span>],</span></span><span class="javascript"><span class="xml">      c = &#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><span class="javascript"><span class="xml">        <span class="hljs-attr">prefixP</span>: -s,</span></span><span class="javascript"><span class="xml">        <span class="hljs-attr">skillI</span>: <span class="hljs-number">0</span>,</span></span><span class="javascript"><span class="xml">        <span class="hljs-attr">skillP</span>: <span class="hljs-number">0</span>,</span></span><span class="javascript"><span class="xml">        <span class="hljs-attr">direction</span>: <span class="hljs-string">&quot;forward&quot;</span>,</span></span><span class="javascript"><span class="xml">        <span class="hljs-attr">delay</span>: a,</span></span><span class="javascript"><span class="xml">        <span class="hljs-attr">step</span>: g</span></span><span class="javascript"><span class="xml">      &#125;;</span></span><span class="javascript"><span class="xml">      i()</span></span><span class="javascript"><span class="xml">      &#125;;</span></span><span class="javascript"><span class="xml">      binft(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;binft&#x27;</span>));</span></span><span class="javascript"><span class="xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre><p>最终效果：</p><p><img src="https://cdn.itbob.cn/img/article/003/012.gif" alt="012"></p><hr><h2><span id="tian-jia-zi-shu-tong-ji-he-yue-du-shi-chang">添加字数统计和阅读时长</span></h2><p>先在博客目录下执行以下命令安装 <font color="#FF0000">hexo-wordcount</font> 插件：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm i --save hexo-wordcount</span></code></pre><p>注意：在 <a href="https://xaoxuu.com/wiki/material-x/">Material X</a> 主题中，字数统计和阅读时长的功能我已提交 PR，在最新版本中，只需要安装插件后，在主题 <code>config.yml</code> 配置文件里，将 <code>word_count</code> 关键字设置为 <code>true</code> 即可，对于旧版本，可以通过以下方法实现：</p><p>以 <a href="https://xaoxuu.com/wiki/material-x/">Material X</a> 主题（版本 1.2.1）为例，在 <font color="#FF0000">\themes\material-x\layout\_meta</font> 目录下创建 <font color="#FF0000">word.ejs</font> 文件，在 <font color="#FF0000">word.ejs</font> 文件中写入以下代码：</p><pre><code class="hljs JS">&lt;% <span class="hljs-keyword">if</span>(isPostList || !isPostList)&#123; %&gt;  &lt;% <span class="hljs-keyword">if</span> (theme.word_count &amp;&amp; !post.no_word_count) &#123; %&gt;    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-right: 10px;&quot;</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-time&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-keyboard&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-text&quot;</span>&gt;</span>  字数统计: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>&lt;%= wordcount(post.content) %&gt;字<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">      <span class="hljs-symbol">&amp;nbsp;</span> | <span class="hljs-symbol">&amp;nbsp;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-time&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-hourglass-half&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-text&quot;</span>&gt;</span>  阅读时长≈<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>&lt;%= min2read(post.content) %&gt;分<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  &lt;% &#125; %&gt;&lt;% &#125; %&gt;</code></pre><p>然后在主题的配置文件 <font color="#FF0000">_config.yml</font> 找到 <font color="#FF0000">meta</font> 关键字，将 <font color="#FF0000">word</font> 填入 <font color="#FF0000">header</font> 中：</p><pre><code class="hljs bash">meta:  header: [title, author, date, categories, tags, counter, word, top]  footer: [updated, share]</code></pre><p>最后在主题目录下的 <font color="#FF0000">_config.yml</font> 添加以下配置即可</p><pre><code class="hljs yaml"><span class="hljs-attr">word_count:</span> <span class="hljs-literal">true</span></code></pre><p>效果图：</p><p><img src="https://cdn.itbob.cn/img/article/003/036.png" alt="036"></p><hr><p>同样的，以 <a href="https://github.com/luuman/hexo-theme-spfk">spfk</a> 主题为例，在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\post</font> 目录下创建 <font color="#FF0000">word.ejs</font> 文件，在 <font color="#FF0000">word.ejs</font> 文件中写入以下代码：</p><pre><code class="hljs JavaScript">&lt;div style=<span class="hljs-string">&quot;margin-top:10px;&quot;</span>&gt;    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-time&quot;</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-keyboard-o&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-text&quot;</span>&gt;</span>  字数统计: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>&lt;%= wordcount(post.content) %&gt;字<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>    &amp;nbsp; | &amp;nbsp;    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-time&quot;</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-hourglass-half&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-text&quot;</span>&gt;</span>  阅读时长: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>&lt;%= min2read(post.content) %&gt;分<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>&lt;/div&gt;</code></pre><p>然后在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\article.ejs</font> 中适当位置添加以下代码：</p><p><img src="https://cdn.itbob.cn/img/article/003/013.jpg" alt="013"></p><p>最后在主题目录下的 <font color="#FF0000">_config.yml</font> 添加以下配置</p><pre><code class="hljs yaml"><span class="hljs-attr">word_count:</span> <span class="hljs-literal">true</span></code></pre><p>如果显示的位置不好，可以自行更改其位置，成功配置后的效果如下：</p><p><img src="https://cdn.itbob.cn/img/article/003/014.jpg" alt="014"></p><p><img src="https://cdn.itbob.cn/img/article/003/015.png" alt="015"></p><p>另外：要在博客底部显示所有文章的总字数，可以<a href="https://www.npmjs.com/package/hexo-wordcount">点击此处</a>，根据你博客底部文件的类型选择相应的代码放在适当的位置即可，前提是要安装好 <font color="#FF0000">hexo-wordcount</font> 插件，例如我使用 <a href="https://xaoxuu.com/wiki/material-x/">Material X</a> 主题，在 <font color="#FF0000">\themes\material-x\layout\_partial</font> 目录下的 <font color="#FF0000">footer.ejs</font> 文件中添加如下代码：</p><pre><code class="hljs JavaScript">&lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;fas fa-chart-area&quot;</span>&gt;&lt;/i&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>字数统计：&lt;%= totalcount(site) %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></code></pre><p>实现效果如下：</p><p><img src="https://cdn.itbob.cn/img/article/003/016.png" alt="016"></p><hr><h2><span id="tian-jia-bei-jing-yin-le">添加背景音乐</span></h2><p>打开网页版<a href="https://music.163.com/">网易云音乐</a>，选择你准备添加的背景音乐，点击生成外链播放器，前提是要有版权，不然是无法生成外链播放器的，复制底下的HTML代码</p><p><img src="https://cdn.itbob.cn/img/article/003/017.jpg" alt="017"></p><p><img src="https://cdn.itbob.cn/img/article/003/018.jpg" alt="018"></p><p>然后将此代码放到你想要放的地方，比如放在博客的左侧，则打开 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\left-col.ejs</font> 文件，将复制的HTML代码粘贴进去，再进行适当的位置设置让播放器更美观，其中 <font color="#FF0000">auto=1</font> 表示打开网页自动播放音乐，<font color="#FF0000">auto=0</font> 表示关闭自动播放音乐</p><p><img src="https://cdn.itbob.cn/img/article/003/019.jpg" alt="019"></p><p>最后效果如下：</p><p><img src="https://cdn.itbob.cn/img/article/003/020.jpg" alt="020"></p><p>这种网易云音乐外链的方式有很多局限性，因此推荐使用<font color="#FF0000">aplayer</font>，GitHub地址为：<a href="https://github.com/MoePlayer/APlayer">https://github.com/MoePlayer/APlayer</a> ，参考教程：<a href="https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html">《hexo上的aplayer应用》</a></p><hr><h2><span id="tian-jia-wang-zhan-yun-xing-shi-jian">添加网站运行时间</span></h2><p>一个比较好的小功能，可以看见自己的博客运行多久了，时间一天天的增加，成就感也会一天天增加的<br>在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\footer.ejs</font> 文件下添加以下代码：</p><pre><code class="hljs JavaScript">&lt;span id=<span class="hljs-string">&quot;timeDate&quot;</span>&gt;载入天数...&lt;<span class="hljs-regexp">/span&gt;&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/</span>span&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); </span></span><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createtime</span>(<span class="hljs-params"></span>) </span>&#123; </span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">var</span> grt= <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;08/10/2018 17:38:00&quot;</span>);<span class="hljs-comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span></span></span><span class="javascript"><span class="xml">        now.setTime(now.getTime()+<span class="hljs-number">250</span>); </span></span><span class="javascript"><span class="xml">        days = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>; dnum = <span class="hljs-built_in">Math</span>.floor(days); </span></span><span class="javascript"><span class="xml">        hours = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum); hnum = <span class="hljs-built_in">Math</span>.floor(hours); </span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(hnum).length ==<span class="hljs-number">1</span> )&#123;hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum); </span></span><span class="javascript"><span class="xml">        mnum = <span class="hljs-built_in">Math</span>.floor(minutes); <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(mnum).length ==<span class="hljs-number">1</span> )&#123;mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;&#125; </span></span><span class="javascript"><span class="xml">        seconds = (now - grt ) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum); </span></span><span class="javascript"><span class="xml">        snum = <span class="hljs-built_in">Math</span>.round(seconds); <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(snum).length ==<span class="hljs-number">1</span> )&#123;snum = <span class="hljs-string">&quot;0&quot;</span> + snum;&#125; </span></span><span class="javascript"><span class="xml">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;timeDate&quot;</span>).innerHTML = <span class="hljs-string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="hljs-string">&quot; 天 &quot;</span>; </span></span><span class="javascript"><span class="xml">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;times&quot;</span>).innerHTML = hnum + <span class="hljs-string">&quot; 小时 &quot;</span> + mnum + <span class="hljs-string">&quot; 分 &quot;</span> + snum + <span class="hljs-string">&quot; 秒&quot;</span>; </span></span><span class="javascript"><span class="xml">    &#125; </span></span><span class="javascript"><span class="xml"><span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;createtime()&quot;</span>,<span class="hljs-number">250</span>);</span></span><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre><p>最后效果如下：</p><p><img src="https://cdn.itbob.cn/img/article/003/021.png" alt="021"></p><hr><h2><span id="tian-jia-bai-du-tong-ji">添加百度统计</span></h2><p>百度统计是百度推出的一款免费的专业网站流量分析工具，能够告诉用户访客是如何找到并浏览用户的网站，在网站上做了些什么，非常有趣，接下来我们把百度统计添加到自己博客当中</p><p>访问<a href="https://tongji.baidu.com">百度统计首页</a>，注册一个账号后登陆，添加你的博客网站</p><p><img src="https://cdn.itbob.cn/img/article/003/022.jpg" alt="022"></p><p>接着点击代码获取，复制该代码</p><p><img src="https://cdn.itbob.cn/img/article/003/023.jpg" alt="023"></p><p>然后到目录 <font color="#FF0000">\Hexo\themes\hexo-theme-spfk\layout\_partial</font> 下新建一个 <font color="#FF0000">baidu-analytics.ejs</font> 文件，里面粘贴你刚刚复制的代码</p><p><img src="https://cdn.itbob.cn/img/article/003/024.jpg" alt="024"></p><p>修改主题文件夹下的 <font color="#FF0000">_config.yml</font> 文件，将你的key（图中涂掉部分）填写进去：</p><p><img src="https://cdn.itbob.cn/img/article/003/025.jpg" alt="025"></p><p>所有操作完成后可以在百度统计管理页面检查代码是否安装成功，如果代码安装正确，一般20分钟后，可以查看网站分析数据</p><p><img src="https://cdn.itbob.cn/img/article/003/026.jpg" alt="026"></p><p>另外推荐：<a href="https://web.umeng.com/main.php?c=user&amp;a=index">友盟</a>，2010年4月在北京成立，安全、可靠、公正、第三方的网站流量统计分析系统</p><hr><h2><span id="liu-lan-qi-wang-ye-biao-ti-e-gao">浏览器网页标题恶搞</span></h2><p>当用户访问你的博客时点击到了其他网页，我们可以恶搞一下网页标题，呼唤用户回来，首先在目录 <font color="#FF0000">\themes\material-x\source\js</font> 下新建一个 <font color="#FF0000">FunnyTitle.js</font> 文件，在里面填写如下代码：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 浏览器搞笑标题</span><span class="hljs-keyword">var</span> OriginTitle = <span class="hljs-built_in">document</span>.title;<span class="hljs-keyword">var</span> titleTime;<span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;visibilitychange&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.hidden) &#123;        $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/funny.ico&quot;</span>);        <span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;╭(°A°`)╮ 页面崩溃啦 ~&#x27;</span>;        <span class="hljs-built_in">clearTimeout</span>(titleTime);    &#125;    <span class="hljs-keyword">else</span> &#123;        $(<span class="hljs-string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&quot;/favicon.ico&quot;</span>);        <span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~&#x27;</span> + OriginTitle;        titleTime = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-built_in">document</span>.title = OriginTitle;        &#125;, <span class="hljs-number">2000</span>);    &#125;&#125;);</code></pre><p>其中 <code>funny.ico</code> 是用户切换到其他标签后你网站的图标，<code>favicon.ico</code> 是正常图标，然后在 <font color="#FF0000">\themes\material-x\layout\layout.ejs</font> 文件中添加如下代码：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--浏览器搞笑标题--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/FunnyTitle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>再次部署博客后就可以看见标题搞笑的效果了：</p><p><img src="https://cdn.itbob.cn/img/article/003/027.jpg" alt="027"></p><p><img src="https://cdn.itbob.cn/img/article/003/028.jpg" alt="028"></p><hr><h2><span id="bei-jing-tian-jia-dong-tai-xian-tiao-xiao-guo">背景添加动态线条效果</span></h2><p>在 <font color="#FF0000">\Hexo\themes\hexo-theme-spfk\layout\layout.ejs</font> 文件中添加如下代码：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!--动态线条背景--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">color</span>=<span class="hljs-string">&quot;220,220,220&quot;</span> <span class="hljs-attr">opacity</span>=<span class="hljs-string">&#x27;0.7&#x27;</span> <span class="hljs-attr">zIndex</span>=<span class="hljs-string">&quot;-2&quot;</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>其中：</p><ul><li>color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）</li><li>opacity：表示线条透明度（0~1），默认：0.5</li><li>count：表示线条的总数量，默认：150</li><li>zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</li></ul><p>最终实现效果：</p><p><img src="https://cdn.itbob.cn/img/article/003/029.jpg" alt="029"></p><hr><h2><span id="tian-jia-ren-ti-shi-zhong">添加人体时钟</span></h2><p>无意中发现了个有趣的人体时钟 HONE HONE CLOCK，作者是个日本人，<a href="http://chabudai.org/blog/">点击此处</a>访问作者博客，<a href="http://chabudai.org/blog/?p=59">点击此处</a>在作者原博客上查看动态样式，<a href="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf">点击此处</a>查看动态大图，如果你的博客上有合适的地方，加上一个人体时钟会很有趣的</p><p><img src="https://cdn.itbob.cn/img/article/003/030.png" alt="030"></p><p>实现代码：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!--人体时钟背景透明--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;Shift_JIS&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--人体时钟背景白--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;Shift_JIS&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>其他网页小挂件推荐：</p><ul><li><a href="http://abowman.com/">http://abowman.com/</a> 里面有很多有趣的小挂件，可以养养鱼、龟、狗、仓鼠等各式各样的虚拟宠物，能根据你的鼠标指针位置移动，直接复制代码就可以用</li><li><a href="http://www.revolvermaps.com/">http://www.revolvermaps.com/</a> 它提供网站访客地理信息，可以以2D、3D等形式显示</li><li><a href="http://www.amazingcounters.com/">http://www.amazingcounters.com/</a> 免费网站计数器，有非常多的样式供你选择，可以设置计数器初始数值，可以设置按访问量计数，也可以按独立访问者计数</li><li><a href="https://www.seniverse.com/widget/get">https://www.seniverse.com/widget/get</a> 心知天气提供基于Web的免费天气插件，可以为你的网站添加一项简洁美观的天气预报功能，并自动适配PC和手机上的浏览</li></ul><hr><h2><span id="tian-jia-rss-ding-yue">添加RSS订阅</span></h2><p>RSS订阅是站点用来和其他站点之间共享内容的一种简易方式，即Really Simple Syndication（简易信息聚合），如果不会使用，可以参见百度百科：<a href="https://baike.baidu.com/item/RSS%E8%AE%A2%E9%98%85/663114">https://baike.baidu.com/item/RSS订阅/663114</a> ；首先我们安装feed插件，在本地hexo目录下右键<code>git bash here</code>，输入以下命令：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install hexo-generator-feed</span></code></pre><p>等待安装完成后，打开hexo目录下配置文件的<code>_config.yml</code>，在末尾添加以下配置：</p><pre><code class="hljs yaml"><span class="hljs-comment"># Extensions</span><span class="hljs-comment">## Plugins: http://hexo.io/plugins/</span><span class="hljs-comment">#RSS订阅</span><span class="hljs-attr">plugin:</span><span class="hljs-bullet">-</span> <span class="hljs-string">hexo-generator-feed</span><span class="hljs-comment">#Feed Atom</span><span class="hljs-attr">feed:</span><span class="hljs-attr">type:</span> <span class="hljs-string">atom</span><span class="hljs-attr">path:</span> <span class="hljs-string">atom.xml</span><span class="hljs-attr">limit:</span> <span class="hljs-number">20</span></code></pre><p>随后打开主题配置文件<code>_config.yml</code>，添加以下配置：</p><pre><code class="hljs yaml"><span class="hljs-attr">rss:</span> <span class="hljs-string">/atom.xml</span></code></pre><p>至此，RSS订阅功能添加完成</p><hr><h2><span id="tian-jia-wang-zhan-xue-hua-piao-luo-xiao-guo">添加网站雪花飘落效果</span></h2><p>样式一和样式二分别如下：</p><p><img src="https://cdn.itbob.cn/img/article/003/031.jpg" alt="031"></p><p><img src="https://cdn.itbob.cn/img/article/003/032.jpg" alt="032"></p><p>实现方法：在 <font color="#FF0000">\Hexo\themes\hexo-theme-spfk\source\js</font> 目录下新建一个 <font color="#FF0000">snow.js</font> 文件，粘贴以下代码：</p><pre><code class="hljs JavaScript"><span class="hljs-comment">/*样式一*/</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$</span>)</span>&#123;    $.fn.snow = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)</span>&#123;    <span class="hljs-keyword">var</span> $flake = $(<span class="hljs-string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).css(&#123;<span class="hljs-string">&#x27;position&#x27;</span>: <span class="hljs-string">&#x27;absolute&#x27;</span>,<span class="hljs-string">&#x27;z-index&#x27;</span>:<span class="hljs-string">&#x27;9999&#x27;</span>, <span class="hljs-string">&#x27;top&#x27;</span>: <span class="hljs-string">&#x27;-50px&#x27;</span>&#125;).html(<span class="hljs-string">&#x27;&amp;#10052;&#x27;</span>),    documentHeight = $(<span class="hljs-built_in">document</span>).height(),    documentWidth= $(<span class="hljs-built_in">document</span>).width(),    defaults = &#123;        <span class="hljs-attr">minSize</span>: <span class="hljs-number">10</span>,        <span class="hljs-attr">maxSize</span>: <span class="hljs-number">20</span>,        <span class="hljs-attr">newOn</span>: <span class="hljs-number">1000</span>,        <span class="hljs-attr">flakeColor</span>: <span class="hljs-string">&quot;#AFDAEF&quot;</span> <span class="hljs-comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span>    &#125;,    options= $.extend(&#123;&#125;, defaults, options);    <span class="hljs-keyword">var</span> interval= <span class="hljs-built_in">setInterval</span>( <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">var</span> startPositionLeft = <span class="hljs-built_in">Math</span>.random() * documentWidth - <span class="hljs-number">100</span>,    startOpacity = <span class="hljs-number">0.5</span> + <span class="hljs-built_in">Math</span>.random(),    sizeFlake = options.minSize + <span class="hljs-built_in">Math</span>.random() * options.maxSize,    endPositionTop = documentHeight - <span class="hljs-number">200</span>,    endPositionLeft = startPositionLeft - <span class="hljs-number">500</span> + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">500</span>,    durationFall = documentHeight * <span class="hljs-number">10</span> + <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">5000</span>;    $flake.clone().appendTo(<span class="hljs-string">&#x27;body&#x27;</span>).css(&#123;        <span class="hljs-attr">left</span>: startPositionLeft,        <span class="hljs-attr">opacity</span>: startOpacity,        <span class="hljs-string">&#x27;font-size&#x27;</span>: sizeFlake,        <span class="hljs-attr">color</span>: options.flakeColor    &#125;).animate(&#123;        <span class="hljs-attr">top</span>: endPositionTop,        <span class="hljs-attr">left</span>: endPositionLeft,        <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.2</span>    &#125;,durationFall,<span class="hljs-string">&#x27;linear&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        $(<span class="hljs-built_in">this</span>).remove()    &#125;);    &#125;, options.newOn);    &#125;;&#125;)(jQuery);$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    $.fn.snow(&#123;         <span class="hljs-attr">minSize</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">/* 定义雪花最小尺寸 */</span>        <span class="hljs-attr">maxSize</span>: <span class="hljs-number">50</span>,<span class="hljs-comment">/* 定义雪花最大尺寸 */</span>        <span class="hljs-attr">newOn</span>: <span class="hljs-number">300</span>  <span class="hljs-comment">/* 定义密集程度，数字越小越密集 */</span>    &#125;);&#125;);</code></pre><pre><code class="hljs JS"><span class="hljs-comment">/*样式二*/</span><span class="hljs-comment">/* 控制下雪 */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">snowFall</span>(<span class="hljs-params">snow</span>) </span>&#123;    <span class="hljs-comment">/* 可配置属性 */</span>    snow = snow || &#123;&#125;;    <span class="hljs-built_in">this</span>.maxFlake = snow.maxFlake || <span class="hljs-number">200</span>;   <span class="hljs-comment">/* 最多片数 */</span>    <span class="hljs-built_in">this</span>.flakeSize = snow.flakeSize || <span class="hljs-number">10</span>;  <span class="hljs-comment">/* 雪花形状 */</span>    <span class="hljs-built_in">this</span>.fallSpeed = snow.fallSpeed || <span class="hljs-number">1</span>;   <span class="hljs-comment">/* 坠落速度 */</span>&#125;<span class="hljs-comment">/* 兼容写法 */</span>requestAnimationFrame = <span class="hljs-built_in">window</span>.requestAnimationFrame ||    <span class="hljs-built_in">window</span>.mozRequestAnimationFrame ||    <span class="hljs-built_in">window</span>.webkitRequestAnimationFrame ||    <span class="hljs-built_in">window</span>.msRequestAnimationFrame ||    <span class="hljs-built_in">window</span>.oRequestAnimationFrame ||    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) </span>&#123; <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>); &#125;;cancelAnimationFrame = <span class="hljs-built_in">window</span>.cancelAnimationFrame ||    <span class="hljs-built_in">window</span>.mozCancelAnimationFrame ||    <span class="hljs-built_in">window</span>.webkitCancelAnimationFrame ||    <span class="hljs-built_in">window</span>.msCancelAnimationFrame ||    <span class="hljs-built_in">window</span>.oCancelAnimationFrame;<span class="hljs-comment">/* 开始下雪 */</span>snowFall.prototype.start = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-comment">/* 创建画布 */</span>    snowCanvas.apply(<span class="hljs-built_in">this</span>);    <span class="hljs-comment">/* 创建雪花形状 */</span>    createFlakes.apply(<span class="hljs-built_in">this</span>);    <span class="hljs-comment">/* 画雪 */</span>    drawSnow.apply(<span class="hljs-built_in">this</span>)&#125;<span class="hljs-comment">/* 创建画布 */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">snowCanvas</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-comment">/* 添加Dom结点 */</span>    <span class="hljs-keyword">var</span> snowcanvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;canvas&quot;</span>);    snowcanvas.id = <span class="hljs-string">&quot;snowfall&quot;</span>;    snowcanvas.width = <span class="hljs-built_in">window</span>.innerWidth;    snowcanvas.height = <span class="hljs-built_in">document</span>.body.clientHeight;    snowcanvas.setAttribute(<span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-string">&quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>);    <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].appendChild(snowcanvas);    <span class="hljs-built_in">this</span>.canvas = snowcanvas;    <span class="hljs-built_in">this</span>.ctx = snowcanvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);    <span class="hljs-comment">/* 窗口大小改变的处理 */</span>    <span class="hljs-built_in">window</span>.onresize = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        snowcanvas.width = <span class="hljs-built_in">window</span>.innerWidth;        <span class="hljs-comment">/* snowcanvas.height = window.innerHeight */</span>    &#125;&#125;<span class="hljs-comment">/* 雪运动对象 */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flakeMove</span>(<span class="hljs-params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;    <span class="hljs-built_in">this</span>.x = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * canvasWidth);   <span class="hljs-comment">/* x坐标 */</span>    <span class="hljs-built_in">this</span>.y = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * canvasHeight);  <span class="hljs-comment">/* y坐标 */</span>    <span class="hljs-built_in">this</span>.size = <span class="hljs-built_in">Math</span>.random() * flakeSize + <span class="hljs-number">2</span>;          <span class="hljs-comment">/* 形状 */</span>    <span class="hljs-built_in">this</span>.maxSize = flakeSize;                           <span class="hljs-comment">/* 最大形状 */</span>    <span class="hljs-built_in">this</span>.speed = <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">1</span> + fallSpeed;         <span class="hljs-comment">/* 坠落速度 */</span>    <span class="hljs-built_in">this</span>.fallSpeed = fallSpeed;                         <span class="hljs-comment">/* 坠落速度 */</span>    <span class="hljs-built_in">this</span>.velY = <span class="hljs-built_in">this</span>.speed;                             <span class="hljs-comment">/* Y方向速度 */</span>    <span class="hljs-built_in">this</span>.velX = <span class="hljs-number">0</span>;                                      <span class="hljs-comment">/* X方向速度 */</span>    <span class="hljs-built_in">this</span>.stepSize = <span class="hljs-built_in">Math</span>.random() / <span class="hljs-number">30</span>;                 <span class="hljs-comment">/* 步长 */</span>    <span class="hljs-built_in">this</span>.step = <span class="hljs-number">0</span>                                       <span class="hljs-comment">/* 步数 */</span>&#125;flakeMove.prototype.update = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x,        y = <span class="hljs-built_in">this</span>.y;    <span class="hljs-comment">/* 左右摆动(余弦) */</span>    <span class="hljs-built_in">this</span>.velX *= <span class="hljs-number">0.98</span>;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.velY &lt;= <span class="hljs-built_in">this</span>.speed) &#123;        <span class="hljs-built_in">this</span>.velY = <span class="hljs-built_in">this</span>.speed    &#125;    <span class="hljs-built_in">this</span>.velX += <span class="hljs-built_in">Math</span>.cos(<span class="hljs-built_in">this</span>.step += <span class="hljs-number">.05</span>) * <span class="hljs-built_in">this</span>.stepSize;    <span class="hljs-built_in">this</span>.y += <span class="hljs-built_in">this</span>.velY;    <span class="hljs-built_in">this</span>.x += <span class="hljs-built_in">this</span>.velX;    <span class="hljs-comment">/* 飞出边界的处理 */</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.x &gt;= canvas.width || <span class="hljs-built_in">this</span>.x &lt;= <span class="hljs-number">0</span> || <span class="hljs-built_in">this</span>.y &gt;= canvas.height || <span class="hljs-built_in">this</span>.y &lt;= <span class="hljs-number">0</span>) &#123;        <span class="hljs-built_in">this</span>.reset(canvas.width, canvas.height)    &#125;&#125;;<span class="hljs-comment">/* 飞出边界-放置最顶端继续坠落 */</span>flakeMove.prototype.reset = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">width, height</span>) </span>&#123;    <span class="hljs-built_in">this</span>.x = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * width);    <span class="hljs-built_in">this</span>.y = <span class="hljs-number">0</span>;    <span class="hljs-built_in">this</span>.size = <span class="hljs-built_in">Math</span>.random() * <span class="hljs-built_in">this</span>.maxSize + <span class="hljs-number">2</span>;    <span class="hljs-built_in">this</span>.speed = <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">1</span> + <span class="hljs-built_in">this</span>.fallSpeed;    <span class="hljs-built_in">this</span>.velY = <span class="hljs-built_in">this</span>.speed;    <span class="hljs-built_in">this</span>.velX = <span class="hljs-number">0</span>;&#125;;<span class="hljs-comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span>flakeMove.prototype.render = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ctx</span>) </span>&#123;    <span class="hljs-keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="hljs-built_in">this</span>.x, <span class="hljs-built_in">this</span>.y, <span class="hljs-number">0</span>, <span class="hljs-built_in">this</span>.x, <span class="hljs-built_in">this</span>.y, <span class="hljs-built_in">this</span>.size);    snowFlake.addColorStop(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.9)&quot;</span>);  <span class="hljs-comment">/* 此处是雪花颜色，默认是白色 */</span>    snowFlake.addColorStop(<span class="hljs-number">.5</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0.5)&quot;</span>); <span class="hljs-comment">/* 若要改为其他颜色，请自行查 */</span>    snowFlake.addColorStop(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;rgba(255, 255, 255, 0)&quot;</span>);    <span class="hljs-comment">/* 找16进制的RGB 颜色代码。 */</span>    ctx.save();    ctx.fillStyle = snowFlake;    ctx.beginPath();    ctx.arc(<span class="hljs-built_in">this</span>.x, <span class="hljs-built_in">this</span>.y, <span class="hljs-built_in">this</span>.size, <span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.PI * <span class="hljs-number">2</span>);    ctx.fill();    ctx.restore();&#125;;<span class="hljs-comment">/* 创建雪花-定义形状 */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createFlakes</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-built_in">this</span>.maxFlake,        flakes = <span class="hljs-built_in">this</span>.flakes = [],        canvas = <span class="hljs-built_in">this</span>.canvas;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; maxFlake; i++) &#123;        flakes.push(<span class="hljs-keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="hljs-built_in">this</span>.flakeSize, <span class="hljs-built_in">this</span>.fallSpeed))    &#125;&#125;<span class="hljs-comment">/* 画雪 */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drawSnow</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> maxFlake = <span class="hljs-built_in">this</span>.maxFlake,        flakes = <span class="hljs-built_in">this</span>.flakes;    ctx = <span class="hljs-built_in">this</span>.ctx, canvas = <span class="hljs-built_in">this</span>.canvas, that = <span class="hljs-built_in">this</span>;    <span class="hljs-comment">/* 清空雪花 */</span>    ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.width, canvas.height);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = <span class="hljs-number">0</span>; e &lt; maxFlake; e++) &#123;        flakes[e].update();        flakes[e].render(ctx);    &#125;    <span class="hljs-comment">/*  一帧一帧的画 */</span>    <span class="hljs-built_in">this</span>.loop = requestAnimationFrame(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        drawSnow.apply(that);    &#125;);&#125;<span class="hljs-comment">/* 调用及控制方法 */</span><span class="hljs-keyword">var</span> snow = <span class="hljs-keyword">new</span> snowFall(&#123;<span class="hljs-attr">maxFlake</span>:<span class="hljs-number">60</span>&#125;);snow.start();</code></pre><p>然后在 <font color="#FF0000">\Hexo\themes\hexo-theme-spfk\layout\layout.ejs</font> 文件里引用即可：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 雪花特效 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;\js\snow.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>如果没效果，请确认网页是否已载入JQurey，如果没有请在下雪代码之前引入JQ即可：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>原文链接：<a href="https://ihuan.me/2172.html">《分享两种圣诞节雪花特效JS代码(网站下雪效果)》</a></p><hr><h2><span id="tian-jia-fork-me-on-github-xiao-guo">添加 Fork me on GitHub 效果</span></h2><p>效果图：</p><p><img src="https://cdn.itbob.cn/img/article/003/033.jpg" alt="033"></p><p><a href="https://blog.github.com/2008-12-19-github-ribbons/">点击此处</a>可以查看更多样式，将相应样式的代码复制到你想要放的地方就OK了，代码里的链接也要替换成你的，更多创意，比如 Follow me on CSDN ，只需要用PS改掉图片里的文字，替换掉相应链接即可</p><hr><h2><span id="tian-jia-bei-jing-dong-tai-cai-dai-xiao-guo">添加背景动态彩带效果</span></h2><p>样式一是鼠标点击后彩带自动更换样式，样式二是飘动的彩带：</p><p><img src="https://cdn.itbob.cn/img/article/003/034.jpg" alt="034"></p><p>实现方法：在 <font color="#FF0000">\themes\material-x\layout\layout.ejs</font> 文件的<font color="#FF0000">body</font>前面添加如下代码：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 样式一（鼠标点击更换样式） --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://g.joyinshare.com/hc/ribbon.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 样式二（飘动的彩带） --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://g.joyinshare.com/hc/piao.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><hr><h2><span id="tian-jia-bei-jing-dai-ma-yu-te-xiao">添加背景代码雨特效</span></h2><p>新建 <code>DigitalRain.js</code>，写入以下代码：</p><pre><code class="hljs JS"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-comment">//获取画布对象</span>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;canvas&quot;</span>);    <span class="hljs-comment">//获取画布的上下文</span>    <span class="hljs-keyword">var</span> context =canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);    <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">window</span>.screen;    <span class="hljs-keyword">var</span> W = canvas.width = s.width;    <span class="hljs-keyword">var</span> H = canvas.height;    <span class="hljs-comment">//获取浏览器屏幕的宽度和高度</span>    <span class="hljs-comment">//var W = window.innerWidth;</span>    <span class="hljs-comment">//var H = window.innerHeight;</span>    <span class="hljs-comment">//设置canvas的宽度和高度</span>    canvas.width = W;    canvas.height = H;    <span class="hljs-comment">//每个文字的字体大小</span>    <span class="hljs-keyword">var</span> fontSize = <span class="hljs-number">12</span>;    <span class="hljs-comment">//计算列</span>    <span class="hljs-keyword">var</span> colunms = <span class="hljs-built_in">Math</span>.floor(W /fontSize);    <span class="hljs-comment">//记录每列文字的y轴坐标</span>    <span class="hljs-keyword">var</span> drops = [];    <span class="hljs-comment">//给每一个文字初始化一个起始点的位置</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;colunms;i++)&#123;        drops.push(<span class="hljs-number">0</span>);    &#125;    <span class="hljs-comment">//运动的文字</span>    <span class="hljs-keyword">var</span> str =<span class="hljs-string">&quot;WELCOME TO WWW.ITRHX.COM&quot;</span>;    <span class="hljs-comment">//4:fillText(str,x,y);原理就是去更改y的坐标位置</span>    <span class="hljs-comment">//绘画的函数</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">draw</span>(<span class="hljs-params"></span>)</span>&#123;        context.fillStyle = <span class="hljs-string">&quot;rgba(238,238,238,.08)&quot;</span>;<span class="hljs-comment">//遮盖层</span>        context.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,W,H);        <span class="hljs-comment">//给字体设置样式</span>        context.font = <span class="hljs-string">&quot;600 &quot;</span>+fontSize+<span class="hljs-string">&quot;px  Georgia&quot;</span>;        <span class="hljs-comment">//给字体添加颜色</span>        context.fillStyle = [<span class="hljs-string">&quot;#33B5E5&quot;</span>, <span class="hljs-string">&quot;#0099CC&quot;</span>, <span class="hljs-string">&quot;#AA66CC&quot;</span>, <span class="hljs-string">&quot;#9933CC&quot;</span>, <span class="hljs-string">&quot;#99CC00&quot;</span>, <span class="hljs-string">&quot;#669900&quot;</span>, <span class="hljs-string">&quot;#FFBB33&quot;</span>, <span class="hljs-string">&quot;#FF8800&quot;</span>, <span class="hljs-string">&quot;#FF4444&quot;</span>, <span class="hljs-string">&quot;#CC0000&quot;</span>][<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>)];<span class="hljs-comment">//randColor();可以rgb,hsl, 标准色，十六进制颜色</span>        <span class="hljs-comment">//写入画布中</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;colunms;i++)&#123;            <span class="hljs-keyword">var</span> index = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * str.length);            <span class="hljs-keyword">var</span> x = i*fontSize;            <span class="hljs-keyword">var</span> y = drops[i] *fontSize;            context.fillText(str[index],x,y);            <span class="hljs-comment">//如果要改变时间，肯定就是改变每次他的起点</span>            <span class="hljs-keyword">if</span>(y &gt;= canvas.height &amp;&amp; <span class="hljs-built_in">Math</span>.random() &gt; <span class="hljs-number">0.99</span>)&#123;                drops[i] = <span class="hljs-number">0</span>;            &#125;            drops[i]++;        &#125;    &#125;;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randColor</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//随机颜色</span>        <span class="hljs-keyword">var</span> r = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">256</span>);        <span class="hljs-keyword">var</span> g = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">256</span>);        <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">256</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rgb(&quot;</span>+r+<span class="hljs-string">&quot;,&quot;</span>+g+<span class="hljs-string">&quot;,&quot;</span>+b+<span class="hljs-string">&quot;)&quot;</span>;    &#125;    draw();    <span class="hljs-built_in">setInterval</span>(draw,<span class="hljs-number">35</span>);&#125;;</code></pre><p>在主题文件的相关css文件中（以 <font color="#FF0000">Material X 1.2.1</font> 主题为例，在<font color="#FF0000">\themes\material-x-1.2.1\source\less\_main.less</font> 文件末尾）添加以下代码：</p><pre><code class="hljs css"><span class="hljs-selector-tag">canvas</span> &#123;  <span class="hljs-attribute">position</span>: fixed;  <span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0px</span>;  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: auto;  <span class="hljs-attribute">width</span>: auto;  <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;&#125;</code></pre><p>然后在主题的 <font color="#FF0000">layout.ejs</font> 文件中引入即可：</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 数字雨 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1440&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;900&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/DigitalRain.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>最终效果：</p><p><img src="https://cdn.itbob.cn/img/article/003/035.jpg" alt="035"></p><p>代码来源：<a href="http://www.lxl8800.cn/Main/Resource">http://www.lxl8800.cn/Main/Resource</a></p><hr><h2><span id="zi-ding-yi-yi-ge-bu-shi-yong-zhu-ti-mo-ban-xuan-ran-de-du-li-ye-mian">自定义一个不使用主题模板渲染的独立页面</span></h2><p>    有时候我们需要新建一个独立的页面，这个页面<font color="#FF0000">不使用主题的渲染，具有自己独立的样式</font>，可以放一些自己的作品，相册什么的，以下就介绍这种独立页面的实现方法。</p><p><font color="#FF0000">方法一：</font></p><p>    使用 Hexo 提供的跳过渲染配置，在博客根目录的配置文件 <code>_config.yml</code> 里找到 <code>skip_render</code> 关键字，在后面添加想要跳过渲染的页面，比如我们创建 <code>\source\about\index.html</code>， 配置文件填写：<code>skip_render: about\**</code>，那么就表示 <code>\source\about</code> 里所有的文件将跳过渲染，里面的文件将会被直接复制到 public 文件夹，此时就会得到一个独立的 about 页面；官方文档：<a href="https://hexo.io/docs/configuration">https://hexo.io/docs/configuration</a></p><p><font color="#FF0000">方法二：</font></p><p>    在文章头部的 Front-matter 里添加配置 <code>layout: false</code> 来跳过渲染配置，比如我们要使 about 页面跳过渲染，创建 <code>\source\about\index.md</code>，将这个页面的相关 HTML 代码写进<code>.md</code>文件并保存，然后在 <code>index.md</code> 的头部写入：</p><pre><code class="hljs text">---layout: false---&#123; % raw % &#125;这里是 HTML 代码&#123; % endraw % &#125;</code></pre><p>PS：Front-matter 是 <code>.md</code> 文件最上方以 — 分隔的区域，用于指定个别文件的变量，官方文档：<a href="https://hexo.io/docs/front-matter">https://hexo.io/docs/front-matter</a></p><p>效果可以对比我的<a href="https://www.itrhx.com/">博客主页</a>和<a href="https://www.itrhx.com/about/">关于页面</a></p><hr><h2><span id="geng-gai-ben-di-yu-lan-duan-kou-hao">更改本地预览端口号</span></h2><p>hexo博客在执行 <code>hexo s</code> 进行本地预览的时候，默认端口号是4000，当该端口号被占用时会报错 <code>Error: listen EADDRINUSE 0.0.0.0:4000</code> ，此时可以关闭占用该端口的进程，也可以更换端口号，更换端口号可以通过以下两种方法实现：</p><p>方法一：在根目录的 <code>_config.yml</code> 配置文件内加上如下代码更改 <code>hexo s</code> 运行时的端口号：</p><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">5000</span>  <span class="hljs-attr">compress:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">header:</span> <span class="hljs-literal">true</span></code></pre><p>方法二：通过 <code>hexo server -p 5000</code> 命令来指定端口，这种方法只是本次执行有效</p><hr><h2><span id="wei-wan-dai-xu">未完待续…</span></h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Pages 和 Hexo 搭建自己的独立博客</title>
      <link href="/article/002/"/>
      <url>/article/002/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.itbob.cn/img/article/002/01.png" alt="01"></p><h2><span id="wen-zhang-mu-lu">文章目录</span></h2><hr><!-- toc --><ul><li><a href="#qian-yan">前言</a></li><li><a href="#ru-men">入门</a></li><li><a href="#an-zhuang-node-js-he-git">安装 Node.js 和 Git</a></li><li><a href="#an-zhuang-hexo">安装 Hexo</a><ul><li><a href="#chu-shi-hua">初始化</a></li><li><a href="#ben-di-cha-kan-xiao-guo">本地查看效果</a></li></ul></li><li><a href="#bu-shu-zhi-github-pages">部署至 Github Pages</a></li><li><a href="#wen-jian-tui-song-zhi-github">文件推送至 Github</a></li><li><a href="#fa-biao-wen-zhang">发表文章</a></li><li><a href="#geng-huan-zhu-ti">更换主题</a></li><li><a href="#pei-zhi-ge-xing-yu-ming">配置个性域名</a></li><li><a href="#jie-yu">结语</a></li></ul><!-- tocstop --><hr><h2><span id="qian-yan">前言</span></h2><blockquote><p>建立了两个 Hexo 博客交流群，有问题可在群里互相交流学习！点击群号可一键加群！<br>Hexo 博客交流一群（<a href="https://qm.qq.com/cgi-bin/qm/qr?k=m5RvZThuF0U70_3nJwz-GoE7Ujbi0J35&amp;jump_from=webapi">924812033</a>）、Hexo 博客交流二群（<a href="https://qm.qq.com/cgi-bin/qm/qr?k=AVUjFgrXV3YA9s4JflWIYyDvt8GFG9rz&amp;jump_from=webapi">735861501</a>）</p></blockquote><p>这是一篇有关如何使用 <font color="#DC143C">Github Pages</font> 和 <font color="#DC143C">Hexo</font> 搭建属于自己独立博客的详尽教程，本人在搭建博客时，对网站开发的有关知识几乎为零，这也是我搭建好自己的博客之后写的第一篇博客，刚开始搭建博客的时候自己也是网上各种百度，由于自己属于<font color="#DC143C">小白</font>那种，历经了千辛万苦才弄好，所以借这个机会写一篇小白真正能看懂的博客搭建教程，教你一步一步走向成功的彼岸！</p><p>推荐文章：</p><ul><li><a href="http://www.cnblogs.com/jhzhu/p/3893297.html">《我为什么写博客》</a></li><li><a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/">《为什么你应该（从现在开始就）写博客》</a></li></ul><h2><span id="ru-men">入门</span></h2><p><font color="#DC143C"><strong>Github Pages</strong></font>: Github Pages可以被认为是用户编写的、托管在github上的静态网页。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。</p><p><font color="#DC143C"><strong>Hexo</strong></font>：Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2><span id="an-zhuang-node-js-he-git">安装 Node.js 和 Git</span></h2><p><img src="https://cdn.itbob.cn/img/article/002/02.jpg" alt="02"></p><p>访问官网，按需下载相应版本，默认无脑下一步安装即可。</p><ul><li>Node.js 官网下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></li><li>Git 官网下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p>参考资料：</p><ul><li><a href="https://www.cnblogs.com/jytx/p/5602927.html">《如何在windows下安装GIT》</a></li><li><a href="http://git.oschina.net/progit/">《Pro Git（中文版）》</a></li></ul><p>安装完成后，同时按下 Win 键和 R 键打开运行窗口,输入 <font color="#DC143C">cmd</font> ，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装：</p><pre><code class="hljs bash">git --versionnode -vnpm -v</code></pre><p><img src="https://cdn.itbob.cn/img/article/002/04.jpg" alt="04"></p><p>此外若安装成功，在桌面右键鼠标，可以看到菜单里多了 <font color="#DC143C">Git GUI Here</font> 和 <font color="#DC143C">Git Bash Here</font>两个选项，第一个是<font color="#DC143C">图形界面的Git操作</font>，另一个是<font color="#DC143C">命令行</font>。</p><p><img src="https://cdn.itbob.cn/img/article/002/05.jpg" alt="05"></p><h2><span id="an-zhuang-hexo">安装 Hexo</span></h2><p>选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：<font color="#DC143C">Ｅ\TRHX_Blog</font>），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 <font color="#DC143C">Git Bash Here</font>，输入以下 npm 命令即可安装，第一个命令表示安装 hexo，第二个命令表示安装 hexo 部署到 git page 的 deployer，如图所示即为安装成功</p><pre><code class="hljs bash">$ npm install hexo-cli -g$ npm install hexo-deployer-git --save</code></pre><p><img src="https://cdn.itbob.cn/img/article/002/06.png" alt="06"></p><h3><span id="chu-shi-hua">初始化</span></h3><p>在刚才新建的文件夹里面再次新建一个 <font color="#DC143C">Hexo</font> 文件夹（如：我的文件夹为：<font color="#DC143C">E\TRHX_Blog\Hexo</font>）,进入该 <font color="#DC143C">Hexo</font> 文件夹右键鼠标，点击 <font color="#DC143C">Git Bash Here</font>，输入以下命令，如图所示则安装成功</p><pre><code class="hljs bash">$ hexo init</code></pre><p><img src="https://cdn.itbob.cn/img/article/002/07.png" alt="07"></p><p>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下：</p><p><img src="https://cdn.itbob.cn/img/article/002/08.jpg" alt="08"></p><h3><span id="ben-di-cha-kan-xiao-guo">本地查看效果</span></h3><p>执行以下命令，执行完即可登录 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看效果</p><pre><code class="hljs bash">$ hexo generate$ hexo server</code></pre><p>显示以下信息说明操作成功：</p><pre><code class="hljs bash">INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></pre><p>访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看效果：</p><p><img src="https://cdn.itbob.cn/img/article/002/09.jpg" alt="09"></p><h2><span id="bu-shu-zhi-github-pages">部署至 Github Pages</span></h2><p>到目前为止，我们的本地博客就成功搭建了，但是现在我们只能通过本地连接查看博客，我们要做的是让其他人也能够访问我们的博客，这就需要我们将博客部署到Github Pages上</p><p>一、注册 Github 账户：<a href="https://github.com">点击此处</a>访问 Github 官网，点击 Sign Up 注册账户</p><p>二、创建项目代码库：点击 <font color="#DC143C">New repository</font> 开始创建，步骤及注意事项见图：</p><p><img src="https://cdn.itbob.cn/img/article/002/10.jpg" alt="10"></p><p>三、配置 <font color="#DC143C">SSH</font> 密钥：只有配置好 <font color="#DC143C">SSH</font> 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：<font color="#DC143C">Ｅ\TRHX_Blog</font>） <font color="#DC143C">Git Bash Here</font> 输入以下命令：</p><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;your email@example.com&quot;</span>//引号里面填写你的邮箱地址，比如我的是tanrenhou@126.com</code></pre><p>之后会出现：</p><pre><code class="hljs bash">Generating public/private rsa key pair.Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/c/Users/you/.ssh/id_rsa)://到这里可以直接回车将密钥按默认文件进行存储</code></pre><p>然后会出现：</p><pre><code class="hljs bash">Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase)://这里是要你输入密码，其实不需要输什么密码，直接回车就行Enter same passphrase again:</code></pre><p>接下来屏幕会显示：</p><pre><code class="hljs bash">Your identification has been saved <span class="hljs-keyword">in</span> /c/Users/you/.ssh/id_rsa.Your public key has been saved <span class="hljs-keyword">in</span> /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:这里是各种字母数字组成的字符串，结尾是你的邮箱The key<span class="hljs-string">&#x27;s randomart image is:</span><span class="hljs-string">这里也是各种字母数字符号组成的字符串</span></code></pre><p>运行以下命令，将公钥的内容复制到系统粘贴板上</p><pre><code class="hljs bash">$ clip &lt; ~/.ssh/id_rsa.pub</code></pre><p>四、在 GitHub 账户中添加你的公钥</p><p>1.登陆 GitHub，进入 <font color="#DC143C">Settings</font>：</p><p><img src="https://cdn.itbob.cn/img/article/002/11.jpg" alt="11"></p><p>2.点击 <font color="#DC143C">SSH and GPG Keys</font>：</p><p><img src="https://cdn.itbob.cn/img/article/002/12.jpg" alt="12"></p><p>3.选择 <font color="#DC143C">New SSH key</font>：</p><p><img src="https://cdn.itbob.cn/img/article/002/13.jpg" alt="13"></p><p>4.粘贴密钥：</p><p><img src="https://cdn.itbob.cn/img/article/002/14.jpg" alt="14"></p><p>五、测试</p><p>输入以下命令：<font color="#DC143C">注意：git@github.com不要做任何更改！</font></p><pre><code class="hljs bash">$ ssh -T git@github.com</code></pre><p>之后会显示：</p><p><img src="https://cdn.itbob.cn/img/article/002/15.png" alt="15"></p><p>输入 <font color="#DC143C">yes</font> 后会显示：</p><p><img src="https://cdn.itbob.cn/img/article/002/16.png" alt="16"></p><p>此时表示设置正确</p><p>六、配置 Git 个人信息</p><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub  一致</p><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;此处填你的用户名&quot;</span>$ git config --global user.email <span class="hljs-string">&quot;此处填你的邮箱&quot;</span></code></pre><p>到此为止 SSH Key 配置成功，本机已成功连接到 Github</p><h2><span id="wen-jian-tui-song-zhi-github">文件推送至 Github</span></h2><p>一、登录 Github 打开自己的项目 <font color="#DC143C">yourname.github.io</font></p><p><img src="https://cdn.itbob.cn/img/article/002/17.jpg" alt="17"></p><p>二、鼠标移到 <font color="#DC143C">Clone or download</font> 按钮，选择 <font color="#DC143C">Use SSH</font></p><p><img src="https://cdn.itbob.cn/img/article/002/18.jpg" alt="18"></p><p>三、一键复制地址</p><p><img src="https://cdn.itbob.cn/img/article/002/19.jpg" alt="19"></p><p>四、打开你创建的 <font color="#DC143C">Hexo</font> 文件夹（如：<font color="#DC143C">E:\TRHX_Blog\Hexo</font>），右键用记事本（或者Notepad++、Vs Code等）打开该文件夹下的 <font color="#DC143C">_config.yml</font> 文件</p><p><img src="https://cdn.itbob.cn/img/article/002/20.jpg" alt="20"></p><p>五、按下图修改 <font color="#DC143C">_config.yml</font> 文件并保存<br><font color="#DC143C">注意：github 默认分支变成了 main，所以下图中 branch 要改为 main！！！</font><br><font color="#DC143C">注意：github 默认分支变成了 main，所以下图中 branch 要改为 main！！！</font><br><font color="#DC143C">注意：github 默认分支变成了 main，所以下图中 branch 要改为 main！！！</font></p><p><img src="https://cdn.itbob.cn/img/article/002/21.png" alt="21"></p><p>六、在 <font color="#DC143C">Hexo</font> 文件夹下分别执行以下命令</p><pre><code class="hljs bash">$ hexo g$ hexo d</code></pre><p>或者直接执行</p><pre><code class="hljs bash">$ hexo g -d</code></pre><p>执行完之后会让你输入你的 Github 的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功</p><pre><code class="hljs bash">ERROR Deployer not found: git</code></pre><p>需要执行以下命令再安装一次：</p><pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre><p>再执行 <font color="#DC143C"><code>hexo g -d</code></font>，你的博客就会部署到 Github 上了</p><p>七、访问博客</p><p>你的博客地址：<font color="#DC143C"><a href="https://xn--6qqv7i14ofosyrb.github.io">https://你的用户名.github.io</a></font>，比如我的是：<font color="#DC143C"><a href="https://trhx.github.io">https://trhx.github.io</a></font> ，现在每个人都可以通过此链接访问你的博客了</p><h2><span id="fa-biao-wen-zhang">发表文章</span></h2><p>博客已经成功搭建了，但是我们该怎么写博客呢？</p><p>一、新建一个空文章，输入以下命令，会在项目 <font color="#DC143C">\Hexo\source\_posts</font> 中生成 <font color="#DC143C">文章标题.md</font> 文件，文章标题根据需要命名</p><pre><code class="hljs bash">$ hexo n <span class="hljs-string">&quot;文章标题&quot;</span></code></pre><p>也可以直接在 <font color="#DC143C">\Hexo\source\_posts</font> 目录下右键鼠标新建文本文档，改后缀为 <font color="#DC143C">.md</font> 即可，这种方法比较方便</p><p>二、用编辑器编写文章</p><p><font color="#DC143C">md</font> 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， <font color="#DC143C">.md</font> 文件可以使用支持 Markdown 语法的编辑器编辑，然后将写好的文章（.md文件）保存到 <font color="#DC143C">\Hexo\source\_posts</font> 文件夹下即可</p><p>推荐 Windows 上使用 <font color="#DC143C">MarkdownPad2</font> 或者 <font color="#DC143C">小书匠</font> 编辑器，macOS 上使用 <font color="#DC143C">Mou</font> 编辑器，Linux 上使用 <font color="#DC143C">Remarkable</font> 编辑器，Web 端上使用<font color="#DC143C"> 简书</font> ，另外可以参考我的另一篇文章：<a href="https://www.itrhx.com/2018/08/29/A05-Markdown-editor-recommendation/">《主流 Markdown 编辑器推荐》</a><br>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上</p><pre><code class="hljs bash">$ hexo g$ hexo d</code></pre><p>或者将两个命令合二为一输入以下命令：</p><pre><code class="hljs bash">$ hexo d -g</code></pre><p>现在访问你的博客就可以看见写好的文章啦！<br>参考资料：<a href="https://blog.csdn.net/jinhui157/article/details/73872795">《10款流行的Markdown编辑器》</a> （By xiaoxiao_engineer）<br>　　　　　<a href="https://www.jianshu.com/p/q81RER/">《献给写作者的 Markdown 新手指南》</a> （By 简书）<br>　　　　　<a href="https://sspai.com/post/25137">《认识与入门 Markdown》</a> （By Te_Lee）<br>　　　　　<a href="http://ibruce.info/2013/11/26/markdown/">《markdown简明语法》</a> （By 不如）<br>　　　　　<a href="https://www.jianshu.com/p/191d1e21f7ed">《markdown基本语法》</a> （By 高鸿祥）<br>　　　　　<a href="http://www.liuhaihua.cn/archives/143443.html">《Markdown 公式指导手册》</a> （By Harries）</p><h2><span id="geng-huan-zhu-ti">更换主题</span></h2><p>博客也搭建好了，文章也会写了，但是！！！默认的主题并不喜欢怎么办？现在，我们就来为自己的博客更换自己喜欢的主题</p><p><a href="https://hexo.io/themes/">点击此处</a>进入 Hexo 官网的主题专栏，我们可以看见有许多的主题供我们选择</p><p><img src="https://cdn.itbob.cn/img/article/002/22.jpg" alt="22"></p><p>我们要做的就是把主题克隆过来，在此我们以主题 <font color="#DC143C">Aero-Dual</font> 为例，点进去我们就可以看见该主题作者的博客，鼠标滑到底，我们可以看见 <font color="#DC143C">Theme By Levblanc</font> 的字样（其他主题类似），点击作者 <font color="#DC143C">Levblanc</font> ，页面就会跳转到该主题所有的相关文件在 Github 上的地址，复制该地址</p><p><img src="https://cdn.itbob.cn/img/article/002/23.png" alt="23"><br><img src="https://cdn.itbob.cn/img/article/002/24.jpg" alt="24"><br><img src="https://cdn.itbob.cn/img/article/002/25.jpg" alt="25"></p><p>再打开 <font color="#DC143C">Hexo</font> 文件夹下的 <font color="#DC143C">themes</font> 目录（如：<font color="#DC143C">E:\TRHX_Blog\Hexo\themes</font>），右键 <font color="#DC143C">Git Bash Here</font>，输入以下命令：</p><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> 此处填写你刚才复制的主题地址</code></pre><p>比如要安装 <font color="#DC143C">Aero-Dual</font> 主题，则输入命令：</p><pre><code class="hljs awk">$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/levblanc/</span>hexo-theme-aero-dual</code></pre><p>等待下载完成后即可在 <font color="#DC143C">themes</font> 目录下生成 <font color="#DC143C">hexo-theme-aero-dual</font> 文件夹，然后打开 <font color="#DC143C">Hexo</font> 文件夹下的配置文件 <font color="#DC143C">_config.yml</font> ，找到关键字 <font color="#DC143C">theme</font>，修改参数为：<font color="#DC143C">theme：hexo-theme-aero-dual</font> （其他主题修改成相应名称即可），再次注意冒号后面有一个空格！</p><p><img src="https://cdn.itbob.cn/img/article/002/26.jpg" alt="26"></p><p>返回 <font color="#DC143C">Hexo</font> 目录，右键 <font color="#DC143C">Git Bash Here</font> ，输入以下命令开始部署主题：</p><pre><code class="hljs bash">$ hexo g   $ hexo s</code></pre><p>此时打开浏览器，访问 <a href="http://localhost:4000/">http://localhost:4000/</a>  就可看见我们的主题已经更换了，如果感觉效果满意，我们就可以把它部署到Github上了</p><p>打开 <font color="#DC143C">Hexo</font> 文件夹，右键 <font color="#DC143C">Git Bash Here</font> ，输入以下命令：</p><pre><code class="hljs bash">$ hexo clean  //该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题$ hexo g -d</code></pre><p>此时访问自己的博客即可看见更换后的主题，但我们仍然需要对主题的相关配置进行修改，比如网站标题，图标等等，Hexo 中有两份主要的配置文件，名称都是  <font color="#DC143C">_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color="#DC143C">E:\TRHX_Blog\Hexo\_config.yml</font>），主要包含 Hexo 本身整站的配置；另一份位于主题目录下（比如我的：<font color="#DC143C">E:\TRHX_Blog\Hexo\themes\hexo-theme-aero-dual\_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般  <font color="#DC143C">_config.yml</font>  文件里都有相关注释，按需修改即可</p><p>参考资料：<a href="https://www.zhihu.com/question/24422335">《有哪些好看的 Hexo 主题？》</a> （知乎）<br>　　　　　<a href="https://hexo.io/zh-cn/docs/configuration.html">《Hexo | 配置》</a> （Hexo官方文档）<br>　　　　　<a href="https://segmentfault.com/a/1190000002632530">《hexo常用命令笔记》</a> （By 小弟调调）</p><h2><span id="pei-zhi-ge-xing-yu-ming">配置个性域名</span></h2><p>本人在配置域名的时候问题百出，百度的各种方法都不管用，打开网站总是 404，可能是我太笨了 　o(╥﹏╥)o　，不过好在后来终于解决了这个问题</p><p>首先我们要购买域名，<a href="https://www.aliyun.com">阿里云</a>，<a href="https://cloud.tencent.com">腾讯云</a>都可以，也不贵，一年几十块钱，最便宜几块钱也能买到，以阿里云为例，我购买的域名是 <a href="https://www.itrhx.com">itrhx.com</a>，购买过程就不赘述了，选择阿里云的解析平台，来到阿里云的管理控制台，点击进入域名解析列表或者直接点击域名后面的解析</p><p><img src="https://cdn.itbob.cn/img/article/002/27.jpg" alt="27"></p><p>方法一：点击添加记录，需要添加两个记录，两个记录类型都是 <font color="#DC143C">CNAME</font> ，第一个主机记录为 <font color="#DC143C">@</font> ，第二个主机记录为 <font color="#DC143C">www</font>，记录值都是填你自己的博客地址（比如我的是：<font color="#DC143C"><a href="http://trhx.github.io">trhx.github.io</a></font>），保存之后域名解析就完成了！</p><p><img src="https://cdn.itbob.cn/img/article/002/28.jpg" alt="28"></p><p>方法二：两个记录类型为 <font color="#DC143C">A</font> ，第一个主机记录为 <font color="#DC143C">@</font> ，第二个主机记录为 <font color="#DC143C">www</font>，记录值都为博客的 <font color="#DC143C">IP</font> 地址，<font color="#DC143C">IP</font> 地址可以 <font color="#DC143C">cmd</font> 中输入 <font color="#DC143C">ping 你的博客地址</font> 获得（比如我的：<font color="#DC143C">ping <a href="http://trhx.github.io">trhx.github.io</a></font>），保存之后域名解析就完成了！</p><p><img src="https://cdn.itbob.cn/img/article/002/29.jpg" alt="29"></p><p>有关解析记录类型的区别可以参考<a href="https://blog.csdn.net/it_man/article/details/9017307">《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》</a></p><p>为了使 GitHub 接收我们的域名，还需要在博客的根目录下添加一个名为 <font color="#DC143C">CNAME</font> 的文件（<font color="#DC143C">注意不要加.txt，没有任何后缀名！</font>），这个文件放到 <font color="#DC143C">Hexo</font> 文件夹的 <font color="#DC143C">source</font> 里面，（比如我的是：<font color="#DC143C">E:\TRHX_Blog\Hexo\source</font>），文件里面填写你的域名（<font color="#DC143C">加不加www都行</font>），比如要填写我的域名，文件里面就写：<font color="#DC143C"><a href="http://www.itrhx.com">www.itrhx.com</a></font> 或者 <font color="#DC143C"><a href="http://itrhx.com">itrhx.com</a></font>，经过以上操作，别人就可以通过 <a href="http://www.itrhx.com">www.itrhx.com</a> 、<a href="https://itrhx.com">itrhx.com</a> 、<a href="https://trhx.github.io">trhx.github.io</a> 三个当中任意一个访问我的博客了！你的也一样！</p><p>有关加不加www的问题有以下区别：</p><blockquote><p>如果你填写的是没有www的，比如 <a href="http://itrhx.com">itrhx.com</a>，那么无论是访问 <a href="https://www.itrhx.com">https://www.itrhx.com</a> 还是 <a href="https://itrhx.com">https://itrhx.com</a> ，都会自动跳转到 <a href="https://itrhx.com">https://itrhx.com</a></p></blockquote><blockquote><p>如果你填写的是带www的，比如 <a href="http://www.itrhx.com">www.itrhx.com</a> ，那么无论是访问 <a href="https://www.itrhx.com">https://www.itrhx.com</a> 还是 <a href="https://itrhx.com">https://itrhx.com</a> ，都会自动跳转到 <a href="http://www.itrhx.com">http://www.itrhx.com</a></p></blockquote><p><img src="https://cdn.itbob.cn/img/article/002/30.jpg" alt="30"></p><p>如果你在其他平台购买域名，或者选择 <a href="https://www.dnspod.cn">DNSPod</a> 等其他域名解析，操作方法大同小异，遇到问题可自行百度解决！</p><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/27349039">《推荐几家域名注册服务商》</a>  （By Jelly Bool）<br>　　　　　<a href="http://www.chinaz.com/web/2015/0122/380042.shtml">《盘点十大免费DNS域名解析服务：稳定、可靠》</a></p><h2><span id="jie-yu">结语</span></h2><p>一顿操作下来虽然有点儿累，但看见拥有了自己的博客还是非常有成就感的，人生就是需要折腾，那么现在就开始你的创作之旅吧！文章的不断积累，你会从中受益很多的！另外，这是一篇小白写的适用于小白的博客搭建教程，比较详细，有这方面基础的可以百度有简略一点儿的教程，文中如有错误还请大佬指出改正！文中涉及参考资料如有侵权请联系我删除！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/article/001/"/>
      <url>/article/001/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018年08月10日，开启了创作历程！</p></blockquote><p><img src="https://cdn.itbob.cn/img/bob.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
